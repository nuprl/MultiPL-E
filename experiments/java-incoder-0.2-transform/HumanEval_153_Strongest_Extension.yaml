name: HumanEval_153_Strongest_Extension
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You will be given the name of a class (a string) and a list\
  \ of extensions.\n    // The extensions are to be used to load additional classes\
  \ to the class. The\n    // strength of the extension is as follows: Let CAP be\
  \ the number of the uppercase\n    // letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    // in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    // You should find the strongest extension\
  \ and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the list.\n    // For example, if you\
  \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
  \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
  \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n  \
  \  // Example:\n    // >>> StrongestExtension((\"my_class\"), (new ArrayList<String>(Arrays.asList((String)\"\
  AA\", (String)\"Be\", (String)\"CC\"))))\n    // (\"my_class.AA\")\n    public static\
  \ String StrongestExtension(String class_name, ArrayList<String> extensions) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
  Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
  , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
  Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"NazeDa\"\
  , (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
  t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
  , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
  t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
  __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
  , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
  okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
  YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
  \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
  Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
  _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
  _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
  671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        double max_strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            double strength_extension\
    \ = cap - sm;\n            if (strength_extension > max_strength) {\n        \
    \        max_strength = strength_extension;\n                strength = strength_extension;\n\
    \            }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1) + \".\" + strength;", "        ArrayList<String> extensions_sorted = new\
    \ ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = 0;\n        String strongest_extension = null;\n     \
    \   for (String extension : extensions_sorted) {\n            int extension_length\
    \ = extension.length();\n            int extension_cap = extension_length / 2;\n\
    \            int extension_sm = (extension_cap - extension_length) % 2;\n    \
    \        int extension_strength = extension_cap - extension_sm;\n            if\
    \ (extension_strength > strength) {\n                strength = extension_strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = -1;\n        String strongest_extension = null;\n    \
    \    for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.matches(\"[A-Z]*\").length() - extension.matches(\"[a-z]*\").length();\n\
    \            if (extension_strength > strength) {\n                strength =\
    \ extension_strength;\n                strongest_extension = extension;\n    \
    \        }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        Set<String> extensions_set = new HashSet<String>(extensions);\n       \
    \ extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n    \
    \    extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n \
    \       extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        ", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0,1).length();\n            int\
    \ sm = extension.substring(1,2).length();\n            strength = (double)cap\
    \ - (double)sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.size();\n        double cap = class_name.charAt(0).toUpperCase().length();\n\
    \        double sm = class_name.charAt(0).toLowerCase().length();\n        double\
    \ strength_frac = strength - cap - sm;\n        String extension = \"\";\n   \
    \     if (strength_frac > 0) {\n            extension = class_name + \".\" + extensions_sorted.get(0);\n\
    \        } else if (strength_frac < 0) {\n            extension = class_name +\
    \ \".\" + extensions_sorted.get(extensions_sorted.size() - 1);\n        }\n  \
    \      return extension;", "        ArrayList<String> extensions_sorted = new\
    \ ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n   \
    \     double strength = extensions_sorted.stream().mapToDouble(s -> s.matches(\"\
    [A-Z]\") ? s.length() - 1 : s.matches(\"[a-z]\") ? s.length() : 0).max().getAsDouble();\n\
    \        double strength_sorted = extensions_sorted.stream().mapToDouble(s ->\
    \ s.matches(\"[A-Z]\") ? s.length() - 1 : s.matches(\"[a-z]\") ? s.length() :\
    \ 0).sorted().max().getAsDouble();\n        if (strength_sorted == strength) return\
    \ class_name;\n        double strength_diff = strength_sorted - strength;\n  \
    \      double strength_diff_sorted = strength_sorted - strength_sorted;\n    \
    \    if (strength_diff_sorted == strength_diff) return class_name;\n        double\
    \ strength_diff_diff = strength_diff_sorted - strength_diff;\n        double strength_diff_diff_sorted\
    \ = strength_diff_sorted - strength_diff_sorted;\n        if (strength_diff_diff_sorted\
    \ == strength_diff_diff) return class_name;\n        double strength_diff_diff_diff\
    \ = strength_diff_diff_sorted - strength_diff_diff;\n        double strength_diff_diff_diff_sorted\
    \ = strength_diff_diff_sorted - strength_diff_diff_sorted;\n        if (strength_diff_diff_diff_sorted\
    \ == strength_diff_diff_diff) return class_name;\n        double strength_diff_diff_diff_diff\
    \ = strength_diff_diff_diff_sorted - strength_diff_diff_diff;\n        double\
    \ strength_diff_diff_diff_diff_sorted = strength_diff_diff_diff_sorted - strength_diff_diff_diff_sorted;\n\
    \        if (strength_diff_diff_diff_sorted == strength_diff_diff_diff_diff) return\
    \ class_name;\n        double strength_diff_diff_diff_diff_diff = strength_diff_diff_diff_diff_sorted\
    \ - strength_diff_diff_diff_diff;\n        double strength_diff_diff_diff_diff_sorted\
    \ = strength_diff_diff_diff_sorted - strength_diff_diff_diff_sorted;\n       \
    \ if (strength_diff_diff_diff_diff_sorted == strength_diff_diff_diff_diff_diff)\
    \ return class_name;\n        double strength_diff_diff_diff_diff_diff = strength_diff_diff_diff_diff_sorted\
    \ - strength_diff_diff_diff_diff_diff;\n        double strength_diff_diff_diff_diff_sorted\
    \ = strength_diff_diff_diff_diff_sorted - strength_diff_diff_diff_diff_sorted;\n\
    \        if (strength_diff_diff_diff_diff_sorted == strength_diff_diff_diff_diff_diff)\
    \ return class_name;\n        double strength_diff_diff_diff_diff_diff = strength_diff_diff_diff_diff_sorted\
    \ - strength_diff_diff_diff_diff_diff;\n        double strength_diff_diff_diff_diff_sorted\
    \ = strength_diff_diff_", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            String extension_class = class_name + \".\" + extension;\n  \
    \          try {\n                Class<?> extension_class = Class.forName(extension_class);\n\
    \                Method method = extension_class.getMethod(\"strength\");\n  \
    \              double extension_strength = (double) method.invoke(extension_class);\n\
    \                if (strength < extension_strength) {\n                    strength\
    \ = extension_strength;\n                    strongest_extension = extension;\n\
    \                }\n            } catch (ClassNotFoundException | NoSuchMethodException\
    \ | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   return class_name + \".\" + strongest_extension;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double fraction = cap - sm;\n            if (strength == -1 || fraction\
    \ > strength) {\n                strength = fraction;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        double strength = -1;\n        double maxStrength\
    \ = -1;\n        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(0, 1).length();\n   \
    \         double fraction = cap - sm;\n            strength += fraction;\n   \
    \         if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        double maxStrengthInt = maxStrength;\n    \
    \    double maxStrengthDouble = maxStrengthInt;\n        double maxStrengthFloat\
    \ = maxStrengthInt;\n        double maxStrengthLong = maxStrengthInt;\n      \
    \  double maxStrengthBigDecimal = maxStrengthInt;\n        double maxStrengthBigInteger\
    \ = maxStrengthInt;\n        double maxStrengthBigDecimalOrFloat = maxStrengthInt;\n\
    \        double maxStrengthBigDecimalOrFloatOrLong = maxStrengthInt;\n       \
    \ double maxStrengthBigDecimalOrFloatOrLongOrBigInteger = maxStrengthInt;\n  \
    \      double maxStrengthBigDecimalOrFloatOrLongOrBigIntegerOrStringArray = maxStrengthInt;\n\
    \        double maxStrengthBigDecimalOrFloatOrLongOrBigIntegerOrStringArrayOrArrayList\
    \ = maxStrengthInt;\n        double maxStrengthBigDecimalOrFloatOrLongOrBigIntegerOrStringArrayOrArrayListOrMapOrSet\
    \ = maxStrengthInt;\n        double maxStrengthBigDecimalOrFloatOrLongOrBigIntegerOrStringArrayOrArrayListOrMapOrSetOrMap\
    \ = maxStrengthInt;\n        double maxStrengthBigDecimalOrFloatOrLongOrBigIntegerOrStringArrayOrArrayListOrMapOrSetOrMapOrArrayList\
    \ = maxStrengthInt;\n        double maxStrengthBigDecimalOrFloatOrLongOrBigIntegerOrStringArrayOrArrayListOrMapOrSetOrMapOrArrayListOrMap\
    \ = maxStrengthInt;\n        double maxStrengthBigDecimalOrFloatOrLongOrBigIntegerOrStringArrayOrArrayListOrMapOrSetOrMapOrArrayListOrMapOrSet\
    \ = maxStrengthInt;\n        double maxStrengthBigDecimalOrFloatOrLongOrBigIntegerOrStringArrayOrArrayListOrMapOrSetOrMapOrArrayListOrMapOrSetOrMap\
    \ = maxStrengthInt;\n        double maxStrengthBigDecimalOrFloatOrLongOrBigIntegerOrStringArrayOrArrayListOrMapOrSetOrMapOrArrayListOrMapOrSet",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int max_strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.matches(\"[A-Z]\").length()\
    \ - extension.matches(\"[a-z]\").length();\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        String strongest_extension = null;\n   \
    \     for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.length() - 1).replaceAll(\"[^A-Z]\", \"\").length();\n\
    \            if (extension_strength > strongest) {\n                strongest\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        double strength = 0;\n        double maxStrength = 0;\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength +=\
    \ (cap - sm);\n        }\n        if(strength > maxStrength) {\n            maxStrength\
    \ = strength;\n        }\n        for(String extension : extensions) {\n     \
    \       int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            if(cap - sm == maxStrength) {\n                return class_name\
    \ + \".\" + extension;\n            }\n        }\n        return class_name;",
  "        double strength = 0;\n        double maxStrength = 0;\n        double maxExtension\
    \ = 0;\n        double maxExtensionIndex = 0;\n        for(String extension :\
    \ extensions) {\n            int extension_length = extension.length();\n    \
    \        int class_length = class_name.length();\n            int extension_letters\
    \ = extension_length / class_length;\n            int class_letters = class_length\
    \ / extension_length;\n            double extension_strength = extension_letters\
    \ - class_letters;\n            if(extension_strength > maxStrength) {\n     \
    \           maxStrength = extension_strength;\n                maxExtension =\
    \ extension;\n                maxExtensionIndex = extensions.indexOf(extension);\n\
    \            }\n        }\n        return class_name + \".\" + maxExtension;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = 0;\n   \
    \     for (String extension : extensions_sorted) {\n            int extension_length\
    \ = extension.length();\n            int extension_cap = extension_length - 1;\n\
    \            int extension_sm = 0;\n            for (int i = 0; i < extension_cap;\
    \ i++) {\n                if (extension.charAt(i) >= 'A' && extension.charAt(i)\
    \ <= 'Z') {\n                    extension_sm += 1;\n                }\n     \
    \       }\n            strength += (extension_cap - extension_sm);\n        }\n\
    \        double strength_double = strength / extensions_sorted.size();\n     \
    \   int strength_int = strength_double.intValue();\n        String extension_strongest\
    \ = class_name + \".\" + extensions_sorted.get(strength_int);\n        return\
    \ extension_strongest;", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).toUpperCase().length();\n\
    \            int sm = extension.substring(0, 1).toLowerCase().length();\n    \
    \        double frac = cap - sm;\n            if (frac > strength) {\n       \
    \         strength = frac;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        double strength = 0;\n        for(String extension : extensions) {\n  \
    \          int cap = extension.substring(0, 1).length();\n            int sm =\
    \ extension.substring(1).length();\n            strength += (cap - sm);\n    \
    \    }\n        double strength_sorted = Double.MIN_VALUE;\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength_sorted\
    \ += (cap - sm);\n        }\n        double strength_sorted_sorted = Double.MIN_VALUE;\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength_sorted_sorted += (cap - sm);\n        }\n        double strength_sorted_sorted_sorted\
    \ = Double.MIN_VALUE;\n        for(String extension : extensions) {\n        \
    \    int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            strength_sorted_sorted_sorted += (cap - sm);\n        }\n       \
    \ double strength_sorted_sorted_sorted_sorted = Double.MIN_VALUE;\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength_sorted_sorted_sorted_sorted\
    \ += (cap - sm);\n        }\n        double strength_sorted_sorted_sorted_sorted_sorted\
    \ = Double.MIN_VALUE;\n        for(String extension : extensions) {\n        \
    \    int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            strength_sorted_sorted_sorted_sorted_sorted += (cap - sm);\n    \
    \    }\n        double strength_sorted_sorted_sorted_sorted_sorted_sorted = Double.MIN_VALUE;\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength_sorted_sorted_sorted_sorted_sorted_sorted += (cap - sm);\n   \
    \     }\n        double strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Double.MIN_VALUE;\n        for(String extension : extensions) {\n        \
    \    int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted += (cap\
    \ - sm);\n        }\n        double strength_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Double.MIN_VALUE;\n        for(String extension : extensions) {\n        \
    \    int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest = -1;\n \
    \       String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.indexOf('C')\
    \ - 1, extension.indexOf('C')).charAt(0) - extension.substring(extension.indexOf('S')\
    \ - 1, extension.indexOf('S')).charAt(0);\n            if (strongest == -1 ||\
    \ extension_strength > strongest) {\n                strongest = extension_strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        double strength\
    \ = -1;\n        double maxStrength = -1;\n        double maxExtensionStrength\
    \ = -1;\n        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double extensionStrength = (double)cap - (double)sm;\n            if(extensionStrength\
    \ > maxExtensionStrength) {\n                maxExtensionStrength = extensionStrength;\n\
    \            }\n            if(extensionStrength > strength) {\n             \
    \   strength = extensionStrength;\n            }\n        }\n        if(strength\
    \ > maxStrength) {\n            maxStrength = strength;\n        }\n        return\
    \ class_name + \".\" + extensions.get(extensions.indexOf(extensions.get(extensions.indexOf(extension)))\
    \ + 1);", "        Set<String> extensions_set = new HashSet<>(extensions);\n \
    \       extensions_set.stream().filter(e -> e.matches(\"[A-Z]+\")).forEach(e ->\
    \ {\n            int cap = e.length();\n            extensions_set.stream().filter(e\
    \ -> e.matches(\"[a-z]+\")).forEach(e -> {\n                int sm = e.length();\n\
    \                double strength = cap - sm;\n                if (strength > 0)\
    \ {\n                    extensions_set.stream().filter(e -> e.matches(\"[A-Z]+\"\
    )).forEach(e -> {\n                        int cap = e.length();\n           \
    \             extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                            int sm = e.length();\n                   \
    \         double strength = cap - sm;\n                            if (strength\
    \ > 0) {\n                                return e;\n                        \
    \    }\n                        });\n                    });\n               \
    \ }\n            });\n        });\n        extensions_set.stream().filter(e ->\
    \ e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n \
    \           extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    return\
    \ e;\n                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    return\
    \ e;\n                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    return\
    \ e;\n                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    return\
    \ e;\n                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).", "        Map<String, Integer> extension_strength\
    \ = new HashMap<>();\n        for (String extension : extensions) {\n        \
    \    int extension_strength_int = 0;\n            int extension_strength_char\
    \ = 0;\n            int extension_strength_word = 0;\n            int extension_strength_sentence\
    \ = 0;\n            int extension_strength_paragraph = 0;\n            int extension_strength_wordpiece\
    \ = 0;\n            int extension_strength_sentencepiece = 0;\n            int\
    \ extension_strength_paragraphpiece = 0;\n            int extension_strength_wordpiecepiece\
    \ = 0;\n            int extension_strength_sentencepiecepiece = 0;\n         \
    \   int extension_strength_paragraphpiecepiece = 0;\n            int extension_strength_wordpiecepiecepiece\
    \ = 0;\n            int extension_strength_sentencepiecepiecepiece = 0;\n    \
    \        int extension_strength_paragraphpiecepiecepiece = 0;\n            int\
    \ extension_strength_wordpiecepiecepiece = 0;\n            int extension_strength_sentencepiecepiecepiece\
    \ = 0;\n            int extension_strength_paragraphpiecepiecepiece = 0;\n   \
    \         int extension_strength_wordpiecepiecepiece = 0;\n            int extension_strength_sentencepiecepiecepiece\
    \ = 0;\n            int extension_strength_paragraphpiecepiecepiece = 0;\n   \
    \         int extension_strength_wordpiecepiecepiece = 0;\n            int extension_strength_sentencepiecepiecepiece\
    \ = 0;\n            int extension_strength_paragraphpiecepiecepiece = 0;\n   \
    \         int extension_strength_wordpiecepiecepiece = 0;\n            int extension_strength_sentencepiecepiecepiece\
    \ = 0;\n            int extension_strength_paragraphpiecepiecepiece = 0;\n   \
    \         int extension_strength_wordpiecepiecepiece = 0;\n            int extension_strength_sentencepiecepiecepiece\
    \ = 0;\n            int extension_strength_paragraphpiecepiecepiece = 0;\n   \
    \         int extension_strength_wordpiecepiecepiece = 0;\n            int extension_strength_sentencepiecepiecepiece\
    \ = 0;\n            int extension_strength_paragraphpiecepiecepiece = 0;\n   \
    \         int extension_strength_wordpiecepiecepiece = 0;\n            int extension_strength_sentencepiecepiecepiece\
    \ = 0;\n            int extension_strength_paragraphpiecepiecepiece = 0;\n   \
    \         int extension_strength_wordpiecepiecepiece = 0;\n            int extension_strength_sentencepiecepiecepiece\
    \ = 0;\n            int extension_strength_paragraphpiecepiecepiece = 0;\n   \
    \         int extension_strength_wordpiecepiecepiece = 0;\n            int extension_strength_sentencepiecepiecepiece\
    \ = 0;\n            int extension_strength_paragraphpiecepiecepiece = 0;\n   \
    \         int extension_strength_wordpiecepiecepiece = 0;\n            int extension_strength_sentencepiecepiecepiece\
    \ = 0;\n", "        Set<String> extensions_set = new HashSet<String>(extensions);\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extension", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.get(extensions_sorted.size()-1).length()\
    \ - extensions_sorted.get(extensions_sorted.size()-2).length();\n        String\
    \ strongest_extension = class_name + \".\" + extensions_sorted.get(extensions_sorted.size()-1);\n\
    \        return strongest_extension;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double fraction = cap - sm;\n            if (strength == -1 || fraction\
    \ > strength) {\n                strength = fraction;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        HashMap<String, Integer> extension_strength\
    \ = new HashMap<String, Integer>();\n        for(String extension : extensions)\
    \ {\n            int strength = extension.substring(extension.indexOf('C'), extension.indexOf('C')\
    \ + 1).length();\n            extension_strength.put(extension, strength);\n \
    \       }\n        \n        ArrayList<String> sorted_extensions = new ArrayList<String>(extension_strength.keySet());\n\
    \        Collections.sort(sorted_extensions);\n        \n        for(String extension\
    \ : sorted_extensions) {\n            int strength = extension_strength.get(extension);\n\
    \            if(strength > 0) {\n                return class_name + \".\" + extension;\n\
    \            }\n        }\n        \n        return class_name;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.size();\n        double cap = class_name.chars().filter(Character::isUpperCase).count();\n\
    \        double sm = class_name.chars().filter(Character::isLowerCase).count();\n\
    \        double strength_fraction = strength / cap;\n        double strength_fraction_small\
    \ = strength_fraction - sm;\n        String strongest_extension = class_name +\
    \ \".\" + extensions_sorted.get(0);\n        if (strength_fraction_small < 0)\
    \ {\n            strongest_extension = extensions_sorted.get(0);\n        }\n\
    \        return strongest_extension;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.get(0).length() - extensions_sorted.get(1).length();\n\
    \        if (strength > 0) {\n            return class_name + \".\" + extensions_sorted.get(0);\n\
    \        }\n        strength = extensions_sorted.get(1).length() - extensions_sorted.get(2).length();\n\
    \        if (strength > 0) {\n            return class_name + \".\" + extensions_sorted.get(1);\n\
    \        }\n        strength = extensions_sorted.get(2).length() - extensions_sorted.get(3).length();\n\
    \        if (strength > 0) {\n            return class_name + \".\" + extensions_sorted.get(2);\n\
    \        }\n        strength = extensions_sorted.get(3).length() - extensions_sorted.get(4).length();\n\
    \        if (strength > 0) {\n            return class_name + \".\" + extensions_sorted.get(3);\n\
    \        }\n        strength = extensions_sorted.get(4).length() - extensions_sorted.get(5).length();\n\
    \        if (strength > 0) {\n            return class_name + \".\" + extensions_sorted.get(4);\n\
    \        }\n        strength = extensions_sorted.get(5).length() - extensions_sorted.get(6).length();\n\
    \        if (strength > 0) {\n            return class_name + \".\" + extensions_sorted.get(5);\n\
    \        }\n        strength = extensions_sorted.get(6).length() - extensions_sorted.get(7).length();\n\
    \        if (strength > 0) {\n            return class_name + \".\" + extensions_sorted.get(6);\n\
    \        }\n        strength = extensions_sorted.get(7).length() - extensions_sorted.get(8).length();\n\
    \        if (strength > 0) {\n            return class_name + \".\" + extensions_sorted.get(7);\n\
    \        }\n        strength = extensions_sorted.get(8).length() - extensions_sorted.get(9).length();\n\
    \        if (strength > 0) {\n            return class_name + \".\" + extensions_sorted.get(8);\n\
    \        }\n        strength = extensions_sorted.get(9).length() - extensions_sorted.get(10).length();\n\
    \        if (strength > 0) {\n            return class_name + \".\" + extensions_sorted.get(9);\n\
    \        }\n        strength = extensions_sorted.get(10).length() - extensions_sorted.get(11).length();\n\
    \        if (strength > 0) {\n            return class_name + \".\" + extensions_sorted.get(10);\n\
    \        }\n        strength = extensions_sorted.get(11).length() - extensions_sorted.get(12).length();\n\
    \        if (strength > 0) {\n            return class_name + \".\" + extensions_sorted.get(11);\n\
    \        }\n        strength = extension", "        ArrayList<Integer> strengths\
    \ = new ArrayList<>();\n        for(String ext : extensions) {\n            int\
    \ c = 0;\n            for(int i = 0; i < ext.length(); i++) {\n              \
    \  if(ext.charAt(i) >= 'A' && ext.charAt(i) <= 'Z') {\n                    c++;\n\
    \                }\n            }\n            strengths.add(c);\n        }\n\
    \        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for(int i = 1; i < strengths.size(); i++) {\n            if(strengths.get(i)\
    \ == strongest) {\n                strongest = i;\n            }\n        }\n\
    \        return class_name + \".\" + extensions.get(strongest);", "        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n", "        Map<String, Integer> extensions_map = new HashMap<>();\n\
    \        for(String extension : extensions) {\n            int extension_strength\
    \ = extension.substring(extension.length() - 1).replaceAll(\"[^A-Z]\", \"\").length();\n\
    \            extensions_map.put(extension, extension_strength);\n        }\n \
    \       Collections.sort(extensions_map.values());\n        int strongest_extension\
    \ = extensions_map.get(extensions.get(0));\n        for(String extension : extensions)\
    \ {\n            int extension_strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"[^A-Z]\", \"\").length();\n            if(extension_strength\
    \ == strongest_extension) {\n                strongest_extension = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(0);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_strength\
    \ = extension_length - extension.substring(extension_length - 1).length();\n \
    \           if (extension_strength > strength) {\n                strength = extension_strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).toUpperCase().length();\n\
    \            int sm = extension.substring(0, 1).toLowerCase().length();\n    \
    \        double fraction = cap - sm;\n            if (strength == -1 || fraction\
    \ > strength) {\n                strength = fraction;\n            }\n       \
    \ }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        double max_strength = -1;\n        for(String extension : extensions_sorted)\
    \ {\n            double extension_strength = extension.matches(\"[A-Z]+\")?1:0;\n\
    \            if(extension_strength > strength) {\n                strength = extension_strength;\n\
    \                max_strength = extension_strength;\n            }\n        }\n\
    \        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()-1);",
  "        HashMap<String, Integer> extensions_map = new HashMap<>();\n        for\
    \ (String extension : extensions) {\n            int extension_length = extension.length();\n\
    \            int extension_strength = extension_length / 2;\n            extensions_map.put(extension,\
    \ extension_strength);\n        }\n        Collections.sort(extensions_map.values());\n\
    \        int max_strength = extensions_map.values().stream().max().getAsInt();\n\
    \        String strongest_extension = class_name + extensions_map.get(max_strength);\n\
    \        return strongest_extension;", "        HashMap<String, Integer> extension_strength\
    \ = new HashMap<String, Integer>();\n        for (String extension : extensions)\
    \ {\n            int extension_strength_counter = 0;\n            for (int i =\
    \ 0; i < extension.length(); i++) {\n                if (extension.charAt(i) >=\
    \ 'A' && extension.charAt(i) <= 'Z') {\n                    extension_strength_counter++;\n\
    \                }\n            }\n            extension_strength.put(extension,\
    \ extension_strength_counter);\n        }\n        Collections.sort(extension_strength.values());\n\
    \        int strongest_extension_strength = extension_strength.values().get(0);\n\
    \        if (extension_strength.values().size() > 1) {\n            int first_extension_strength\
    \ = extension_strength.values().get(1);\n            for (Map.Entry<String, Integer>\
    \ entry : extension_strength.entrySet()) {\n                if (entry.getValue()\
    \ == first_extension_strength) {\n                    strongest_extension_strength\
    \ = entry.getValue();\n                }\n            }\n        }\n        return\
    \ class_name + \".\" + extensions.get(extension_strength.keySet().stream().filter(e\
    \ -> e.getValue() == strongest_extension_strength).findFirst().get());", "   \
    \     ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest = -1;\n \
    \       String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.indexOf('C'),\
    \ extension.indexOf('C') + 1).length();\n            if (extension_strength >\
    \ strongest) {\n                strongest = extension_strength;\n            \
    \    strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.size();\n        double cap = class_name.substring(0,\
    \ 1).toUpperCase().length();\n        double sm = class_name.substring(0, 1).toLowerCase().length();\n\
    \        double strength_fraction = strength / cap;\n        double strength_fraction_small\
    \ = strength_fraction - sm;\n        double strength_fraction_small_2 = strength_fraction_small\
    \ * strength_fraction_small;\n        double strength_fraction_small_3 = strength_fraction_small_2\
    \ * strength_fraction_small;\n        double strength_fraction_small_4 = strength_fraction_small_3\
    \ * strength_fraction_small;\n        double strength_fraction_small_5 = strength_fraction_small_4\
    \ * strength_fraction_small;\n        double strength_fraction_small_6 = strength_fraction_small_5\
    \ * strength_fraction_small;\n        double strength_fraction_small_7 = strength_fraction_small_6\
    \ * strength_fraction_small;\n        double strength_fraction_small_8 = strength_fraction_small_7\
    \ * strength_fraction_small;\n        double strength_fraction_small_9 = strength_fraction_small_8\
    \ * strength_fraction_small;\n        double strength_fraction_small_10 = strength_fraction_small_9\
    \ * strength_fraction_small;\n        double strength_fraction_small_11 = strength_fraction_small_10\
    \ * strength_fraction_small;\n        double strength_fraction_small_12 = strength_fraction_small_11\
    \ * strength_fraction_small;\n        double strength_fraction_small_13 = strength_fraction_small_12\
    \ * strength_fraction_small;\n        double strength_fraction_small_14 = strength_fraction_small_13\
    \ * strength_fraction_small;\n        double strength_fraction_small_15 = strength_fraction_small_14\
    \ * strength_fraction_small;\n        double strength_fraction_small_16 = strength_fraction_small_15\
    \ * strength_fraction_small;\n        double strength_fraction_small_17 = strength_fraction_small_16\
    \ * strength_fraction_small;\n        double strength_fraction_small_18 = strength_fraction_small_17\
    \ * strength_fraction_small;\n        double strength_fraction_small_19 = strength_fraction_small_18\
    \ * strength_fraction_small;\n        double strength_fraction_small_20 = strength_fraction_small_19\
    \ * strength_fraction_small;\n        double strength_fraction_small_2", "   \
    \     ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        for(String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength += (cap - sm);\n        }\n        double strength_sorted = strength;\n\
    \        Collections.sort(extensions_sorted);\n        for(String extension :\
    \ extensions_sorted) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength_sorted\
    \ -= (cap - sm);\n        }\n        if(strength_sorted < 0) {\n            return\
    \ class_name + \".\" + extensions.get(0);\n        }\n        return class_name\
    \ + \".\" + extensions.get(0);", "        double strength = 0;\n        double\
    \ maxStrength = 0;\n        double maxExtension = 0;\n        double maxExtensionIndex\
    \ = 0;\n        double maxExtensionLength = 0;\n        double maxExtensionName\
    \ = 0;\n        double maxExtensionNameIndex = 0;\n        double maxExtensionNameLength\
    \ = 0;\n        double maxExtensionNameLengthIndex = 0;\n        double maxExtensionNameLengthIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;\n        double maxExtensionNameLengthIndexIndexIndex\
    \ = 0;\n        double maxExtensionNameLengthIndexIndexIndex = 0;\n        double\
    \ maxExtensionNameLengthIndexIndexIndex = 0;", "        \n        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        \n        double strength = -1;\n        String strongest_extension =\
    \ null;\n        \n        for(int i = 0; i < extensions_sorted.size(); i++) {\n\
    \            String extension = extensions_sorted.get(i);\n            \n    \
    \        int extension_length = extension.length();\n            \n          \
    \  int cap_extension_length = CAP_LETTERS.length();\n            int sm_extension_length\
    \ = SM_LETTERS.length();\n            \n            int extension_strength = extension_length\
    \ - cap_extension_length - sm_extension_length;\n            \n            if(strength\
    \ < extension_strength) {\n                strength = extension_strength;\n  \
    \              strongest_extension = extension;\n            }\n        }\n  \
    \      \n        return class_name + \".\" + strongest_extension;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.get(extensions_sorted.size() - 1).length()\
    \ - extensions_sorted.get(extensions_sorted.size() - 1).length();\n        double\
    \ strength_of_extension = strength / extensions_sorted.size();\n        double\
    \ strength_of_extension_of_extension = strength_of_extension / extensions_sorted.get(extensions_sorted.size()\
    \ - 1).length();\n        double strength_of_extension_of_extension_of_extension\
    \ = strength_of_extension_of_extension / extensions_sorted.get(extensions_sorted.size()\
    \ - 2).length();\n        double strength_of_extension_of_extension_of_extension_of_extension\
    \ = strength_of_extension_of_extension_of_extension / extensions_sorted.get(extensions_sorted.size()\
    \ - 3).length();\n        double strength_of_extension_of_extension_of_extension_of_extension_of_extension\
    \ = strength_of_extension_of_extension_of_extension_of_extension / extensions_sorted.get(extensions_sorted.size()\
    \ - 4).length();\n        double strength_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension\
    \ = strength_of_extension_of_extension_of_extension_of_extension_of_extension\
    \ / extensions_sorted.get(extensions_sorted.size() - 5).length();\n        double\
    \ strength_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension\
    \ = strength_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension\
    \ / extensions_sorted.get(extensions_sorted.size() - 6).length();\n        double\
    \ strength_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension\
    \ = strength_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension\
    \ / extensions_sorted.get(extensions_sorted.size() - 7).length();\n        double\
    \ strength_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension\
    \ = strength_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension\
    \ / extensions_sorted.get(extensions_sorted.size() - 8).length();\n        double\
    \ strength_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension_of_extension_",
  "        double strength = -1;\n        for(String extension : extensions) {\n \
    \           int cap = extension.substring(0, 1).length();\n            int sm\
    \ = extension.substring(1).length();\n            double frac = cap - sm;\n  \
    \          strength += frac;\n        }\n        Collections.sort(extensions);\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double frac = cap - sm;\n            if(frac > strength) {\n          \
    \      strength = frac;\n            }\n        }\n        return class_name +\
    \ \".\" + extensions.get(0);", "        ArrayList<String> extensions_sorted =\
    \ new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = -1;\n        String strongest_extension = null;\n    \
    \    for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.matches(\"[A-Z]+\").length();\n            if (extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            \
    \    strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        ArrayList<Integer> strengths\
    \ = new ArrayList<>();\n        for(String extension : extensions) {\n       \
    \     int extension_strength = extension.substring(extension.indexOf('C') - 1,\
    \ extension.indexOf('S')).charAt(0) - extension.substring(extension.indexOf('C')\
    \ - 1, extension.indexOf('S')).charAt(1);\n            strengths.add(extension_strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest_extension\
    \ = strengths.get(0);\n        for(int i = 1; i < strengths.size(); i++) {\n \
    \           if(strengths.get(i) == strongest_extension) {\n                strongest_extension\
    \ = strengths.get(i);\n            }\n        }\n        return class_name + \"\
    .\" + strongest_extension;", "        double strength = -1;\n        double max_strength\
    \ = -1;\n        double max_index = -1;\n        double max_extension_length =\
    \ -1;\n        double max_extension_class = -1;\n        double max_extension_class_length\
    \ = -1;\n        double max_extension_class_name = -1;\n        double max_extension_class_name_length\
    \ = -1;\n        double max_extension_class_name_class = -1;\n        double max_extension_class_name_class_length\
    \ = -1;\n        double max_extension_class_name_class_name = -1;\n        double\
    \ max_extension_class_name_class_name_length = -1;\n        double max_extension_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_length = -1;\n\
    \        double max_extension_class_name_class_name_class_name = -1;\n       \
    \ double max_extension_class_name_class_name_class_name_length = -1;\n       \
    \ double max_extension_class_name_class_name_class_name_class = -1;\n        double\
    \ max_extension_class_name_class_name_class_name_class_length = -1;\n        double\
    \ max_extension_class_name_class_name_class_name_class_name = -1;\n        double\
    \ max_extension_class_name_class_name_class_name_class_name_length = -1;\n   \
    \     double max_extension_class_name_class_name_class_name_class_name_class =\
    \ -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_length\
    \ = -1;\n        double max_extension_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class_name_class\
    \ = -1;\n        ", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int max_strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.indexOf('C')\
    \ + 1).length();\n            if (extension_strength > max_strength) {\n     \
    \           max_strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        double strength = -1;\n        double max_strength\
    \ = -1;\n        for (String extension : extensions) {\n            int cap =\
    \ extension.substring(0, 1).length();\n            int sm = extension.substring(0,\
    \ 1).length();\n            int strength_of_extension = cap - sm;\n          \
    \  if (strength_of_extension > strength) {\n                strength = strength_of_extension;\n\
    \                max_strength = strength;\n            }\n        }\n        if\
    \ (strength > 0) {\n            return class_name + \".\" + extensions.get(extensions.indexOf(max_strength));\n\
    \        } else {\n            return class_name;\n        }", "        Set<String>\
    \ extensions_set = new HashSet<String>(extensions);\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        ", "        ArrayList<Integer> strengths\
    \ = new ArrayList<>();\n        for(String ext : extensions) {\n            int\
    \ cap = ext.length();\n            int sm = ext.toLowerCase().length();\n    \
    \        int strength = cap - sm;\n            strengths.add(strength);\n    \
    \    }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for(String ext : extensions) {\n            int cap = ext.length();\n\
    \            int sm = ext.toLowerCase().length();\n            int strength =\
    \ cap - sm;\n            if(strength == strongest) {\n                return class_name\
    \ + \".\" + ext;\n            }\n        }\n        return class_name + \".\"\
    \ + extensions.get(0);", "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int max_strength = 0;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.matches(\"[A-Z]+\").length()\
    \ - extension.matches(\"[a-z]+\").length();\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        Map<String, Integer>\
    \ extension_strength = new HashMap<>();\n        for (String extension : extensions)\
    \ {\n            int extension_strength_counter = 0;\n            for (int i =\
    \ 0; i < extension.length(); i++) {\n                char c = extension.charAt(i);\n\
    \                if (Character.isUpperCase(c)) {\n                    extension_strength_counter++;\n\
    \                }\n            }\n            extension_strength.put(extension,\
    \ extension_strength_counter);\n        }\n        Collections.sort(extension_strength.values());\n\
    \        int strongest_extension_strength = extension_strength.values().get(0);\n\
    \        String strongest_extension = null;\n        for (String extension : extensions)\
    \ {\n            int extension_strength_counter = 0;\n            for (int i =\
    \ 0; i < extension.length(); i++) {\n                char c = extension.charAt(i);\n\
    \                if (Character.isUpperCase(c)) {\n                    extension_strength_counter++;\n\
    \                }\n            }\n            if (extension_strength_counter\
    \ == strongest_extension_strength) {\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        double strength = 0;\n        double maxStrength = 0;\n        for(String\
    \ extension : extensions) {\n            String name = extension.substring(0,1).toUpperCase()\
    \ + extension.substring(1);\n            int cap = name.length();\n          \
    \  int sm = name.toLowerCase().length();\n            strength += (cap - sm);\n\
    \        }\n        strength = strength / extensions.size();\n        for(String\
    \ extension : extensions) {\n            String name = extension.substring(0,1).toUpperCase()\
    \ + extension.substring(1);\n            int cap = name.length();\n          \
    \  int sm = name.toLowerCase().length();\n            if(cap - sm > maxStrength)\
    \ {\n                maxStrength = cap - sm;\n            }\n        }\n     \
    \   double maxStrengthInt = Math.ceil(maxStrength);\n        String name = class_name.substring(0,1).toUpperCase()\
    \ + class_name.substring(1);\n        for(int i = 1; i <= maxStrengthInt; i++)\
    \ {\n            name += i;\n        }\n        return name + \".\" + extensions.get(0);",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        int strength = -1;\n    \
    \    String strongest = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_capital\
    \ = extension_length - 1;\n            int extension_smallcap = extension_capital\
    \ - 1;\n            int extension_strength = extension_capital - extension_smallcap;\n\
    \            if (extension_strength > strength) {\n                strength =\
    \ extension_strength;\n                strongest = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest;", "        Set<String>\
    \ extensions_set = new HashSet<String>(extensions);\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extension",
  "        Map<String, Integer> extensions_map = new HashMap<>();\n        for (String\
    \ extension : extensions) {\n            int extension_length = extension.length();\n\
    \            int extension_strength = extension_length - 1;\n            String\
    \ extension_class = extension.substring(0, extension_length);\n            extensions_map.put(extension_class,\
    \ extension_strength);\n        }\n        List<String> sorted_extensions = extensions_map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toList());\n\
    \        String strongest_extension = sorted_extensions.get(0).getKey();\n   \
    \     return class_name + \".\" + strongest_extension;", "        \n        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        \n        int max_strength = -1;\n        String max_extension = \"\"\
    ;\n        \n        for (String extension : extensions_sorted) {\n          \
    \  int extension_strength = extension.substring(extension.indexOf('C') - 1, extension.indexOf('C')).charAt(0)\
    \ - extension.substring(extension.indexOf('S') - 1, extension.indexOf('S')).charAt(0);\n\
    \            if (extension_strength > max_strength) {\n                max_strength\
    \ = extension_strength;\n                max_extension = extension;\n        \
    \    }\n        }\n        \n        return class_name + \".\" + max_extension;",
  "        double strength = 0;\n        for(String extension : extensions) {\n  \
    \          int cap = extension.substring(0, 1).length();\n            int sm =\
    \ extension.substring(1).length();\n            strength += (cap - sm) / cap;\n\
    \        }\n        Collections.sort(extensions);\n        for(String extension\
    \ : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            if(cap - sm\
    \ == strength) {\n                return class_name + \".\" + extension;\n   \
    \         }\n        }\n        return class_name + \".\" + extensions.get(0);",
  "        \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n", "        double strength = -1;\n        double\
    \ maxStrength = -1;\n        double maxExtensionStrength = -1;\n        double\
    \ maxExtensionIndex = -1;\n        double maxExtensionLength = -1;\n        double\
    \ maxExtensionName = -1;\n        double maxExtensionIndex = -1;\n        double\
    \ maxExtensionLength = -1;\n        double maxExtensionName = -1;\n        double\
    \ maxExtensionIndex = -1;\n        double maxExtensionLength = -1;\n        double\
    \ maxExtensionName = -1;\n        double maxExtensionIndex = -1;\n        double\
    \ maxExtensionLength = -1;\n        double maxExtensionName = -1;\n        double\
    \ maxExtensionIndex = -1;\n        double maxExtensionLength = -1;\n        double\
    \ maxExtensionName = -1;\n        double maxExtensionIndex = -1;\n        double\
    \ maxExtensionLength = -1;\n        double maxExtensionName = -1;\n        double\
    \ maxExtensionIndex = -1;\n        double maxExtensionLength = -1;\n        double\
    \ maxExtensionName = -1;\n        double maxExtensionIndex = -1;\n        double\
    \ maxExtensionLength = -1;\n        double maxExtensionName = -1;\n        double\
    \ maxExtensionIndex = -1;\n        double maxExtensionLength = -1;\n        double\
    \ maxExtensionName = -1;\n        double maxExtensionIndex = -1;\n        double\
    \ maxExtensionLength = -1;\n        double maxExtensionName = -1;\n        double\
    \ maxExtensionIndex = -1;\n        double maxExtensionLength = -1;\n        double\
    \ maxExtensionName = -1;\n        double maxExtensionIndex = -1;\n        double\
    \ maxExtensionLength = -1;\n        double maxExtensionName = -1;\n        double\
    \ maxExtensionIndex = -1;\n        double maxExtensionLength = -1;\n        double\
    \ maxExtensionName = -1;\n        double maxExtensionIndex = -1;\n        double\
    \ maxExtensionLength = -1;\n        double maxExtensionName = -1;\n        double\
    \ maxExtensionIndex = -1;\n        double maxExtensionLength = -1;\n        double\
    \ maxExtensionName = -1;\n        double maxExtensionIndex = -1;\n        double\
    \ maxExtensionLength = -1;\n        double maxExtensionName = -1;\n        double\
    \ maxExtensionIndex = -1;\n        double maxExtensionLength = -1;\n        double\
    \ maxExtensionName = -1;\n        double maxExtensionIndex = -1;\n        double\
    \ maxExtensionLength = -1;\n        double maxExtensionName = -1;\n        double\
    \ maxExtensionIndex = -1;\n        double maxExtensionLength = -1;\n        double\
    \ maxExtensionName = -1;\n        double maxExtensionIndex = -1;\n        double\
    \ maxExtensionLength = -1;\n        double maxExtensionName = -1;\n        double\
    \ maxExtensionIndex = -1;\n        double maxExtensionLength = -1;\n        double\
    \ maxExtensionName = -1;\n        double maxExtensionIndex = -1;\n        double\
    \ maxExtensionLength = -1;\n        double maxExtensionName = -1;\n        double\
    \ maxExtensionIndex = -1;\n        double maxExtensionLength = -1;\n        double\
    \ maxExtensionName = -1;\n        double maxExtensionIndex = -1;", "        Set<String>\
    \ extensions_set = new HashSet<String>(extensions);\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extension",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = \"\";\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0,1).length();\n            int\
    \ sm = extension.substring(1,2).length();\n            strength = (double)cap\
    \ - (double)sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension_index = extensions_sorted.size() - 1;\n     \
    \   String strongest_extension = extensions_sorted.get(strongest_extension_index);\n\
    \        String class_name_with_strongest_extension = class_name + \".\" + strongest_extension;\n\
    \        return class_name_with_strongest_extension;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            double extension_strength\
    \ = extension.length();\n            if (extension_strength > strength) {\n  \
    \              strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int max_strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.matches(\"[A-Z]+\").length()\
    \ - extension.matches(\"[a-z]+\").length();\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for(int i = 0; i < extensions_sorted.size();\
    \ i++) {\n            String extension = extensions_sorted.get(i);\n         \
    \   int cap = extension.substring(0,1).length();\n            int sm = extension.substring(1,2).length();\n\
    \            double fraction = cap - sm;\n            if(strength == -1 || fraction\
    \ > strength) {\n                strength = fraction;\n            }\n       \
    \ }\n        return class_name + \".\" + extensions_sorted.get(0);", "       \
    \ ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n \
    \       Collections.sort(extensions_sorted);\n        int max_strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"[^A-Z]\", \"\").length();\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        Map<String, Integer>\
    \ extension_strength = new HashMap<>();\n        for (String extension : extensions)\
    \ {\n            int strength = extension.matches(\"[A-Z]+\").length();\n    \
    \        strength += extension.matches(\"[a-z]+\").length();\n            extension_strength.put(extension,\
    \ strength);\n        }\n        Collections.sort(extension_strength.values());\n\
    \        int strongest = extension_strength.values().get(0);\n        for (String\
    \ extension : extensions) {\n            if (extension_strength.get(extension)\
    \ == strongest) {\n                strongest = extension_strength.get(extension);\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        double max_strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            String extension_class = class_name + \".\" + extension;\n  \
    \          try {\n                Class<?> c = Class.forName(extension_class);\n\
    \                double extension_strength = c.getSimpleName().length();\n   \
    \             if (extension_strength > max_strength) {\n                    max_strength\
    \ = extension_strength;\n                    strength = extension_strength;\n\
    \                }\n            } catch (ClassNotFoundException e) {\n       \
    \         e.printStackTrace();\n            }\n        }\n        if (strength\
    \ == -1) {\n            throw new RuntimeException(\"No extension found with strongest\
    \ strength.\");\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);", "        HashMap<String, Integer> extensions_map = new HashMap<>();\n\
    \        for (String extension : extensions) {\n            int extension_length\
    \ = extension.length();\n            String extension_class = extension.substring(0,\
    \ extension_length - 1);\n            int extension_strength = extension.substring(extension_length\
    \ - 1).replaceAll(\"[^A-Z]\", \"\").length();\n            extensions_map.put(extension_class,\
    \ extension_strength);\n        }\n        ArrayList<String> sorted_extensions\
    \ = new ArrayList<>(extensions_map.values());\n        Collections.sort(sorted_extensions);\n\
    \        int strongest_extension = -1;\n        for (String extension : sorted_extensions)\
    \ {\n            if (extensions_map.containsKey(extension)) {\n              \
    \  if (strongest_extension == -1) {\n                    strongest_extension =\
    \ extensions_map.get(extension);\n                } else if (strongest_extension\
    \ < extensions_map.get(extension)) {\n                    strongest_extension\
    \ = extensions_map.get(extension);\n                }\n            }\n       \
    \ }\n        return class_name + \".\" + strongest_extension;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.size();\n        double cap = class_name.substring(0,\
    \ 1).toUpperCase().length();\n        double sm = class_name.substring(0, 1).toLowerCase().length();\n\
    \        double strength_frac = strength / cap;\n        double strength_frac_sm\
    \ = strength / sm;\n        double strength_frac_cap = strength_frac - strength_frac_sm;\n\
    \        String strongest_extension = null;\n        if (strength_frac_cap > 0)\
    \ {\n            strongest_extension = class_name + \".\" + extensions_sorted.get(0);\n\
    \        } else if (strength_frac_sm > 0) {\n            strongest_extension =\
    \ class_name + \".\" + extensions_sorted.get(1);\n        } else if (strength_frac_cap\
    \ > 0) {\n            strongest_extension = class_name + \".\" + extensions_sorted.get(2);\n\
    \        }\n        return strongest_extension;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.get(extensions_sorted.size()-1).length()\
    \ - extensions_sorted.get(extensions_sorted.size()-2).length();\n        double\
    \ strength_sum = 0;\n        for(String extension : extensions_sorted) {\n   \
    \         strength_sum += extension.length();\n        }\n        double strength_avg\
    \ = strength_sum / extensions_sorted.size();\n        double strength_max = Math.max(strength_sum,\
    \ strength_avg);\n        double strength_min = Math.min(strength_sum, strength_avg);\n\
    \        double strength_diff = strength_max - strength_min;\n        double strength_diff_abs\
    \ = Math.abs(strength_diff);\n        double strength_diff_sqrt = Math.sqrt(strength_diff_abs);\n\
    \        double strength_diff_sqrt_abs = Math.sqrt(strength_diff_abs);\n     \
    \   double strength_diff_sqrt_abs = Math.sqrt(strength_diff_abs);\n        double\
    \ strength_diff_sqrt_abs = Math.sqrt(strength_diff_abs);\n        double strength_diff_sqrt_abs\
    \ = Math.sqrt(strength_diff_abs);\n        double strength_diff_sqrt_abs = Math.sqrt(strength_diff_abs);\n\
    \        double strength_diff_sqrt_abs = Math.sqrt(strength_diff_abs);\n     \
    \   double strength_diff_sqrt_abs = Math.sqrt(strength_diff_abs);\n        double\
    \ strength_diff_sqrt_abs = Math.sqrt(strength_diff_abs);\n        double strength_diff_sqrt_abs\
    \ = Math.sqrt(strength_diff_abs);\n        double strength_diff_sqrt_abs = Math.sqrt(strength_diff_abs);\n\
    \        double strength_diff_sqrt_abs = Math.sqrt(strength_diff_abs);\n     \
    \   double strength_diff_sqrt_abs = Math.sqrt(strength_diff_abs);\n        double\
    \ strength_diff_sqrt_abs = Math.sqrt(strength_diff_abs);\n        double strength_diff_sqrt_abs\
    \ = Math.sqrt(strength_diff_abs);\n        double strength_diff_sqrt_abs = Math.sqrt(strength_diff_abs);\n\
    \        double strength_diff_sqrt_abs = Math.sqrt(strength_diff_abs);\n     \
    \   double strength_diff_sqrt_abs = Math.sqrt(strength_diff_abs);\n        double\
    \ strength_diff_sqrt_abs = Math.sqrt(strength_diff_abs);\n        double strength_diff_sqrt_abs\
    \ = Math.sqrt(strength_diff_abs);\n        double strength_diff_sqrt_abs = Math.sqrt(strength_diff_abs);\n\
    \        double ", "        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n", "        Map<String, Integer>\
    \ extensions_map = new HashMap<>();\n        for (String extension : extensions)\
    \ {\n            int strength = extension.charAt(0) - extension.charAt(1);\n \
    \           extensions_map.put(extension, strength);\n        }\n        Collections.sort(extensions_map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue));\n        Integer max_strength =\
    \ extensions_map.get(extensions.get(0));\n        if (max_strength == null) {\n\
    \            return class_name;\n        }\n        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions_map.keySet());\n        extensions_sorted.remove(max_strength);\n\
    \        extensions_sorted.add(0, class_name);\n        return StrongestExtension(class_name,\
    \ extensions_sorted);", "        Set<String> extensions_set = new HashSet<String>(extensions);\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        ", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.size();\n\
    \        double cap_strength = strength / CAP;\n        double sm_strength = strength\
    \ % CAP;\n        double strength_difference = cap_strength - sm_strength;\n \
    \       double strength_percentage = strength_difference / CAP;\n        double\
    \ strength_percentage_rounded = Math.round(strength_percentage * CAP);\n     \
    \   double strength_rounded = Math.round(strength);\n        double strength_rounded_percentage\
    \ = strength_rounded / CAP;\n        double strength_rounded_percentage_rounded\
    \ = Math.round(strength_rounded_percentage * CAP);\n        double strength_rounded_percentage_rounded_rounded\
    \ = Math.round(strength_rounded_percentage_rounded * CAP);\n        double strength_rounded_rounded\
    \ = Math.round(strength_rounded);\n        double strength_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded);\n        double strength_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded);\n        double strength_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded_rounded);\n        double strength_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded_rounded_rounded);\n        double\
    \ strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded = Math.round(strength_rounded_rounded_rounded_rounded_rounded_rounded);\n\
    \        double strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded);\n\
    \        double strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded);\n\
    \        double strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded);\n\
    \        double strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded_", "        double max_strength\
    \ = -1;\n        String strongest_extension = null;\n        for (String extension\
    \ : extensions) {\n            double extension_strength = extension.matches(\"\
    [A-Z]+\").length() - extension.matches(\"[a-z]+\").length();\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        Set<String> extensions_set\
    \ = new HashSet<String>(extensions);\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        ", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.length();\n\
    \            int sm = class_name.substring(class_name.lastIndexOf('.')+1).length();\n\
    \            double fraction = cap - sm;\n            if (strength < fraction)\
    \ {\n                strength = fraction;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        ArrayList<Integer> strengths = new ArrayList<>();\n\
    \        for(String extension : extensions) {\n            int strength = extension.substring(extension.indexOf('C')\
    \ + 1).length() - extension.substring(extension.indexOf('S') + 1).length();\n\
    \            strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = strengths.get(0);\n        for(Integer strength : strengths)\
    \ {\n            if(strength == strongest) {\n                strongest = strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(strengths.indexOf(strongest));",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        double strength = -1;\n \
    \       String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('.')+1,\
    \ class_name.lastIndexOf('.')+1+cap).length();\n            double strength_extension\
    \ = cap - sm;\n            if (strength_extension > strength) {\n            \
    \    strength = strength_extension;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        Set<String> extensions_set = new HashSet<String>(extensions);\n       \
    \ extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extension", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      for(int i = 0; i < extensions_sorted.size(); i++) {\n            String\
    \ extension = extensions_sorted.get(i);\n            int extension_length = extension.length();\n\
    \            int extension_strength = extension_length - 1;\n            int extension_count_cap\
    \ = 0;\n            int extension_count_sm = 0;\n            for(int j = 0; j\
    \ < extension.length(); j++) {\n                if(extension.charAt(j) == extension.charAt(j).toUpperCase())\
    \ {\n                    extension_count_cap++;\n                }\n         \
    \       if(extension.charAt(j) == extension.charAt(j).toLowerCase()) {\n     \
    \               extension_count_sm++;\n                }\n            }\n    \
    \        float extension_strength_float = (float) extension_strength / extension_length;\n\
    \            if(extension_strength_float > strength) {\n                strength\
    \ = extension_strength_float;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions_sorted.get(0);", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = 0;\n        String strongest_extension = null;\n     \
    \   for (String extension : extensions_sorted) {\n            int extension_length\
    \ = extension.length();\n            int extension_strength = extension_length\
    \ - 1;\n            if (extension_strength > strength) {\n                strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        double strength = -1;\n        double maxStrength = -1;\n        double\
    \ maxExtensionStrength = -1;\n        for(String extension : extensions) {\n \
    \           String extensionName = extension.substring(0,1).toUpperCase() + extension.substring(1);\n\
    \            int extensionStrength = extensionName.chars().filter(Character::isUpperCase).count()\
    \ - extensionName.chars().filter(Character::isLowerCase).count();\n          \
    \  if(strength == -1 || strength > extensionStrength) {\n                strength\
    \ = extensionStrength;\n                maxStrength = strength;\n            \
    \    maxExtensionStrength = extensionStrength;\n            }\n            if(extensionStrength\
    \ > maxExtensionStrength) {\n                maxStrength = strength;\n       \
    \         maxExtensionStrength = extensionStrength;\n            }\n        }\n\
    \        if(maxStrength == -1) {\n            return class_name;\n        }\n\
    \        double fraction = maxStrength - maxExtensionStrength;\n        if(fraction\
    \ > 0) {\n            return class_name + \".\" + extensions.get(extensions.indexOf(extensions.get(extensions.indexOf(extension)+1)+1));\n\
    \        } else {\n            return class_name + \".\" + extensions.get(extensions.indexOf(extensions.get(extensions.indexOf(extension)-1)+1));\n\
    \        }", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.matches(\"[A-Z]\") ? extension.length() : 0;\n            if (extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            }\n\
    \        }\n        return class_name + \".\" + extensions_sorted.get(strength);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength = (double)cap - (double)sm;\n            if (strength > 0) {\n\
    \                break;\n            }\n        }\n        if (strength == 0)\
    \ {\n            return class_name;\n        }\n        StringBuilder sb = new\
    \ StringBuilder();\n        sb.append(class_name);\n        sb.append('.');\n\
    \        sb.append(extensions_sorted.get(0));\n        return sb.toString();",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        double strength = -1;\n \
    \       String strongest_extension = null;\n        for(String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0,1).length();\n            int\
    \ sm = extension.substring(1,2).length();\n            strength = (double)cap\
    \ - (double)sm;\n            if(strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        HashMap<String, Integer>\
    \ extensions_map = new HashMap<String, Integer>();\n        for(String extension\
    \ : extensions) {\n            int extension_strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"[^A-Z]\", \"\").length();\n            extensions_map.put(extension,\
    \ extension_strength);\n        }\n        Collections.sort(extensions_map.entrySet(),\
    \ Map.Entry.comparingByValue());\n        for(Map.Entry<String, Integer> entry\
    \ : extensions_map.entrySet()) {\n            if(entry.getValue() == 0) {\n  \
    \              return class_name + \".\" + entry.getKey();\n            }\n  \
    \      }\n        return class_name + \".\" + extensions.get(0);", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for(String extension : extensions_sorted) {\n            int cap = extension.length();\n\
    \            int sm = extension.substring(0, 1).length();\n            double\
    \ frac = cap - sm;\n            strength = frac > 0 ? frac : Double.NEGATIVE_INFINITY;\n\
    \            strongest_extension = class_name + \".\" + extension;\n        }\n\
    \        return strongest_extension;", "        Set<String> extensions_set = new\
    \ HashSet<String>(extensions);\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extension",
  "        Map<String, Integer> extension_strength = new HashMap<>();\n        for\
    \ (String extension : extensions) {\n            int strength = extension.charAt(0)\
    \ - extension.charAt(1);\n            extension_strength.put(extension, strength);\n\
    \        }\n        Collections.sort(extension_strength.values());\n        int\
    \ max_strength = extension_strength.values().get(0);\n        for (String extension\
    \ : extension_strength.keySet()) {\n            if (extension_strength.get(extension)\
    \ == max_strength) {\n                String extension_name = class_name + \"\
    .\" + extension;\n                return extension_name;\n            }\n    \
    \    }\n        return class_name + \".\" + extensions.get(0);", "        \n \
    \       Set<String> extensions_set = new HashSet<>(extensions);\n        \n  \
    \      double strength = -1;\n        \n        for (String extension : extensions_set)\
    \ {\n            \n            int cap = extension.length();\n            int\
    \ sm = extension.substring(0,1).length();\n            \n            double fraction\
    \ = cap - sm;\n            \n            if (strength == -1 || fraction > strength)\
    \ {\n                \n                strength = fraction;\n                \n\
    \            }\n            \n        }\n        \n        return class_name +\
    \ \".\" + extensions.get(extensions_set.stream().max(Comparator.comparingDouble(Double::doubleValue)).orElse(null));",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1, 2).length();\n            double fraction = cap\
    \ - sm;\n            if (strength == -1 || fraction > strength) {\n          \
    \      strength = fraction;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        Map<String, Integer> extension_strengths = new HashMap<>();\n        for(String\
    \ extension : extensions) {\n            int strength = extension.substring(0,\
    \ 1).toUpperCase().compareTo(extension.substring(0, 1).toLowerCase());\n     \
    \       extension_strengths.put(extension, strength);\n        }\n        \n \
    \       Set<Map.Entry<String, Integer>> entries = extension_strengths.entrySet();\n\
    \        \n        Collections.sort(entries, new Comparator<Map.Entry<String,\
    \ Integer>>() {\n            @Override\n            public int compare(Map.Entry<String,\
    \ Integer> o1, Map.Entry<String, Integer> o2) {\n                return o2.getValue().compareTo(o1.getValue());\n\
    \            }\n        });\n        \n        Map.Entry<String, Integer> entry\
    \ = entries.iterator().next();\n        \n        return class_name + \".\" +\
    \ entry.getKey();", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.indexOf(extension.substring(0,\
    \ cap));\n            double frac = cap - sm;\n            if (frac > strength)\
    \ {\n                strength = frac;\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       double strength = 0;\n        for(String extension : extensions) {\n \
    \           int cap = extension.substring(0, 1).length();\n            int sm\
    \ = extension.substring(1).length();\n            strength += (cap - sm);\n  \
    \      }\n        double max = Math.max(strength);\n        for(String extension\
    \ : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength +=\
    \ (cap - sm);\n            if(strength == max) {\n                return class_name\
    \ + \".\" + extension;\n            }\n        }\n        return null;", "   \
    \     ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      String strongest = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_strength\
    \ = extension_length - extension.substring(extension_length - 1).length();\n \
    \           if (extension_strength > strength) {\n                strength = extension_strength;\n\
    \                strongest = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_cap\
    \ = extension_length - extension.toLowerCase().length();\n            int extension_sm\
    \ = (int) Math.ceil(extension_cap / 2);\n            if (strongest == -1 || extension_strength(extension)\
    \ < strongest) {\n                strongest = extension_strength(extension);\n\
    \            }\n            if (extension_strength(extension) == strongest &&\
    \ extension_length < extension_cap) {\n                strongest = extension_length;\n\
    \            }\n            if (extension_strength(extension) == strongest &&\
    \ extension_length == extension_cap && extension_length < extension_sm) {\n  \
    \              strongest = extension_length;\n            }\n        }\n     \
    \   return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest_extension_strength\
    \ = -1;\n        String strongest_extension = null;\n        for (String extension\
    \ : extensions_sorted) {\n            int extension_strength = extension.matches(\"\
    [A-Z]*\").length() - extension.matches(\"[a-z]*\").length();\n            if (extension_strength\
    \ > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      String strongest_extension = null;\n        for(String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.indexOf('C')\
    \ + 1).length();\n            if(extension_strength > strength) {\n          \
    \      strength = extension_strength;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        Set<String> extensions_set = new HashSet<>(extensions);\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n                        int cap =\
    \ e.length();\n                        extensions_set.stream().filter(e -> e.matches(\"\
    [a-z]+\")).forEach(e -> {\n                            int sm = e.length();\n\
    \                            double strength = cap - sm;\n                   \
    \         if (strength > 0) {\n                                return false;\n\
    \                            }\n                        });\n                \
    \    });\n                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    return\
    \ false;\n                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    return\
    \ false;\n                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    return\
    \ false;\n                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    return\
    \ false;\n                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).", "        ArrayList<String> extensions_sorted =\
    \ new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"[^A-Z]\", \"\").length();\n            if (extension_strength\
    \ > strongest_extension) {\n                strongest_extension = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);", "        double max_strength = -1;\n        String strongest_extension\
    \ = null;\n        for (String extension : extensions) {\n            String extension_name\
    \ = extension.substring(extension.lastIndexOf('.')+1);\n            int extension_strength\
    \ = extension_name.length() - extension_name.toUpperCase().length() - extension_name.toLowerCase().length();\n\
    \            if (extension_strength > max_strength) {\n                max_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        double strength = -1;\n        double maxStrength = -1;\n        double\
    \ maxExtension = -1;\n        for(String extension : extensions) {\n         \
    \   int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            double extensionStrength = cap - sm;\n            if(extensionStrength\
    \ > maxStrength) {\n                maxStrength = extensionStrength;\n       \
    \         maxExtension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + maxExtension;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double fraction = cap - sm;\n            if (strength == -1 || fraction\
    \ > strength) {\n                strength = fraction;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest_extension\
    \ = -1;\n        for (String extension : extensions_sorted) {\n            int\
    \ extension_strength = extension.substring(extension.length() - 1).replaceAll(\"\
    [^A-Z]\", \"\").length();\n            if (extension_strength > strongest_extension)\
    \ {\n                strongest_extension = extension_strength;\n            }\n\
    \        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.size();\n\
    \        if (strength == 0) {\n            return class_name;\n        }\n   \
    \     double strength_fraction = strength / extensions_sorted.size();\n      \
    \  double strength_fraction_2 = strength_fraction * strength_fraction;\n     \
    \   double strength_fraction_3 = strength_fraction * strength_fraction * strength_fraction;\n\
    \        double strength_fraction_4 = strength_fraction * strength_fraction *\
    \ strength_fraction * strength_fraction;\n        double strength_fraction_5 =\
    \ strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction;\n        double strength_fraction_6\
    \ = strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction;\n\
    \        double strength_fraction_7 = strength_fraction * strength_fraction *\
    \ strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction;\n\
    \        double strength_fraction_8 = strength_fraction * strength_fraction *\
    \ strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction * strength_fraction * strength_fraction * strength_fraction\
    \ * strength_fraction", "        Set<String> extensions_set = new HashSet<String>(extensions);\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extension", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int extension_cap\
    \ = extension_length - 1;\n            int extension_sm = 0;\n            for\
    \ (int i = 0; i < extension_cap; i++) {\n                if (extension.charAt(i)\
    \ >= 'A' && extension.charAt(i) <= 'Z') {\n                    extension_sm +=\
    \ 1;\n                }\n            }\n            int extension_strength = extension_length\
    \ - extension_sm;\n            if (strength < extension_strength) {\n        \
    \        strength = extension_strength;\n                strongest_extension =\
    \ extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        HashMap<String, Integer> map = new HashMap<String, Integer>();\n      \
    \  for (String extension : extensions) {\n            int index = extension.indexOf(\"\
    _\");\n            String name = extension.substring(0, index);\n            int\
    \ strength = extension.substring(index + 1);\n            map.put(name, strength);\n\
    \        }\n        ArrayList<String> sorted = new ArrayList<String>(map.values());\n\
    \        Collections.sort(sorted);\n        int maxStrength = sorted.get(0);\n\
    \        for (String extension : extensions) {\n            int index = extension.indexOf(\"\
    _\");\n            String name = extension.substring(0, index);\n            int\
    \ strength = extension.substring(index + 1);\n            if (strength > maxStrength)\
    \ {\n                maxStrength = strength;\n            }\n        }\n     \
    \   return class_name + \".\" + maxStrength;", "        \n        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        \n        double strength = 0;\n        \n        for(int i = 0; i <\
    \ extensions_sorted.size(); i++) {\n            String extension = extensions_sorted.get(i);\n\
    \            \n            int cap = extension.length();\n            int sm =\
    \ extension.toUpperCase().length();\n            \n            double fraction\
    \ = cap - sm;\n            \n            strength += fraction;\n        }\n  \
    \      \n        double strength_rounded = Math.round(strength);\n        \n \
    \       double strength_rounded_rounded = Math.round(strength_rounded);\n    \
    \    \n        if(strength_rounded_rounded == strength) {\n            return\
    \ class_name + \".\" + extensions_sorted.get(0);\n        }\n        \n      \
    \  double strength_rounded_rounded_rounded = Math.round(strength_rounded_rounded);\n\
    \        \n        if(strength_rounded_rounded_rounded == strength) {\n      \
    \      return class_name + \".\" + extensions_sorted.get(0);\n        }\n    \
    \    \n        double strength_rounded_rounded_rounded_rounded = Math.round(strength_rounded_rounded_rounded);\n\
    \        \n        if(strength_rounded_rounded_rounded_rounded == strength) {\n\
    \            return class_name + \".\" + extensions_sorted.get(0);\n        }\n\
    \        \n        double strength_rounded_rounded_rounded_rounded_rounded = Math.round(strength_rounded_rounded_rounded_rounded);\n\
    \        \n        if(strength_rounded_rounded_rounded_rounded_rounded == strength)\
    \ {\n            return class_name + \".\" + extensions_sorted.get(0);\n     \
    \   }\n        \n        double strength_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded_rounded_rounded);\n        \n\
    \        if(strength_rounded_rounded_rounded_rounded_rounded_rounded == strength)\
    \ {\n            return class_name + \".\" + extensions_sorted.get(0);\n     \
    \   }\n        \n        double strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded_rounded_rounded_rounded);\n  \
    \      \n        if(strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ == strength) {\n            return class_name + \".\" + extensions_sorted.get(0);\n\
    \        }\n        \n        double strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.round(strength_rounded_rounded_rounded_rounded_rounded_rounded_rounded);\n\
    \        \n        if(strength_rounded_rounded_rounded_rounded_rounded_roun",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('.')+1,\
    \ class_name.length()).length();\n            double fraction = cap - sm;\n  \
    \          if (strength == -1 || fraction > strength) {\n                strength\
    \ = fraction;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   HashMap<Integer, Integer> extension_strength = new HashMap<>();\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            int strength\
    \ = cap - sm;\n            extension_strength.put(strength, extension_strength.get(strength)\
    \ + 1);\n        }\n        int max_strength = Collections.max(extension_strength.keySet());\n\
    \        for(Integer strength : extension_strength.keySet()) {\n            if(strength\
    \ == max_strength) {\n                return class_name + \".\" + extension_strength.get(strength);\n\
    \            }\n        }\n        return class_name + \".\" + extension_strength.get(max_strength);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.size();\n\
    \        double cap = class_name.chars().filter(Character::isUpperCase).count();\n\
    \        double sm = class_name.chars().filter(Character::isLowerCase).count();\n\
    \        double strength_frac = strength - cap - sm;\n        double strength_frac_sorted\
    \ = strength_frac / strength;\n        double strength_frac_sorted_sorted = strength_frac_sorted\
    \ * strength;\n        double strength_frac_sorted_sorted_sorted = strength_frac_sorted_sorted\
    \ + strength_frac_sorted;\n        double strength_frac_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted + strength_frac_sorted_sorted;\n      \
    \  double strength_frac_sorted_sorted_sorted_sorted_sorted = strength_frac_sorted_sorted_sorted_sorted\
    \ + strength_frac_sorted_sorted_sorted;\n        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted + strength_frac_sorted_sorted_sorted_sorted;\n\
    \        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted + strength_frac_sorted_sorted_sorted_sorted_sorted;\n\
    \        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted + strength_frac_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted + strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ + strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n \
    \       double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ + strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ + strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted;\n\
    \        double strength_frac_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = strength_fra", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.matches(\"[A-Z]+\").length();\n\
    \            if (extension_strength > strength) {\n                strength =\
    \ extension_strength;\n                strongest_extension = extension;\n    \
    \        }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.matches(\"[A-Z]\").length()\
    \ - extension.matches(\"[a-z]\").length();\n            if (extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            \
    \    strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int max_strength = 0;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.matches(\"[A-Z]\").length() - extension.matches(\"[a-z]\").length();\n\
    \            if (extension_strength > max_strength) {\n                max_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int max_strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.matches(\"[A-Z]\").length()\
    \ - extension.matches(\"[a-z]\").length();\n            if (extension_strength\
    \ > max_strength) {\n                max_strength = extension_strength;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        Set<String> extensions_set\
    \ = new HashSet<String>(extensions);\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        extensions_set.stream().sorted().forEach(e\
    \ -> System.out.println(e));\n        ", "        Map<String, Integer> map = new\
    \ HashMap<>();\n        for (String extension : extensions) {\n            int\
    \ index = extension.indexOf(\"_\");\n            String name = extension.substring(0,\
    \ index);\n            int strength = extension.substring(index + 1);\n      \
    \      map.put(name, strength);\n        }\n        List<String> sorted = new\
    \ ArrayList<>(map.values());\n        Collections.sort(sorted);\n        int max\
    \ = -1;\n        for (String extension : sorted) {\n            if (map.get(extension)\
    \ > max) {\n                max = map.get(extension);\n            }\n       \
    \ }\n        return class_name + \".\" + max;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.get(extensions_sorted.size()-1).length()\
    \ - extensions_sorted.get(extensions_sorted.size()-2).length();\n        double\
    \ strength_sum = 0;\n        for(int i = 0; i < extensions_sorted.size()-1; i++)\
    \ {\n            strength_sum += extensions_sorted.get(i).length();\n        }\n\
    \        double strength_avg = strength_sum / extensions_sorted.size();\n    \
    \    double strength_min = extensions_sorted.get(extensions_sorted.size()-1).length();\n\
    \        double strength_max = extensions_sorted.get(extensions_sorted.size()-2).length();\n\
    \        double strength_diff = strength_max - strength_min;\n        double strength_diff_avg\
    \ = strength_diff / extensions_sorted.size();\n        double strength_diff_min\
    \ = strength_max - strength_min;\n        double strength_diff_max = strength_max\
    \ - strength_min;\n        double strength_diff_sum = strength_diff_avg + strength_diff_min;\n\
    \        double strength_diff_avg = strength_diff_sum / extensions_sorted.size();\n\
    \        double strength_diff_min = strength_diff_sum / extensions_sorted.size();\n\
    \        double strength_diff_max = strength_diff_sum / extensions_sorted.size();\n\
    \        double strength_diff_sum = strength_diff_avg + strength_diff_min;\n \
    \       double strength_diff_avg = strength_diff_sum / extensions_sorted.size();\n\
    \        double strength_diff_min = strength_diff_sum / extensions_sorted.size();\n\
    \        double strength_diff_max = strength_diff_sum / extensions_sorted.size();\n\
    \        double strength_diff_sum = strength_diff_avg + strength_diff_min;\n \
    \       double strength_diff_avg = strength_diff_sum / extensions_sorted.size();\n\
    \        double strength_diff_min = strength_diff_sum / extensions_sorted.size();\n\
    \        double strength_diff_max = strength_diff_sum / extensions_sorted.size();\n\
    \        double strength_diff_sum = strength_diff_avg + strength_diff_min;\n \
    \       double strength_diff_avg = strength_diff_sum / extensions_sorted.size();\n\
    \        double strength_diff_min = strength_diff_sum / extensions_sorted.size();\n\
    \        double strength_diff_max = strength_diff_sum / extensions_sorted.size();\n\
    \        double strength_diff_sum = strength_diff_avg + strength_diff_min;\n \
    \       double strength_", "        ArrayList<String> extensions_sorted = new\
    \ ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        String strongest = null;\n        for\
    \ (String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      double frac = cap - sm;\n            if (frac > strength) {\n         \
    \       strength = frac;\n                strongest = extension;\n           \
    \ }\n        }\n        return class_name + \".\" + strongest;", "        Set<String>\
    \ extensions_set = new HashSet<String>(extensions);\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extension",
  "        Set<String> extensions_set = new HashSet<String>(extensions);\n       \
    \ extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extension", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        double max_strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            double strength_extension\
    \ = cap - sm;\n            if (strength_extension > max_strength) {\n        \
    \        max_strength = strength_extension;\n            }\n            if (strength_extension\
    \ == max_strength) {\n                strength = strength_extension;\n       \
    \     }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1) + \".\" + strength;", "        ArrayList<String> extensions_sorted = new\
    \ ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int max_strength = 0;\n        String strongest_extension = null;\n \
    \       for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.length() - 1).replaceAll(\"[A-Z]\", \"\").replaceAll(\"\
    [a-z]\", \"\").length();\n            if (extension_strength > max_strength) {\n\
    \                max_strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        double strength = -1;\n        double max_strength\
    \ = -1;\n        for (String extension : extensions) {\n            int cap =\
    \ extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            double frac = cap - sm;\n            if (frac > max_strength) {\n\
    \                max_strength = frac;\n                strength = cap - sm;\n\
    \            }\n        }\n        if (strength == -1) {\n            return class_name;\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(class_name);\n\
    \        sb.append('.');\n        sb.append(extensions.get(0));\n        if (max_strength\
    \ > 0) {\n            int max_index = extensions.indexOf(extensions.get(0));\n\
    \            int min_index = max_index + 1;\n            for (int i = min_index;\
    \ i <= max_index; i++) {\n                sb.append('.');\n                sb.append(extensions.get(i));\n\
    \            }\n        }\n        return sb.toString();", "        double strength\
    \ = -1;\n        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(0, 1).length();\n   \
    \         double frac = cap - sm;\n            strength += frac;\n        }\n\
    \        double max = Math.max(strength);\n        for(String extension : extensions)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(0, 1).length();\n            double frac = cap - sm;\n\
    \            if(frac >= max) {\n                return class_name + \".\" + extension;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(0);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest = -1;\n \
    \       for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.indexOf('C') + 1).length();\n            if\
    \ (extension_strength > strongest) {\n                strongest = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);", "        double strength = -1;\n        double maxStrength = -1;\n \
    \       for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        double maxStrengthInt = Math.ceil(maxStrength);\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        double maxStrengthDouble = Math.ceil(maxStrength);\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        double maxStrengthLong = Math.ceil(maxStrength);\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        double maxStrengthFloat = Math.ceil(maxStrength);\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        double maxStrengthDouble = Math.ceil(maxStrength);\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        double maxStrengthLong = Math.ceil(maxStrength);",
  "        Set<String> extensions_set = new HashSet<String>(extensions);\n       \
    \ extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extension", "        \n        // Your code here\n        \n        return\
    \ \"\";", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            double frac = cap - sm;\n\
    \            if (frac > strength) {\n                strength = frac;\n      \
    \          strongest_extension = extension;\n            }\n        }\n      \
    \  return class_name + \".\" + strongest_extension;", "        Set<String> extensions_set\
    \ = new HashSet<String>(extensions);\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extensions_set.removeAll(Arrays.asList(\"\
    \"));\n        extensions_set.removeAll(Arrays.asList(null));\n        extension",
  "        \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n", "        ArrayList<String> extensions_sorted =\
    \ new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.get(0).length() - extensions_sorted.get(1).length();\n\
    \        double strength_sum = 0;\n        for (int i = 0; i < extensions_sorted.size();\
    \ i++) {\n            strength_sum += extensions_sorted.get(i).length();\n   \
    \     }\n        if (strength_sum > strength) {\n            return class_name\
    \ + \".\" + extensions_sorted.get(0);\n        }\n        return class_name +\
    \ \".\" + extensions_sorted.get(1);", "        double strength = -1;\n       \
    \ double maxStrength = -1;\n        for(String extension : extensions) {\n   \
    \         int cap = extension.charAt(0).toUpperCase().length();\n            int\
    \ sm = extension.charAt(0).toLowerCase().length();\n            double fraction\
    \ = cap - sm;\n            strength = Math.max(strength, fraction);\n        \
    \    maxStrength = Math.max(maxStrength, fraction);\n        }\n        double\
    \ fraction = strength / maxStrength;\n        for(String extension : extensions)\
    \ {\n            int cap = extension.charAt(0).toUpperCase().length();\n     \
    \       int sm = extension.charAt(0).toLowerCase().length();\n            double\
    \ fraction = cap - sm;\n            if(fraction == fraction) {\n             \
    \   return class_name + \".\" + extension;\n            }\n        }\n       \
    \ return class_name + \".\" + extensions.get(0);", "        Set<String> extensions_set\
    \ = new HashSet<String>(extensions);\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n                        int cap =\
    \ e.length();\n                        extensions_set.stream().filter(e -> e.matches(\"\
    [a-z]+\")).forEach(e -> {\n                            int sm = e.length();\n\
    \                            double strength = cap - sm;\n                   \
    \         if (strength > 0) {\n                                return true;\n\
    \                            }\n                        });\n                \
    \    });\n                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    return\
    \ true;\n                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    return\
    \ true;\n                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    return\
    \ true;\n                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    return\
    \ true;\n                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\"))", "        ArrayList<String> extensions_sorted = new\
    \ ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(0, 1).length();\n\
    \            if (extension_strength > strongest) {\n                strongest\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + extensions_sorted.get(extensions_sorted.size() - 1);", "        double\
    \ strength = 0;\n        double max = 0;\n        double min = 0;\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).toUpperCase().length();\n\
    \            int sm = extension.substring(0, 1).toLowerCase().length();\n    \
    \        double frac = cap - sm;\n            strength += frac;\n            if(max\
    \ < frac) max = frac;\n            if(min > frac) min = frac;\n        }\n   \
    \     double strength_avg = strength / extensions.size();\n        double strength_max\
    \ = Math.max(max, strength_avg);\n        double strength_min = Math.min(min,\
    \ strength_avg);\n        double strength_diff = strength_max - strength_min;\n\
    \        double strength_diff2 = Math.pow(strength_diff, 2);\n        double strength_diff3\
    \ = Math.pow(strength_diff, 3);\n        double strength_diff4 = Math.pow(strength_diff,\
    \ 4);\n        double strength_diff5 = Math.pow(strength_diff, 5);\n        double\
    \ strength_diff6 = Math.pow(strength_diff, 6);\n        double strength_diff7\
    \ = Math.pow(strength_diff, 7);\n        double strength_diff8 = Math.pow(strength_diff,\
    \ 8);\n        double strength_diff9 = Math.pow(strength_diff, 9);\n        double\
    \ strength_diff10 = Math.pow(strength_diff, 10);\n        double strength_diff11\
    \ = Math.pow(strength_diff, 11);\n        double strength_diff12 = Math.pow(strength_diff,\
    \ 12);\n        double strength_diff13 = Math.pow(strength_diff, 13);\n      \
    \  double strength_diff14 = Math.pow(strength_diff, 14);\n        double strength_diff15\
    \ = Math.pow(strength_diff, 15);\n        double strength_diff16 = Math.pow(strength_diff,\
    \ 16);\n        double strength_diff17 = Math.pow(strength_diff, 17);\n      \
    \  double strength_diff18 = Math.pow(strength_diff, 18);\n        double strength_diff19\
    \ = Math.pow(strength_diff, 19);\n        double strength_diff20 = Math.pow(strength_diff,\
    \ 20);\n        double strength_diff21 = Math.pow(strength_diff, 21);\n      \
    \  double strength_diff22 = Math.pow(strength_diff, 22);\n        double strength_diff23\
    \ = Math.pow(strength_diff, 23);\n        double strength_diff24 = Math.pow(strength_diff,\
    \ 24);\n        double strength_diff25 = Math.pow(strength_diff, 25);\n      \
    \  double strength_diff26 = Math.pow(strength_diff, 26);\n        double strength_diff27\
    \ = Math.pow(strength_diff, 27);\n        double strength", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for(String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            strength = cap - sm;\n  \
    \          if(strength > 0) {\n                break;\n            }\n       \
    \ }\n        if(strength == -1) {\n            throw new RuntimeException(\"No\
    \ extensions found\");\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      String strongest = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.matches(\"[A-Z]+\").length();\n\
    \            if (extension_strength > strength) {\n                strength =\
    \ extension_strength;\n                strongest = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.get(0).length() - extensions_sorted.get(1).length();\n\
    \        double strength_sum = 0;\n        for (String extension : extensions_sorted)\
    \ {\n            strength_sum += extension.length();\n        }\n        double\
    \ strength_avg = strength_sum / extensions_sorted.size();\n        double strength_min\
    \ = extensions_sorted.get(0).length();\n        for (String extension : extensions_sorted)\
    \ {\n            strength_min = Math.min(strength_min, extension.length());\n\
    \        }\n        double strength_max = extensions_sorted.get(extensions_sorted.size()\
    \ - 1).length();\n        for (String extension : extensions_sorted) {\n     \
    \       strength_max = Math.max(strength_max, extension.length());\n        }\n\
    \        double strength_diff = strength_max - strength_min;\n        double strength_diff_avg\
    \ = strength_diff / extensions_sorted.size();\n        double strength_diff_min\
    \ = strength_diff / extensions_sorted.get(extensions_sorted.size() - 1).length();\n\
    \        double strength_diff_max = strength_diff / extensions_sorted.get(extensions_sorted.size()\
    \ - 2).length();\n        double strength_diff_sum = strength_diff_avg + strength_diff_min;\n\
    \        double strength_diff_diff_avg = strength_diff_sum / extensions_sorted.size();\n\
    \        double strength_diff_diff_min = strength_diff_sum / extensions_sorted.get(extensions_sorted.size()\
    \ - 1).length();\n        double strength_diff_diff_max = strength_diff_sum /\
    \ extensions_sorted.get(extensions_sorted.size() - 2).length();\n        double\
    \ strength_diff_diff_sum = strength_diff_diff_avg + strength_diff_diff_min;\n\
    \        double strength_diff_diff_diff_avg = strength_diff_diff_sum / extensions_sorted.size();\n\
    \        double strength_diff_diff_diff_min = strength_diff_diff_sum / extensions_sorted.get(extensions_sorted.size()\
    \ - 1).length();\n        double strength_diff_diff_diff_max = strength_diff_diff_sum\
    \ / extensions_sorted.get(extensions_sorted.size() - 2).length();\n        double\
    \ strength_diff_diff_diff_sum = strength_diff_diff_diff_avg + strength_diff_diff_min;\n\
    \        double strength_diff_diff_diff_diff_avg = strength_diff_diff_diff_sum\
    \ / extensions_sorted.size();\n        double strength_diff_diff_diff_diff_min\
    \ = strength_diff_diff_diff_sum / extensions_sorted.get(extensions_sorted.size()\
    \ - ", "        double strength = 0;\n        double max = 0;\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength +=\
    \ (cap - sm);\n            max = Math.max(max, strength);\n        }\n       \
    \ double strength_percentage = strength / max;\n        for(String extension :\
    \ extensions) {\n            int cap = extension.substring(0, 1).length();\n \
    \           int sm = extension.substring(1).length();\n            strength +=\
    \ (cap - sm);\n            strength_percentage = Math.max(strength_percentage,\
    \ strength / max);\n        }\n        return class_name + \".\" + extensions.get(extensions.indexOf(extensions.get(extensions.indexOf(extension.substring(0,\
    \ 1)))))\n                + \".\" + String.format(\"%.2f\", strength_percentage);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest_extension\
    \ = -1;\n        String strongest_extension_name = \"\";\n        for (String\
    \ extension : extensions_sorted) {\n            int extension_strength = extension.substring(extension.lastIndexOf(\"\
    _\") + 1).length();\n            if (extension_strength > strongest_extension)\
    \ {\n                strongest_extension = extension_strength;\n             \
    \   strongest_extension_name = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension_name;", "        ArrayList<Integer>\
    \ strengths = new ArrayList<Integer>();\n        for(String extension : extensions)\
    \ {\n            int strength = extension.charAt(0) - extension.charAt(1);\n \
    \           strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \        int strongest = -1;\n        for(Integer strength : strengths) {\n  \
    \          if(strength > strongest) {\n                strongest = strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(strengths.indexOf(strongest));",
  "        ArrayList<Integer> strengths = new ArrayList<Integer>();\n        for(String\
    \ extension : extensions) {\n            int strength = extension.substring(extension.indexOf('C'),\
    \ extension.indexOf('C') + 1).length();\n            strengths.add(strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for(Integer strength : strengths) {\n            if(strength == strongest)\
    \ {\n                strongest = strength;\n            }\n        }\n       \
    \ return class_name + \".\" + extensions.get(strengths.indexOf(strongest));",
  "        \n        Set<String> extensions_set = new HashSet<String>(extensions);\n\
    \        \n        double strongest_extension_strength = Double.NEGATIVE_INFINITY;\n\
    \        \n        for (String extension : extensions_set) {\n            \n \
    \           String extension_class_name = extension.substring(0, extension.indexOf(\"\
    .\"));\n            \n            try {\n                Class<?> extension_class\
    \ = Class.forName(extension_class_name);\n                \n                double\
    \ extension_strength = extension_class.getSimpleName().length();\n           \
    \     \n                if (extension_strength > strongest_extension_strength)\
    \ {\n                    strongest_extension_strength = extension_strength;\n\
    \                }\n                \n            } catch (ClassNotFoundException\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   \n        if (strongest_extension_strength == Double.NEGATIVE_INFINITY) {\n\
    \            throw new RuntimeException(\"No extension found with strongest extension\
    \ strength\");\n        }\n        \n        return class_name + \".\" + extensions_set.get(extensions_set.stream().filter(s\
    \ -> s.equalsIgnoreCase(extensions_set)).findFirst().get());", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = -1;\n        String strongest = null;\n        for (String\
    \ extension : extensions_sorted) {\n            int extension_length = extension.length();\n\
    \            int extension_cap = extension_length / 2;\n            int extension_sm\
    \ = (extension_length - extension_cap) / 2;\n            int extension_strength\
    \ = extension_cap - extension_sm;\n            if (extension_strength > strength)\
    \ {\n                strength = extension_strength;\n                strongest\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest;", "        Set<String> extensions_set = new HashSet<String>(extensions);\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        ", "        Set<String> extensions_set = new HashSet<String>(extensions);\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        ", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = 0;\n\
    \        for(String extension : extensions_sorted) {\n            int cap = extension.substring(0,1).length();\n\
    \            int sm = extension.substring(1,2).length();\n            strength\
    \ += (cap - sm);\n        }\n        double strength_sorted = strength;\n    \
    \    Collections.sort(extensions_sorted);\n        double strength_second_highest\
    \ = 0;\n        for(String extension : extensions_sorted) {\n            int cap\
    \ = extension.substring(0,1).length();\n            int sm = extension.substring(1,2).length();\n\
    \            strength_second_highest += (cap - sm);\n        }\n        double\
    \ strength_second_highest_sorted = strength_second_highest;\n        double strength_second_highest_second_highest\
    \ = 0;\n        for(String extension : extensions_sorted) {\n            int cap\
    \ = extension.substring(0,1).length();\n            int sm = extension.substring(1,2).length();\n\
    \            strength_second_highest_second_highest += (cap - sm);\n        }\n\
    \        double strength_second_highest_second_highest_sorted = strength_second_highest_second_highest;\n\
    \        double strength_second_highest_second_highest_second_highest = 0;\n \
    \       for(String extension : extensions_sorted) {\n            int cap = extension.substring(0,1).length();\n\
    \            int sm = extension.substring(1,2).length();\n            strength_second_highest_second_highest_second_highest\
    \ += (cap - sm);\n        }\n        double strength_second_highest_second_highest_second_highest_sorted\
    \ = strength_second_highest_second_highest_second_highest;\n        double strength_second_highest_second_highest_second_highest_second_highest\
    \ = 0;\n        for(String extension : extensions_sorted) {\n            int cap\
    \ = extension.substring(0,1).length();\n            int sm = extension.substring(1,2).length();\n\
    \            strength_second_highest_second_highest_second_highest_second_highest\
    \ += (cap - sm);\n        }\n        double strength_second_highest_second_highest_second_highest_second_highest_sorted\
    \ = strength_second_highest_second_highest_second_highest_second_highest;\n  \
    \      double strength_second_highest_second_highest_second_highest_second_highest_second_highest\
    \ = 0;\n        for(String extension : extensions_sorted) {\n            int cap\
    \ = extension.substring(0,1).length();\n            int sm = extension.substring(1,2).length();\n\
    \            strength_second_highest_second_highest_", "        double strength\
    \ = 0;\n        double maxStrength = 0;\n        for(String extension : extensions)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            strength += cap - sm;\n \
    \           if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        double maxStrengthInt = Math.ceil(maxStrength);\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength += cap - sm;\n            if(strength == maxStrengthInt) {\n \
    \               return class_name + \".\" + extension;\n            }\n      \
    \  }\n        return class_name + \".\" + extensions.get(0);", "        double\
    \ strength = 0;\n        for(String extension : extensions) {\n            int\
    \ cap = extension.charAt(0).toUpperCase().length();\n            int sm = extension.charAt(0).toLowerCase().length();\n\
    \            strength += (cap - sm);\n        }\n        double strength_sorted\
    \ = Double.MIN_VALUE;\n        for(String extension : extensions) {\n        \
    \    int cap = extension.charAt(0).toUpperCase().length();\n            int sm\
    \ = extension.charAt(0).toLowerCase().length();\n            strength_sorted +=\
    \ (cap - sm);\n        }\n        double strength_sorted_sorted = Double.MIN_VALUE;\n\
    \        for(String extension : extensions) {\n            int cap = extension.charAt(0).toUpperCase().length();\n\
    \            int sm = extension.charAt(0).toLowerCase().length();\n          \
    \  strength_sorted_sorted += (cap - sm);\n        }\n        double strength_sorted_sorted_sorted\
    \ = Double.MIN_VALUE;\n        for(String extension : extensions) {\n        \
    \    int cap = extension.charAt(0).toUpperCase().length();\n            int sm\
    \ = extension.charAt(0).toLowerCase().length();\n            strength_sorted_sorted_sorted\
    \ += (cap - sm);\n        }\n        if(strength_sorted == strength_sorted_sorted)\
    \ {\n            if(strength_sorted_sorted == strength_sorted_sorted_sorted) {\n\
    \                return class_name + \".\" + extensions.get(0);\n            }\n\
    \            return class_name + \".\" + extensions.get(1);\n        }\n     \
    \   return class_name + \".\" + extensions.get(0);", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).toUpperCase().length();\n\
    \            int sm = extension.substring(0, 1).toLowerCase().length();\n    \
    \        double fraction = cap - sm;\n            if (strength < fraction) {\n\
    \                strength = fraction;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions_sorted.get(extensions_sorted.size() - 1);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = 0;\n   \
    \     String strongest = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_length = extension.length();\n            int class_length\
    \ = class_name.length();\n            int extension_strength = extension_length\
    \ - class_length;\n            if (extension_strength > strength) {\n        \
    \        strength = extension_strength;\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            double extension_strength = extension.matches(\"[A-Z]+\").length()\
    \ - extension.matches(\"[a-z]+\").length();\n            if (extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            \
    \    strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        Set<String> extensions_set\
    \ = new HashSet<String>(extensions);\n        extensions_set.stream().sorted().forEach(e\
    \ -> {\n            int cap = e.length();\n            int sm = e.toLowerCase().length();\n\
    \            double strength = cap - sm;\n            System.out.println(strength);\n\
    \        });\n        return class_name + extensions_set.stream().sorted().findFirst().get();",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.size();\n\
    \        double cap = class_name.substring(0, 1).toUpperCase().length();\n   \
    \     double sm = class_name.substring(0, 1).toLowerCase().length();\n       \
    \ double strength_frac = strength - cap - sm;\n        String strongest_extension\
    \ = null;\n        if (strength_frac > 0) {\n            strongest_extension =\
    \ class_name + \".\" + extensions_sorted.get(0);\n        }\n        if (strength_frac\
    \ < 0) {\n            strongest_extension = class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);\n        }\n        return strongest_extension;", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.get(extensions_sorted.size() - 1).length()\
    \ - extensions_sorted.get(extensions_sorted.size() - 1).length();\n        double\
    \ strength_sorted = strength;\n        double strength_max = 0;\n        double\
    \ strength_max_index = 0;\n        for (int i = 0; i < extensions_sorted.size();\
    \ i++) {\n            if (strength_sorted > strength_max) {\n                strength_max\
    \ = strength_sorted;\n                strength_max_index = i;\n            }\n\
    \            strength_sorted = strength_sorted + extensions_sorted.get(i).length();\n\
    \        }\n        return class_name + \".\" + extensions_sorted.get(strength_max_index);",
  "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n  \
    \      Collections.sort(extensions_sorted);\n        double strength = -1;\n \
    \       String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            String extension_class = class_name + \".\" + extension;\n  \
    \          try {\n                Class<?> clazz = Class.forName(extension_class);\n\
    \                Method method = clazz.getMethod(\"getStrength\");\n         \
    \       strength = (Double) method.invoke(clazz);\n            } catch (ClassNotFoundException\
    \ | NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\
    \ | InvocationTargetException e) {\n                e.printStackTrace();\n   \
    \         }\n            if (strength > 0) {\n                strongest_extension\
    \ = extension;\n                break;\n            }\n        }\n        return\
    \ strongest_extension;", "        Map<String, Integer> extensions_map = new HashMap<>();\n\
    \        for (String extension : extensions) {\n            int extension_strength\
    \ = extension.substring(extension.indexOf('C') - 1, extension.indexOf('S')).chars().filter(Character::isUpperCase).count()\
    \ - extension.substring(extension.indexOf('C') - 1, extension.indexOf('S')).chars().filter(Character::isLowerCase).count();\n\
    \            extensions_map.put(extension, extension_strength);\n        }\n \
    \       Integer max_strength = Collections.max(extensions_map.values());\n   \
    \     ArrayList<String> max_extensions = new ArrayList<>();\n        for (String\
    \ extension : extensions_map.keySet()) {\n            if (extensions_map.get(extension)\
    \ == max_strength) {\n                max_extensions.add(extension);\n       \
    \     }\n        }\n        return class_name + \".\" + max_extensions.get(0);",
  "        Set<String> extensions_set = new HashSet<String>(extensions);\n       \
    \ extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extensions_set.removeAll(Arrays.asList(\"\"));\n        extensions_set.removeAll(Arrays.asList(null));\n\
    \        extension", "        ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest_extension\
    \ = -1;\n        for (String extension : extensions_sorted) {\n            int\
    \ extension_strength = extension.matches(\"[A-Z]*\").length();\n            int\
    \ class_strength = class_name.matches(\"[A-Z]*\").length();\n            int strength\
    \ = extension_strength - class_strength;\n            if (strength > strongest_extension)\
    \ {\n                strongest_extension = strength;\n            }\n        }\n\
    \        return class_name + \".\" + extensions_sorted.get(strongest_extension);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        for(String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength = Math.max(strength, (cap - sm));\n        }\n        return class_name\
    \ + \".\" + extensions_sorted.get(extensions_sorted.size() - 1);", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for(String extension : extensions_sorted)\
    \ {\n            double extension_strength = extension.matches(\"[A-Z]+\").length/extension.matches(\"\
    [a-z]+\").length;\n            if(extension_strength > strength) {\n         \
    \       strength = extension_strength;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions_sorted.get(extensions_sorted.size()-1);", " \
    \       Set<String> extensions_set = new HashSet<String>(extensions);\n      \
    \  extensions_set.stream().sorted().forEach(e -> {\n            int cap = e.replaceAll(\"\
    [A-Z]\", \"\").length();\n            int sm = e.replaceAll(\"[a-z]\", \"\").length();\n\
    \            double strength = cap - sm;\n            extensions_set.stream().filter(e\
    \ -> e.equals(e)).sorted().findFirst().ifPresent(e -> {\n                if (strength\
    \ > e.replaceAll(\"[A-Z]\", \"\").length() - e.replaceAll(\"[a-z]\", \"\").length())\
    \ {\n                    strength = e.replaceAll(\"[A-Z]\", \"\").length() - e.replaceAll(\"\
    [a-z]\", \"\").length();\n                }\n            });\n        });\n  \
    \      return class_name + \".\" + extensions_set.stream().sorted().findFirst().get();",
  "        Set<String> extensions_set = new HashSet<String>(extensions);\n       \
    \ extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n    \
    \    extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n \
    \       extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        extensions_set.stream().sorted().forEach(e -> System.out.println(e));\n\
    \        ", "        ArrayList<Integer> strengths = new ArrayList<Integer>();\n\
    \        for (String extension : extensions) {\n            int strength = extension.matches(\"\
    [A-Z]+\").length() - extension.matches(\"[a-z]+\").length();\n            strengths.add(strength);\n\
    \        }\n        Collections.sort(strengths);\n        int strongest = strengths.get(0);\n\
    \        for (String extension : extensions) {\n            int strength = extension.matches(\"\
    [A-Z]+\").length() - extension.matches(\"[a-z]+\").length();\n            if (strength\
    \ == strongest) {\n                return class_name + \".\" + extension;\n  \
    \          }\n        }\n        return class_name + \".\" + extensions.get(0);",
  "        Map<String, Integer> extension_strength = new HashMap<>();\n        for\
    \ (String extension : extensions) {\n            int strength = extension.charAt(0)\
    \ - extension.charAt(1);\n            extension_strength.put(extension, strength);\n\
    \        }\n        Collections.sort(extension_strength.values());\n        int\
    \ strongest = extension_strength.values().get(0);\n        ArrayList<String> strongest_extensions\
    \ = new ArrayList<>();\n        for (Map.Entry<String, Integer> entry : extension_strength.entrySet())\
    \ {\n            if (entry.getValue() == strongest) {\n                strongest_extensions.add(entry.getKey());\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extensions.get(0);",
  "        Set<String> extensions_set = new HashSet<String>(extensions);\n       \
    \ extensions_set.removeAll(Arrays.asList(class_name));\n        double strongest_extension_strength\
    \ = -1;\n        for(String extension : extensions_set) {\n            String\
    \ extension_class_name = class_name + \".\" + extension;\n            try {\n\
    \                Class<?> extension_class = Class.forName(extension_class_name);\n\
    \                Method method_getName = extension_class.getMethod(\"getName\"\
    );\n                String extension_name = (String)method_getName.invoke(extension_class);\n\
    \                double extension_strength = extension_name.length() - extension_name.toLowerCase().length();\n\
    \                if(extension_strength > strongest_extension_strength) {\n   \
    \                 strongest_extension_strength = extension_strength;\n       \
    \         }\n            } catch (ClassNotFoundException | NoSuchMethodException\
    \ | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   if(strongest_extension_strength == -1) {\n            return class_name;\n\
    \        } else {\n            return class_name + \".\" + extensions.get(extensions_set.stream().sorted().toArray()[0]);\n\
    \        }", "        double strength = -1;\n        double maxStrength = -1;\n\
    \        for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            double fraction = cap - sm;\n            strength += fraction;\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        \n        double maxStrengthInt = Math.ceil(maxStrength);\n\
    \        \n        for(String extension : extensions) {\n            int cap =\
    \ extension.substring(0, 1).toUpperCase().length();\n            int sm = extension.substring(0,\
    \ 1).toLowerCase().length();\n            double fraction = cap - sm;\n      \
    \      strength += fraction;\n            if(strength > maxStrength) {\n     \
    \           maxStrength = strength;\n            }\n        }\n        \n    \
    \    double maxStrengthInt2 = Math.ceil(maxStrength);\n        \n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).toUpperCase().length();\n\
    \            int sm = extension.substring(0, 1).toLowerCase().length();\n    \
    \        double fraction = cap - sm;\n            strength += fraction;\n    \
    \        if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        \n        double maxStrengthInt3 = Math.ceil(maxStrength);\n\
    \        \n        for(String extension : extensions) {\n            int cap =\
    \ extension.substring(0, 1).toUpperCase().length();\n            int sm = extension.substring(0,\
    \ 1).toLowerCase().length();\n            double fraction = cap - sm;\n      \
    \      strength += fraction;\n            if(strength > maxStrength) {\n     \
    \           maxStrength = strength;\n            }\n        }\n        \n    \
    \    double maxStrengthInt4 = Math.ceil(maxStrength);\n        \n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).toUpperCase().length();\n\
    \            int sm = extension.substring(0, 1).toLowerCase().length();\n    \
    \        double fraction = cap - sm;\n            strength += fraction;\n    \
    \        if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        \n        double maxStrengthInt5 = Math.ceil(maxStrength);\n\
    \        \n        for(String extension : extensions) {\n            int cap =\
    \ extension.substring(0, 1).toUpperCase().length();\n            int sm = extension.substring(0,\
    \ 1).toLowerCase().length();\n            double fraction = cap - sm;\n      \
    \      strength += fraction;\n            if(strength > maxStrength) {\n", " \
    \       ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = extension.substring(0,\
    \ 1).length();\n            double fraction = cap - sm;\n            if (strength\
    \ == -1 || strength > fraction) {\n                strength = fraction;\n    \
    \            strongest_extension = extension;\n            }\n        }\n    \
    \    return class_name + \".\" + strongest_extension;", "        Set<String> extensions_set\
    \ = new HashSet<>(extensions);\n        extensions_set.stream().filter(e -> e.matches(\"\
    [A-Z]+\")).forEach(e -> extensions_set.add(e));\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[a-z]+\")).forEach(e -> extensions_set.add(e));\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+[a-z]+\")).forEach(e -> extensions_set.add(e));\n     \
    \   extensions_set.stream().filter(e -> e.matches(\"[A-Z]+[A-Z]+\")).forEach(e\
    \ -> extensions_set.add(e));\n        extensions_set.stream().filter(e -> e.matches(\"\
    [A-Z]+[a-z]+[A-Z]+\")).forEach(e -> extensions_set.add(e));\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+[A-Z]+[a-z]+\")).forEach(e -> extensions_set.add(e));\n\
    \        extensions_set.stream().filter(e -> e.matches(\"[A-Z]+[A-Z]+[A-Z]+\"\
    )).forEach(e -> extensions_set.add(e));\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+[a-z]+[A-Z]+[a-z]+\")).forEach(e -> extensions_set.add(e));\n\
    \        extensions_set.stream().filter(e -> e.matches(\"[A-Z]+[A-Z]+[a-z]+[A-Z]+[a-z]+\"\
    )).forEach(e -> extensions_set.add(e));\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+[A-Z]+[A-Z]+[a-z]+[A-Z]+[a-z]+\")).forEach(e -> extensions_set.add(e));\n\
    \        extensions_set.stream().filter(e -> e.matches(\"[A-Z]+[a-z]+[A-Z]+[A-Z]+[A-Z]+[a-z]+\"\
    )).forEach(e -> extensions_set.add(e));\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+[A-Z]+[a-z]+[A-Z]+[A-Z]+[A-Z]+[a-z]+\")).forEach(e -> extensions_set.add(e));\n\
    \        extensions_set.stream().filter(e -> e.matches(\"[A-Z]+[A-Z]+[A-Z]+[a-z]+[A-Z]+[A-Z]+[A-Z]+[a-z]+\"\
    )).forEach(e -> extensions_set.add(e));\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+[A-Z]+[A-Z]+[A-Z]+[a-z]+[A-Z]+[A-Z]+[A-Z]+[a-z]+\")).forEach(e\
    \ -> extensions_set.add(e));\n        extensions_set.stream().filter(e -> e.matches(\"\
    [A-Z]+[A-Z]+[A-Z]+[A-Z]+[A-Z]+[a-z]+[A-Z]+[A-Z]+[A-Z]+[a-z]+\")).forEach(e ->\
    \ extensions_set.add(", "        double strength = 0;\n        double maxStrength\
    \ = 0;\n        double maxExtension = 0;\n        double maxExtensionIndex = 0;\n\
    \        double maxExtensionStrength = 0;\n        double maxExtensionExtension\
    \ = 0;\n        double maxExtensionExtensionIndex = 0;\n        double maxExtensionExtensionStrength\
    \ = 0;\n        double maxExtensionExtensionExtension = 0;\n        double maxExtensionExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionExtensionStrength = 0;\n        double\
    \ maxExtensionExtensionExtensionExtension = 0;\n        double maxExtensionExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionExtensionStrength = 0;\n        double\
    \ maxExtensionExtensionExtensionExtension = 0;\n        double maxExtensionExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionExtensionStrength = 0;\n        double\
    \ maxExtensionExtensionExtensionExtension = 0;\n        double maxExtensionExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionExtensionStrength = 0;\n        double\
    \ maxExtensionExtensionExtensionExtension = 0;\n        double maxExtensionExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionExtensionStrength = 0;\n        double\
    \ maxExtensionExtensionExtensionExtension = 0;\n        double maxExtensionExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionExtensionStrength = 0;\n        double\
    \ maxExtensionExtensionExtensionExtension = 0;\n        double maxExtensionExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionExtensionStrength = 0;\n        double\
    \ maxExtensionExtensionExtensionExtension = 0;\n        double maxExtensionExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionExtensionStrength = 0;\n        double\
    \ maxExtensionExtensionExtensionExtension = 0;\n        double maxExtensionExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionExtensionStrength = 0;\n        double\
    \ maxExtensionExtensionExtensionExtension = 0;\n        double maxExtensionExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionExtensionStrength = 0;\n        double\
    \ maxExtensionExtensionExtensionExtension = 0;\n        double maxExtensionExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionExtensionStrength = 0;\n        double\
    \ maxExtensionExtensionExtensionExtension = 0;\n        double maxExtensionExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionExtensionStrength = 0;\n        double\
    \ maxExtensionExtensionExtensionExtension = 0;\n        double maxExtensionExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionExtensionStrength = 0;\n        double\
    \ maxExtensionExtensionExtensionExtension = 0;\n        double maxExtensionExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionExtensionStrength = 0;\n        double\
    \ maxExtensionExtensionExtensionExtension = 0;\n        double maxExtensionExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionExtensionStrength = 0;\n        double\
    \ maxExtensionExtensionExtensionExtension = 0;\n        double maxExtensionExtensionExtensionIndex\
    \ = 0;\n        double maxExtensionExtensionExtensionStrength = 0;\n        double\
    \ maxExtensionExtensionExtensionExtension = 0;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = -1;\n        for(String extension : extensions_sorted)\
    \ {\n            int cap = extension.substring(0, 1).length();\n            int\
    \ sm = extension.substring(1).length();\n            double fraction = cap - sm;\n\
    \            strength = Math.max(strength, fraction);\n        }\n        return\
    \ class_name + \".\" + extensions_sorted.get(extensions_sorted.size() - 1);",
  "        \n        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        \n        double strength\
    \ = 0;\n        \n        for(int i = 0; i < extensions_sorted.size(); i++) {\n\
    \            \n            String extension = extensions_sorted.get(i);\n    \
    \        \n            int cap = extension.length();\n            int sm = extension.toUpperCase().length();\n\
    \            \n            strength += (cap - sm);\n        }\n        \n    \
    \    double strength_sorted = strength;\n        \n        for(int i = 0; i <\
    \ extensions_sorted.size(); i++) {\n            \n            String extension\
    \ = extensions_sorted.get(i);\n            \n            int cap = extension.length();\n\
    \            int sm = extension.toUpperCase().length();\n            \n      \
    \      strength_sorted -= (cap - sm);\n        }\n        \n        if(strength_sorted\
    \ < 0) {\n            \n            return class_name + \".\" + extensions_sorted.get(0);\n\
    \        }\n        \n        return class_name + \".\" + extensions_sorted.get(0);",
  "        Set<String> extensions_set = new HashSet<>(extensions);\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n                        int cap =\
    \ e.length();\n                        extensions_set.stream().filter(e -> e.matches(\"\
    [a-z]+\")).forEach(e -> {\n                            int sm = e.length();\n\
    \                            double strength = cap - sm;\n                   \
    \         if (strength > 0) {\n                                return e;\n   \
    \                         }\n                        });\n                   \
    \ });\n                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    return\
    \ e;\n                }\n            });\n        });\n        return class_name\
    \ + \".\" + extensions_set.stream().filter(e -> e.matches(\"[A-Z]+\")).collect(Collectors.toList()).get(0);",
  "        \n        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        \n        double strength\
    \ = -1;\n        \n        for (String extension : extensions_sorted) {\n    \
    \        \n            int cap = extension.substring(0,1).length();\n        \
    \    int sm = extension.substring(1,2).length();\n            \n            double\
    \ frac = cap - sm;\n            \n            if (frac > strength) {\n       \
    \         strength = frac;\n            }\n        }\n        \n        return\
    \ class_name + \".\" + extensions_sorted.get(extensions_sorted.size()-1);", " \
    \       double strength = 0;\n        for(String extension : extensions) {\n \
    \           int cap = extension.substring(0, 1).length();\n            int sm\
    \ = extension.substring(1).length();\n            strength += (cap - sm) / cap;\n\
    \        }\n        Collections.sort(extensions);\n        for(String extension\
    \ : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength +=\
    \ (cap - sm) / cap;\n        }\n        double strength_sorted = Double.parseDouble(String.valueOf(strength));\n\
    \        double strength_sorted_reversed = Double.parseDouble(String.valueOf(strength_sorted));\n\
    \        double strength_sorted_reversed_reversed = Double.parseDouble(String.valueOf(strength_sorted_reversed));\n\
    \        double strength_sorted_reversed_reversed_reversed = Double.parseDouble(String.valueOf(strength_sorted_reversed_reversed));\n\
    \        double strength_sorted_reversed_reversed_reversed_reversed = Double.parseDouble(String.valueOf(strength_sorted_reversed_reversed_reversed));\n\
    \        double strength_sorted_reversed_reversed_reversed_reversed_reversed =\
    \ Double.parseDouble(String.valueOf(strength_sorted_reversed_reversed_reversed_reversed));\n\
    \        double strength_sorted_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = Double.parseDouble(String.valueOf(strength_sorted_reversed_reversed_reversed_reversed_reversed));\n\
    \        double strength_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = Double.parseDouble(String.valueOf(strength_sorted_reversed_reversed_reversed_reversed_reversed_reversed));\n\
    \        double strength_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = Double.parseDouble(String.valueOf(strength_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed));\n\
    \        double strength_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = Double.parseDouble(String.valueOf(strength_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed));\n\
    \        double strength_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = Double.parseDouble(String.valueOf(strength_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed));\n\
    \        double strength_sorted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse",
  "        \n        Set<String> extensions_set = new HashSet<String>(extensions);\n\
    \        \n        double strength = -1;\n        \n        for(String extension\
    \ : extensions_set) {\n            \n            int cap = extension.substring(0,1).length();\n\
    \            int sm = extension.substring(1,2).length();\n            \n     \
    \       double fraction = cap - sm;\n            \n            if((strength ==\
    \ -1) || (fraction > strength)) {\n                \n                strength\
    \ = fraction;\n                \n            }\n            \n        }\n    \
    \    \n        return class_name + \".\" + extensions_set.stream().filter(e ->\
    \ e.substring(0,1).equals(extension.substring(0,1))).findFirst().get();\n    \
    \    ", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        for(String extension : extensions_sorted) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      strength = (double)cap - (double)sm;\n            if(strength > 0) {\n\
    \                return class_name + \".\" + extension;\n            }\n     \
    \   }\n        return class_name;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.size();\n        double cap = class_name.substring(0,\
    \ 1).toUpperCase().length();\n        double sm = class_name.substring(0, 1).toLowerCase().length();\n\
    \        double strength_frac = strength / cap;\n        double strength_frac_sm\
    \ = strength_frac - sm;\n        String strongest_extension = null;\n        if\
    \ (strength_frac_sm == 0) {\n            strongest_extension = class_name + \"\
    .\" + extensions_sorted.get(0);\n        } else if (strength_frac_sm < 0) {\n\
    \            strongest_extension = class_name + \".\" + extensions_sorted.get(0);\n\
    \            strength_frac_sm = strength_frac_sm + 1;\n        } else if (strength_frac_sm\
    \ > 0) {\n            strongest_extension = class_name + \".\" + extensions_sorted.get(0);\n\
    \            strength_frac_sm = strength_frac_sm - 1;\n        }\n        return\
    \ strongest_extension;", "        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(String ext : extensions) {\n            int cap = ext.length();\n\
    \            int sm = ext.replaceAll(\"[^A-Z]\", \"\").length();\n           \
    \ map.put(cap, sm);\n        }\n        \n        int maxStrength = -1;\n    \
    \    for(Integer i : map.keySet()) {\n            int strength = map.get(i);\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        \n        StringBuilder sb = new StringBuilder();\n\
    \        sb.append(class_name);\n        \n        for(Integer i : map.keySet())\
    \ {\n            int strength = map.get(i);\n            if(strength == maxStrength)\
    \ {\n                sb.append(\".\");\n                sb.append(extensions.get(i));\n\
    \            }\n        }\n        \n        return sb.toString();", "       \
    \ Set<String> extensions_set = new HashSet<String>(extensions);\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    extensions_set.add(e);\n\
    \                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    extensions_set.add(e);\n\
    \                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    extensions_set.add(e);\n\
    \                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    extensions_set.add(e);\n\
    \                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    extensions_set.add(e);\n\
    \                }\n            });\n        });\n        extensions_set.stream().filter(e\
    \ -> e.matches(\"[A-Z]+\")).forEach(e -> {\n            int cap = e.length();\n\
    \            extensions_set.stream().filter(e -> e.matches(\"[a-z]+\")).forEach(e\
    \ -> {\n                int sm = e.length();\n                double strength\
    \ = cap - sm;\n                if (strength > 0) {\n                    extensions_set.add(",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int cap = extension.length();\n            int sm = class_name.substring(class_name.lastIndexOf('.')+1,\
    \ class_name.lastIndexOf('.')+1+cap).length();\n            double fraction =\
    \ cap - sm;\n            if (strength == -1 || strength > fraction) {\n      \
    \          strength = fraction;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        double strength = 0;\n        double maxStrength = 0;\n        for(String\
    \ extension : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            strength +=\
    \ (cap - sm);\n        }\n        strength = strength / extensions.size();\n \
    \       for(String extension : extensions) {\n            int cap = extension.substring(0,\
    \ 1).length();\n            int sm = extension.substring(1).length();\n      \
    \      if(cap - sm > maxStrength) {\n                maxStrength = cap - sm;\n\
    \            }\n        }\n        for(String extension : extensions) {\n    \
    \        int cap = extension.substring(0, 1).length();\n            int sm = extension.substring(1).length();\n\
    \            if(cap - sm == maxStrength) {\n                return class_name\
    \ + \".\" + extension;\n            }\n        }\n        return class_name +\
    \ \".\" + extensions.get(0);", "        ArrayList<String> extensions_sorted =\
    \ new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest_extension = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(0, 1).length();\n\
    \            if (extension_strength > strongest_extension) {\n               \
    \ strongest_extension = extension_strength;\n            }\n        }\n      \
    \  return class_name + \".\" + extensions_sorted.get(strongest_extension);", " \
    \       ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n \
    \       Collections.sort(extensions_sorted);\n        double strength = extensions_sorted.stream().mapToDouble(s\
    \ -> s.matches(\"[A-Z]\") ? s.length() : -s.length()).sum();\n        double strength_sorted\
    \ = extensions_sorted.stream().mapToDouble(s -> s.matches(\"[A-Z]\") ? s.length()\
    \ : -s.length()).sorted().findFirst().get();\n        double strength_sorted_2\
    \ = extensions_sorted.stream().mapToDouble(s -> s.matches(\"[A-Z]\") ? s.length()\
    \ : -s.length()).sorted().findFirst().get();\n        double strength_sorted_3\
    \ = extensions_sorted.stream().mapToDouble(s -> s.matches(\"[A-Z]\") ? s.length()\
    \ : -s.length()).sorted().findFirst().get();\n        double strength_sorted_4\
    \ = extensions_sorted.stream().mapToDouble(s -> s.matches(\"[A-Z]\") ? s.length()\
    \ : -s.length()).sorted().findFirst().get();\n        double strength_sorted_5\
    \ = extensions_sorted.stream().mapToDouble(s -> s.matches(\"[A-Z]\") ? s.length()\
    \ : -s.length()).sorted().findFirst().get();\n        double strength_sorted_6\
    \ = extensions_sorted.stream().mapToDouble(s -> s.matches(\"[A-Z]\") ? s.length()\
    \ : -s.length()).sorted().findFirst().get();\n        double strength_sorted_7\
    \ = extensions_sorted.stream().mapToDouble(s -> s.matches(\"[A-Z]\") ? s.length()\
    \ : -s.length()).sorted().findFirst().get();\n        double strength_sorted_8\
    \ = extensions_sorted.stream().mapToDouble(s -> s.matches(\"[A-Z]\") ? s.length()\
    \ : -s.length()).sorted().findFirst().get();\n        double strength_sorted_9\
    \ = extensions_sorted.stream().mapToDouble(s -> s.matches(\"[A-Z]\") ? s.length()\
    \ : -s.length()).sorted().findFirst().get();\n        double strength_sorted_10\
    \ = extensions_sorted.stream().mapToDouble(s -> s.matches(\"[A-Z]\") ? s.length()\
    \ : -s.length()).sorted().findFirst().get();\n        double strength_sorted_11\
    \ = extensions_sorted.stream().mapToDouble(s -> s.matches(\"[A-Z]\") ? s.length()\
    \ : -s.length()).sorted().findFirst().get();\n        double strength_sorted_12\
    \ = extensions_sorted.stream().mapToDouble(s -> s.matches(\"[A-Z]\") ? s.length()\
    \ : -s.length()).sorted().findFirst().get();\n        double strength_sorted_13\
    \ = extensions_sorted.stream().mapToDouble(s -> s.matches(\"[A-Z]\") ? s.length()\
    \ : -s.length", "        double strength = -1;\n        double maxStrength = -1;\n\
    \        double minStrength = Double.MAX_VALUE;\n        for (String extension\
    \ : extensions) {\n            int cap = extension.substring(0, 1).length();\n\
    \            int sm = extension.substring(1).length();\n            double fraction\
    \ = cap - sm;\n            if (strength == -1 || fraction > strength) {\n    \
    \            strength = fraction;\n                maxStrength = fraction;\n \
    \               minStrength = Double.MAX_VALUE;\n            }\n            if\
    \ (fraction < minStrength) {\n                minStrength = fraction;\n      \
    \      }\n        }\n        double strength_fraction = strength / maxStrength;\n\
    \        double strength_fraction_rounded = Math.round(strength_fraction * 100.0)\
    \ / 100.0;\n        return class_name + \".\" + extensions.get(extensions.indexOf(extensions.get(0))\
    \ + 1) + \".\" + strength_fraction_rounded;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strongest = -1;\n        String strongest_extension = null;\n   \
    \     for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.substring(extension.indexOf('C') + 1).length();\n            if\
    \ (extension_strength > strongest) {\n                strongest = extension_strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n", "        HashMap<String, Integer> extension_strength = new HashMap<String,\
    \ Integer>();\n        for (String extension : extensions) {\n            int\
    \ extension_strength_int = 0;\n            String extension_lowercase = extension.toLowerCase();\n\
    \            String extension_capital = extension_lowercase.toUpperCase();\n \
    \           String extension_lowercase2 = extension_lowercase.toLowerCase();\n\
    \            String extension_capital2 = extension_capital.toUpperCase();\n  \
    \          int extension_strength_int2 = extension_strength_int;\n           \
    \ int extension_strength_int3 = extension_strength_int2;\n            int extension_strength_int4\
    \ = extension_strength_int3;\n            int extension_strength_int5 = extension_strength_int4;\n\
    \            int extension_strength_int6 = extension_strength_int5;\n        \
    \    int extension_strength_int7 = extension_strength_int6;\n            int extension_strength_int8\
    \ = extension_strength_int7;\n            int extension_strength_int9 = extension_strength_int8;\n\
    \            int extension_strength_int10 = extension_strength_int9;\n       \
    \     int extension_strength_int11 = extension_strength_int10;\n            int\
    \ extension_strength_int12 = extension_strength_int11;\n            int extension_strength_int13\
    \ = extension_strength_int12;\n            int extension_strength_int14 = extension_strength_int13;\n\
    \            int extension_strength_int15 = extension_strength_int14;\n      \
    \      int extension_strength_int16 = extension_strength_int15;\n            int\
    \ extension_strength_int17 = extension_strength_int16;\n            int extension_strength_int18\
    \ = extension_strength_int17;\n            int extension_strength_int19 = extension_strength_int18;\n\
    \            int extension_strength_int20 = extension_strength_int19;\n      \
    \      int extension_strength_int21 = extension_strength_int20;\n            int\
    \ extension_strength_int22 = extension_strength_int21;\n            int extension_strength_int23\
    \ = extension_strength_int22;\n            int extension_strength_int24 = extension_strength_int23;\n\
    \            int extension_strength_int25 = extension_strength_int24;\n      \
    \      int extension_strength_int26 = extension_strength_int25;\n            int\
    \ extension_strength_int27 = extension_strength_int26;\n            int extension_strength_int28\
    \ = extension_strength_int27;\n            int extension_strength", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        double strength = extensions_sorted.stream().mapToDouble(s -> s.matches(\"\
    [A-Z]\") ? s.length() - 1 : s.matches(\"[a-z]\") ? s.length() : 0).max().getAsDouble();\n\
    \        String[] parts = class_name.split(\"\\\\.\");\n        parts[parts.length-1]\
    \ = String.format(\"%s%s\", parts[parts.length-1], String.format(\"%\" + strength\
    \ + \"s\", \"\"));\n        return String.join(\".\", parts);", "        ArrayList<String>\
    \ extensions_sorted = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int max_strength = -1;\n        String strongest_extension = null;\n\
    \        for (String extension : extensions_sorted) {\n            int extension_strength\
    \ = extension.matches(\"[A-Z]+\").length() - extension.matches(\"[a-z]+\").length();\n\
    \            if (extension_strength > max_strength) {\n                max_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strength = -1;\n  \
    \      String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"[^A-Z]\", \"\").length();\n            if (extension_strength\
    \ > strength) {\n                strength = extension_strength;\n            \
    \    strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int strength = -1;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.matches(\"[A-Z]+\").length()\
    \ - extension.matches(\"[a-z]+\").length();\n            if (strength == -1 ||\
    \ extension_strength > strength) {\n                strength = extension_strength;\n\
    \            }\n        }\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);", "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        double strength = -1;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            String extension_class = class_name + \".\" + extension;\n  \
    \          try {\n                Class<?> extension_class = Class.forName(extension_class);\n\
    \                Method method = extension_class.getMethod(\"main\", String[].class);\n\
    \                String[] args = new String[2];\n                args[0] = class_name;\n\
    \                args[1] = extension;\n                Object result = method.invoke(extension_class,\
    \ args);\n                strength = (double) result;\n            } catch (ClassNotFoundException\
    \ | NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\
    \ | InvocationTargetException e) {\n                e.printStackTrace();\n   \
    \         }\n            if (strength > 0) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return strongest_extension;",
  "        Map<String, Integer> extension_strengths = new HashMap<>();\n        for\
    \ (String extension : extensions) {\n            int strength = extension.substring(0,\
    \ 1).length();\n            extension_strengths.put(extension, strength);\n  \
    \      }\n        Collections.sort(extension_strengths.values());\n        int\
    \ strongest_strength = extension_strengths.values().get(0);\n        ArrayList<String>\
    \ strongest_extensions = new ArrayList<>();\n        for (Map.Entry<String, Integer>\
    \ entry : extension_strengths.entrySet()) {\n            if (entry.getValue()\
    \ == strongest_strength) {\n                strongest_extensions.add(entry.getKey());\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extensions.get(0);",
  "        ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int strongest = -1;\n \
    \       String strongest_extension = null;\n        for (String extension : extensions_sorted)\
    \ {\n            int extension_strength = extension.substring(extension.length()\
    \ - 1).replaceAll(\"[^A-Z]\", \"\").length();\n            if (extension_strength\
    \ > strongest) {\n                strongest = extension_strength;\n          \
    \      strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;"]
stop_tokens:
- "\n    }\n"
