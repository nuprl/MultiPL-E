language: java
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        Arrays.sort(arr, (o1, o2) -> {\n            long ones = o1 & 1l;\n  \
    \          long zeros = o2 & 1l;\n            if (ones > zeros) {\n          \
    \      return -1;\n            } else if (ones < zeros) {\n                return\
    \ 1;\n            } else {\n                return 0;\n            }\n       \
    \ });\n        Arrays.sort(arr, (o1, o2) -> {\n            long ones = o1 & 1l;\n\
    \            long zeros = o2 & 1l;\n            if (ones > zeros) {\n        \
    \        return 1;\n            } else if (ones < zeros) {\n                return\
    \ -1;\n            } else {\n                return 0;\n            }\n      \
    \  });\n        Arrays.sort(arr, (o1, o2) -> {\n            long ones = o1 & 1l;\n\
    \            long zeros = o2 & 1l;\n            if (ones > zeros) {\n        \
    \        return -1;\n            } else if (ones < zeros) {\n                return\
    \ 1;\n            } else {\n                return 0;\n            }\n       \
    \ });\n        Arrays.sort(arr, (o1, o2) -> {\n            long ones = o1 & 1l;\n\
    \            long zeros = o2 & 1l;\n            if (ones > zeros) {\n        \
    \        return 1;\n            } else if (ones < zeros) {\n                return\
    \ -1;\n            } else {\n                return 0;\n            }\n      \
    \  });\n        Arrays.sort(arr, (o1, o2) -> {\n            long ones = o1 & 1l;\n\
    \            long zeros = o2 & 1l;\n            if (ones > zeros) {\n        \
    \        return -1;\n            } else if (ones < zeros) {\n                return\
    \ 1;\n            } else {\n                return 0;\n            }\n       \
    \ });\n        Arrays.sort(arr, (o1, o2) -> {\n            long ones = o1 & 1l;\n\
    \            long zeros = o2 & 1l;\n            if (ones > zeros) {\n        \
    \        return 1;\n            } else if (ones < zeros) {\n                return\
    \ -1;\n            } else {\n                return 0;\n            }\n      \
    \  });\n        Arrays.sort(arr, (o1, o2) -> {\n            long ones = o1 & 1l;\n\
    \            long zeros = o2 & 1l;\n            if (ones > zeros) {\n        \
    \        return -1;\n            } else if (ones < zeros) {\n                return\
    \ 1;\n            } else {\n                return 0;\n            }\n       \
    \ });\n        Arrays.sort(arr, (o1, o2) -> {\n            long ones = o1 & 1l;\n\
    \            long zeros = o2 & 1l;\n            if (ones > zeros) {\n        \
    \        return 1;\n            } else if (ones < zeros) {\n                return\
    \ -1;\n            } else {\n                return 0;\n            }\n      \
    \  });\n        Arrays.sort(arr, (o1, o2) -> {\n            long ones = o1 & 1l;\n\
    \            long zeros = o2 & 1l;\n            if (ones > zeros) {\n        \
    \        return -1;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyi7cj8_n.java:115: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpyi7cj8_n.java:115: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpyi7cj8_n.java:115: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpyi7cj8_n.java:115: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpyi7cj8_n.java:115: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpyi7cj8_n.java:126: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmpyi7cj8_n.java:127: error: reached end of file while parsing\n7\
    \ errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long i : arr) {\n            if (i\
    \ > 0) {\n                ones += i;\n            }\n            if (i > 10) {\n\
    \                tens += i;\n            }\n            if (i > 100) {\n     \
    \           hundreds += i;\n            }\n            if (i > 1000) {\n     \
    \           thousands += i;\n            }\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        if (onesCount > onesCount)\
    \ {\n            onesCount = onesCount;\n        }\n        if (tensCount > tensCount)\
    \ {\n            tensCount = tensCount;\n        }\n        if (hundredsCount\
    \ > hundredsCount) {\n            hundredsCount = hundredsCount;\n        }\n\
    \        if (thousandsCount > thousandsCount) {\n            thousandsCount =\
    \ thousandsCount;\n        }\n        long onesCount2 = ones;\n        long tensCount2\
    \ = tens;\n        long hundredsCount2 = hundreds;\n        long thousandsCount2\
    \ = thousands;\n        if (onesCount2 > onesCount2) {\n            onesCount2\
    \ = onesCount2;\n        }\n        if (tensCount2 > tensCount2) {\n         \
    \   tensCount2 = tensCount2;\n        }\n        if (hundredsCount2 > hundredsCount2)\
    \ {\n            hundredsCount2 = hundredsCount2;\n        }\n        if (thousandsCount2\
    \ > thousandsCount2) {\n            thousandsCount2 = thousandsCount2;\n     \
    \   }\n        long onesCount3 = ones;\n        long tensCount3 = tens;\n    \
    \    long hundredsCount3 = hundreds;\n        long thousandsCount3 = thousands;\n\
    \        if (onesCount3 > onesCount3) {\n            onesCount3 = onesCount3;\n\
    \        }\n        if (tensCount3 > tensCount3) {\n            tensCount3 = tensCount3;\n\
    \        }\n        if (hundredsCount3 > hundredsCount3) {\n            hundredsCount3\
    \ = hundredsCount3;\n        }\n        if (thousandsCount3 > thousandsCount3)\
    \ {\n            thousandsCount3 = thousandsCount3;\n        }\n        long onesCount4\
    \ = ones;\n        long \n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwbvs46ui.java:88: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpwbvs46ui.java:88: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long i : arr) {\n\
    \            if (i == 1l) {\n                ones++;\n            } else {\n \
    \               zeros++;\n            }\n        }\n        long maxOnes = ones;\n\
    \        long maxZeros = zeros;\n        for (Long i : arr) {\n            if\
    \ (i == 1l) {\n                ones--;\n            } else {\n               \
    \ zeros--;\n            }\n        }\n        if (maxOnes > maxZeros) {\n    \
    \        long temp = maxOnes;\n            maxOnes = maxZeros;\n            maxZeros\
    \ = temp;\n        }\n        long maxOnesDecimal = maxOnes / Math.pow(10, maxOnes\
    \ % Math.log10(10));\n        long maxZerosDecimal = maxZeros / Math.pow(10, maxZeros\
    \ % Math.log10(10));\n        long maxDecimal = Math.max(maxOnesDecimal, maxZerosDecimal);\n\
    \        long maxDecimalDecimal = maxDecimal / Math.pow(10, maxDecimal % Math.log10(10));\n\
    \        long maxDecimalDecimalDecimal = maxDecimalDecimal / Math.pow(10, maxDecimalDecimal\
    \ % Math.log10(10));\n        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimal\
    \ / Math.pow(10, maxDecimalDecimalDecimal % Math.log10(10));\n        long maxDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimal / Math.pow(10, maxDecimalDecimalDecimalDecimal\
    \ % Math.log10(10));\n        long maxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimal / Math.pow(10, maxDecimalDecimalDecimalDecimalDecimal\
    \ % Math.log10(10));\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10, maxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ % Math.log10(10));\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10, maxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ % Math.log10(10));\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ maxDecimalDecimalDecimalDecimalDecimalDecimal % Math.log10(10));\n        long\
    \ maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm_dolyy8.java:55: error: ';' expected\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal \n    \
    \                                                                            \
    \                                                                    ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenThousands = 0;\n        long oneThousands\
    \ = 0;\n        long oneHundreds = 0;\n        long oneThousandHundreds = 0;\n\
    \        long oneHundredThousands = 0;\n        long oneThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundreds = 0;\n        long oneThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousands = 0;\n\
    \        long oneHundredThousandHundredThousandHundredThousandHundreds = 0;\n\
    \        long oneHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredTh\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuqs3p2mq.java:44: error: ';' expected\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredTh\n\
    \                                                                            \
    \                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long l : arr) {\n            if (l\
    \ == 1) {\n                ones++;\n            } else if (l == 10) {\n      \
    \          tens++;\n            } else if (l == 100) {\n                hundreds++;\n\
    \            } else if (l == 1000) {\n                thousands++;\n         \
    \   } else {\n                res.add(l);\n            }\n        }\n        long\
    \ onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount = 0;\n\
    \        long thousandsCount = 0;\n        for (long l : arr) {\n            if\
    \ (l == 1) {\n                onesCount++;\n            } else if (l == 10) {\n\
    \                tensCount++;\n            } else if (l == 100) {\n          \
    \      hundredsCount++;\n            } else if (l == 1000) {\n               \
    \ thousandsCount++;\n            }\n        }\n        long onesCount2 = ones;\n\
    \        long tensCount2 = tens;\n        long hundredsCount2 = hundreds;\n  \
    \      long thousandsCount2 = thousands;\n        long onesCount3 = ones;\n  \
    \      long tensCount3 = tens;\n        long hundredsCount3 = hundreds;\n    \
    \    long thousandsCount3 = thousands;\n        long onesCount4 = ones;\n    \
    \    long tensCount4 = tens;\n        long hundredsCount4 = hundreds;\n      \
    \  long thousandsCount4 = thousands;\n        long onesCount5 = ones;\n      \
    \  long tensCount5 = tens;\n        long hundredsCount5 = hundreds;\n        long\
    \ thousandsCount5 = thousands;\n        long onesCount6 = ones;\n        long\
    \ tensCount6 = tens;\n        long hundredsCount6 = hundreds;\n        long thousandsCount6\
    \ = thousands;\n        long onesCount7 = ones;\n        long tensCount7 = tens;\n\
    \        long hundredsCount7 = hundreds;\n        long thousandsCount7 = thousands;\n\
    \        long onesCount8 = ones;\n        long tensCount8 = tens;\n        long\
    \ hundredsCount8 = hundreds;\n        long thousandsCount8 = thousands;\n    \
    \    long onesCount9 = ones;\n        long tensCount9 = tens;\n        long hundredsCount9\
    \ = 100;\n        long thousandsCount9 = 1000;\n        long onesCount10 = ones;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphljskvh9.java:87: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        long ones = 0;\n        long tens\
    \ = 0;\n        long hundreds = 0;\n        long thousands = 0;\n        long\
    \ tenths = 0;\n        long oneths = 0;\n        long tenth = 0;\n        long\
    \ oneth = 0;\n        long tenths = 0;\n        long oneths = 0;\n        long\
    \ oneth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n       \
    \ long onethth = 0;\n        long tenththth = 0;\n        long onethth = 0;\n\
    \        long tenthths = 0;\n        long onethths = 0;\n        long onethth\
    \ = 0;\n        long tenththths = 0;\n        long onethths = 0;\n        long\
    \ onethth = 0;\n        long tenththths = 0;\n        long onethths = 0;\n   \
    \     long onethth = 0;\n        long tenththth = 0;\n        long onethths =\
    \ 0;\n        long onethth = 0;\n        long tenththths = 0;\n        long onethths\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethths\
    \ = 0;\n        long onethth = 0;\n        long tenththths = 0;\n        long\
    \ onethths = 0;\n        long onethth = 0;\n        long tenththth = 0;\n    \
    \    long onethths = 0;\n        long onethth = 0;\n        long tenththths =\
    \ 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththths\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththths\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththths\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththths\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththths\
    \ = 0;\n        long onethths = 0;\n        long \n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc77om477.java:92: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpc77om477.java:92: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0, zeros = 0;\n        for (Long l : arr) {\n           \
    \ if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n            else\
    \ res.add(l);\n        }\n        if (ones > zeros) {\n            Collections.sort(res);\n\
    \            return res;\n        }\n        Collections.sort(res, Comparator.comparingLong(Long::longValue));\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsh_5cj46.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0, tens = 0, hundreds = 0, thousands = 0, tenThousands =\
    \ 0, hundredThousands = 0, thousandThousands = 0;\n        for (long i : arr)\
    \ {\n            int bits = Integer.bitCount(i);\n            if (bits == 1) {\n\
    \                ones++;\n            } else if (bits == 2) {\n              \
    \  tens++;\n            } else if (bits == 4) {\n                hundreds++;\n\
    \            } else if (bits == 8) {\n                thousands++;\n         \
    \   } else if (bits == 16) {\n                tenThousands++;\n            } else\
    \ if (bits == 32) {\n                hundredThousands++;\n            } else if\
    \ (bits == 64) {\n                thousandThousands++;\n            }\n      \
    \  }\n        long onesCount = ones;\n        long tensCount = tens;\n       \
    \ long hundredsCount = hundreds;\n        long thousandsCount = thousands;\n \
    \       long tenThousandsCount = tenThousands;\n        long hundredThousandsCount\
    \ = hundredThousands;\n        long thousandThousandsCount = thousandThousands;\n\
    \        long onesCount2 = onesCount;\n        long tensCount2 = tensCount;\n\
    \        long hundredsCount2 = hundredsCount;\n        long thousandsCount2 =\
    \ thousandsCount;\n        long tenThousandsCount2 = tenThousandsCount;\n    \
    \    long hundredThousandsCount2 = hundredThousandsCount;\n        long thousandThousandsCount2\
    \ = thousandThousandsCount;\n        long onesCount3 = onesCount2;\n        long\
    \ tensCount3 = tensCount2;\n        long hundredsCount3 = hundredsCount2;\n  \
    \      long thousandsCount3 = thousandsCount2;\n        long tenThousandsCount3\
    \ = tenThousandsCount2;\n        long hundredThousandsCount3 = hundredThousandsCount2;\n\
    \        long thousandThousandsCount3 = thousandThousandsCount2;\n        long\
    \ onesCount4 = onesCount3;\n        long tensCount4 = tensCount3;\n        long\
    \ hundredsCount4 = hundredsCount3;\n        long thousandsCount4 = thousandsCount3;\n\
    \        long tenThousandsCount4 = tenThousandsCount3;\n        long hundredThous\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1x33bwuf.java:66: error: ';' expected\n        long hundredThous\n\
    \                         ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        long onesDecimal = ones / 10;\n        long tensDecimal = tens\
    \ / 10;\n        long hundredsDecimal = (hundreds / 10) * 100;\n        long thousandsDecimal\
    \ = (thousands / 10) * 1000;\n        long onesDecimalDecimal = onesDecimal /\
    \ 10;\n        long tensDecimalDecimal = tensDecimal / 10;\n        long hundredsDecimalDecimal\
    \ = (hundredsDecimal / 10) * 100;\n        long thousandsDecimalDecimal = (thousandsDecimal\
    \ / 10) * 1000;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal /\
    \ 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal / 10;\n   \
    \     long hundredsDecimalDecimalDecimal = (hundredsDecimalDecimal / 10) * 100;\n\
    \        long thousandsDecimalDecimalDecimal = (thousandsDecimalDecimal / 10)\
    \ * 1000;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimal\
    \ / 10) * 100;\n        long thousandsDecimalDecimalDecimalDecimal = (thousandsDecimalDecimalDecimal\
    \ / 10) * 1000;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimalDecimal\
    \ / 10) * 100;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = (thousandsDecimalDecimalDecimalDecimal\
    \ / 10) * 1000;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = ten\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1tko4ejx.java:52: error: ';' expected\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = ten\n                                                                 ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        long onesDecimal = ones / 10;\n        long tensDecimal = tens\
    \ / 10;\n        long hundredsDecimal = hundreds / 10;\n        long thousandsDecimal\
    \ = thousands / 10;\n        long onesDecimalDecimal = onesDecimal / 10;\n   \
    \     long tensDecimalDecimal = tensDecimal / 10;\n        long hundredsDecimalDecimal\
    \ = hundredsDecimal / 10;\n        long thousandsDecimalDecimal = thousandsDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal / 10;\n \
    \       long tensDecimalDecimalDecimal = tensDecimalDecimal / 10;\n        long\
    \ hundredsDecimalDecimalDecimal = hundredsDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimal\
    \ = thousandsDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6qfcr9px.java:53: error: ';' expected\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \                                                               ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Arrays.sort(arr);\n        long ones = 0;\n        long tens = 0;\n \
    \       long hundreds = 0;\n        long thousands = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        for (long i : arr) {\n            if (i\
    \ % 10 == 0) {\n                tens++;\n            } else if (i % 100 == 0)\
    \ {\n                hundreds++;\n            } else if (i % 1000 == 0) {\n  \
    \              thousands++;\n            } else if (i % 10000 == 0) {\n      \
    \          tenths++;\n            } else if (i % 100000 == 0) {\n            \
    \    oneths++;\n            } else if (i % 1000000 == 0) {\n                ones++;\n\
    \            } else {\n                result.add(i);\n            }\n       \
    \ }\n        ArrayList<Long> onesArr = new ArrayList<Long>();\n        onesArr.add(ones);\n\
    \        onesArr.add(oneths);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp86a6aoj_.java:87: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp86a6aoj_.java:87: error: ';' expected\n    }\n     ^\n/tmp/tmp86a6aoj_.java:88:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp86a6aoj_.java:88: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp86a6aoj_.java:88: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp86a6aoj_.java:88: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp86a6aoj_.java:99: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            if (l == 10l) tens++;\n            if (l == 100l)\
    \ hundreds++;\n            if (l == 1000l) thousands++;\n        }\n        long\
    \ onesTens = ones * 10l;\n        long onesHundreds = ones * 100l;\n        long\
    \ onesThousands = ones * 1000l;\n        long tensHundreds = tens * 100l;\n  \
    \      long tensThousands = tens * 1000l;\n        long hundredsThousands = hundreds\
    \ * 1000l;\n        long thousandsThousands = thousands * 1000l;\n        long\
    \ onesTensHundreds = onesTens * 100l;\n        long onesTensThousands = onesTens\
    \ * 1000l;\n        long onesHundredsThousands = onesHundreds * 1000l;\n     \
    \   long onesThousandsThousands = onesThousands * 1000l;\n        long tensHundredsThousands\
    \ = tensHundreds * 1000l;\n        long tensThousandsThousands = tensThousands\
    \ * 1000l;\n        long hundredsThousandsThousands = hundredsThousands * 1000l;\n\
    \        long thousandsThousandsThousands = thousandsThousands * 1000l;\n    \
    \    long onesTensHundredsThousands = onesTensHundreds * 100l;\n        long onesTensThousandsThousands\
    \ = onesTensThousands * 1000l;\n        long onesHundredsThousandsThousands =\
    \ onesHundredsThousands * 1000l;\n        long onesThousandsThousandsThousands\
    \ = onesThousandsThousands * 1000l;\n        long tensHundredsThousandsThousands\
    \ = tensHundredsThousands * 1000l;\n        long tensThousandsThousandsThousands\
    \ = tensThousandsThousands * 1000l;\n        long hundreds\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5cp27z99.java:52: error: ';' expected\n        long hundreds\n\
    \                     ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0, zeros = 0;\n        for (long i : arr) {\n           \
    \ if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n            else\
    \ result.add(i);\n        }\n        if (ones > zeros) {\n            Collections.sort(result,\
    \ new Comparator<Long>() {\n                public int compare(Long o1, Long o2)\
    \ {\n                    return Long.compare(ones, zeros);\n                }\n\
    \            });\n        } else {\n            Collections.sort(result, new Comparator<Long>()\
    \ {\n                public int compare(Long o1, Long o2) {\n                \
    \    return Long.compare(zeros, ones);\n                }\n            });\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpav0tzxpk.java:30: error: local variables referenced from an inner\
    \ class must be final or effectively final\n                    return Long.compare(ones,\
    \ zeros);\n                                        ^\n/tmp/tmpav0tzxpk.java:30:\
    \ error: local variables referenced from an inner class must be final or effectively\
    \ final\n                    return Long.compare(ones, zeros);\n             \
    \                                 ^\n/tmp/tmpav0tzxpk.java:36: error: local variables\
    \ referenced from an inner class must be final or effectively final\n        \
    \            return Long.compare(zeros, ones);\n                             \
    \           ^\n/tmp/tmpav0tzxpk.java:36: error: local variables referenced from\
    \ an inner class must be final or effectively final\n                    return\
    \ Long.compare(zeros, ones);\n                                               ^\n\
    4 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        if (ones < tens) result.addAll(Arrays.asList(1l, tens, hundreds,\
    \ thousands));\n        else if (ones < hundreds) result.addAll(Arrays.asList(ones,\
    \ tens, hundreds, thousands));\n        else if (ones < thousands) result.addAll(Arrays.asList(ones,\
    \ tens, hundreds, thousands));\n        else if (tens < hundreds) result.addAll(Arrays.asList(ones,\
    \ tens, hundreds, thousands));\n        else if (tens < thousands) result.addAll(Arrays.asList(ones,\
    \ tens, hundreds, thousands));\n        else if (hundreds < thousands) result.addAll(Arrays.asList(ones,\
    \ tens, hundreds, thousands));\n        else result.addAll(Arrays.asList(ones,\
    \ tens, hundreds, thousands));\n        Collections.sort(result);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpem7l7fyq.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththths = 0;\n        long onethths = 0;\n        long\
    \ tenththth = 0;\n        long onethth = 0;\n        long tenththth = 0;\n   \
    \     long onethth = 0;\n        long tenththth = 0;\n        long onethth = 0;\n\
    \        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long oneth\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8bl3911k.java:90: error: ';' expected\n        long oneth\n   \
    \               ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0, tens = 0, hundreds = 0, thousands = 0, tenths = 0, hundredths\
    \ = 0, thousandths = 0;\n        for (long i : arr) {\n            if (i < 0)\
    \ {\n                result.add(-i);\n            } else {\n                long\
    \ binary = Long.parseLong(Long.toBinaryString(i), 2);\n                ones +=\
    \ (binary & 1L);\n                tens += (binary >> 1L) & 1L;\n             \
    \   hundreds += (binary >> 2L) & 1L;\n                thousands += (binary >>\
    \ 3L) & 1L;\n                tenths += (binary >> 4L) & 1L;\n                hundredths\
    \ += (binary >> 5L) & 1L;\n                thousandths += (binary >> 6L) & 1L;\n\
    \            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        long tenthsCount = tenths;\n        long hundredthsCount\
    \ = hundredths;\n        long thousandthsCount = thousandths;\n        if (onesCount\
    \ > tensCount) {\n            result.add(onesCount);\n            result.add(tensCount);\n\
    \        } else if (onesCount < tensCount) {\n            result.add(tensCount);\n\
    \            result.add(onesCount);\n        }\n        if (hundredsCount > thousandsCount)\
    \ {\n            result.add(hundredsCount);\n            result.add(thousandsCount);\n\
    \        } else if (hundredsCount < thousandsCount) {\n            result.add(thousandsCount);\n\
    \            result.add(hundredsCount);\n        }\n        if (tenthsCount >\
    \ hundredthsCount) {\n            result.add(tenthsCount);\n            result.add(hundredthsCount);\n\
    \        } else if (tenthsCount < hundredthsCount) {\n            result.add(hundredthsCount);\n\
    \            result.add(tenthsCount);\n        }\n        if (thousandthsCount\
    \ > hundredthsCount) {\n            result.add(thousandthsCount);\n          \
    \  result.add(hundredthsCount);\n        } else if (thousandthsCount < hundredthsCount)\
    \ {\n            result.add(hundredthsCount);\n            result.add(thousandthsCount);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7g4f5nqa.java:74)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n\
    \            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n  \
    \          else result.add(l);\n        }\n        long onesMax = Long.parseLong(Long.toBinaryString(ones));\n\
    \        long zerosMax = Long.parseLong(Long.toBinaryString(zeros));\n       \
    \ long onesMin = Long.parseLong(Long.toBinaryString(onesMax));\n        long zerosMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax));\n        long onesDiff = onesMax\
    \ - onesMin;\n        long zerosDiff = zerosMax - zerosMin;\n        if (onesDiff\
    \ > zerosDiff) {\n            Collections.sort(result, new Comparator<Long>()\
    \ {\n                public int compare(Long o1, Long o2) {\n                \
    \    return Long.compare(o1, o2);\n                }\n            });\n      \
    \  } else {\n            Collections.sort(result, new Comparator<Long>() {\n \
    \               public int compare(Long o1, Long o2) {\n                    return\
    \ Long.compare(o2, o1);\n                }\n            });\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l,\
    \ (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9k6wtnib.java:50)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num > 100 && num < 1000) {\n                thousands++;\n\
    \            }\n        }\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      for (long num : arr) {\n            if (num == 1) {\n                onesCount++;\n\
    \            } else if (num == 10) {\n                tensCount++;\n         \
    \   } else if (num == 100) {\n                hundredsCount++;\n            }\
    \ else if (num > 100 && num < 1000) {\n                thousandsCount++;\n   \
    \         }\n        }\n        long onesCountInt = onesCount;\n        long tensCountInt\
    \ = tensCount;\n        long hundredsCountInt = hundredsCount;\n        long thousandsCountInt\
    \ = thousandsCount;\n        long onesCountLong = onesCount;\n        long tensCountLong\
    \ = tensCount;\n        long hundredsCountLong = hundredsCount;\n        long\
    \ thousandsCountLong = thousandsCount;\n        long onesCountDouble = onesCount;\n\
    \        long tensCountDouble = tensCount;\n        long hundredsCountDouble =\
    \ hundredsCount;\n        long thousandsCountDouble = thousandsCount;\n      \
    \  long onesCountFloat = onesCount;\n        long tensCountFloat = tensCount;\n\
    \        long hundredsCountFloat = hundredsCount;\n        long thousandsCountFloat\
    \ = thousandsCount;\n        long onesCountBigDecimal = onesCount;\n        long\
    \ tensCountBigDecimal = tensCount;\n        long hundredsCountBigDecimal = hundredsCount;\n\
    \        long thousandsCountBigDecimal = thousandsCount;\n        long onesCountBigInteger\
    \ = onesCount;\n        long tensCountBigInteger = tensCount;\n        long hundredsCountBigInteger\
    \ = hundredsCount;\n        long thousandsCountBigInteger = thousandsCount;\n\
    \        long onesCountBigDecimalDouble = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnk2vtwcc.java:76: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpnk2vtwcc.java:77: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpnk2vtwcc.java:77: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpnk2vtwcc.java:77:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpnk2vtwcc.java:77: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpnk2vtwcc.java:77:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpnk2vtwcc.java:88: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num > 100 && num < 1000) {\n                thousands++;\n\
    \            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        if (onesCount > tensCount) {\n            onesCount =\
    \ tensCount;\n        }\n        if (onesCount > hundredsCount) {\n          \
    \  onesCount = hundredsCount;\n        }\n        if (onesCount > thousandsCount)\
    \ {\n            onesCount = thousandsCount;\n        }\n        if (tensCount\
    \ > hundredsCount) {\n            tensCount = hundredsCount;\n        }\n    \
    \    if (tensCount > thousandsCount) {\n            tensCount = thousandsCount;\n\
    \        }\n        if (hundredsCount > thousandsCount) {\n            hundredsCount\
    \ = thousandsCount;\n        }\n        if (hundredsCount > onesCount) {\n   \
    \         hundredsCount = onesCount;\n        }\n        if (thousandsCount >\
    \ onesCount) {\n            thousandsCount = onesCount;\n        }\n        if\
    \ (thousandsCount > tensCount) {\n            thousandsCount = tensCount;\n  \
    \      }\n        if (thousandsCount > hundredsCount) {\n            thousandsCount\
    \ = hundredsCount;\n        }\n        if (onesCount > hundredsCount) {\n    \
    \        onesCount = hundredsCount;\n        }\n        if (onesCount > thousandsCount)\
    \ {\n            onesCount = thousandsCount;\n        }\n        if (tensCount\
    \ > thousandsCount) {\n            tensCount = thousandsCount;\n        }\n  \
    \      if (hundredsCount > thousandsCount) {\n            hundredsCount = thousandsCount;\n\
    \        }\n        if (hundredsCount > onesCount) {\n            hundredsCount\
    \ = onesCount;\n        }\n        if (thousandsCount > onesCount) {\n       \
    \     thousandsCount = onesCount;\n        }\n        if (thousandsCount > tensCount)\
    \ {\n            thous\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8_vqxxb_.java:89: error: not a statement\n            thous\n \
    \           ^\n/tmp/tmp8_vqxxb_.java:89: error: ';' expected\n            thous\n\
    \                 ^\n/tmp/tmp8_vqxxb_.java:91: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp8_vqxxb_.java:91:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp8_vqxxb_.java:91: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp8_vqxxb_.java:91: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp8_vqxxb_.java:91: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp8_vqxxb_.java:102: error: reached end of file while parsing\n\
    }\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // In this Kata, you have to sort an array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    // For similar number of ones, sort based on decimal\
    \ value.\n    // It must be implemented like this:\n    // >>> sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l,\
    \ (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
    \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long>\
    \ sortArray(ArrayList<Long> arr) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0, tens = 0, hundreds = 0, thousands = 0, tenths = 0, hundredths\
    \ = 0, thousandths = 0;\n        for (Long l : arr) {\n            if (l == 1l)\
    \ ones++;\n            if (l == 10l) tens++;\n            if (l == 100l) hundreds++;\n\
    \            if (l == 1000l) thousands++;\n            if (l == 10000l) tenths++;\n\
    \            if (l == 100000l) hundredths++;\n            if (l == 1000000l) thousandths++;\n\
    \        }\n        if (ones < tens) res.addAll(Arrays.asList(1l, tens, hundreds,\
    \ thousands, tenths, hundredths, thousandths));\n        else if (ones < hundreds)\
    \ res.addAll(Arrays.asList(1l, tens, hundreds, thousands, tenths, hundredths));\n\
    \        else if (ones < thousands) res.addAll(Arrays.asList(1l, tens, hundreds,\
    \ thousands));\n        else if (ones < tenths) res.addAll(Arrays.asList(1l, tens,\
    \ hundreds, thousands, tenths));\n        else if (ones < hundredths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands, tenths));\n        else if (ones < thousandths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands));\n        else if (ones < tenths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands, tenths));\n        else if (ones < hundredths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands, tenths));\n        else if (ones < thousandths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands));\n        else if (ones < tenths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands, tenths));\n        else if (ones < hundredths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands, tenths));\n        else if (ones < thousandths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands));\n        else if (ones < tenths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands, tenths));\n        else if (ones < hundredths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands, tenths));\n        else if (\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)3l, (long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
    \ (long)-3l, (long)-4l, (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)77l,\
    \ (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)4l, (long)4l, (long)3l,\
    \ (long)3l, (long)5l, (long)5l, (long)5l, (long)7l, (long)77l)))));\n    assert(sortArray((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)44l, (long)12l, (long)32l,\
    \ (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l, (long)3l,\
    \ (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)4l, (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpff5axi7m.java:46: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpff5axi7m.java:47: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpff5axi7m.java:47: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpff5axi7m.java:47:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpff5axi7m.java:47: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpff5axi7m.java:47:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpff5axi7m.java:58: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
