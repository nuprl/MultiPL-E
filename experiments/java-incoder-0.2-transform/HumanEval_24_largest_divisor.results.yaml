language: java
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n            if (n %\
    \ i == 0) {\n                long divisor = i;\n                while (divisor\
    \ < n && n % divisor == 0) {\n                    divisor++;\n               \
    \ }\n                if (divisor > largestDivisor) {\n                    largestDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return largestDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv1morgsj.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 0;\n\
    \        long maxDividend = 0;\n        for (long i = 1; i < n; i++) {\n     \
    \       long divisor = i;\n            while (divisor < n && n % divisor == 0)\
    \ {\n                divisor++;\n            }\n            if (divisor > maxDivisor)\
    \ {\n                maxDivisor = divisor;\n                maxDividend = i;\n\
    \            }\n        }\n        return maxDividend;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4xais5k1.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpixf53xm9.java:28)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = n;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpixf53xm9.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 0;\n\
    \        long divisor = 1;\n        while (divisor <= n) {\n            if (n\
    \ % divisor == 0) {\n                maxDivisor = divisor;\n            }\n  \
    \          divisor++;\n        }\n        return maxDivisor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0uy_l7ec.java:24)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 1;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long divisor = 2; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                long currentDivisor = divisor;\n        \
    \        while (n % currentDivisor == 0) {\n                    currentDivisor++;\n\
    \                }\n                if (currentDivisor > maxDivisor) {\n     \
    \               maxDivisor = currentDivisor;\n                }\n            }\n\
    \        }\n        return maxDivisor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiz4s7jrf.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 0;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkwfy2cno.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpixf53xm9.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpixf53xm9.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpixf53xm9.java:28)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = n;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n            if (n %\
    \ i == 0) {\n                long divisor = i;\n                while (divisor\
    \ < n && n % divisor == 0) {\n                    divisor++;\n               \
    \ }\n                if (divisor > largestDivisor) {\n                    largestDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return largestDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv1morgsj.java:28)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 1;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsy6ti22o.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (divisor\
    \ < n && n % divisor == 0) {\n                    divisor++;\n               \
    \ }\n                if (divisor > largestDivisor) {\n                    largestDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return largestDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpstj0tit3.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 1;\n\
    \        long currentDivisor = 1;\n        long currentDivisorFactor = 1;\n  \
    \      long currentDivisorFactorFactor = 1;\n        long currentDivisorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkfxrogrm.java:43: error: ';' expected\n        long currentDivisorFactorFactorFactorFactorFactorFactor\n\
    \                                                               ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 1;\n\
    \        long currentDivisor = 1;\n        while (currentDivisor <= n) {\n   \
    \         if (n % currentDivisor == 0) {\n                maxDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return maxDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr_yfdfvj.java:24)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
