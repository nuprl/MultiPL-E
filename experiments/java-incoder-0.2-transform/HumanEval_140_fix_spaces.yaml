name: HumanEval_140_fix_spaces
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"\
  Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n   \
  \ // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\"\
  \ Example 3\"))\n    // (\"_Example-3\")\n    public static String fixSpaces(String\
  \ text) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(fixSpaces((\"\
  Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
  Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
  Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
  Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
  )));\n    }\n\n}\n"
completions: ['        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        String[] words = text.split(\" \");\n        StringBuilder sb\
    \ = new StringBuilder();\n        boolean first = true;\n        for (String word\
    \ : words) {\n            if (first) {\n                first = false;\n     \
    \       } else {\n                sb.append(\" \");\n            }\n         \
    \   sb.append(word.replaceAll(\"\\\\s+\", \"-\"));\n        }\n        return\
    \ sb.toString();", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  "        StringBuilder sb = new StringBuilder();\n        boolean isSpace = false;\n\
    \        boolean isConsecutive = false;\n        for (int i = 0; i < text.length();\
    \ i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n\
    \                if (isSpace) {\n                    isConsecutive = true;\n \
    \               } else {\n                    isSpace = true;\n              \
    \  }\n            } else {\n                if (isSpace) {\n                 \
    \   isSpace = false;\n                } else {\n                    isConsecutive\
    \ = false;\n                }\n                sb.append(c);\n            }\n\
    \        }\n        if (isConsecutive) {\n            sb.insert(0, \"_\");\n \
    \       }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "        StringBuilder\
    \ sb = new StringBuilder();\n        boolean space = false;\n        for (int\
    \ i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n   \
    \         if (c == ' ') {\n                if (!space) {\n                   \
    \ space = true;\n                    sb.append('_');\n                } else {\n\
    \                    space = false;\n                    sb.append('-');\n   \
    \             }\n            } else {\n                sb.append(c);\n       \
    \     }\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  "        StringBuilder sb = new StringBuilder();\n        boolean first = true;\n\
    \        for(int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if(c == ' ') {\n                if(first) {\n                   \
    \ first = false;\n                } else {\n                    sb.append('_');\n\
    \                }\n            } else {\n                sb.append(c);\n    \
    \        }\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        StringBuilder sb = new StringBuilder();\n        boolean isConsecutive\
    \ = false;\n        boolean isFirst = true;\n        for (int i = 0; i < text.length();\
    \ i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n\
    \                if (isFirst) {\n                    isFirst = false;\n      \
    \          } else {\n                    isConsecutive = true;\n             \
    \   }\n            } else {\n                if (isConsecutive) {\n          \
    \          sb.append(\"-\");\n                    isConsecutive = false;\n   \
    \             }\n                sb.append(c);\n            }\n        }\n   \
    \     return sb.toString();", "        String[] words = text.split(\" \");\n \
    \       StringBuilder sb = new StringBuilder();\n        boolean first = true;\n\
    \        for (String word : words) {\n            if (first) {\n             \
    \   first = false;\n            } else {\n                sb.append(\" \");\n\
    \            }\n            sb.append(word.replaceAll(\"\\\\s+\", \"-\"));\n \
    \       }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', "        StringBuilder sb = new StringBuilder(text);\n\
    \        boolean isConsecutive = false;\n        for(int i = 0; i < sb.length();\
    \ i++) {\n            char c = sb.charAt(i);\n            if (c == ' ') {\n  \
    \              if (isConsecutive) {\n                    sb.setCharAt(i, '_');\n\
    \                } else {\n                    sb.setCharAt(i, ' ');\n       \
    \         }\n                isConsecutive = true;\n            } else {\n   \
    \             isConsecutive = false;\n            }\n        }\n        return\
    \ sb.toString();", '        return text.replaceAll("\\s+", "_");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s+", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  "        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String word : words) {\n            if (sb.length() > 0) {\n   \
    \             sb.append(\" \");\n            }\n            sb.append(word);\n\
    \        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_");', "        StringBuilder sb = new StringBuilder();\n        boolean isConsecutive\
    \ = false;\n        for (int i = 0; i < text.length(); i++) {\n            char\
    \ c = text.charAt(i);\n            if (c == ' ') {\n                isConsecutive\
    \ = true;\n                sb.append(c);\n            } else {\n             \
    \   if (isConsecutive) {\n                    sb.append(c);\n                \
    \    isConsecutive = false;\n                } else {\n                    sb.append(Character.toLowerCase(c));\n\
    \                }\n            }\n        }\n        return sb.toString();",
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s+", "-");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  "        StringBuilder sb = new StringBuilder();\n        boolean first = true;\n\
    \        for(int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if(c == ' ') {\n                if(first) {\n                   \
    \ first = false;\n                } else {\n                    sb.append('_');\n\
    \                }\n            } else {\n                sb.append(c);\n    \
    \        }\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  "        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean first = true;\n        for (String word : words) {\n        \
    \    if (first) {\n                first = false;\n            } else {\n    \
    \            sb.append(\" \");\n            }\n            sb.append(word);\n\
    \        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_");', "        String[] words = text.split(\"\
    \ \");\n        StringBuilder sb = new StringBuilder();\n        boolean first\
    \ = true;\n        for (String word : words) {\n            if (first) {\n   \
    \             first = false;\n            } else {\n                sb.append(\"\
    \ \");\n            }\n            sb.append(word);\n        }\n        return\
    \ sb.toString();", "        String[] words = text.split(\" \");\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (String word : words) {\n           \
    \ if (sb.length() > 0) {\n                sb.append(\" \");\n            }\n \
    \           sb.append(word);\n        }\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "        String[] words\
    \ = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n    \
    \    for (String word : words) {\n            sb.append(word.replaceAll(\"\\\\\
    s+\", \"_\"));\n            if (sb.length() > 2) {\n                sb.setCharAt(sb.length()\
    \ - 1, '-');\n            }\n        }\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "   \
    \     String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < words.length; i++) {\n            sb.append(words[i]).append(\"\
    \ \");\n        }\n        return sb.toString();", "        StringBuilder sb =\
    \ new StringBuilder(text);\n        StringBuilder sb2 = new StringBuilder();\n\
    \        boolean space = false;\n        boolean space2 = false;\n        for\
    \ (int i = 0; i < sb.length(); i++) {\n            char c = sb.charAt(i);\n  \
    \          if (c == ' ') {\n                space = true;\n            } else\
    \ if (c == ' ' && space) {\n                space = false;\n                sb2.append('_');\n\
    \            } else if (c == ' ' && space2) {\n                space2 = false;\n\
    \                sb2.append(\"-\");\n            } else {\n                sb2.append(c);\n\
    \            }\n        }\n        return sb2.toString();", "        String[]\
    \ words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean first = true;\n        for (String word : words) {\n        \
    \    if (first) {\n                first = false;\n            } else {\n    \
    \            sb.append(\" \");\n            }\n            sb.append(word);\n\
    \        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s+", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        StringBuilder sb = new StringBuilder();\n        boolean first\
    \ = true;\n        for(int i = 0; i < text.length(); i++) {\n            char\
    \ c = text.charAt(i);\n            if(Character.isSpaceChar(c)) {\n          \
    \      if(first) {\n                    first = false;\n                } else\
    \ {\n                    sb.append(\"-\");\n                }\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder(text);\n        sb.replace(\" \",\
    \ \"_\");\n        if (sb.length() > 2) {\n            sb.replace(\" \", \"-\"\
    );\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s+", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s+", "-");',
  "        StringBuilder sb = new StringBuilder(text);\n        boolean isConsecutive\
    \ = false;\n        for (int i = 0; i < sb.length(); i++) {\n            if (sb.charAt(i)\
    \ == ' ') {\n                isConsecutive = true;\n            } else {\n   \
    \             isConsecutive = false;\n            }\n            if (isConsecutive)\
    \ {\n                sb.setCharAt(i, '_');\n            }\n        }\n       \
    \ return sb.toString();", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', "        StringBuilder\
    \ sb = new StringBuilder(text);\n        sb.replace(\" \", \"_\");\n        sb.replace(\"\
    \ \", \"_\");\n        if (sb.length() > 2) {\n            sb.replace(\" \", \"\
    -\");\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s+", "-");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', "        String[] words = text.split(\" \"\
    );\n        StringBuilder sb = new StringBuilder();\n        boolean first = true;\n\
    \        for (String word : words) {\n            if (first) {\n             \
    \   sb.append(word);\n                first = false;\n            } else {\n \
    \               sb.append(word.substring(0, 1));\n                sb.append(word.substring(1));\n\
    \            }\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s+", "-");',
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  "        StringBuilder sb = new StringBuilder();\n        boolean first = true;\n\
    \        for(int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if(c == ' ') {\n                if(first) {\n                   \
    \ first = false;\n                } else {\n                    sb.append('_');\n\
    \                }\n            } else {\n                sb.append(c);\n    \
    \        }\n        }\n        return sb.toString();", "        String[] words\
    \ = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n    \
    \    for (String word : words) {\n            if (sb.length() > 0) {\n       \
    \         sb.append(\" \");\n            }\n            sb.append(word);\n   \
    \     }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return text.replaceAll("\\s+",
    "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+", "_");',
  "        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String word : words) {\n            if (sb.length() > 0) {\n   \
    \             sb.append(\" \");\n            }\n            sb.append(word.replaceAll(\"\
    \\\\s+\", \"_\"));\n        }\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', "        StringBuilder\
    \ sb = new StringBuilder();\n        boolean isSpace = false;\n        for(int\
    \ i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n   \
    \         if(c == ' ') {\n                isSpace = true;\n                sb.append(\"\
    _\");\n            } else if(isSpace) {\n                isSpace = false;\n  \
    \              sb.append(\"-\");\n            } else {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();", '        return text.replaceAll("\\s+",
    "_");', "        StringBuilder sb = new StringBuilder(text);\n        StringBuilder\
    \ sb2 = new StringBuilder();\n        boolean isConsecutive = false;\n       \
    \ for (int i = 0; i < sb.length(); i++) {\n            char c = sb.charAt(i);\n\
    \            if (c == ' ') {\n                if (isConsecutive) {\n         \
    \           sb2.append('-');\n                    isConsecutive = false;\n   \
    \             } else {\n                    sb2.append('_');\n               \
    \     isConsecutive = true;\n                }\n            } else {\n       \
    \         sb2.append(c);\n            }\n        }\n        return sb.toString().equals(sb2.toString())\
    \ ? text : sb2.toString();", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");',
  '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");', '        return
    text.replaceAll("\\s+", "_").replaceAll("\\s{2,}", "-");']
stop_tokens:
- "\n    }\n"
