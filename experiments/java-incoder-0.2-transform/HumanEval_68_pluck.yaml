name: HumanEval_68_pluck
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // \"Given an array representing a branch of a tree that has\
  \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
  \ return it.\n    // The plucked node should be the node with the smallest even\
  \ value.\n    // If multiple nodes with the same smallest even value are found return\
  \ the node that has smallest index.\n    // The plucked node should be returned\
  \ in a list, [ smalest_value, its index ],\n    // If there are no even values or\
  \ the given array is empty, return [].\n    // Example 1:\n    // >>> pluck((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)1l)))\n    // Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n    // Example 2:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n\
  \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  \    // Example 3:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n \
  \   // (new ArrayList<Long>(Arrays.asList()))\n    // Example 4:\n    // >>> pluck((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l,\
  \ (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))\n\
  \    // Explanation: 0 is the smallest value, but  there are two zeros,\n    //\
  \ so we will choose the first zero, which has the smallest index.\n    // Constraints:\n\
  \    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static\
  \ ArrayList<Long> pluck(ArrayList<Long> arr) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(pluck((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
  \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
  \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<>();\n        long smallest_even_value\
    \ = Long.MAX_VALUE;\n        int smallest_even_index = 0;\n        for(int i =\
    \ 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n          \
    \  if(value % 2 == 0) {\n                if(value < smallest_even_value) {\n \
    \                   smallest_even_value = value;\n                    smallest_even_index\
    \ = i;\n                }\n            }\n        }\n        if(smallest_even_value\
    \ != Long.MAX_VALUE) {\n            result.add(smallest_even_value);\n       \
    \     result.add(smallest_even_index);\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        long smallestEven\
    \ = Long.MAX_VALUE;\n        int smallestIndex = 0;\n        for (Long node :\
    \ arr) {\n            if (node.isEven()) {\n                if (smallestEven >\
    \ node.value) {\n                    smallestEven = node.value;\n            \
    \        smallestIndex = arr.indexOf(node);\n                }\n            }\n\
    \        }\n        result.add(smallestEven);\n        result.add(smallestIndex);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MIN_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (Long node : arr) {\n            if (node.isEven()) {\n    \
    \            if (smallestEvenValue < node.value) {\n                    smallestEvenValue\
    \ = node.value;\n                    smallestIndex = arr.indexOf(node);\n    \
    \            }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;", "        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long minEven = Long.MAX_VALUE;\n        int\
    \ minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n           \
    \ if (arr.get(i) % 2 == 0) {\n                long cur = arr.get(i);\n       \
    \         if (cur < minEven) {\n                    minEven = cur;\n         \
    \           minIndex = i;\n                }\n            }\n        }\n     \
    \   if (minIndex != -1) {\n            res.add(minEven);\n            res.add(minIndex);\n\
    \        }\n        return res;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long value =\
    \ arr.get(i);\n            if (value % 2 == 0) {\n                if (value <\
    \ smallestEvenValue) {\n                    smallestEvenValue = value;\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        if (smallestEvenValue == Long.MAX_VALUE) {\n            return result;\n\
    \        }\n        ArrayList<Long> evenValues = new ArrayList<>();\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n \
    \           if (value % 2 == 0) {\n                evenValues.add(value);\n  \
    \          }\n        }\n        Collections.sort(evenValues);\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MIN_VALUE;\n\
    \        int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long value = arr.get(i);\n            if (value % 2 == 0) {\n\
    \                if (smallestEvenValue < value) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = i;\n                }\n      \
    \      }\n        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MAX_VALUE;\n        int smallestIndex =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                if (smallestEvenValue > arr.get(i)) {\n       \
    \             smallestEvenValue = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        Long smallest\
    \ = arr.get(0);\n        int smallestIndex = 0;\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (smallest\
    \ > arr.get(i)) {\n                    smallest = arr.get(i);\n              \
    \      smallestIndex = i;\n                }\n            }\n        }\n     \
    \   result.add(smallest);\n        result.add(smallestIndex);\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n      \
    \  for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < smallestEven)\
    \ {\n                    smallestEven = value;\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.add(smallestEven);\n\
    \        result.add(smallestIndex);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n\
    \        int smallestIndex = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue\
    \ > arr.get(i)) {\n                    smallestEvenValue = arr.get(i);\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = Long.MIN_VALUE;\n        int smallestIndex =\
    \ 0;\n        int size = arr.size();\n        for (int i = 0; i < size; i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (smallestEvenValue\
    \ > arr.get(i)) {\n                    smallestEvenValue = arr.get(i);\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        ArrayList<Long> temp = new ArrayList<>();\n        long smallestEvenValue\
    \ = Long.MAX_VALUE;\n        int smallestIndex = 0;\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n             \
    \   smallestEvenValue = Math.min(smallestEvenValue, arr.get(i));\n           \
    \     smallestIndex = i;\n            }\n        }\n        if (smallestEvenValue\
    \ == Long.MAX_VALUE) {\n            return result;\n        }\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == smallestEvenValue)\
    \ {\n                temp.add(arr.get(i));\n            }\n        }\n       \
    \ if (temp.size() > 1) {\n            smallestEvenValue = temp.get(0);\n     \
    \       smallestIndex = temp.get(1);\n        }\n        result.add(smallestEvenValue);\n\
    \        result.add(smallestIndex);\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smallestEvenValue = 0;\n        long\
    \ smallestIndex = 0;\n        long smallestValue = 0;\n        long index = 0;\n\
    \        for(Long val : arr) {\n            if(val % 2 == 0) {\n             \
    \   smallestEvenValue = val;\n                smallestIndex = index;\n       \
    \         smallestValue = val;\n                index++;\n            }\n    \
    \    }\n        if(smallestEvenValue == 0) {\n            return result;\n   \
    \     }\n        for(Long val : arr) {\n            if(val % 2 == 0 && val < smallestEvenValue)\
    \ {\n                smallestEvenValue = val;\n                smallestIndex =\
    \ index;\n                smallestValue = val;\n                index++;\n   \
    \         }\n        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallestEvenValue = 0;\n        int smallestIndex = 0;\n       \
    \ for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0)\
    \ {\n                if (smallestEvenValue == 0) {\n                    smallestEvenValue\
    \ = arr.get(i);\n                    smallestIndex = i;\n                } else\
    \ if (arr.get(i) < smallestEvenValue) {\n                    smallestEvenValue\
    \ = arr.get(i);\n                    smallestIndex = i;\n                }\n \
    \           }\n        }\n        result.add(smallestEvenValue);\n        result.add(smallestIndex);\n\
    \        return result;", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        long smallestEven = Long.MAX_VALUE;\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) %\
    \ 2 == 0) {\n                if (smallestEven > arr.get(i)) {\n              \
    \      smallestEven = arr.get(i);\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        res.add(smallestEven);\n \
    \       res.add(smallestIndex);\n        return res;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        long smallestEvenValue\
    \ = arr.get(0);\n        long smallestIndex = 0;\n        boolean foundSmallestEvenValue\
    \ = false;\n        for(int i = 1; i < arr.size(); i++) {\n            long currentValue\
    \ = arr.get(i);\n            if(currentValue == smallestEvenValue) {\n       \
    \         foundSmallestEvenValue = true;\n                smallestIndex = i;\n\
    \            }\n            else if(foundSmallestEvenValue) {\n              \
    \  if(currentValue < smallestEvenValue) {\n                    smallestEvenValue\
    \ = currentValue;\n                    smallestIndex = i;\n                }\n\
    \            }\n        }\n        if(smallestEvenValue == 0) {\n            return\
    \ result;\n        }\n        else if(smallestIndex == 0) {\n            result.add(smallestEvenValue);\n\
    \            return result;\n        }\n        else {\n            result.add(smallestEvenValue);\n\
    \            result.add(smallestIndex);\n            return result;\n        }",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long smallest_value\
    \ = Long.MAX_VALUE;\n        int smallest_index = -1;\n        for(int i = 0;\
    \ i < arr.size(); i++) {\n            long value = arr.get(i);\n            if(value\
    \ % 2 == 0) {\n                if(value < smallest_value) {\n                \
    \    smallest_value = value;\n                    smallest_index = i;\n      \
    \          }\n            }\n        }\n        if(smallest_index != -1) {\n \
    \           result.add(smallest_value, smallest_index);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ smallest_even_value = Long.MAX_VALUE;\n        int smallest_even_index = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if(value % 2 == 0) {\n                if(value < smallest_even_value)\
    \ {\n                    smallest_even_value = value;\n                    smallest_even_index\
    \ = i;\n                }\n            }\n        }\n        if(smallest_even_value\
    \ != Long.MAX_VALUE) {\n            result.add(smallest_even_value);\n       \
    \     result.add(smallest_even_index);\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> temp\
    \ = new ArrayList<>();\n        long smallestEvenValue = Long.MAX_VALUE;\n   \
    \     int smallestIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value % 2 == 0) {\n    \
    \            smallestEvenValue = Math.min(smallestEvenValue, value);\n       \
    \         smallestIndex = i;\n            }\n        }\n        if(smallestEvenValue\
    \ == Long.MAX_VALUE) {\n            return result;\n        }\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n      \
    \      if(value % 2 == 0) {\n                if(value == smallestEvenValue) {\n\
    \                    result.add(smallestEvenValue);\n                    result.add(smallestIndex);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> res = new ArrayList<>();\n        long smallestEven = Long.MAX_VALUE;\n\
    \        int smallestIndex = -1;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                if (smallestEven\
    \ > arr.get(i)) {\n                    smallestEven = arr.get(i);\n          \
    \          smallestIndex = i;\n                }\n            }\n        }\n \
    \       if (smallestEven != Long.MAX_VALUE) {\n            res.add(smallestEven);\n\
    \            res.add(smallestIndex);\n        }\n        return res;"]
stop_tokens:
- "\n    }\n"
