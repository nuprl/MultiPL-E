name: HumanEval_90_next_smallest
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a list of integers.\n    // Write a function\
  \ next_smallest() that returns the 2nd smallest element of the list.\n    // Return\
  \ None if there is no such element.\n    // >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l))))\n    // 2l\n    // >>> nextSmallest((new\
  \ ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)4l, (long)3l, (long)2l))))\n\
  \    // 2l\n    // >>> nextSmallest((new ArrayList<Long>(Arrays.asList())))\n  \
  \  // Optional.empty()\n    // >>> nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)1l))))\n    // Optional.empty()\n    public static Optional<Long> nextSmallest(ArrayList<Long>\
  \ lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(nextSmallest((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals(2l));\n\
  \    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l,\
  \ (long)4l, (long)3l, (long)2l)))).equals(2l));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList()))).equals(Optional.empty()));\n\
  \    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))).equals(Optional.empty()));\n\
  \    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l,\
  \ (long)1l, (long)1l, (long)0l)))).equals(1l));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)1l)))).equals(Optional.empty()));\n    assert(nextSmallest((new ArrayList<Long>(Arrays.asList((long)-35l,\
  \ (long)34l, (long)12l, (long)-45l)))).equals(-35l));\n    }\n\n}\n"
completions: ["        if (lst.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        long smallest = lst.get(0);\n        long secondSmallest =\
    \ lst.get(1);\n        for (int i = 2; i < lst.size(); i++) {\n            if\
    \ (lst.get(i) < smallest) {\n                secondSmallest = lst.get(i);\n  \
    \              smallest = lst.get(i);\n            } else if (lst.get(i) == smallest)\
    \ {\n                secondSmallest = lst.get(i);\n            }\n        }\n\
    \        return Optional.of(secondSmallest);", "        Long min = null;\n   \
    \     Long min2 = null;\n        for (Long l : lst) {\n            if (min ==\
    \ null || l < min) {\n                min = l;\n            }\n            if\
    \ (min2 == null || l < min2) {\n                min2 = l;\n            }\n   \
    \     }\n        return Optional.ofNullable(min);", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for(int i = 1; i < lst.size();\
    \ i++) {\n            if(lst.get(i) < smallest) {\n                secondSmallest\
    \ = lst.get(i);\n                smallest = lst.get(i);\n            }\n     \
    \   }\n        return Optional.ofNullable(secondSmallest);", "        long min\
    \ = lst.get(0);\n        long max = lst.get(0);\n        for (long i : lst) {\n\
    \            if (i < min) {\n                min = i;\n            } else if (i\
    \ > max) {\n                max = i;\n            }\n        }\n        return\
    \ Optional.ofNullable(max);", "        long smallest = lst.get(0);\n        long\
    \ secondSmallest = lst.get(1);\n        for(long i : lst) {\n            if(i\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = i;\n            }\n            else if(i < secondSmallest) {\n           \
    \     secondSmallest = i;\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = lst.get(i);\n                smallest\
    \ = lst.get(i);\n            } else if (lst.get(i) == smallest) {\n          \
    \      if (lst.get(i) < secondSmallest) {\n                    secondSmallest\
    \ = lst.get(i);\n                }\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(int i = 1; i < lst.size(); i++) {\n            if(lst.get(i) < smallest)\
    \ {\n                secondSmallest = lst.get(i);\n                smallest =\
    \ lst.get(i);\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        if (lst.isEmpty()) return Optional.empty();\n        Long min = lst.get(0);\n\
    \        Long min2 = lst.get(1);\n        for (Long i : lst) {\n            if\
    \ (i < min) {\n                min = i;\n                min2 = min;\n       \
    \     } else if (i < min2) {\n                min2 = i;\n            }\n     \
    \   }\n        return Optional.of(min2);", "        Optional<Long> res = Optional.empty();\n\
    \        long smallest = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        for(long i : lst) {\n            if(i < smallest) {\n               \
    \ res = Optional.of(i);\n                smallest = i;\n            }\n      \
    \  }\n        return res;", "        Collections.sort(lst);\n        if (lst.size()\
    \ <= 1) return Optional.empty();\n        return Optional.of(lst.get(1));", " \
    \       Collections.sort(lst);\n        if (lst.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        long smallest = lst.get(0);\n        long\
    \ secondSmallest = lst.get(1);\n        if (smallest != secondSmallest) {\n  \
    \          return Optional.of(secondSmallest);\n        }\n        return Optional.of(lst.get(1));",
  "        Collections.sort(lst);\n        if (lst.size() <= 1) return Optional.empty();\n\
    \        return Optional.of(lst.get(1));", "        long min = lst.get(0);\n \
    \       long max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n\
    \            if (lst.get(i) < min) {\n                min = lst.get(i);\n    \
    \        } else if (lst.get(i) > max) {\n                max = lst.get(i);\n \
    \           }\n        }\n        return Optional.ofNullable(max);", "       \
    \ if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n    \
    \    long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = lst.get(i);\n                smallest\
    \ = lst.get(i);\n            } else if (lst.get(i) == smallest) {\n          \
    \      secondSmallest = lst.get(i);\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);", "        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        if (smallest.isPresent()) {\n            return smallest;\n        }\n\
    \        return Optional.empty();", "        Collections.sort(lst);\n        if\
    \ (lst.size() <= 1) {\n            return Optional.empty();\n        }\n     \
    \   return Optional.of(lst.get(1));", "        long smallest = lst.get(0);\n \
    \       long secondSmallest = lst.get(1);\n        if (lst.size() > 2) {\n   \
    \         for (int i = 2; i < lst.size(); i++) {\n                if (lst.get(i)\
    \ < smallest) {\n                    secondSmallest = lst.get(i);\n          \
    \          smallest = lst.get(i);\n                }\n            }\n        }\n\
    \        return Optional.ofNullable(secondSmallest);", "        if (lst.isEmpty())\
    \ return Optional.empty();\n        Long minValue = lst.get(0);\n        Long\
    \ minIndex = -1;\n        for (int i = 1; i < lst.size(); i++) {\n           \
    \ if (lst.get(i) < minValue) {\n                minValue = lst.get(i);\n     \
    \           minIndex = i;\n            }\n        }\n        if (minIndex == -1)\
    \ return Optional.empty();\n        return Optional.of(lst.get(minIndex + 1));",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(long i : lst) {\n            if(i<smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            }\n            if(i>secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ Optional.ofNullable(secondSmallest);", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for(long i : lst) {\n    \
    \        if(i<smallest) {\n                secondSmallest = smallest;\n      \
    \          smallest = i;\n            }\n            if(i>smallest) {\n      \
    \          secondSmallest = i;\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        Collections.sort(lst);\n        if (lst.size() > 1) {\n            return\
    \ Optional.of(lst.get(1));\n        }\n        return Optional.empty();", "  \
    \      Collections.sort(lst);\n        if (lst.size() > 1) {\n            return\
    \ Optional.of(lst.get(1));\n        } else {\n            return Optional.empty();\n\
    \        }", "        Collections.sort(lst);\n        if (lst.size() == 0) {\n\
    \            return Optional.empty();\n        }\n        Long second = lst.get(1);\n\
    \        if (second == null) {\n            return Optional.empty();\n       \
    \ }\n        return Optional.of(second);", "        Collections.sort(lst);\n \
    \       if (lst.size() == 0) {\n            return Optional.empty();\n       \
    \ }\n        Long result = lst.get(1);\n        lst.remove(lst.size() - 1);\n\
    \        return Optional.of(result);", "        Collections.sort(lst);\n     \
    \   if (lst.size() <= 1) return Optional.empty();\n        long first = lst.get(0);\n\
    \        long second = lst.get(1);\n        if (first < second) return Optional.of(second);\n\
    \        return Optional.of(first);", "        if (lst.size() < 2) {\n       \
    \     return Optional.empty();\n        }\n        Long smallest = lst.get(0);\n\
    \        Long secondSmallest = lst.get(1);\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            if (lst.get(i) < smallest) {\n                secondSmallest\
    \ = lst.get(i);\n            }\n        }\n        return Optional.of(secondSmallest);",
  "        Collections.sort(lst);\n        if (lst.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        if (lst.size() == 1) {\n            return\
    \ Optional.of(lst.get(0));\n        }\n        return Optional.of(lst.get(1));",
  "        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        Long smallest = lst.get(0);\n        Long secondSmallest = lst.get(1);\n\
    \        Long thirdSmallest = lst.get(2);\n        Long fourthSmallest = lst.get(3);\n\
    \        Long fifthSmallest = lst.get(4);\n        if (smallest > secondSmallest\
    \ && smallest > thirdSmallest && smallest > fourthSmallest && smallest > fifthSmallest)\
    \ {\n            return Optional.of(smallest);\n        } else if (secondSmallest\
    \ > smallest && secondSmallest > thirdSmallest && secondSmallest > fourthSmallest\
    \ && secondSmallest > fifthSmallest) {\n            return Optional.of(secondSmallest);\n\
    \        } else if (thirdSmallest > smallest && thirdSmallest > secondSmallest\
    \ && thirdSmallest > fourthSmallest && thirdSmallest > fifthSmallest) {\n    \
    \        return Optional.of(thirdSmallest);\n        } else if (fourthSmallest\
    \ > smallest && fourthSmallest > secondSmallest && fourthSmallest > thirdSmallest\
    \ && fourthSmallest > fifthSmallest) {\n            return Optional.of(fourthSmallest);\n\
    \        } else if (fifthSmallest > smallest && fifthSmallest > secondSmallest\
    \ && fifthSmallest > thirdSmallest && fifthSmallest > fourthSmallest) {\n    \
    \        return Optional.of(fifthSmallest);\n        } else {\n            return\
    \ Optional.empty();\n        }", "        Collections.sort(lst);\n        if (lst.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(lst.get(1));",
  "        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        Long minValue = lst.get(0);\n        Long minIndex = -1;\n        for\
    \ (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < minValue) {\n\
    \                minValue = lst.get(i);\n                minIndex = i;\n     \
    \       }\n        }\n        if (minIndex == lst.size() - 1) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(lst.get(minIndex +\
    \ 1));", "        Long min = lst.get(0);\n        Long max = lst.get(0);\n   \
    \     for (Long i : lst) {\n            if (i < min) {\n                min =\
    \ i;\n            } else if (i > max) {\n                max = i;\n          \
    \  }\n        }\n        return Optional.ofNullable(max);", "        Collections.sort(lst);\n\
    \        if (lst.size() <= 1) return Optional.empty();\n        return Optional.of(lst.get(1));",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(int i = 2; i < lst.size(); i++) {\n            if(lst.get(i) < smallest)\
    \ {\n                secondSmallest = lst.get(i);\n                smallest =\
    \ lst.get(i);\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        Collections.sort(lst);\n        if (lst.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(lst.get(2));", "  \
    \      long min = lst.get(0);\n        long max = lst.get(0);\n        for(long\
    \ i : lst) {\n            if(i<min) min = i;\n            if(i>max) max = i;\n\
    \        }\n        if(min==max) return Optional.empty();\n        else if(min<max)\
    \ return Optional.of(lst.get(1));\n        else return Optional.of(lst.get(0));",
  "        Optional<Long> first = lst.stream().min(Comparator.naturalOrder());\n \
    \       if (first.isPresent()) {\n            return first;\n        }\n     \
    \   Optional<Long> second = lst.stream().min(Comparator.naturalOrder()).filter(x\
    \ -> x != first.get());\n        if (second.isPresent()) {\n            return\
    \ second;\n        }\n        return Optional.empty();", "        long smallest\
    \ = lst.get(0);\n        long secondSmallest = lst.get(1);\n        for(int i\
    \ = 1; i < lst.size(); i++) {\n            if(lst.get(i) < smallest) {\n     \
    \           secondSmallest = lst.get(i);\n                smallest = lst.get(i);\n\
    \            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(int i = 2; i < lst.size(); i++) {\n            long current = lst.get(i);\n\
    \            if(current < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = current;\n            } else if(current < secondSmallest)\
    \ {\n                secondSmallest = current;\n            }\n        }\n   \
    \     return Optional.ofNullable(secondSmallest);", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for(int i = 2; i < lst.size();\
    \ i++) {\n            if(lst.get(i) < smallest) {\n                secondSmallest\
    \ = lst.get(i);\n                smallest = lst.get(i);\n            }\n     \
    \   }\n        return Optional.ofNullable(secondSmallest);", "        if (lst.size()\
    \ <= 1) return Optional.empty();\n        Long minValue = lst.get(0);\n      \
    \  Long minIndex = -1;\n        for (int i = 1; i < lst.size(); i++) {\n     \
    \       if (minValue > lst.get(i)) {\n                minValue = lst.get(i);\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) return Optional.empty();\n        return Optional.of(lst.get(minIndex\
    \ + 1));", "        if (lst.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        long smallest = lst.get(0);\n        long secondSmallest =\
    \ lst.get(1);\n        for (int i = 2; i < lst.size(); i++) {\n            long\
    \ current = lst.get(i);\n            if (current < smallest) {\n             \
    \   secondSmallest = smallest;\n                smallest = current;\n        \
    \    } else if (current < secondSmallest) {\n                secondSmallest =\
    \ current;\n            }\n        }\n        return Optional.of(secondSmallest);",
  "        long min = lst.get(0);\n        long max = lst.get(0);\n        for(long\
    \ i : lst) {\n            if(i < min) {\n                min = i;\n          \
    \  }\n            if(i > max) {\n                max = i;\n            }\n   \
    \     }\n        return Optional.ofNullable(max);", "        if (lst.size() ==\
    \ 0) {\n            return Optional.empty();\n        }\n        Long smallest\
    \ = lst.get(0);\n        Long second = smallest;\n        for (int i = 1; i <\
    \ lst.size(); i++) {\n            if (lst.get(i) < smallest) {\n             \
    \   second = smallest;\n                smallest = lst.get(i);\n            }\
    \ else if (lst.get(i) == smallest) {\n                second = lst.get(i);\n \
    \           }\n        }\n        return Optional.ofNullable(second);", "    \
    \    long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   } else if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return Optional.ofNullable(max);", "        Optional<Long> result = Optional.empty();\n\
    \        long smallest = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        long secondSmallest = lst.stream().filter(x -> x < smallest).min(Comparator.naturalOrder()).get();\n\
    \        if (secondSmallest == smallest) {\n            result = Optional.of(secondSmallest);\n\
    \        }\n        return result;", "        long min = lst.get(0);\n       \
    \ long max = lst.get(0);\n        for(long i : lst) {\n            if(i<min) {\n\
    \                min = i;\n            }\n            if(i>max) {\n          \
    \      max = i;\n            }\n        }\n        if(min==max) {\n          \
    \  return Optional.empty();\n        }\n        return Optional.of(lst.get(lst.indexOf(min+1)));",
  "        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        long thirdSmallest = lst.get(2);\n        long fourthSmallest = lst.get(3);\n\
    \        long fifthSmallest = lst.get(4);\n        if (smallest < secondSmallest)\
    \ {\n            if (secondSmallest < thirdSmallest) {\n                if (thirdSmallest\
    \ < fourthSmallest) {\n                    if (fourthSmallest < fifthSmallest)\
    \ {\n                        return Optional.of(fifthSmallest);\n            \
    \        } else {\n                        return Optional.of(fourthSmallest);\n\
    \                    }\n                } else {\n                    return Optional.of(thirdSmallest);\n\
    \                }\n            } else {\n                return Optional.of(secondSmallest);\n\
    \            }\n        } else {\n            return Optional.of(smallest);\n\
    \        }", "        long smallest = lst.get(0);\n        long secondSmallest\
    \ = lst.get(1);\n        for(long i : lst) {\n            if(i<smallest) {\n \
    \               secondSmallest = smallest;\n                smallest = i;\n  \
    \          }\n            if(i>secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        Optional<Long> result = Optional.empty();\n        Long smallest = lst.get(0);\n\
    \        Long secondSmallest = lst.get(1);\n        for(Long i : lst) {\n    \
    \        if(smallest.compareTo(i) < 0) {\n                secondSmallest = i;\n\
    \                smallest = i;\n            }\n        }\n        result = Optional.of(secondSmallest);\n\
    \        return result;", "        Collections.sort(lst);\n        if (lst.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        Long second\
    \ = lst.get(1);\n        if (second == null) {\n            return Optional.empty();\n\
    \        }\n        return Optional.of(second);", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for(int i = 2; i < lst.size();\
    \ i++) {\n            if(lst.get(i) < smallest) {\n                secondSmallest\
    \ = lst.get(i);\n                smallest = lst.get(i);\n            }\n     \
    \   }\n        return Optional.of(secondSmallest);", "        long smallest =\
    \ lst.get(0);\n        long secondSmallest = lst.get(1);\n        for(long i :\
    \ lst) {\n            if(i < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = i;\n            } else if(i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ Optional.ofNullable(secondSmallest);", "        if (lst.isEmpty()) {\n     \
    \       return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long max = lst.get(0);\n        for (long i : lst) {\n            if\
    \ (i < min) {\n                min = i;\n            } else if (i > max) {\n \
    \               max = i;\n            }\n        }\n        return Optional.ofNullable(max);",
  "        Optional<Long> result = Optional.empty();\n        if (lst.size() > 0)\
    \ {\n            Long smallest = lst.get(0);\n            Long secondSmallest\
    \ = smallest;\n            for (int i = 1; i < lst.size(); i++) {\n          \
    \      if (lst.get(i) < smallest) {\n                    secondSmallest = smallest;\n\
    \                    smallest = lst.get(i);\n                } else if (lst.get(i)\
    \ == smallest) {\n                    secondSmallest = lst.get(i);\n         \
    \       }\n            }\n            result = Optional.of(secondSmallest);\n\
    \        }\n        return result;", "        long smallest = lst.get(0);\n  \
    \      long secondSmallest = lst.get(1);\n        for(int i = 2; i < lst.size();\
    \ i++) {\n            if(lst.get(i) < smallest) {\n                secondSmallest\
    \ = lst.get(i);\n                smallest = lst.get(i);\n            }\n     \
    \   }\n        return Optional.ofNullable(secondSmallest);", "        Optional<Long>\
    \ smallest = lst.stream().min(Comparator.naturalOrder());\n        if (smallest.isPresent())\
    \ {\n            return smallest;\n        }\n        return Optional.empty();",
  "        long min = lst.get(0);\n        long max = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long current = lst.get(i);\n    \
    \        if (current < min) {\n                min = current;\n            } else\
    \ if (current > max) {\n                max = current;\n            }\n      \
    \  }\n        return Optional.ofNullable(max);", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for(long i : lst) {\n    \
    \        if(i < smallest) {\n                secondSmallest = smallest;\n    \
    \            smallest = i;\n            }\n            else if(i < secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ Optional.ofNullable(secondSmallest);", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for(long i : lst) {\n    \
    \        if(i<smallest) {\n                secondSmallest = smallest;\n      \
    \          smallest = i;\n            } else if(i>smallest) {\n              \
    \  secondSmallest = i;\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(long i = 2; i < lst.size(); i++) {\n            long current = lst.get(i);\n\
    \            if(current < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = current;\n            } else if(current < secondSmallest)\
    \ {\n                secondSmallest = current;\n            }\n        }\n   \
    \     return Optional.ofNullable(secondSmallest);", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for (long i : lst) {\n   \
    \         if (i < smallest) {\n                secondSmallest = smallest;\n  \
    \              smallest = i;\n            } else if (i < secondSmallest) {\n \
    \               secondSmallest = i;\n            }\n        }\n        return\
    \ Optional.ofNullable(secondSmallest);", "        Collections.sort(lst);\n   \
    \     if (lst.size() > 1) {\n            return Optional.of(lst.get(1));\n   \
    \     }\n        return Optional.empty();", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for(long i : lst) {\n    \
    \        if(i<smallest) {\n                secondSmallest = smallest;\n      \
    \          smallest = i;\n            } else if(i>smallest) {\n              \
    \  secondSmallest = i;\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        Long min = null;\n        Long min2 = null;\n        for (Long l : lst)\
    \ {\n            if (min == null || l < min) {\n                min = l;\n   \
    \         }\n            if (min2 == null || l < min2) {\n                min2\
    \ = l;\n            }\n        }\n        return Optional.ofNullable(min2);",
  "        long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   } else if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return Optional.ofNullable(max);", "        Collections.sort(lst);\n\
    \        if (lst.size() <= 1) return Optional.empty();\n        Long second =\
    \ lst.get(1);\n        if (second == lst.get(2)) return Optional.of(lst.get(0));\n\
    \        return Optional.of(lst.get(1));", "        if (lst.isEmpty()) {\n   \
    \         return Optional.empty();\n        }\n        Long smallest = lst.get(0);\n\
    \        Long secondSmallest = lst.get(1);\n        Long thirdSmallest = lst.get(2);\n\
    \        Long fourthSmallest = lst.get(3);\n        Long fifthSmallest = lst.get(4);\n\
    \        if (smallest > secondSmallest) {\n            if (secondSmallest > thirdSmallest)\
    \ {\n                if (thirdSmallest > fourthSmallest) {\n                 \
    \   if (fourthSmallest > fifthSmallest) {\n                        return Optional.of(fifthSmallest);\n\
    \                    } else {\n                        return Optional.of(fourthSmallest);\n\
    \                    }\n                } else {\n                    return Optional.of(thirdSmallest);\n\
    \                }\n            } else {\n                return Optional.of(secondSmallest);\n\
    \            }\n        } else {\n            return Optional.of(smallest);\n\
    \        }", "        if (lst.size() == 0) {\n            return Optional.empty();\n\
    \        }\n        long smallest = lst.get(0);\n        long secondSmallest =\
    \ lst.get(1);\n        for (int i = 2; i < lst.size(); i++) {\n            if\
    \ (lst.get(i) < smallest) {\n                secondSmallest = lst.get(i);\n  \
    \              smallest = lst.get(i);\n            } else if (lst.get(i) == smallest)\
    \ {\n                secondSmallest = lst.get(i);\n            }\n        }\n\
    \        return Optional.of(secondSmallest);", "        if (lst.size() <= 1) return\
    \ Optional.empty();\n        Long min2 = lst.stream().min(Comparator.comparingLong(Long::longValue)).orElse(null);\n\
    \        Long min1 = lst.stream().min(Comparator.comparingLong(Long::longValue)).orElse(null);\n\
    \        if (min2 != null && min2 > min1) return Optional.of(min2);\n        if\
    \ (min1 != null && min1 < min2) return Optional.of(min1);\n        return Optional.empty();",
  "        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            long current = lst.get(i);\n\
    \            if (current < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = current;\n            } else if (current < secondSmallest)\
    \ {\n                secondSmallest = current;\n            }\n        }\n   \
    \     return Optional.of(secondSmallest);", "        Collections.sort(lst);\n\
    \        if (lst.size() <= 1) return Optional.empty();\n        Long second =\
    \ lst.get(1);\n        lst.remove(lst.size() - 1);\n        return Optional.of(second);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(int i = 2; i < lst.size(); i++) {\n            if(lst.get(i) < smallest)\
    \ {\n                secondSmallest = lst.get(i);\n                smallest =\
    \ lst.get(i);\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(long i : lst) {\n            if(i < smallest) {\n               \
    \ secondSmallest = smallest;\n                smallest = i;\n            } else\
    \ if(i < secondSmallest) {\n                secondSmallest = i;\n            }\n\
    \        }\n        return Optional.ofNullable(secondSmallest);", "        long\
    \ smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n        for\
    \ (long i : lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            } else if (i == smallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ Optional.ofNullable(secondSmallest);", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        if (lst.size() > 2) {\n  \
    \          for (int i = 2; i < lst.size(); i++) {\n                long current\
    \ = lst.get(i);\n                if (current < smallest) {\n                 \
    \   secondSmallest = smallest;\n                    smallest = current;\n    \
    \            } else if (current < secondSmallest) {\n                    secondSmallest\
    \ = current;\n                }\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(int i = 2; i < lst.size(); i++) {\n            long current = lst.get(i);\n\
    \            if(current < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = current;\n            } else if(current == smallest)\
    \ {\n                secondSmallest = current;\n            }\n        }\n   \
    \     return Optional.ofNullable(secondSmallest);", "        Optional<Long> result\
    \ = Optional.empty();\n        if (lst.size() > 0) {\n            Long smallest\
    \ = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n        \
    \        if (lst.get(i) < smallest) {\n                    result = Optional.of(lst.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n  \
    \      long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   }\n            if (i > max) {\n                max = i;\n            }\n \
    \       }\n        return Optional.ofNullable(max);", "        if (lst.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = lst.get(0);\n        long secondSmallest = lst.get(1);\n        for (int i\
    \ = 2; i < lst.size(); i++) {\n            if (lst.get(i) < smallest) {\n    \
    \            secondSmallest = lst.get(i);\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);", "        if (lst.size() == 0) {\n           \
    \ return Optional.empty();\n        }\n        Long smallest = lst.get(0);\n \
    \       Long secondSmallest = lst.get(1);\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            Long current = lst.get(i);\n            if (current < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = current;\n\
    \            } else if (current < secondSmallest) {\n                secondSmallest\
    \ = current;\n            }\n        }\n        return Optional.of(secondSmallest);",
  "        Collections.sort(lst);\n        if (lst.size() <= 1) return Optional.empty();\n\
    \        return Optional.of(lst.get(1));", "        Collections.sort(lst);\n \
    \       if (lst.size() <= 1) return Optional.empty();\n        Long secondSmallest\
    \ = lst.get(1);\n        if (secondSmallest == lst.get(0))\n            return\
    \ Optional.of(secondSmallest);\n        return Optional.of(lst.get(0));", "  \
    \      Optional<Long> first = lst.stream().filter(i -> i < lst.stream().min()).findFirst();\n\
    \        if (first.isPresent()) {\n            return lst.stream().filter(i ->\
    \ i < lst.stream().min()).filter(i -> i != first.get()).findFirst();\n       \
    \ }\n        return Optional.empty();", "        if (lst.isEmpty()) {\n      \
    \      return Optional.empty();\n        }\n        Long min = lst.get(0);\n \
    \       Long max = lst.get(0);\n        for (Long i : lst) {\n            if (i\
    \ < min) {\n                min = i;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return Optional.ofNullable(max);",
  "        Optional<Long> result = Optional.empty();\n        if (lst.size() > 0)\
    \ {\n            Long smallest = lst.get(0);\n            for (int i = 1; i <\
    \ lst.size(); i++) {\n                if (lst.get(i) < smallest) {\n         \
    \           result = Optional.of(lst.get(i));\n                }\n           \
    \ }\n        }\n        return result;", "        Optional<Long> result = Optional.empty();\n\
    \        if (lst.size() > 0) {\n            Long smallest = lst.get(0);\n    \
    \        for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(i)\
    \ < smallest) {\n                    result = Optional.of(lst.get(i));\n     \
    \           }\n            }\n        }\n        return result;", "        Optional<Long>\
    \ smallest = lst.stream().min(Comparator.naturalOrder());\n        if (smallest.isPresent())\
    \ {\n            return smallest;\n        }\n        return Optional.empty();",
  "        Long min = null;\n        Long min2 = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = i;\n   \
    \         }\n            if (min2 == null || i < min2) {\n                min2\
    \ = i;\n            }\n        }\n        return Optional.ofNullable(min2);",
  "        Optional<Long> result = Optional.empty();\n        if (lst.size() > 0)\
    \ {\n            long smallest = lst.get(0);\n            long secondSmallest\
    \ = lst.get(1);\n            for (int i = 2; i < lst.size(); i++) {\n        \
    \        if (lst.get(i) < smallest) {\n                    secondSmallest = lst.get(i);\n\
    \                    smallest = lst.get(i);\n                } else if (lst.get(i)\
    \ == smallest) {\n                    if (lst.get(i) < secondSmallest) {\n   \
    \                     secondSmallest = lst.get(i);\n                    }\n  \
    \              }\n            }\n            result = Optional.of(secondSmallest);\n\
    \        }\n        return result;", "        long smallest = lst.get(0);\n  \
    \      long secondSmallest = lst.get(1);\n        for(long i : lst) {\n      \
    \      if(i < smallest) {\n                secondSmallest = smallest;\n      \
    \          smallest = i;\n            } else if(i < secondSmallest) {\n      \
    \          secondSmallest = i;\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long min = lst.get(0);\n        long max = lst.get(0);\n        for (long\
    \ i : lst) {\n            if (i < min) {\n                min = i;\n         \
    \   } else if (i > max) {\n                max = i;\n            }\n        }\n\
    \        return Optional.ofNullable(max);", "        Collections.sort(lst);\n\
    \        if (lst.size() == 0) {\n            return Optional.empty();\n      \
    \  }\n        return Optional.of(lst.get(1));", "        Collections.sort(lst);\n\
    \        if (lst.size() == 0) {\n            return Optional.empty();\n      \
    \  }\n        return Optional.of(lst.get(2));", "        Optional<Long> first\
    \ = lst.stream().min(Comparator.naturalOrder());\n        if (first.isPresent())\
    \ {\n            return first;\n        }\n        Optional<Long> second = lst.stream().skip(1).min(Comparator.naturalOrder());\n\
    \        if (second.isPresent()) {\n            return second;\n        }\n  \
    \      return Optional.empty();", "        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        if (smallest.isPresent()) {\n            return smallest;\n        }\n\
    \        return Optional.empty();", "        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        if (smallest.isPresent()) {\n            return smallest;\n        }\n\
    \        return Optional.empty();", "        Collections.sort(lst);\n        if\
    \ (lst.size() == 0) {\n            return Optional.empty();\n        }\n     \
    \   return Optional.of(lst.get(1));", "        Collections.sort(lst);\n      \
    \  if (lst.size() == 0) {\n            return Optional.empty();\n        }\n \
    \       Long result = lst.get(1);\n        if (lst.size() > 2) {\n           \
    \ lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n   \
    \         lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            lst.remove(1);\n\
    \            lst.remove(1);\n            lst.remove(1);\n            ", "    \
    \    if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n \
    \       long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        long thirdSmallest = lst.get(2);\n        long fourthSmallest = lst.get(3);\n\
    \        long fifthSmallest = lst.get(4);\n        if (smallest > secondSmallest)\
    \ {\n            if (smallest > thirdSmallest) {\n                if (smallest\
    \ > fourthSmallest) {\n                    if (smallest > fifthSmallest) {\n \
    \                       return Optional.of(fifthSmallest);\n                 \
    \   } else {\n                        return Optional.of(fourthSmallest);\n  \
    \                  }\n                } else {\n                    return Optional.of(thirdSmallest);\n\
    \                }\n            } else {\n                return Optional.of(secondSmallest);\n\
    \            }\n        } else {\n            return Optional.of(smallest);\n\
    \        }", "        if (lst.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Long smallest = lst.get(0);\n        Long secondSmallest =\
    \ lst.get(1);\n        for (int i = 2; i < lst.size(); i++) {\n            if\
    \ (lst.get(i) < smallest) {\n                secondSmallest = lst.get(i);\n  \
    \          }\n        }\n        return Optional.of(secondSmallest);", "     \
    \   if (lst.size() < 2) {\n            return Optional.empty();\n        }\n \
    \       long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = lst.get(i);\n                smallest\
    \ = lst.get(i);\n            } else if (lst.get(i) == smallest) {\n          \
    \      secondSmallest = lst.get(i);\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);", "        Collections.sort(lst);\n        if (lst.size()\
    \ <= 1) return Optional.empty();\n        return Optional.of(lst.get(1));", " \
    \       Collections.sort(lst);\n        if (lst.size() >= 2) {\n            return\
    \ Optional.of(lst.get(1));\n        }\n        return Optional.empty();", "  \
    \      long min = lst.get(0);\n        long max = lst.get(lst.size() - 1);\n \
    \       long mid = min + ((max - min) / 2);\n        if (min == max) {\n     \
    \       return Optional.of(mid);\n        }\n        if (mid == lst.get(lst.size()\
    \ - 2)) {\n            return Optional.of(mid);\n        }\n        if (mid ==\
    \ lst.get(lst.size() - 1)) {\n            return Optional.of(mid);\n        }\n\
    \        if (mid < lst.get(lst.size() - 1)) {\n            return Optional.of(mid);\n\
    \        }\n        return Optional.empty();", "        Optional<Long> res = lst.stream().sorted().skip(1).findFirst();\n\
    \        return res.isPresent() ? res : Optional.empty();", "        long min\
    \ = lst.stream().min(Comparator.naturalOrder()).get();\n        long max = lst.stream().max(Comparator.naturalOrder()).get();\n\
    \        if (min == max) {\n            return Optional.empty();\n        }\n\
    \        if (min > max) {\n            return Optional.of(max);\n        }\n \
    \       return Optional.of(min);", "        long min = lst.get(0);\n        long\
    \ max = lst.get(lst.size() - 1);\n        long mid = min + ((max - min) / 2);\n\
    \        long mid2 = mid;\n        long mid3 = mid;\n        long mid4 = mid;\n\
    \        long mid5 = mid;\n        long mid6 = mid;\n        long mid7 = mid;\n\
    \        long mid8 = mid;\n        long mid9 = mid;\n        long mid10 = mid;\n\
    \        long mid11 = mid;\n        long mid12 = mid;\n        long mid13 = mid;\n\
    \        long mid14 = mid;\n        long mid15 = mid;\n        long mid16 = mid;\n\
    \        long mid17 = mid;\n        long mid18 = mid;\n        long mid19 = mid;\n\
    \        long mid20 = mid;\n        long mid21 = mid;\n        long mid22 = mid;\n\
    \        long mid23 = mid;\n        long mid24 = mid;\n        long mid25 = mid;\n\
    \        long mid26 = mid;\n        long mid27 = mid;\n        long mid28 = mid;\n\
    \        long mid29 = mid;\n        long mid30 = mid;\n        long mid31 = mid;\n\
    \        long mid32 = mid;\n        long mid33 = mid;\n        long mid34 = mid;\n\
    \        long mid35 = mid;\n        long mid36 = mid;\n        long mid37 = mid;\n\
    \        long mid38 = mid;\n        long mid39 = mid;\n        long mid40 = mid;\n\
    \        long mid41 = mid;\n        long mid42 = mid;\n        long mid43 = mid;\n\
    \        long mid44 = mid;\n        long mid45 = mid;\n        long mid46 = mid;\n\
    \        long mid47 = mid;\n        long mid48 = mid;\n        long mid49 = mid;\n\
    \        long mid50 = mid;\n        long mid51 = mid;\n        long mid52 = mid;\n\
    \        long mid53 = mid;\n        long mid54 = mid;\n        long mid55 = mid;\n\
    \        long mid56 = mid;\n        long mid57 = mid;\n        long mid58 = mid;\n\
    \        long mid59 = mid;\n        long mid60 = mid;\n        long mid61 = mid;\n\
    \        long mid62 = mid;\n        long mid63 = ", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for(long i : lst) {\n    \
    \        if(i<smallest) {\n                secondSmallest = smallest;\n      \
    \          smallest = i;\n            }\n            if(i>smallest) {\n      \
    \          secondSmallest = i;\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long min = lst.get(0);\n        long max = lst.get(lst.size()-1);\n   \
    \     for(int i = 1; i < lst.size(); i++) {\n            if(lst.get(i) < min)\
    \ {\n                min = lst.get(i);\n            }\n            if(lst.get(i)\
    \ > max) {\n                max = lst.get(i);\n            }\n        }\n    \
    \    return Optional.ofNullable(max);", "        if (lst.isEmpty()) {\n      \
    \      return Optional.empty();\n        }\n        Long smallest = lst.get(0);\n\
    \        Long second = smallest;\n        for (Long e : lst) {\n            if\
    \ (e < smallest) {\n                second = smallest;\n                smallest\
    \ = e;\n            } else if (e < second) {\n                second = e;\n  \
    \          }\n        }\n        return Optional.of(second);", "        Optional<Long>\
    \ smallest = lst.stream().min(Comparator.naturalOrder());\n        if (smallest.isPresent())\
    \ {\n            return smallest;\n        }\n        return Optional.empty();",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(long i : lst) {\n            if(i == smallest) {\n              \
    \  secondSmallest = i;\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for(int i = 2; i < lst.size(); i++) {\n            if(lst.get(i) < smallest)\
    \ {\n                secondSmallest = lst.get(i);\n                smallest =\
    \ lst.get(i);\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        Long minValue = lst.get(0);\n        Long secondMinValue = minValue;\n\
    \        for (Long value : lst) {\n            if (value < minValue) {\n     \
    \           secondMinValue = minValue;\n                minValue = value;\n  \
    \          } else if (value < secondMinValue) {\n                secondMinValue\
    \ = value;\n            }\n        }\n        return Optional.of(secondMinValue);",
  "        Collections.sort(lst);\n        if (lst.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        Long second = lst.get(1);\n        lst.remove(lst.size()\
    \ - 1);\n        return Optional.of(second);", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for(long i : lst) {\n    \
    \        if(i < smallest) {\n                secondSmallest = smallest;\n    \
    \            smallest = i;\n            } else if(i < secondSmallest) {\n    \
    \            secondSmallest = i;\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        if (lst.size() <= 1) return Optional.empty();\n        long min = lst.get(0);\n\
    \        long max = lst.get(0);\n        for (long i : lst) {\n            if\
    \ (i < min) min = i;\n            if (i > max) max = i;\n        }\n        return\
    \ Optional.ofNullable(max);", "        Optional<Long> result = Optional.empty();\n\
    \        if (lst.size() > 0) {\n            Long minValue = lst.get(0);\n    \
    \        Long minIndex = -1;\n            for (int i = 1; i < lst.size(); i++)\
    \ {\n                if (minValue > lst.get(i)) {\n                    minValue\
    \ = lst.get(i);\n                    minIndex = i;\n                }\n      \
    \      }\n            if (minIndex != -1) {\n                result = Optional.of(lst.get(minIndex\
    \ + 1));\n            }\n        }\n        return result;", "        if (lst.size()\
    \ <= 1) return Optional.empty();\n        long smallest = lst.get(0);\n      \
    \  long secondSmallest = lst.get(1);\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            if (lst.get(i) < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst.get(i);\n            } else if (lst.get(i)\
    \ == smallest) {\n                secondSmallest = lst.get(i);\n            }\n\
    \        }\n        return Optional.of(secondSmallest);", "        long min =\
    \ lst.get(0);\n        long max = lst.get(0);\n        for (long i : lst) {\n\
    \            if (i < min) {\n                min = i;\n            } else if (i\
    \ > max) {\n                max = i;\n            }\n        }\n        return\
    \ Optional.ofNullable(max);", "        long smallest = lst.get(0);\n        long\
    \ secondSmallest = lst.get(1);\n        for(int i = 2; i < lst.size(); i++) {\n\
    \            if(lst.get(i) < smallest) {\n                secondSmallest = lst.get(i);\n\
    \                smallest = lst.get(i);\n            }\n        }\n        return\
    \ Optional.ofNullable(secondSmallest);", "        Collections.sort(lst);\n   \
    \     if (lst.size() <= 1) return Optional.empty();\n        Long second = lst.get(1);\n\
    \        lst.remove(lst.size() - 1);\n        return Optional.of(second);", " \
    \       Collections.sort(lst);\n        if (lst.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(lst.get(1));", "  \
    \      long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        if (lst.size() > 2) {\n            for (int i = 2; i < lst.size(); i++)\
    \ {\n                if (lst.get(i) < smallest) {\n                    secondSmallest\
    \ = lst.get(i);\n                    smallest = lst.get(i);\n                }\n\
    \            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        long thirdSmallest = lst.get(2);\n        long fourthSmallest = lst.get(3);\n\
    \        long fifthSmallest = lst.get(4);\n        long sixthSmallest = lst.get(5);\n\
    \        if (smallest > secondSmallest) {\n            if (secondSmallest > thirdSmallest)\
    \ {\n                if (thirdSmallest > fourthSmallest) {\n                 \
    \   if (fourthSmallest > fifthSmallest) {\n                        if (fifthSmallest\
    \ > sixthSmallest) {\n                            return Optional.of(sixthSmallest);\n\
    \                        }\n                        return Optional.of(fifthSmallest);\n\
    \                    }\n                    return Optional.of(fourthSmallest);\n\
    \                }\n                return Optional.of(thirdSmallest);\n     \
    \       }\n            return Optional.of(secondSmallest);\n        }\n      \
    \  return Optional.of(smallest);", "        Collections.sort(lst);\n        if\
    \ (lst.size() <= 1) return Optional.empty();\n        Long smallest = lst.get(0);\n\
    \        Long second = lst.get(1);\n        if (second < smallest) return Optional.empty();\n\
    \        return Optional.of(second);", "        Optional<Long> result = Optional.empty();\n\
    \        Long min = null;\n        for (Long l : lst) {\n            if (min ==\
    \ null || l < min) {\n                min = l;\n                result = Optional.of(l);\n\
    \            }\n        }\n        return result;", "        long min = lst.get(0);\n\
    \        long max = lst.get(0);\n        for(int i = 1; i < lst.size(); i++) {\n\
    \            long current = lst.get(i);\n            if(current < min) {\n   \
    \             min = current;\n            }\n            if(current > max) {\n\
    \                max = current;\n            }\n        }\n        return Optional.ofNullable(max);",
  "        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        if (smallest.isPresent()) {\n            return smallest;\n        }\n\
    \        return Optional.empty();", "        if (lst.size() == 0) {\n        \
    \    return Optional.empty();\n        }\n        long min = lst.get(0);\n   \
    \     long min2 = lst.get(1);\n        long min3 = lst.get(2);\n        long min4\
    \ = lst.get(3);\n        long min5 = lst.get(4);\n        long min6 = lst.get(5);\n\
    \        long min7 = lst.get(6);\n        long min8 = lst.get(7);\n        long\
    \ min9 = lst.get(8);\n        long min10 = lst.get(9);\n        long min11 = lst.get(10);\n\
    \        long min12 = lst.get(11);\n        long min13 = lst.get(12);\n      \
    \  long min14 = lst.get(13);\n        long min15 = lst.get(14);\n        long\
    \ min16 = lst.get(15);\n        long min17 = lst.get(16);\n        long min18\
    \ = lst.get(17);\n        long min19 = lst.get(18);\n        long min20 = lst.get(19);\n\
    \        long min21 = lst.get(20);\n        long min22 = lst.get(21);\n      \
    \  long min23 = lst.get(22);\n        long min24 = lst.get(23);\n        long\
    \ min25 = lst.get(24);\n        long min26 = lst.get(25);\n        long min27\
    \ = lst.get(26);\n        long min28 = lst.get(27);\n        long min29 = lst.get(28);\n\
    \        long min30 = lst.get(29);\n        long min31 = lst.get(30);\n      \
    \  long min32 = lst.get(31);\n        long min33 = lst.get(32);\n        long\
    \ min34 = lst.get(33);\n        long min35 = lst.get(34);\n        long min36\
    \ = lst.get(35);\n        long min37 = lst.get(36);\n        long min38 = lst.get(37);\n\
    \        long min39 = lst.get(38);\n        long min40 = lst.get(39);\n      \
    \  long min41 = lst.get(40);\n        long min42 = lst.get(41);\n        long\
    \ min43 = lst.get(42);\n        long min44 = lst.get(43);\n        long min45\
    \ = lst.get(44);\n        long min46 = lst.get(45);\n        long min47 = lst.get(46);\n\
    \        long min48 = lst.get(47);\n        long min49 = lst.get(48);\n      \
    \  long min50 = lst.get(49);\n        long min51 = lst.get(50);\n        long\
    \ min52 = lst.get(51);\n        long min53 = lst.get(52);\n", "        long min\
    \ = lst.get(0);\n        long max = lst.get(0);\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            long current = lst.get(i);\n            if (current < min)\
    \ {\n                min = current;\n            } else if (current > max) {\n\
    \                max = current;\n            }\n        }\n        return Optional.ofNullable(max);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (long i : lst) {\n            if (i < smallest) {\n             \
    \   secondSmallest = smallest;\n                smallest = i;\n            } else\
    \ if (i < secondSmallest) {\n                secondSmallest = i;\n           \
    \ }\n        }\n        return Optional.ofNullable(secondSmallest);", "      \
    \  if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n   \
    \     long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        long thirdSmallest = lst.get(2);\n        long fourthSmallest = lst.get(3);\n\
    \        long fifthSmallest = lst.get(4);\n        if (smallest > secondSmallest\
    \ && smallest > thirdSmallest && smallest > fourthSmallest && smallest > fifthSmallest)\
    \ {\n            return Optional.of(smallest);\n        } else if (secondSmallest\
    \ > smallest && secondSmallest > thirdSmallest && secondSmallest > fourthSmallest\
    \ && secondSmallest > fifthSmallest) {\n            return Optional.of(secondSmallest);\n\
    \        } else if (thirdSmallest > smallest && thirdSmallest > secondSmallest\
    \ && thirdSmallest > fourthSmallest && thirdSmallest > fifthSmallest) {\n    \
    \        return Optional.of(thirdSmallest);\n        } else if (fourthSmallest\
    \ > smallest && fourthSmallest > secondSmallest && fourthSmallest > thirdSmallest\
    \ && fourthSmallest > fifthSmallest) {\n            return Optional.of(fourthSmallest);\n\
    \        } else if (fifthSmallest > smallest && fifthSmallest > secondSmallest\
    \ && fifthSmallest > thirdSmallest && fifthSmallest > fourthSmallest) {\n    \
    \        return Optional.of(fifthSmallest);\n        } else {\n            return\
    \ Optional.empty();\n        }", "        Collections.sort(lst);\n        if (lst.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        if (lst.size()\
    \ == 1) {\n            return Optional.of(lst.get(0));\n        }\n        return\
    \ Optional.of(lst.get(1));", "        long smallest = lst.get(0);\n        long\
    \ secondSmallest = lst.get(1);\n        for(long i : lst) {\n            if(i\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = i;\n            } else if(i < secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = lst.get(i);\n            }\n \
    \       }\n        return Optional.ofNullable(secondSmallest);", "        if (lst.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = lst.get(0);\n        long secondSmallest = lst.get(1);\n        for (int i\
    \ = 2; i < lst.size(); i++) {\n            if (lst.get(i) < smallest) {\n    \
    \            secondSmallest = lst.get(i);\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);", "        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        if (smallest.isPresent()) {\n            return smallest;\n        }\n\
    \        return Optional.empty();", "        long smallest = lst.get(0);\n   \
    \     long secondSmallest = lst.get(1);\n        for(int i = 2; i < lst.size();\
    \ i++) {\n            if(lst.get(i) < smallest) {\n                secondSmallest\
    \ = lst.get(i);\n                smallest = lst.get(i);\n            }\n     \
    \   }\n        return Optional.ofNullable(secondSmallest);", "        Optional<Long>\
    \ result = Optional.empty();\n        if (lst.size() > 0) {\n            long\
    \ smallest = lst.get(0);\n            for (int i = 1; i < lst.size(); i++) {\n\
    \                if (lst.get(i) < smallest) {\n                    result = Optional.of(lst.get(i));\n\
    \                    smallest = lst.get(i);\n                }\n            }\n\
    \        }\n        return result;", "        Optional<Long> result = Optional.empty();\n\
    \        if (lst.size() > 0) {\n            long smallest = lst.get(0);\n    \
    \        long secondSmallest = lst.get(1);\n            long thirdSmallest = lst.get(2);\n\
    \            long fourthSmallest = lst.get(3);\n            long fifthSmallest\
    \ = lst.get(4);\n            long sixthSmallest = lst.get(5);\n            long\
    \ seventhSmallest = lst.get(6);\n            long eighthSmallest = lst.get(7);\n\
    \            long ninthSmallest = lst.get(8);\n            long tenthSmallest\
    \ = lst.get(9);\n            long eleventhSmallest = lst.get(10);\n          \
    \  long twelfthSmallest = lst.get(11);\n            long thirteenthSmallest =\
    \ lst.get(12);\n            long fourteenthSmallest = lst.get(13);\n         \
    \   long fifteenthSmallest = lst.get(14);\n            long sixteenthSmallest\
    \ = lst.get(15);\n            long seventeenthSmallest = lst.get(16);\n      \
    \      long eighteenthSmallest = lst.get(17);\n            long nineteenthSmallest\
    \ = lst.get(18);\n            long twentiethSmallest = lst.get(19);\n        \
    \    long twentyFirstSmallest = lst.get(20);\n            long twentySecondSmallest\
    \ = lst.get(21);\n            long twentyThirdSmallest = lst.get(22);\n      \
    \      long twentyFourthSmallest = lst.get(23);\n            long twentyFifthSmallest\
    \ = lst.get(24);\n            long twentySixthSmallest = lst.get(25);\n      \
    \      long twentySeventhSmallest = lst.get(26);\n            long twentyEighthSmallest\
    \ = lst.get(27);\n            long twentyNinthSmallest = lst.get(28);\n      \
    \      long thirtiethSmallest = lst.get(29);\n            long thirtyFirstSmallest\
    \ = lst.get(30);\n            long thirtySecondSmallest = lst.get(31);\n     \
    \       long thirtyThirdSmallest = lst.get(32);\n            long thirtyFourthSmallest\
    \ = lst.get(33);\n            long thirtyFifthSmallest = lst.get(34);\n      \
    \      long thirtySixthSmallest = lst.get(35);\n            long thirtySeventhSmallest\
    \ = lst.get(36);\n            long thirtyEighthSmallest = lst", "        if (lst.size()\
    \ == 0) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = lst.get(0);\n        long secondSmallest = lst.get(1);\n        for (int i\
    \ = 2; i < lst.size(); i++) {\n            if (lst.get(i) < smallest) {\n    \
    \            secondSmallest = lst.get(i);\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);", "        long smallest = lst.get(0);\n      \
    \  long secondSmallest = lst.get(1);\n        long thirdSmallest = lst.get(2);\n\
    \        long fourthSmallest = lst.get(3);\n        long fifthSmallest = lst.get(4);\n\
    \        if (lst.size() > 0) {\n            smallest = lst.get(0);\n         \
    \   secondSmallest = lst.get(1);\n            thirdSmallest = lst.get(2);\n  \
    \          fourthSmallest = lst.get(3);\n            fifthSmallest = lst.get(4);\n\
    \        }\n        if (smallest > secondSmallest && smallest > thirdSmallest\
    \ && smallest > fourthSmallest && smallest > fifthSmallest) {\n            return\
    \ Optional.of(smallest);\n        } else if (secondSmallest > thirdSmallest &&\
    \ secondSmallest > fourthSmallest && secondSmallest > fifthSmallest) {\n     \
    \       return Optional.of(secondSmallest);\n        } else if (thirdSmallest\
    \ > fourthSmallest && thirdSmallest > fifthSmallest) {\n            return Optional.of(thirdSmallest);\n\
    \        } else if (fourthSmallest > fifthSmallest) {\n            return Optional.of(fourthSmallest);\n\
    \        } else {\n            return Optional.of(fifthSmallest);\n        }",
  "        if (lst.size() <= 1) return Optional.empty();\n        Long smallest =\
    \ lst.get(0);\n        Long secondSmallest = lst.get(1);\n        Long thirdSmallest\
    \ = lst.get(2);\n        Long fourthSmallest = lst.get(3);\n        Long fifthSmallest\
    \ = lst.get(4);\n        Long sixthSmallest = lst.get(5);\n        Long seventhSmallest\
    \ = lst.get(6);\n        Long eighthSmallest = lst.get(7);\n        Long ninthSmallest\
    \ = lst.get(8);\n        Long tenthSmallest = lst.get(9);\n        Long eleventhSmallest\
    \ = lst.get(10);\n        Long twelfthSmallest = lst.get(11);\n        Long thirteenthSmallest\
    \ = lst.get(12);\n        Long fourteenthSmallest = lst.get(13);\n        Long\
    \ fifteenthSmallest = lst.get(14);\n        Long sixteenthSmallest = lst.get(15);\n\
    \        Long seventeenthSmallest = lst.get(16);\n        Long eighteenthSmallest\
    \ = lst.get(17);\n        Long nineteenthSmallest = lst.get(18);\n        Long\
    \ twentiethSmallest = lst.get(19);\n        Long twentyFirstSmallest = lst.get(20);\n\
    \        Long twentySecondSmallest = lst.get(21);\n        Long twentyThirdSmallest\
    \ = lst.get(22);\n        Long twentyFourthSmallest = lst.get(23);\n        Long\
    \ twentyFifthSmallest = lst.get(24);\n        Long twentySixthSmallest = lst.get(25);\n\
    \        Long twentySeventhSmallest = lst.get(26);\n        Long twentyEighthSmallest\
    \ = lst.get(27);\n        Long twentyNinthSmallest = lst.get(28);\n        Long\
    \ thirtiethSmallest = lst.get(29);\n        Long thirtyFirstSmallest = lst.get(30);\n\
    \        Long thirtySecondSmallest = lst.get(31);\n        Long thirtyThirdSmallest\
    \ = lst.get(32);\n        Long thirtyFourthSmallest = lst.get(33);\n        Long\
    \ thirtyFifthSmallest = lst.get(34);\n        Long thirtySixthSmallest = ", " \
    \       long min = lst.stream().min(Comparator.naturalOrder()).get();\n      \
    \  return lst.stream().filter(x -> x < min).findFirst();", "        long min =\
    \ lst.get(0);\n        long max = lst.get(0);\n        for(long i : lst) {\n \
    \           if(i<min) {\n                min = i;\n            }\n           \
    \ if(i>max) {\n                max = i;\n            }\n        }\n        if(min==max)\
    \ {\n            return Optional.empty();\n        }\n        return Optional.of(lst.get(lst.indexOf(min)+1));",
  "        Optional<Long> result = Optional.empty();\n        long smallest = lst.stream().min(Comparator.naturalOrder()).get();\n\
    \        for(long i : lst) {\n            if(i < smallest) {\n               \
    \ result = Optional.of(i);\n                break;\n            }\n        }\n\
    \        return result;", "        Collections.sort(lst);\n        if (lst.size()\
    \ >= 2) {\n            return Optional.of(lst.get(1));\n        }\n        return\
    \ Optional.empty();", "        Optional<Long> result = Optional.empty();\n   \
    \     if (lst.size() > 0) {\n            Long minValue = lst.get(0);\n       \
    \     Long minIndex = -1;\n            for (int i = 1; i < lst.size(); i++) {\n\
    \                if (lst.get(i) < minValue) {\n                    minValue =\
    \ lst.get(i);\n                    minIndex = i;\n                }\n        \
    \    }\n            if (minIndex != -1) {\n                result = Optional.of(lst.get(minIndex\
    \ + 1));\n            }\n        }\n        return result;", "        Collections.sort(lst);\n\
    \        if (lst.size() >= 2) {\n            return Optional.of(lst.get(1));\n\
    \        }\n        return Optional.empty();", "        Collections.sort(lst);\n\
    \        if (lst.size() == 0) {\n            return Optional.empty();\n      \
    \  }\n        Long result = lst.get(1);\n        if (lst.size() > 2) {\n     \
    \       for (int i = 2; i < lst.size(); i++) {\n                if (lst.get(i)\
    \ < result) {\n                    result = lst.get(i);\n                }\n \
    \           }\n        }\n        return Optional.of(result);", "        if (lst.isEmpty())\
    \ return Optional.empty();\n        long smallest = lst.get(0);\n        long\
    \ secondSmallest = lst.get(1);\n        for (long i : lst) {\n            if (i\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = i;\n            } else if (i == smallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return Optional.of(secondSmallest);",
  "        Optional<Long> first = lst.stream().min(Comparator.naturalOrder());\n \
    \       if (first.isPresent()) {\n            return first;\n        }\n     \
    \   Optional<Long> second = lst.stream().min(Comparator.naturalOrder()).map(Long::longValue);\n\
    \        if (second.isPresent()) {\n            return second;\n        }\n  \
    \      return Optional.empty();", "        Collections.sort(lst);\n        if\
    \ (lst.size() <= 1) return Optional.empty();\n        return Optional.of(lst.get(1));",
  "        long min = lst.get(0);\n        long max = lst.get(0);\n        for(long\
    \ i : lst) {\n            if(i < min) {\n                min = i;\n          \
    \  }\n            if(i > max) {\n                max = i;\n            }\n   \
    \     }\n        if(min == max) {\n            return Optional.empty();\n    \
    \    }\n        return Optional.of(lst.get(lst.indexOf(min) + 1));", "       \
    \ Optional<Long> result = Optional.empty();\n        if (lst.size() > 0) {\n \
    \           Long smallest = lst.get(0);\n            Long secondSmallest = lst.get(1);\n\
    \            Long thirdSmallest = lst.get(2);\n            Long fourthSmallest\
    \ = lst.get(3);\n            Long fifthSmallest = lst.get(4);\n            Long\
    \ sixthSmallest = lst.get(5);\n            if (smallest < secondSmallest) {\n\
    \                result = Optional.of(secondSmallest);\n            } else if\
    \ (smallest < thirdSmallest) {\n                result = Optional.of(thirdSmallest);\n\
    \            } else if (smallest < fourthSmallest) {\n                result =\
    \ Optional.of(fourthSmallest);\n            } else if (smallest < fifthSmallest)\
    \ {\n                result = Optional.of(fifthSmallest);\n            } else\
    \ if (smallest < sixthSmallest) {\n                result = Optional.of(sixthSmallest);\n\
    \            }\n        }\n        return result;", "        if (lst.size() ==\
    \ 0) {\n            return Optional.empty();\n        }\n        long smallest\
    \ = lst.get(0);\n        long secondSmallest = lst.get(1);\n        long thirdSmallest\
    \ = lst.get(2);\n        long fourthSmallest = lst.get(3);\n        long fifthSmallest\
    \ = lst.get(4);\n        long sixthSmallest = lst.get(5);\n        long seventhSmallest\
    \ = lst.get(6);\n        long eighthSmallest = lst.get(7);\n        long ninthSmallest\
    \ = lst.get(8);\n        long tenthSmallest = lst.get(9);\n        long eleventhSmallest\
    \ = lst.get(10);\n        long twelfthSmallest = lst.get(11);\n        long thirteenthSmallest\
    \ = lst.get(12);\n        long fourteenthSmallest = lst.get(13);\n        long\
    \ fifteenthSmallest = lst.get(14);\n        long sixteenthSmallest = lst.get(15);\n\
    \        long seventeenthSmallest = lst.get(16);\n        long eighteenthSmallest\
    \ = lst.get(17);\n        long nineteenthSmallest = lst.get(18);\n        long\
    \ twentiethSmallest = lst.get(19);\n        long twentyFirstSmallest = lst.get(20);\n\
    \        long twentySecondSmallest = lst.get(21);\n        long twentyThirdSmallest\
    \ = lst.get(22);\n        long twentyFourthSmallest = lst.get(23);\n        long\
    \ twentyFifthSmallest = lst.get(24);\n        long twentySixthSmallest = lst.get(25);\n\
    \        long twentySeventhSmallest = lst.get(26);\n        long twentyEighthSmallest\
    \ = lst.get(27);\n        long twentyNinthSmallest = lst.get(28);\n        long\
    \ thirtiethSmallest = lst.get(29);\n        long thirtyFirstSmallest = lst.get(30);\n\
    \        long thirtySecondSmallest = lst.get(31);\n        long thirtyThirdSmallest\
    \ = lst.get(32);\n        long thirtyFourthSmallest = lst.get(33);\n        long\
    \ thirtyFifthSmallest = lst.get(34);\n        long thirtySixthSmallest = lst.get(35);\n\
    \        long thirtySeventhSmallest = lst.get(36);\n        long thirtyEighthSmallest\
    \ = lst.get(37);", "        if (lst.isEmpty()) {\n            return Optional.empty();\n\
    \        }\n        Long min = lst.get(0);\n        Long max = lst.get(0);\n \
    \       for (Long val : lst) {\n            if (val < min) {\n               \
    \ min = val;\n            }\n            if (val > max) {\n                max\
    \ = val;\n            }\n        }\n        if (min == max) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(max);", "        Optional<Long>\
    \ smallest = lst.stream().min(Comparator.naturalOrder());\n        if (smallest.isPresent())\
    \ {\n            return smallest;\n        } else {\n            return Optional.empty();\n\
    \        }", "        if (lst.size() < 2) return Optional.empty();\n        long\
    \ smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n        long\
    \ thirdSmallest = lst.get(2);\n        long fourthSmallest = lst.get(3);\n   \
    \     long fifthSmallest = lst.get(4);\n        if (smallest < secondSmallest)\
    \ {\n            if (secondSmallest < thirdSmallest) {\n                if (thirdSmallest\
    \ < fourthSmallest) {\n                    if (fourthSmallest < fifthSmallest)\
    \ {\n                        return Optional.of(fifthSmallest);\n            \
    \        } else {\n                        return Optional.of(fourthSmallest);\n\
    \                    }\n                } else {\n                    return Optional.of(thirdSmallest);\n\
    \                }\n            } else {\n                return Optional.of(secondSmallest);\n\
    \            }\n        } else {\n            return Optional.of(smallest);\n\
    \        }", "        long smallest = lst.get(0);\n        long secondSmallest\
    \ = lst.get(1);\n        if (lst.size() > 2) {\n            for (int i = 2; i\
    \ < lst.size(); i++) {\n                long current = lst.get(i);\n         \
    \       if (current < smallest) {\n                    secondSmallest = smallest;\n\
    \                    smallest = current;\n                } else if (current <\
    \ secondSmallest) {\n                    secondSmallest = current;\n         \
    \       }\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        long min = lst.stream().min(Comparator.naturalOrder()).get();\n       \
    \ long max = lst.stream().max(Comparator.naturalOrder()).get();\n        return\
    \ lst.stream().filter(x -> x <= max && x >= min).findFirst();", "        long\
    \ smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n        for(long\
    \ i : lst) {\n            if(i<smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = i;\n            }\n            if(i>smallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ Optional.ofNullable(secondSmallest);", "        if (lst.isEmpty()) {\n     \
    \       return Optional.empty();\n        }\n        long min = lst.get(0);\n\
    \        long max = lst.get(0);\n        for (long i : lst) {\n            if\
    \ (i < min) {\n                min = i;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return Optional.ofNullable(max);",
  "        Optional<Long> result = Optional.empty();\n        if (lst.size() > 0)\
    \ {\n            Long min = lst.get(0);\n            Long min2 = lst.get(1);\n\
    \            for (int i = 2; i < lst.size(); i++) {\n                if (lst.get(i)\
    \ < min) {\n                    min = lst.get(i);\n                } else if (lst.get(i)\
    \ < min2) {\n                    min2 = lst.get(i);\n                }\n     \
    \       }\n            result = Optional.of(min2);\n        }\n        return\
    \ result;", "        long smallest = lst.get(0);\n        long secondSmallest\
    \ = lst.get(1);\n        for(int i = 2; i < lst.size(); i++) {\n            if(lst.get(i)\
    \ < smallest) {\n                secondSmallest = lst.get(i);\n              \
    \  smallest = lst.get(i);\n            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        Collections.sort(lst);\n        if (lst.size() <= 1) return Optional.empty();\n\
    \        return Optional.of(lst.get(2));", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        if (lst.size() > 2) {\n  \
    \          for (int i = 2; i < lst.size(); i++) {\n                if (lst.get(i)\
    \ < smallest) {\n                    secondSmallest = lst.get(i);\n          \
    \          smallest = lst.get(i);\n                }\n            }\n        }\n\
    \        return Optional.ofNullable(secondSmallest);", "        long min = lst.get(0);\n\
    \        long max = lst.get(0);\n        for (long i : lst) {\n            if\
    \ (i < min) {\n                min = i;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return Optional.ofNullable(max);",
  "        long min = lst.get(0);\n        long max = lst.get(0);\n        for (int\
    \ i = 1; i < lst.size(); i++) {\n            long curr = lst.get(i);\n       \
    \     if (curr < min) {\n                min = curr;\n            } else if (curr\
    \ > max) {\n                max = curr;\n            }\n        }\n        return\
    \ Optional.ofNullable(max);", "        if (lst.isEmpty()) {\n            return\
    \ Optional.empty();\n        }\n        Long smallest = lst.get(0);\n        Long\
    \ secondSmallest = smallest;\n        for (int i = 1; i < lst.size(); i++) {\n\
    \            if (lst.get(i) < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst.get(i);\n            } else if (lst.get(i) ==\
    \ smallest) {\n                secondSmallest = lst.get(i);\n            }\n \
    \       }\n        return Optional.of(secondSmallest);", "        if (lst.isEmpty())\
    \ {\n            return Optional.empty();\n        }\n        long smallest =\
    \ lst.get(0);\n        long secondSmallest = lst.get(1);\n        for (long e\
    \ : lst) {\n            if (e < smallest) {\n                secondSmallest =\
    \ smallest;\n                smallest = e;\n            } else if (e < secondSmallest)\
    \ {\n                secondSmallest = e;\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);", "        Optional<Long> smallest = lst.stream().min(Comparator.naturalOrder());\n\
    \        if (smallest.isPresent()) {\n            return smallest;\n        }\n\
    \        return Optional.empty();", "        if (lst.size() == 0) {\n        \
    \    return Optional.empty();\n        }\n        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for (int i = 2; i < lst.size();\
    \ i++) {\n            if (lst.get(i) < smallest) {\n                secondSmallest\
    \ = lst.get(i);\n                smallest = lst.get(i);\n            } else if\
    \ (lst.get(i) == smallest) {\n                secondSmallest = lst.get(i);\n \
    \           }\n        }\n        return Optional.of(secondSmallest);", "    \
    \    Collections.sort(lst);\n        if (lst.size() >= 2) {\n            return\
    \ Optional.of(lst.get(1));\n        }\n        return Optional.empty();", "  \
    \      long min = lst.get(0);\n        long max = lst.get(0);\n        for(long\
    \ i : lst) {\n            if(i<min) {\n                min = i;\n            }\n\
    \            if(i>max) {\n                max = i;\n            }\n        }\n\
    \        return Optional.ofNullable(max);", "        Collections.sort(lst);\n\
    \        if (lst.size() <= 1) return Optional.empty();\n        return Optional.of(lst.get(1));",
  "        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) <\
    \ smallest) {\n                secondSmallest = lst.get(i);\n                smallest\
    \ = lst.get(i);\n            } else if (lst.get(i) == smallest) {\n          \
    \      secondSmallest = lst.get(i);\n            }\n        }\n        return\
    \ Optional.of(secondSmallest);", "        Optional<Long> result = Optional.empty();\n\
    \        Long smallest = lst.stream().min(Comparator.naturalOrder()).orElse(null);\n\
    \        if (smallest != null) {\n            result = Optional.of(smallest);\n\
    \        }\n        return result;", "        Collections.sort(lst);\n       \
    \ if (lst.size() > 1) {\n            return Optional.of(lst.get(1));\n       \
    \ } else {\n            return Optional.empty();\n        }", "        long smallest\
    \ = lst.get(0);\n        long secondSmallest = lst.get(1);\n        for(int i\
    \ = 2; i < lst.size(); i++) {\n            long currentValue = lst.get(i);\n \
    \           if(currentValue < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = currentValue;\n            } else if(currentValue\
    \ < secondSmallest) {\n                secondSmallest = currentValue;\n      \
    \      }\n        }\n        return Optional.ofNullable(secondSmallest);", " \
    \       Collections.sort(lst);\n        if (lst.size() <= 1) return Optional.empty();\n\
    \        long smallest = lst.get(0);\n        long second = lst.get(1);\n    \
    \    lst.remove(0);\n        lst.remove(1);\n        return Optional.of(smallest);",
  "        Collections.sort(lst);\n        if (lst.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        return Optional.of(lst.get(1));", "  \
    \      long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        long thirdSmallest = lst.get(2);\n        long fourthSmallest = lst.get(3);\n\
    \        long fifthSmallest = lst.get(4);\n        if (lst.size() > 5) {\n   \
    \         smallest = lst.get(5);\n        }\n        if (lst.size() > 6) {\n \
    \           secondSmallest = lst.get(6);\n        }\n        if (lst.size() >\
    \ 7) {\n            thirdSmallest = lst.get(7);\n        }\n        if (lst.size()\
    \ > 8) {\n            fourthSmallest = lst.get(8);\n        }\n        if (lst.size()\
    \ > 9) {\n            fifthSmallest = lst.get(9);\n        }\n        if (lst.size()\
    \ > 10) {\n            smallest = lst.get(10);\n        }\n        if (lst.size()\
    \ > 11) {\n            secondSmallest = lst.get(11);\n        }\n        if (lst.size()\
    \ > 12) {\n            thirdSmallest = lst.get(12);\n        }\n        if (lst.size()\
    \ > 13) {\n            fourthSmallest = lst.get(13);\n        }\n        if (lst.size()\
    \ > 14) {\n            fifthSmallest = lst.get(14);\n        }\n        if (lst.size()\
    \ > 15) {\n            smallest = lst.get(15);\n        }\n        if (lst.size()\
    \ > 16) {\n            secondSmallest = lst.get(16);\n        }\n        if (lst.size()\
    \ > 17) {\n            thirdSmallest = lst.get(17);\n        }\n        if (lst.size()\
    \ > 18) {\n            fourthSmallest = lst.get(18);\n        }\n        if (lst.size()\
    \ > 19) {\n            fifthSmallest = lst.get(19);\n        }\n        if (lst.size()\
    \ > 20) {\n            smallest = lst.get(20);\n        }\n        if (lst.size()\
    \ > 21) {\n            secondSmallest = lst.get(21);\n        }\n        if (lst.size()\
    \ > 22) {\n            thirdSmallest = lst.get(22);\n        }\n        if (lst.size()\
    \ > 23) {\n            fourthSmallest = lst.get(23);\n        }\n        if (lst.size()\
    \ > 24) {\n            fifthSmallest = lst.get(24);\n        }\n        if (lst.size()\
    \ > 25) {\n            smallest = lst.get(25);\n        }\n        if (lst.size()\
    \ > 26) {\n            secondSmallest = lst.get(26);\n        }\n        if (lst.size()\
    \ > 27) {\n            thirdSmallest = lst.get(27);\n        }\n        if (lst.size()\
    \ > 28) {\n            fourthSmalle", "        Collections.sort(lst);\n      \
    \  if (lst.size() <= 1) return Optional.empty();\n        return Optional.of(lst.get(1));",
  "        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        long thirdSmallest = lst.get(2);\n        long fourthSmallest = lst.get(3);\n\
    \        long fifthSmallest = lst.get(4);\n        if (smallest > secondSmallest)\
    \ {\n            if (secondSmallest > thirdSmallest) {\n                if (thirdSmallest\
    \ > fourthSmallest) {\n                    if (fourthSmallest > fifthSmallest)\
    \ {\n                        return Optional.of(fifthSmallest);\n            \
    \        } else {\n                        return Optional.of(fourthSmallest);\n\
    \                    }\n                } else {\n                    return Optional.of(thirdSmallest);\n\
    \                }\n            } else {\n                return Optional.of(secondSmallest);\n\
    \            }\n        } else {\n            return Optional.of(smallest);\n\
    \        }", "        Collections.sort(lst);\n        if (lst.size() == 0) {\n\
    \            return Optional.empty();\n        }\n        Long second = lst.get(1);\n\
    \        lst.remove(lst.size() - 1);\n        return Optional.of(second);", " \
    \       Collections.sort(lst);\n        if (lst.size() <= 1) return Optional.empty();\n\
    \        Long smallest = lst.get(0);\n        Long second = lst.get(1);\n    \
    \    if (second < smallest) {\n            second = smallest;\n            smallest\
    \ = lst.get(0);\n        }\n        return Optional.of(second);", "        if\
    \ (lst.size() < 2) {\n            return Optional.empty();\n        }\n      \
    \  Long min1 = lst.get(0);\n        Long min2 = lst.get(1);\n        Long min3\
    \ = lst.get(2);\n        Long min4 = lst.get(3);\n        Long min5 = lst.get(4);\n\
    \        Long min6 = lst.get(5);\n        Long min7 = lst.get(6);\n        Long\
    \ min8 = lst.get(7);\n        Long min9 = lst.get(8);\n        Long min10 = lst.get(9);\n\
    \        Long min11 = lst.get(10);\n        Long min12 = lst.get(11);\n      \
    \  Long min13 = lst.get(12);\n        Long min14 = lst.get(13);\n        Long\
    \ min15 = lst.get(14);\n        Long min16 = lst.get(15);\n        Long min17\
    \ = lst.get(16);\n        Long min18 = lst.get(17);\n        Long min19 = lst.get(18);\n\
    \        Long min20 = lst.get(19);\n        Long min21 = lst.get(20);\n      \
    \  Long min22 = lst.get(21);\n        Long min23 = lst.get(22);\n        Long\
    \ min24 = lst.get(23);\n        Long min25 = lst.get(24);\n        Long min26\
    \ = lst.get(25);\n        Long min27 = lst.get(26);\n        Long min28 = lst.get(27);\n\
    \        Long min29 = lst.get(28);\n        Long min30 = lst.get(29);\n      \
    \  Long min31 = lst.get(30);\n        Long min32 = lst.get(31);\n        Long\
    \ min33 = lst.get(32);\n        Long min34 = lst.get(33);\n        Long min35\
    \ = lst.get(34);\n        Long min36 = lst.get(35);\n        Long min37 = lst.get(36);\n\
    \        Long min38 = lst.get(37);\n        Long min39 = lst.get(38);\n      \
    \  Long min40 = lst.get(39);\n        Long min41 = lst.get(40);\n        Long\
    \ min42 = lst.get(41);\n        Long min43 = lst.get(42);\n        Long min44\
    \ = lst.get(43);\n        Long min45 = lst.get(44);\n        Long min46 = lst.get(45);\n\
    \        Long min47 = lst.get(46);\n        Long min48 = lst.get(47);\n      \
    \  ", "        long min = lst.get(0);\n        long max = lst.get(0);\n      \
    \  for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n\
    \                min = lst.get(i);\n            } else if (lst.get(i) > max) {\n\
    \                max = lst.get(i);\n            }\n        }\n        return Optional.ofNullable(max);",
  "        Collections.sort(lst);\n        if (lst.size() <= 1) return Optional.empty();\n\
    \        return Optional.of(lst.get(1));", "        long smallest = lst.get(0);\n\
    \        long secondSmallest = lst.get(1);\n        for (long i : lst) {\n   \
    \         if (i < smallest) {\n                secondSmallest = smallest;\n  \
    \              smallest = i;\n            } else if (i < secondSmallest) {\n \
    \               secondSmallest = i;\n            }\n        }\n        return\
    \ Optional.ofNullable(secondSmallest);", "        if (lst.size() == 0) {\n   \
    \         return Optional.empty();\n        }\n        Collections.sort(lst);\n\
    \        if (lst.get(0) == lst.get(lst.size() - 1)) {\n            return Optional.of(lst.get(1));\n\
    \        }\n        return Optional.of(lst.get(1));", "        long smallest =\
    \ lst.get(0);\n        long secondSmallest = lst.get(1);\n        for(long i :\
    \ lst) {\n            if(i == smallest) {\n                secondSmallest = i;\n\
    \            }\n        }\n        return Optional.ofNullable(secondSmallest);",
  "        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\
    \        long smallest = lst.get(0);\n        long secondSmallest = lst.get(1);\n\
    \        long thirdSmallest = lst.get(2);\n        long fourthSmallest = lst.get(3);\n\
    \        long fifthSmallest = lst.get(4);\n        long sixthSmallest = lst.get(5);\n\
    \        if (smallest > secondSmallest) {\n            if (smallest > thirdSmallest)\
    \ {\n                if (smallest > fourthSmallest) {\n                    if\
    \ (smallest > fifthSmallest) {\n                        if (smallest > sixthSmallest)\
    \ {\n                            return Optional.of(sixthSmallest);\n        \
    \                }\n                        return Optional.of(fifthSmallest);\n\
    \                    }\n                    return Optional.of(fourthSmallest);\n\
    \                }\n                return Optional.of(thirdSmallest);\n     \
    \       }\n            return Optional.of(secondSmallest);\n        }\n      \
    \  return Optional.of(smallest);", "        long min = lst.get(0);\n        long\
    \ max = lst.get(0);\n        for (long i : lst) {\n            if (i < min) {\n\
    \                min = i;\n            } else if (i > max) {\n               \
    \ max = i;\n            }\n        }\n        return Optional.ofNullable(max);",
  "        Optional<Long> result = Optional.empty();\n        if (lst.size() > 0)\
    \ {\n            Long smallest = lst.get(0);\n            Long second = smallest;\n\
    \            for (int i = 1; i < lst.size(); i++) {\n                if (lst.get(i)\
    \ < smallest) {\n                    second = smallest;\n                    smallest\
    \ = lst.get(i);\n                } else if (lst.get(i) == smallest) {\n      \
    \              second = lst.get(i);\n                }\n            }\n      \
    \      result = Optional.of(second);\n        }\n        return result;", "  \
    \      Collections.sort(lst);\n        if (lst.size() == 0) {\n            return\
    \ Optional.empty();\n        }\n        Long second = lst.get(1);\n        lst.remove(lst.size()\
    \ - 1);\n        return Optional.ofNullable(second);", "        Collections.sort(lst);\n\
    \        if (lst.size() == 0) {\n            return Optional.empty();\n      \
    \  }\n        Long secondSmallest = lst.get(1);\n        if (secondSmallest ==\
    \ lst.get(0))\n            return Optional.empty();\n        return Optional.of(secondSmallest);",
  "        Collections.sort(lst);\n        if (lst.size() <= 1) return Optional.empty();\n\
    \        return Optional.of(lst.get(1));"]
stop_tokens:
- "\n    }\n"
