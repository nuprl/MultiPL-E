name: HumanEval_24_largest_divisor
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // For a given number n, find the largest number that divides\
  \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    public\
  \ static long largestDivisor(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
  \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
  \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
  \ == (7l));\n    }\n\n}\n"
completions: ["        long largestDivisor = Long.MIN_VALUE;\n        for (long i\
    \ = 1; i < n; i++) {\n            if (n % i == 0) {\n                long divisor\
    \ = i;\n                while (divisor < n && n % divisor == 0) {\n          \
    \          divisor++;\n                }\n                if (divisor > largestDivisor)\
    \ {\n                    largestDivisor = divisor;\n                }\n      \
    \      }\n        }\n        return largestDivisor;", "        long maxDivisor\
    \ = 0;\n        long maxDividend = 0;\n        for (long i = 1; i < n; i++) {\n\
    \            long divisor = i;\n            while (divisor < n && n % divisor\
    \ == 0) {\n                divisor++;\n            }\n            if (divisor\
    \ > maxDivisor) {\n                maxDivisor = divisor;\n                maxDividend\
    \ = i;\n            }\n        }\n        return maxDividend;", "        long\
    \ maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n     \
    \       if (n % i == 0) {\n                long divisor = i;\n               \
    \ while (n % divisor == 0) {\n                    divisor++;\n               \
    \ }\n                if (divisor > maxDivisor) {\n                    maxDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = n;\n        for (long i = 1; i < n; i++) {\n        \
    \    if (n % i == 0) {\n                maxDivisor = i;\n            }\n     \
    \   }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 0;\n        long divisor = 1;\n        while (divisor <= n) {\n          \
    \  if (n % divisor == 0) {\n                maxDivisor = divisor;\n          \
    \  }\n            divisor++;\n        }\n        return maxDivisor;", "      \
    \  long maxDivisor = 1;\n        for (long i = 1; i < n; i++) {\n            if\
    \ (n % i == 0) {\n                maxDivisor = i;\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n   \
    \     for (long divisor = 2; divisor <= n; divisor++) {\n            if (n % divisor\
    \ == 0) {\n                long currentDivisor = divisor;\n                while\
    \ (n % currentDivisor == 0) {\n                    currentDivisor++;\n       \
    \         }\n                if (currentDivisor > maxDivisor) {\n            \
    \        maxDivisor = currentDivisor;\n                }\n            }\n    \
    \    }\n        return maxDivisor;", "        long maxDivisor = 0;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n                long\
    \ divisor = i;\n                while (n % divisor == 0) {\n                 \
    \   divisor++;\n                }\n                if (divisor > maxDivisor) {\n\
    \                    maxDivisor = divisor;\n                }\n            }\n\
    \        }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;", "    \
    \    long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n\
    \            if (n % i == 0) {\n                long divisor = i;\n          \
    \      while (n % divisor == 0) {\n                    divisor++;\n          \
    \      }\n                if (divisor > maxDivisor) {\n                    maxDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = n;\n        for (long i = 1; i < n; i++) {\n        \
    \    if (n % i == 0) {\n                maxDivisor = i;\n            }\n     \
    \   }\n        return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = 1;\n        for (long i = 1; i < n; i++) {\n        \
    \    if (n % i == 0) {\n                maxDivisor = i;\n            }\n     \
    \   }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long largestDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (divisor\
    \ < n && n % divisor == 0) {\n                    divisor++;\n               \
    \ }\n                if (divisor > largestDivisor) {\n                    largestDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = 1;\n        long currentDivisor = 1;\n        long currentDivisorFactor\
    \ = 1;\n        long currentDivisorFactorFactor = 1;\n        long currentDivisorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor", "  \
    \      long maxDivisor = 1;\n        long currentDivisor = 1;\n        while (currentDivisor\
    \ <= n) {\n            if (n % currentDivisor == 0) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n            currentDivisor++;\n        }\n\
    \        return maxDivisor;", "        long largestDivisor = 0;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                largestDivisor\
    \ = i;\n            }\n        }\n        return largestDivisor;", "        long\
    \ maxDivisor = n;\n        long currentDivisor = 1;\n        while (currentDivisor\
    \ <= maxDivisor) {\n            if (n % currentDivisor == 0) {\n             \
    \   maxDivisor = currentDivisor;\n            }\n            currentDivisor++;\n\
    \        }\n        return maxDivisor;", "        long maxDivisor = 0;\n     \
    \   for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n          \
    \      long divisor = i;\n                while (n % divisor == 0) {\n       \
    \             divisor++;\n                }\n                if (divisor > maxDivisor)\
    \ {\n                    maxDivisor = divisor;\n                }\n          \
    \  }\n        }\n        return maxDivisor;", "        long largestDivisor = 0;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largestDivisor = i;\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = 1;\n        for (long i = 1; i <= n; i++) {\n       \
    \     if (n % i == 0) {\n                maxDivisor = i;\n            }\n    \
    \    }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;", "    \
    \    long largestDivisor = 0;\n        for (long i = 1; i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largestDivisor = i;\n             \
    \   break;\n            }\n        }\n        return largestDivisor;", "     \
    \   long maxDivisor = n;\n        long currentDivisor = 1;\n        while (currentDivisor\
    \ <= maxDivisor) {\n            if (n % currentDivisor == 0) {\n             \
    \   maxDivisor = currentDivisor;\n            }\n            currentDivisor++;\n\
    \        }\n        return maxDivisor;", "        long maxDivisor = 0;\n     \
    \   long divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor\
    \ == 0) {\n                maxDivisor = divisor;\n            }\n            divisor++;\n\
    \        }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long largestDivisor\
    \ = 0;\n        long currentDivisor = 1;\n        long currentNumber = n;\n  \
    \      while(currentDivisor <= n) {\n            currentDivisor *= currentNumber;\n\
    \            currentNumber /= currentDivisor;\n            largestDivisor = Math.max(largestDivisor,\
    \ currentDivisor);\n        }\n        return largestDivisor;", "        long\
    \ maxDivisor = 0;\n        for (long i = 1; i < n; i++) {\n            if (n %\
    \ i == 0) {\n                long divisor = i;\n                while (n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;", "    \
    \    long largestDivisor = 0;\n        long currentDivisor = 1;\n        long\
    \ currentNumber = n;\n        while (currentNumber != 0) {\n            if (currentNumber\
    \ % 2 == 0) {\n                currentDivisor *= currentNumber;\n            }\n\
    \            currentNumber = currentNumber / 2;\n            currentDivisor =\
    \ currentDivisor / 2;\n            if (currentDivisor > largestDivisor) {\n  \
    \              largestDivisor = currentDivisor;\n            }\n        }\n  \
    \      return largestDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n \
    \       for (long divisor = 2; divisor <= n; divisor++) {\n            if (n %\
    \ divisor == 0) {\n                maxDivisor = Math.max(maxDivisor, divisor);\n\
    \            }\n        }\n        return maxDivisor;", "        long largestDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (divisor\
    \ < n && n % divisor == 0) {\n                    divisor++;\n               \
    \ }\n                if (divisor > largestDivisor) {\n                    largestDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (divisor < n && n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;", "    \
    \    long largestDivisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n\
    \        while (currentDivisor <= n) {\n            if (n % currentDivisor ==\
    \ 0) {\n                largestDivisor = currentDivisor;\n            }\n    \
    \        currentDivisor++;\n        }\n        return largestDivisor;", "    \
    \    long maxDivisor = 0;\n        for (long i = 1; i < n; i++) {\n          \
    \  if (n % i == 0) {\n                long divisor = i;\n                while\
    \ (n % divisor == 0) {\n                    divisor++;\n                }\n  \
    \              if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n\
    \                }\n            }\n        }\n        return maxDivisor;", " \
    \       long maxDivisor = 0;\n        for (long i = 1; i < n; i++) {\n       \
    \     if (n % i == 0) {\n                long divisor = i;\n                while\
    \ (n % divisor == 0) {\n                    divisor++;\n                }\n  \
    \              if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n\
    \                }\n            }\n        }\n        return maxDivisor;", " \
    \       long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long largestDivisor = 0;\n        long currentDivisor\
    \ = 1;\n        long currentNumber = n;\n        while (currentNumber != 0) {\n\
    \            currentDivisor *= currentNumber;\n            currentNumber /= 2;\n\
    \            if (currentDivisor > largestDivisor) {\n                largestDivisor\
    \ = currentDivisor;\n            }\n        }\n        return largestDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                long divisor = i;\n \
    \               while (divisor < n && n % divisor == 0) {\n                  \
    \  divisor++;\n                }\n                if (divisor > largestDivisor)\
    \ {\n                    largestDivisor = divisor;\n                }\n      \
    \      }\n        }\n        return largestDivisor;", "        long maxDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (divisor\
    \ < n && n % divisor == 0) {\n                    divisor++;\n               \
    \ }\n                if (divisor > maxDivisor) {\n                    maxDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = 1;\n        for (long i = 1; i <= n; i++) {\n       \
    \     if (n % i == 0) {\n                maxDivisor = i;\n            }\n    \
    \    }\n        return maxDivisor;", "        long largestDivisor = 0;\n     \
    \   long currentDivisor = 1;\n        while (currentDivisor <= n) {\n        \
    \    if (n % currentDivisor == 0) {\n                largestDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return largestDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                long divisor = i;\n \
    \               while (n % divisor == 0) {\n                    divisor++;\n \
    \               }\n                if (divisor > largestDivisor) {\n         \
    \           largestDivisor = divisor;\n                }\n            }\n    \
    \    }\n        return largestDivisor;", "        long maxDivisor = 1;\n     \
    \   for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n          \
    \      maxDivisor = i;\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long maxDivisor = 0;\n        for (long i = 1;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                long divisor\
    \ = i;\n                while (n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;", "    \
    \    long maxDivisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n   \
    \     while (currentDivisor <= n) {\n            if (n % currentDivisor == 0)\
    \ {\n                maxDivisor = Math.max(maxDivisor, currentDivisor);\n    \
    \        }\n            currentDivisor++;\n        }\n        return maxDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long largestDivisor = 0;\n        long currentDivisor\
    \ = 1;\n        long currentDivisorRemainder = 0;\n        long currentDivisorRemainder2\
    \ = 0;\n        long currentDivisorRemainder3 = 0;\n        long currentDivisorRemainder4\
    \ = 0;\n        long currentDivisorRemainder5 = 0;\n        long currentDivisorRemainder6\
    \ = 0;\n        long currentDivisorRemainder7 = 0;\n        long currentDivisorRemainder8\
    \ = 0;\n        long currentDivisorRemainder9 = 0;\n        long currentDivisorRemainder10\
    \ = 0;\n        long currentDivisorRemainder11 = 0;\n        long currentDivisorRemainder12\
    \ = 0;\n        long currentDivisorRemainder13 = 0;\n        long currentDivisorRemainder14\
    \ = 0;\n        long currentDivisorRemainder15 = 0;\n        long currentDivisorRemainder16\
    \ = 0;\n        long currentDivisorRemainder17 = 0;\n        long currentDivisorRemainder18\
    \ = 0;\n        long currentDivisorRemainder19 = 0;\n        long currentDivisorRemainder20\
    \ = 0;\n        long currentDivisorRemainder21 = 0;\n        long currentDivisorRemainder22\
    \ = 0;\n        long currentDivisorRemainder23 = 0;\n        long currentDivisorRemainder24\
    \ = 0;\n        long currentDivisorRemainder25 = 0;\n        long currentDivisorRemainder26\
    \ = 0;\n        long currentDivisorRemainder27 = 0;\n        long currentDivisorRemainder28\
    \ = 0;\n        long currentDivisorRemainder29 = 0;\n        long currentDivisorRemainder30\
    \ = 0;\n        long currentDivisorRemainder31 = 0;\n        long currentDivisorRemainder32\
    \ = 0;\n        long currentDivisorRemainder33 = 0;\n        long currentDivisorRemainder34\
    \ = 0;\n        long currentDivisorRemainder35 = 0;\n        long currentDivisorRemainder36\
    \ = 0;\n        long currentDivisorRemainder37 = 0;\n        long currentDivisorRemainder38\
    \ = 0;\n        long currentDivisorRemainder39 = 0;\n        long currentDivisorRemainder40\
    \ = 0;\n        long currentDivisorRemainder41 = 0;\n        long currentDivisorRemainder42\
    \ = 0;\n        long currentDivisorRemainder43 = 0;\n        long currentDivisorRemainder44\
    \ = 0;\n        long currentDivisorRemainder45 = 0;\n        long currentDivisorRemainder46\
    \ = 0;\n        long currentDivisorRemainder47 = 0;\n        long currentDivisorRemainder48\
    \ = 0;\n        long currentDivisorRemainder49 = 0;\n        long currentDivisorRemainder50\
    \ = 0;\n        long ", "        long largestDivisor = 0;\n        long currentDivisor\
    \ = 1;\n        while (currentDivisor <= n) {\n            if (n % currentDivisor\
    \ == 0) {\n                largestDivisor = currentDivisor;\n            }\n \
    \           currentDivisor++;\n        }\n        return largestDivisor;", " \
    \       long largestDivisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n\
    \        while (currentDivisor <= n) {\n            if (n % currentDivisor ==\
    \ 0) {\n                largestDivisor = currentDivisor;\n            }\n    \
    \        currentDivisor++;\n        }\n        return largestDivisor;", "    \
    \    long maxDivisor = Long.MIN_VALUE;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long largestDivisor = Long.MAX_VALUE;\n     \
    \   for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n          \
    \      long divisor = i;\n                while (divisor < n && n % divisor ==\
    \ 0) {\n                    divisor++;\n                }\n                if\
    \ (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long maxDivisor = 0;\n        for (long i = 1;\
    \ i < n; i++) {\n            if (n % i == 0) {\n                maxDivisor = Math.max(maxDivisor,\
    \ i);\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 1;\n        long currentDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorRemainder2 = 0;\n        long currentDivisorRemainder3\
    \ = 0;\n        long currentDivisorRemainder4 = 0;\n        long currentDivisorRemainder5\
    \ = 0;\n        long currentDivisorRemainder6 = 0;\n        long currentDivisorRemainder7\
    \ = 0;\n        long currentDivisorRemainder8 = 0;\n        long currentDivisorRemainder9\
    \ = 0;\n        long currentDivisorRemainder10 = 0;\n        long currentDivisorRemainder11\
    \ = 0;\n        long currentDivisorRemainder12 = 0;\n        long currentDivisorRemainder13\
    \ = 0;\n        long currentDivisorRemainder14 = 0;\n        long currentDivisorRemainder15\
    \ = 0;\n        long currentDivisorRemainder16 = 0;\n        long currentDivisorRemainder17\
    \ = 0;\n        long currentDivisorRemainder18 = 0;\n        long currentDivisorRemainder19\
    \ = 0;\n        long currentDivisorRemainder20 = 0;\n        long currentDivisorRemainder21\
    \ = 0;\n        long currentDivisorRemainder22 = 0;\n        long currentDivisorRemainder23\
    \ = 0;\n        long currentDivisorRemainder24 = 0;\n        long currentDivisorRemainder25\
    \ = 0;\n        long currentDivisorRemainder26 = 0;\n        long currentDivisorRemainder27\
    \ = 0;\n        long currentDivisorRemainder28 = 0;\n        long currentDivisorRemainder29\
    \ = 0;\n        long currentDivisorRemainder30 = 0;\n        long currentDivisorRemainder31\
    \ = 0;\n        long currentDivisorRemainder32 = 0;\n        long currentDivisorRemainder33\
    \ = 0;\n        long currentDivisorRemainder34 = 0;\n        long currentDivisorRemainder35\
    \ = 0;\n        long currentDivisorRemainder36 = 0;\n        long currentDivisorRemainder37\
    \ = 0;\n        long currentDivisorRemainder38 = 0;\n        long currentDivisorRemainder39\
    \ = 0;\n        long currentDivisorRemainder40 = 0;\n        long currentDivisorRemainder41\
    \ = 0;\n        long currentDivisorRemainder42 = 0;\n        long currentDivisorRemainder43\
    \ = 0;\n        long currentDivisorRemainder44 = 0;\n        long currentDivisorRemainder45\
    \ = 0;\n        long currentDivisorRemainder46 = 0;\n        long currentDivisorRemainder47\
    \ = 0;\n        long currentDivisorRemainder48 = 0;\n        long currentDivisorRemainder49\
    \ = 0;\n        long currentDivisorRemainder50 = 0;\n        long current", " \
    \       long maxDivisor = 1;\n        for (long i = 1; i <= n; i++) {\n      \
    \      if (n % i == 0) {\n                maxDivisor = i;\n            }\n   \
    \     }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 1;\n        long currentDivisor = 1;\n        long currentNumber = n;\n  \
    \      while (currentNumber != 0) {\n            currentDivisor *= currentNumber;\n\
    \            currentNumber /= 2;\n            if (currentDivisor > maxDivisor)\
    \ {\n                maxDivisor = currentDivisor;\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = 1;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                maxDivisor\
    \ = i;\n            }\n        }\n        return maxDivisor;", "        long largestDivisor\
    \ = Long.MIN_VALUE;\n        long divisor = Long.MIN_VALUE;\n        long remainder;\n\
    \        do {\n            divisor++;\n            remainder = n % divisor;\n\
    \            if (remainder == 0) {\n                largestDivisor = divisor;\n\
    \            }\n        } while (remainder != 0);\n        return largestDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n        long\
    \ currentDivisor = 1;\n        long currentDivisorFactor = 1;\n        long currentDivisorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long current", "        long maxDivisor = Long.MIN_VALUE;\n  \
    \      long maxDivisorFactor = Long.MIN_VALUE;\n        for (long i = 1; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                long divisor = i;\n \
    \               while (divisor < n && n % divisor == 0) {\n                  \
    \  divisor++;\n                }\n                if (divisor > maxDivisorFactor)\
    \ {\n                    maxDivisorFactor = divisor;\n                    maxDivisor\
    \ = i;\n                }\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = n;\n        long divisor = 1;\n        while (divisor\
    \ < n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n        for\
    \ (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n           \
    \     long divisor = i;\n                while (n % divisor == 0) {\n        \
    \            divisor++;\n                }\n                if (divisor > maxDivisor)\
    \ {\n                    maxDivisor = divisor;\n                }\n          \
    \  }\n        }\n        return maxDivisor;", "        long largestDivisor = 0;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           largestDivisor = i;\n            }\n        }\n        return largestDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                long divisor = i;\n \
    \               while (divisor < n && n % divisor == 0) {\n                  \
    \  divisor++;\n                }\n                if (divisor > largestDivisor)\
    \ {\n                    largestDivisor = divisor;\n                }\n      \
    \      }\n        }\n        return largestDivisor;", "        long maxDivisor\
    \ = 0;\n        long divisor = 1;\n        while (divisor <= n) {\n          \
    \  if (n % divisor == 0) {\n                maxDivisor = divisor;\n          \
    \  }\n            divisor++;\n        }\n        return maxDivisor;", "      \
    \  long largestDivisor = 0;\n        for (long i = 1; i < n; i++) {\n        \
    \    if (n % i == 0) {\n                largestDivisor = i;\n            }\n \
    \       }\n        return largestDivisor;", "        long largestDivisor = 0;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           largestDivisor = i;\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long maxDivisor = 1;\n        for (long i = 1;\
    \ i < n; i++) {\n            if (n % i == 0) {\n                maxDivisor = i;\n\
    \            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;", "    \
    \    long maxDivisor = 0;\n        for (long i = 1; i < n; i++) {\n          \
    \  if (n % i == 0) {\n                long divisor = i;\n                while\
    \ (n % divisor == 0) {\n                    divisor++;\n                }\n  \
    \              if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n\
    \                }\n            }\n        }\n        return maxDivisor;", " \
    \       long maxDivisor = 0;\n        for (long i = 1; i < n; i++) {\n       \
    \     if (n % i == 0) {\n                long divisor = i;\n                while\
    \ (n % divisor == 0) {\n                    divisor++;\n                }\n  \
    \              if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n\
    \                }\n            }\n        }\n        return maxDivisor;", " \
    \       long largestDivisor = 0;\n        for (long i = 1; i <= n; i++) {\n  \
    \          if (n % i == 0) {\n                largestDivisor = i;\n          \
    \  }\n        }\n        return largestDivisor;", "        long largestDivisor\
    \ = 0;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n                long\
    \ divisor = i;\n                while (divisor < n && n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;", "    \
    \    long maxDivisor = 0;\n        for (long i = 1; i < n; i++) {\n          \
    \  if (n % i == 0) {\n                maxDivisor = i;\n            }\n       \
    \ }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 2; i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                maxDivisor = Math.max(maxDivisor, i);\n       \
    \     }\n        }\n        return maxDivisor;", "        long maxDivisor = 0;\n\
    \        long currentDivisor = 1;\n        while (currentDivisor <= n) {\n   \
    \         if (n % currentDivisor == 0) {\n                maxDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return maxDivisor;",
  "        long maxDivisor = 1;\n        long currentDivisor = 1;\n        long currentNumber\
    \ = n;\n        while (currentNumber != 0) {\n            currentDivisor *= currentNumber;\n\
    \            currentNumber /= 2;\n            if (currentDivisor > maxDivisor)\
    \ {\n                maxDivisor = currentDivisor;\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = 1;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                maxDivisor\
    \ = i;\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 0;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                maxDivisor = i;\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = 1;\n        long currentDivisor = 1;\n        long currentDivisorFactor\
    \ = 1;\n        long currentDivisorFactorFactor = 1;\n        long currentDivisorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor",
  "        long maxDivisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n \
    \       long currentNumber = n;\n        while (currentNumber != 0) {\n      \
    \      currentDivisor *= currentNumber;\n            currentNumber /= 2;\n   \
    \         if (currentDivisor > maxDivisor) {\n                maxDivisor = currentDivisor;\n\
    \            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = n;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                maxDivisor = i;\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = 1;\n        long currentDivisor = 1;\n        long currentNum\
    \ = 1;\n        while(currentDivisor <= n) {\n            currentNum = currentDivisor\
    \ * currentDivisor;\n            if(currentNum > n) {\n                maxDivisor\
    \ = currentDivisor;\n                break;\n            }\n            currentDivisor++;\n\
    \        }\n        return maxDivisor;", "        long maxDivisor = 0;\n     \
    \   long maxDividend = 0;\n        long divisor = 1;\n        long dividend =\
    \ 1;\n        while(dividend < n) {\n            divisor = dividend + 1;\n   \
    \         dividend = divisor * divisor;\n            if(dividend > maxDividend)\
    \ {\n                maxDividend = dividend;\n                maxDivisor = divisor;\n\
    \            }\n        }\n        return maxDivisor;", "        long largestDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 2; i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = 1;\n        for (long i = 1; i < n; i++) {\n        \
    \    if (n % i == 0) {\n                maxDivisor = i;\n            }\n     \
    \   }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;", "    \
    \    long largestDivisor = Long.MAX_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (divisor < n && n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > largestDivisor) {\n        \
    \            largestDivisor = divisor;\n                }\n            }\n   \
    \     }\n        return largestDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;", "    \
    \    long maxDivisor = 0;\n        for (long i = 1; i < n; i++) {\n          \
    \  if (n % i == 0) {\n                long divisor = i;\n                while\
    \ (n % divisor == 0) {\n                    divisor++;\n                }\n  \
    \              if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n\
    \                }\n            }\n        }\n        return maxDivisor;", " \
    \       long maxDivisor = 0;\n        for (long i = 1; i < n; i++) {\n       \
    \     if (n % i == 0) {\n                maxDivisor = i;\n            }\n    \
    \    }\n        return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n \
    \       while (currentDivisor <= n) {\n            if (n % currentDivisor == 0)\
    \ {\n                maxDivisor = Math.max(maxDivisor, currentDivisor);\n    \
    \        }\n            currentDivisor++;\n        }\n        return maxDivisor;",
  "        long maxDivisor = n;\n        for (long i = 1; i < n; i++) {\n        \
    \    if (n % i == 0) {\n                maxDivisor = i;\n            }\n     \
    \   }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        long currentDivisor = 1;\n        while (currentDivisor <= n) {\n   \
    \         if (n % currentDivisor == 0) {\n                maxDivisor = Math.max(maxDivisor,\
    \ currentDivisor);\n            }\n            currentDivisor++;\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = 0;\n        long currentDivisor\
    \ = 1;\n        long currentNumber = n;\n        while (currentNumber != 0) {\n\
    \            currentDivisor *= currentNumber;\n            currentNumber /= 2;\n\
    \            if (currentDivisor > maxDivisor) {\n                maxDivisor =\
    \ currentDivisor;\n            }\n        }\n        return maxDivisor;", "  \
    \      long maxDivisor = 0;\n        long maxDividend = 0;\n        long divisor\
    \ = 1;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n\
    \                maxDivisor = divisor;\n                maxDividend = n;\n   \
    \         }\n            divisor++;\n        }\n        return maxDividend;",
  "        long largestDivisor = Long.MAX_VALUE;\n        for (long i = 1; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                long divisor = i;\n \
    \               while (divisor < n && n % divisor == 0) {\n                  \
    \  divisor++;\n                }\n                if (divisor > largestDivisor)\
    \ {\n                    largestDivisor = divisor;\n                }\n      \
    \      }\n        }\n        return largestDivisor;", "        long largestDivisor\
    \ = 0;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                long divisor\
    \ = i;\n                while (n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;", "    \
    \    long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (divisor < n && n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        long currentDivisor = 1;\n        long currentNumber;\n        do {\n\
    \            currentNumber = currentDivisor * n;\n            currentDivisor++;\n\
    \            if (currentNumber % 2 == 0) {\n                largestDivisor = currentNumber;\n\
    \            }\n        } while (currentNumber < n);\n        return largestDivisor;",
  "        long maxDivisor = 1;\n        long currentDivisor = 1;\n        long currentNum\
    \ = 1;\n        while (currentDivisor <= n) {\n            currentNum = currentDivisor\
    \ * currentDivisor;\n            if (currentNum > n) {\n                break;\n\
    \            }\n            currentDivisor++;\n            maxDivisor = currentDivisor;\n\
    \        }\n        return maxDivisor;", "        long maxDivisor = 1;\n     \
    \   for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n         \
    \       maxDivisor = i;\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n                long\
    \ divisor = i;\n                while (n % divisor == 0) {\n                 \
    \   divisor++;\n                }\n                if (divisor > maxDivisor) {\n\
    \                    maxDivisor = divisor;\n                }\n            }\n\
    \        }\n        return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n        long currentDivisor\
    \ = 1;\n        long currentNumber = n;\n        while (currentNumber != 0) {\n\
    \            currentDivisor *= currentNumber;\n            currentNumber /= 2;\n\
    \            if (currentDivisor > maxDivisor) {\n                maxDivisor =\
    \ currentDivisor;\n            }\n        }\n        return maxDivisor;", "  \
    \      long maxDivisor = 0;\n        long currentDivisor = 1;\n        long currentNumber\
    \ = n;\n        while(currentNumber != 0) {\n            currentDivisor *= currentNumber;\n\
    \            currentNumber /= 2;\n            if(currentDivisor > maxDivisor)\
    \ {\n                maxDivisor = currentDivisor;\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n   \
    \     long divisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n\
    \            long currentDivisor = Long.divideAndRemainder(i, n);\n          \
    \  if (currentDivisor == 0) {\n                divisor = i;\n            } else\
    \ {\n                if (currentDivisor > maxDivisor) {\n                    maxDivisor\
    \ = currentDivisor;\n                    divisor = i;\n                }\n   \
    \         }\n        }\n        return divisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = Long.MIN_VALUE;\n        long divisor = Long.MIN_VALUE;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                divisor\
    \ = i;\n                if (maxDivisor < divisor) {\n                    maxDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n     \
    \   for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n          \
    \      long divisor = i;\n                while (divisor < n && n % divisor ==\
    \ 0) {\n                    divisor++;\n                }\n                if\
    \ (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = 1;\n        for (long i = 1; i <= n; i++) {\n       \
    \     if (n % i == 0) {\n                maxDivisor = i;\n            }\n    \
    \    }\n        return maxDivisor;", "        long maxDivisor = 0;\n        long\
    \ currentDivisor = 1;\n        long currentNumber = n;\n        while (currentNumber\
    \ != 0) {\n            currentDivisor *= currentNumber;\n            currentNumber\
    \ /= 2;\n            if (currentDivisor > maxDivisor) {\n                maxDivisor\
    \ = currentDivisor;\n            }\n        }\n        return maxDivisor;", " \
    \       long maxDivisor = n;\n        for (long i = 1; i < n; i++) {\n       \
    \     if (n % i == 0) {\n                maxDivisor = i;\n            }\n    \
    \    }\n        return maxDivisor;", "        long maxDivisor = 1;\n        for\
    \ (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n               \
    \ maxDivisor = i;\n            }\n        }\n        return maxDivisor;", "  \
    \      long maxDivisor = n;\n        long divisor = 1;\n        while (divisor\
    \ <= maxDivisor) {\n            if (n % divisor == 0) {\n                maxDivisor\
    \ = divisor;\n            }\n            divisor++;\n        }\n        return\
    \ maxDivisor;", "        long largestDivisor = Long.MAX_VALUE;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                long divisor\
    \ = i;\n                while (n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > largestDivisor) {\n        \
    \            largestDivisor = divisor;\n                }\n            }\n   \
    \     }\n        return largestDivisor;", "        long maxDivisor = 0;\n    \
    \    long currentDivisor = 1;\n        while(currentDivisor <= n) {\n        \
    \    currentDivisor *= 2;\n            if(currentDivisor > maxDivisor) {\n   \
    \             maxDivisor = currentDivisor;\n            }\n        }\n       \
    \ return maxDivisor;", "        long maxDivisor = 1;\n        for (long i = 1;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                maxDivisor =\
    \ i;\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 1;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                maxDivisor = i;\n            }\n        }\n        return maxDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                largestDivisor = i;\n\
    \            }\n        }\n        return largestDivisor;", "        long maxDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (divisor\
    \ < n && n % divisor == 0) {\n                    divisor++;\n               \
    \ }\n                if (divisor > maxDivisor) {\n                    maxDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return maxDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n;\
    \ i++) {\n            if (n % i == 0) {\n                long divisor = i;\n \
    \               while (n % divisor == 0) {\n                    divisor++;\n \
    \               }\n                if (divisor > largestDivisor) {\n         \
    \           largestDivisor = divisor;\n                }\n            }\n    \
    \    }\n        return largestDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (n % divisor == 0) {\n                    divisor++;\n      \
    \          }\n                if (divisor > maxDivisor) {\n                  \
    \  maxDivisor = divisor;\n                }\n            }\n        }\n      \
    \  return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n        long\
    \ currentDivisor = 1;\n        long currentDivisorRemainder = 0;\n        while\
    \ (currentDivisor <= n) {\n            currentDivisorRemainder = n % currentDivisor;\n\
    \            if (currentDivisorRemainder == 0) {\n                maxDivisor =\
    \ currentDivisor;\n                break;\n            }\n            currentDivisor++;\n\
    \        }\n        return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = 1;\n        for (long i = 1; i <= n; i++) {\n       \
    \     if (n % i == 0) {\n                maxDivisor = i;\n            }\n    \
    \    }\n        return maxDivisor;", "        long largestDivisor = 0;\n     \
    \   for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n         \
    \       largestDivisor = i;\n                break;\n            }\n        }\n\
    \        return largestDivisor;", "        long maxDivisor = 0;\n        long\
    \ maxDividend = 0;\n        for (long dividend = n; dividend > 0; dividend /=\
    \ 2) {\n            if (dividend % 2 == 0) {\n                maxDivisor = dividend;\n\
    \                maxDividend = dividend;\n            }\n        }\n        return\
    \ maxDivisor;", "        long maxDivisor = 0;\n        long divisor = 1;\n   \
    \     while (divisor < n) {\n            if (n % divisor == 0) {\n           \
    \     maxDivisor = divisor;\n            }\n            divisor++;\n        }\n\
    \        return maxDivisor;", "        long largestDivisor = 0;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                largestDivisor\
    \ = i;\n            }\n        }\n        return largestDivisor;", "        long\
    \ maxDivisor = Long.MIN_VALUE;\n        for (long i = 2; i <= n; i++) {\n    \
    \        if (n % i == 0) {\n                maxDivisor = i;\n            }\n \
    \       }\n        return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long largestDivisor = 0;\n        for (long i = 1; i < n; i++) {\n    \
    \        if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;", "        long maxDivisor = 0;\n \
    \       for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n      \
    \          maxDivisor = i;\n            }\n        }\n        return maxDivisor;",
  "        long largestDivisor = Long.MAX_VALUE;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                long divisor = i;\n \
    \               while (n % divisor == 0) {\n                    divisor++;\n \
    \               }\n                if (divisor > largestDivisor) {\n         \
    \           largestDivisor = divisor;\n                }\n            }\n    \
    \    }\n        return largestDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        long currentDivisor = 1;\n        while (currentDivisor <= n) {\n   \
    \         if (n % currentDivisor == 0) {\n                maxDivisor = currentDivisor;\n\
    \            }\n            currentDivisor++;\n        }\n        return maxDivisor;",
  "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (divisor < n && n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > largestDivisor) {\n                    largestDivisor = divisor;\n\
    \                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = 0;\n        for (long i = 1; i < n; i++) {\n        \
    \    if (n % i == 0) {\n                maxDivisor = i;\n            }\n     \
    \   }\n        return maxDivisor;", "        long maxDivisor = 1;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n                maxDivisor\
    \ = i;\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 1;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                maxDivisor = i;\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = 0;\n        long currentDivisor = 1;\n        long currentNumber\
    \ = n;\n        while (currentNumber != 0) {\n            currentDivisor *= currentNumber;\n\
    \            currentNumber /= 2;\n            if (currentDivisor % 2 == 0) {\n\
    \                maxDivisor = currentDivisor;\n            }\n        }\n    \
    \    return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n       \
    \ for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n            \
    \    long divisor = i;\n                while (n % divisor == 0) {\n         \
    \           divisor++;\n                }\n                if (divisor > maxDivisor)\
    \ {\n                    maxDivisor = divisor;\n                }\n          \
    \  }\n        }\n        return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;", "    \
    \    long maxDivisor = 0;\n        for (long i = 1; i < n; i++) {\n          \
    \  if (n % i == 0) {\n                maxDivisor = i;\n            }\n       \
    \ }\n        return maxDivisor;", "        long maxDivisor = 0;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                long divisor\
    \ = i;\n                while (n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long largestDivisor = 0;\n        for (long\
    \ i = 1; i < n; i++) {\n            if (n % i == 0) {\n                largestDivisor\
    \ = i;\n            }\n        }\n        return largestDivisor;", "        long\
    \ maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n     \
    \       if (n % i == 0) {\n                long divisor = i;\n               \
    \ while (n % divisor == 0) {\n                    divisor++;\n               \
    \ }\n                if (divisor > maxDivisor) {\n                    maxDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return maxDivisor;",
  "        long largestDivisor = Long.MIN_VALUE;\n        for (long i = 1; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                long divisor = i;\n \
    \               while (divisor < n && n % divisor == 0) {\n                  \
    \  divisor++;\n                }\n                if (divisor > largestDivisor)\
    \ {\n                    largestDivisor = divisor;\n                }\n      \
    \      }\n        }\n        return largestDivisor;", "        long maxDivisor\
    \ = 1;\n        long currentDivisor = 1;\n        long currentNum = 1;\n     \
    \   while (currentDivisor <= n) {\n            currentNum = currentDivisor * currentDivisor;\n\
    \            if (currentNum > n) {\n                break;\n            }\n  \
    \          currentDivisor++;\n            maxDivisor = currentDivisor;\n     \
    \   }\n        return maxDivisor;", "        long maxDivisor = 0;\n        long\
    \ divisor = 1;\n        while (divisor <= n) {\n            if (n % divisor ==\
    \ 0) {\n                maxDivisor = divisor;\n            }\n            divisor++;\n\
    \        }\n        return maxDivisor;", "        long maxDivisor = n;\n     \
    \   long currentDivisor = 1;\n        while(currentDivisor <= maxDivisor) {\n\
    \            currentDivisor *= 2;\n            if(currentDivisor > maxDivisor)\
    \ {\n                maxDivisor = currentDivisor;\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n   \
    \     for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n        \
    \        long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;", "    \
    \    long maxDivisor = 1;\n        long divisor = 1;\n        while (divisor <=\
    \ n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;",
  "        long largestDivisor = 0;\n        long currentDivisor = 1;\n        long\
    \ currentNumber;\n        while(currentDivisor <= n) {\n            currentNumber\
    \ = currentDivisor;\n            currentDivisor *= 2;\n            if(currentDivisor\
    \ > n) {\n                currentDivisor = n;\n            }\n            if(currentNumber\
    \ % 2 == 0) {\n                largestDivisor = currentNumber;\n            }\n\
    \        }\n        return largestDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 1;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                maxDivisor = i;\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = 1;\n        for (long i = 1; i <= n; i++) {\n       \
    \     if (n % i == 0) {\n                maxDivisor = i;\n            }\n    \
    \    }\n        return maxDivisor;", "        long maxDivisor = 0;\n        for\
    \ (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n                long\
    \ divisor = i;\n                while (n % divisor == 0) {\n                 \
    \   divisor++;\n                }\n                if (divisor > maxDivisor) {\n\
    \                    maxDivisor = divisor;\n                }\n            }\n\
    \        }\n        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long divisor = i;\n                while (n % divisor == 0) {\n  \
    \                  divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 1;\n        long currentDivisor = 1;\n        long currentDivisorRemainder\
    \ = 0;\n        long currentDivisorDivisor = 1;\n        long currentDivisorRemainderDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainder = 1;\n        long currentDivisorDivisorRemainderDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainderDivisorDivisor = 1;\n     \
    \   long currentDivisorDivisorRemainderDivisorDivisorRemainder = 1;\n        long\
    \ currentDivisorDivisorRemainderDivisorDivisorRemainderDivisor = 1;\n        long\
    \ currentDivisorDivisorRemainderDivisorDivisorRemainderDivisor = 1;\n        long\
    \ currentDivisorDivisorRemainderDivisorDivisorRemainderDivisor = 1;\n        long\
    \ currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor = 1;\n \
    \       long currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor\
    \ = 1;\n        long currentDivisorDivisorRemainderDivisorDivisorRemainderDivisorDivisor\
    \ = 1;", "        long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1;\
    \ i < n; i++) {\n            if (n % i == 0) {\n                long divisor =\
    \ i;\n                while (n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = 1;\n        long maxDividend\
    \ = 1;\n        long maxDividend2 = 1;\n        long maxDividend3 = 1;\n     \
    \   long maxDividend4 = 1;\n        long maxDividend5 = 1;\n        long maxDividend6\
    \ = 1;\n        long maxDividend7 = 1;\n        long maxDividend8 = 1;\n     \
    \   long maxDividend9 = 1;\n        long maxDividend10 = 1;\n        long maxDividend11\
    \ = 1;\n        long maxDividend12 = 1;\n        long maxDividend13 = 1;\n   \
    \     long maxDividend14 = 1;\n        long maxDividend15 = 1;\n        long maxDividend16\
    \ = 1;\n        long maxDividend17 = 1;\n        long maxDividend18 = 1;\n   \
    \     long maxDividend19 = 1;\n        long maxDividend20 = 1;\n        long maxDividend21\
    \ = 1;\n        long maxDividend22 = 1;\n        long maxDividend23 = 1;\n   \
    \     long maxDividend24 = 1;\n        long maxDividend25 = 1;\n        long maxDividend26\
    \ = 1;\n        long maxDividend27 = 1;\n        long maxDividend28 = 1;\n   \
    \     long maxDividend29 = 1;\n        long maxDividend30 = 1;\n        long maxDividend31\
    \ = 1;\n        long maxDividend32 = 1;\n        long maxDividend33 = 1;\n   \
    \     long maxDividend34 = 1;\n        long maxDividend35 = 1;\n        long maxDividend36\
    \ = 1;\n        long maxDividend37 = 1;\n        long maxDividend38 = 1;\n   \
    \     long maxDividend39 = 1;\n        long maxDividend40 = 1;\n        long maxDividend41\
    \ = 1;\n        long maxDividend42 = 1;\n        long maxDividend43 = 1;\n   \
    \     long maxDividend44 = 1;\n        long maxDividend45 = 1;\n        long maxDividend46\
    \ = 1;\n        long maxDividend47 = 1;\n        long maxDividend48 = 1;\n   \
    \     long maxDividend49 = 1;\n        long maxDividend50 = 1;\n        long maxDividend51\
    \ = 1;\n        long maxDividend52 = 1;\n        long maxDividend53 = 1;\n   \
    \     long maxDividend54 = 1;\n        long maxDividend55 = 1;\n        long maxDividend56\
    \ = 1;\n        long maxDividend57 = 1;\n        long maxDividend58 = 1;\n   \
    \     long maxDividend59 = 1;\n        long maxDividend60 = 1;\n        long maxDividend61\
    \ = 1;\n        long maxDividend62 = 1;\n        long maxDividend6", "       \
    \ long maxDivisor = n;\n        for (long i = 3; i <= n; i += 2) {\n         \
    \   if (n % i == 0) {\n                maxDivisor = i;\n            }\n      \
    \  }\n        return maxDivisor;", "        long maxDivisor = 1;\n        for\
    \ (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n               \
    \ maxDivisor = i;\n            }\n        }\n        return maxDivisor;", "  \
    \      long largestDivisor = 0;\n        for (long i = 1; i < n; i++) {\n    \
    \        if (n % i == 0) {\n                largestDivisor = i;\n            }\n\
    \        }\n        return largestDivisor;", "        long largestDivisor = 0;\n\
    \        long currentDivisor = 1;\n        long currentNumber = n;\n        while\
    \ (currentNumber != 0) {\n            currentDivisor *= currentNumber;\n     \
    \       currentNumber /= 2;\n            if (currentDivisor > largestDivisor)\
    \ {\n                largestDivisor = currentDivisor;\n            }\n       \
    \ }\n        return largestDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > maxDivisor) {\n                    maxDivisor = divisor;\n               \
    \ }\n            }\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 1;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                maxDivisor = i;\n            }\n        }\n        return maxDivisor;",
  "        long maxDivisor = 0;\n        for (long i = 1; i <= n; i++) {\n       \
    \     if (n % i == 0) {\n                maxDivisor = i;\n            }\n    \
    \    }\n        return maxDivisor;", "        long largestDivisor = Long.MIN_VALUE;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            long divisor = i;\n                while (n % divisor == 0) {\n \
    \                   divisor++;\n                }\n                if (divisor\
    \ > largestDivisor) {\n                    largestDivisor = divisor;\n       \
    \         }\n            }\n        }\n        return largestDivisor;", "    \
    \    long maxDivisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n   \
    \     long currentDivisorFactor = 1;\n        long currentDivisorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor",
  "        long largestDivisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n\
    \        while (currentDivisor <= n) {\n            if (n % currentDivisor ==\
    \ 0) {\n                largestDivisor = currentDivisor;\n            }\n    \
    \        currentDivisor++;\n        }\n        return largestDivisor;", "    \
    \    long maxDivisor = Long.MIN_VALUE;\n        long currentDivisor = 1;\n   \
    \     long currentNumber = n;\n        while (currentNumber != 0) {\n        \
    \    currentDivisor *= currentNumber;\n            if (currentDivisor > maxDivisor)\
    \ {\n                maxDivisor = currentDivisor;\n            }\n           \
    \ currentNumber /= 2;\n        }\n        return maxDivisor;", "        long maxDivisor\
    \ = 1;\n        long currentDivisor = 1;\n        while (currentDivisor <= n)\
    \ {\n            if (n % currentDivisor == 0) {\n                maxDivisor =\
    \ currentDivisor;\n            }\n            currentDivisor++;\n        }\n \
    \       return maxDivisor;", "        long maxDivisor = 0;\n        long currentDivisor\
    \ = 1;\n        long currentNumber = n;\n        while (currentNumber != 0) {\n\
    \            currentDivisor *= currentNumber;\n            currentNumber /= 2;\n\
    \            if (currentDivisor % n == 0) {\n                maxDivisor = currentDivisor;\n\
    \            }\n        }\n        return maxDivisor;", "        long largestDivisor\
    \ = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++) {\n            if (n\
    \ % i == 0) {\n                long divisor = i;\n                while (divisor\
    \ < n && n % divisor == 0) {\n                    divisor++;\n               \
    \ }\n                if (divisor > largestDivisor) {\n                    largestDivisor\
    \ = divisor;\n                }\n            }\n        }\n        return largestDivisor;",
  "        long maxDivisor = 1;\n        long currentDivisor = 1;\n        long currentDivisorFactor\
    \ = 1;\n        long currentDivisorFactorFactor = 1;\n        long currentDivisorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor",
  "        long maxDivisor = 1;\n        long divisor = 1;\n        while (divisor\
    \ <= n) {\n            if (n % divisor == 0) {\n                maxDivisor = divisor;\n\
    \            }\n            divisor++;\n        }\n        return maxDivisor;",
  "        long maxDivisor = 1;\n        long currentDivisor = 1;\n        long currentDivisorFactor\
    \ = 1;\n        long currentDivisorFactorFactor = 1;\n        long currentDivisorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactor = 1;\n        long\
    \ currentDivisorFactorFactorFactorFactorFactor = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentDivisorFactorFactorFactorFactorFactorFactor", "  \
    \      long maxDivisor = Long.MIN_VALUE;\n        for (long i = 1; i < n; i++)\
    \ {\n            if (n % i == 0) {\n                long divisor = i;\n      \
    \          while (divisor < n && n % divisor == 0) {\n                    divisor++;\n\
    \                }\n                if (divisor > maxDivisor) {\n            \
    \        maxDivisor = divisor;\n                }\n            }\n        }\n\
    \        return maxDivisor;", "        long maxDivisor = Long.MIN_VALUE;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         long divisor = i;\n                while (divisor < n && n % divisor\
    \ == 0) {\n                    divisor++;\n                }\n               \
    \ if (divisor > maxDivisor) {\n                    maxDivisor = divisor;\n   \
    \             }\n            }\n        }\n        return maxDivisor;"]
stop_tokens:
- "\n    }\n"
