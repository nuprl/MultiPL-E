language: java
name: HumanEval_69_search
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(i\
    \ -> i == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb_gin_pc.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (maxFreq == -1 || maxFreq > val) {\n          \
    \      maxFreq = val;\n                maxVal = val;\n            } else if (maxFreq\
    \ == val && val > maxVal) {\n                maxFreq = val;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_gt2eo0f.java:36)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            if(val > 0) {\n                if(maxFreq < val) maxFreq\
    \ = val;\n                if(maxVal < val) maxVal = val;\n            }\n    \
    \    }\n        return maxVal;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnp0jl_u4.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long maxFreq = -1;\n        for (long i :\
    \ lst) {\n            long freq = Collections.frequency(lst, i);\n           \
    \ if (freq > maxFreq) {\n                max = i;\n                maxFreq = freq;\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpby8nwgb3.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq > maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuvitjdnn.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq > maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuvitjdnn.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            if (freq > i) {\n                max = i;\n                freq\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpateobi9d.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqln84oi4.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphdb2g4nj.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqln84oi4.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > maxVal) {\n                maxVal = val;\n\
    \                maxFreq = lst.get((int) val);\n            }\n        }\n   \
    \     return maxVal;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l,\
    \ (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 5, Size: 5\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.search(tmpgveb60v5.java:26)\n\tat Problem.main(tmpgveb60v5.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            if(val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if(freq > maxFreq) {\n              \
    \      maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw0t1nx6j.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            long freq = Collections.frequency(lst, val);\n       \
    \     if(freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp182vohp.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            freq++;\n            if (freq > i) {\n                max = i;\n\
    \                freq = i;\n            }\n        }\n        return max;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnr408yp3.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            if (freq > i) {\n                max = i;\n                freq\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpateobi9d.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            freq++;\n            if (freq > max) {\n                max =\
    \ freq;\n            }\n        }\n        if (max > 0 && freq >= max) {\n   \
    \         return max;\n        }\n        return -1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphk83fvsl.java:35)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq >= maxFreq) {\n                maxFreq = freq;\n          \
    \      maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplrwnkww0.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = -1;\n        for (long i : lst)\
    \ {\n            if (freq == -1) {\n                freq = i;\n              \
    \  max = i;\n            } else if (freq > i) {\n                freq = i;\n \
    \               max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2_gswqrs.java:36)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long maxFreq = -1;\n        for (long i :\
    \ lst) {\n            long freq = Collections.frequency(lst, i);\n           \
    \ if (freq > maxFreq) {\n                max = i;\n                maxFreq = freq;\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpby8nwgb3.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            if(val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if(freq >= maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmmiudal0.java:35)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            freq += i;\n            if (freq > max) {\n                max\
    \ = freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6iua6ut.java:32)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq > maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuvitjdnn.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = lst.stream().filter(i -> i == val).count();\n\
    \            if (freq > maxFreq) {\n                maxFreq = freq;\n        \
    \        maxVal = val;\n            }\n        }\n        return maxVal;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphwaxh9sn.java:33)\n"
  stdout: ''
  timestamp: 1659794307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                if (maxFreq < val)\
    \ maxFreq = val;\n                if (maxVal < val) maxVal = val;\n          \
    \  }\n        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_ume5zb.java:32)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            long freq = Collections.frequency(lst, val);\n       \
    \     if(freq >= maxFreq) {\n                maxFreq = freq;\n               \
    \ maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqureyni.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            long freq = Collections.frequency(lst, val);\n       \
    \     if(freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp182vohp.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long maxFreq = -1;\n        for(long i :\
    \ lst) {\n            if(i>0) {\n                long freq = Collections.frequency(lst,\
    \ i);\n                if(freq>maxFreq) {\n                    maxFreq = freq;\n\
    \                    max = i;\n                }\n            }\n        }\n \
    \       return max;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l,\
    \ (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiigth6kw.java:35)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq > maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf7jr4cfw.java:35)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            long freq = Collections.frequency(lst, val);\n       \
    \     if(freq >= maxFreq) {\n                maxFreq = freq;\n               \
    \ maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqureyni.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = -1;\n        for (long i : lst)\
    \ {\n            if (freq == -1 || freq > i) {\n                freq = i;\n  \
    \              max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgx86_ln4.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(i\
    \ -> i == val).count();\n                if (freq > maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa5esvp0o.java:35)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (maxVal < 0 || maxVal > val) {\n              \
    \  maxVal = val;\n                maxFreq = lst.get((int)val);\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 5 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.search(tmpndsplblr.java:26)\n\tat Problem.main(tmpndsplblr.java:32)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1iwm5yds.java:35)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq > maxFreq) {\n                    maxFreq = freq;\n\
    \                    maxVal = val;\n                }\n            }\n       \
    \ }\n        return maxVal;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8atyzn0k.java:35)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \                freq--;\n            }\n        }\n        if (freq >= 0) {\n\
    \            return max;\n        }\n        return -1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_9c78onf.java:36)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = -1;\n        for (long i : lst)\
    \ {\n            if (freq == -1 || freq > i) {\n                freq = i;\n  \
    \              max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgx86_ln4.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                if (maxFreq < val)\
    \ maxFreq = val;\n                if (maxVal < val) maxVal = val;\n          \
    \  }\n        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_ume5zb.java:32)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            long freq = Collections.frequency(lst, val);\n       \
    \     if(freq >= maxFreq) {\n                maxFreq = freq;\n               \
    \ maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqureyni.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long maxFreq = -1;\n        for (long i :\
    \ lst) {\n            if (maxFreq < i) {\n                max = i;\n         \
    \       maxFreq = i;\n            }\n        }\n        return max;\n    }\n \
    \   public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2_ez094l.java:32)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (maxFreq < val && val > 0) {\n                maxFreq\
    \ = val;\n                maxVal = val;\n            }\n        }\n        return\
    \ maxVal;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxzadf59r.java:32)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            if (freq > i) {\n                max = i;\n                freq\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpateobi9d.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long currFreq\
    \ = 0;\n        for (long val : lst) {\n            if (currFreq == 0 || val !=\
    \ lst.get(currFreq)) {\n                currFreq++;\n                if (currFreq\
    \ > maxFreq) {\n                    maxFreq = currFreq;\n                    maxVal\
    \ = val;\n                }\n            } else {\n                currFreq++;\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqxwo9b38.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (currFreq == 0 || val != lst.get(currFreq))\
    \ {\n                                                ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            long freq = Collections.frequency(lst, val);\n       \
    \     if(freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp182vohp.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            freq++;\n            if (freq > i) {\n                max = i;\n\
    \                freq = i;\n            }\n        }\n        return max;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnr408yp3.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = -1;\n        for (long i : lst)\
    \ {\n            if (freq == -1 || freq > i) {\n                freq = i;\n  \
    \              max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgx86_ln4.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = -1;\n        for(long i : lst)\
    \ {\n            freq++;\n            if(freq > max) {\n                max =\
    \ freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf5avdpzb.java:32)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq >= max) {\n            return -1;\n\
    \        }\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkm4cea0i.java:35)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            if (freq > 0) {\n                if (freq >= i) {\n         \
    \           freq -= i;\n                    max = i;\n                }\n    \
    \        } else {\n                freq = i;\n                max = i;\n     \
    \       }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnarb76mk.java:38)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = -1;\n        for (long i : lst)\
    \ {\n            if (freq == -1 || freq > i) {\n                freq = i;\n  \
    \              max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgx86_ln4.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (maxFreq < 0 || maxFreq > val) {\n            \
    \    maxFreq = val;\n                maxVal = val;\n            }\n        }\n\
    \        return maxVal;\n    }\n    public static void main(String[] args) {\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l,\
    \ (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgt76qtj4.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long currFreq\
    \ = -1;\n        for (long val : lst) {\n            currFreq = lst.stream().filter(f\
    \ -> f == val).count();\n            if (currFreq > maxFreq) {\n             \
    \   maxFreq = currFreq;\n                maxVal = val;\n            } else if\
    \ (currFreq == maxFreq) {\n                if (val > maxVal) {\n             \
    \       maxFreq = currFreq;\n                    maxVal = val;\n             \
    \   }\n            }\n        }\n        return maxVal;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph4pqq2i1.java:39)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            if (freq > i) {\n                max = i;\n                freq\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpateobi9d.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            freq++;\n            if (freq > i) {\n                max = i;\n\
    \                freq = i;\n            }\n        }\n        return max;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnr408yp3.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = -1;\n        for(long i : lst)\
    \ {\n            freq++;\n            if(freq > max) {\n                max =\
    \ freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf5avdpzb.java:32)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long curVal\
    \ = lst.get(0);\n        long curFreq = lst.get(0);\n        for (long val : lst)\
    \ {\n            if (val == curVal) {\n                curFreq++;\n          \
    \  } else {\n                if (curFreq >= maxFreq) {\n                    maxFreq\
    \ = curFreq;\n                    maxVal = curVal;\n                }\n      \
    \          curVal = val;\n                curFreq = 1;\n            }\n      \
    \  }\n        if (curFreq >= maxFreq) {\n            maxFreq = curFreq;\n    \
    \        maxVal = curVal;\n        }\n        return maxVal;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3uf6ywxp.java:44)\n"
  stdout: ''
  timestamp: 1659794307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            if (freq < i) {\n                max = i;\n                freq\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp52tkdhsr.java:32)\n"
  stdout: ''
  timestamp: 1659794307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1iwm5yds.java:35)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long currVal\
    \ = -1;\n        long currFreq = -1;\n        for (long val : lst) {\n       \
    \     if (val > 0) {\n                if (currVal == -1) {\n                 \
    \   currVal = val;\n                    currFreq = 1;\n                } else\
    \ if (currFreq >= val) {\n                    currFreq = val;\n              \
    \  }\n            }\n            if (currVal > 0 && currFreq >= val) {\n     \
    \           maxVal = currVal;\n                maxFreq = currFreq;\n         \
    \   }\n        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp294xx23b.java:42)\n"
  stdout: ''
  timestamp: 1659794307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqln84oi4.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            long freq = Collections.frequency(lst, val);\n       \
    \     if(freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp182vohp.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqln84oi4.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqln84oi4.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            long freq = Collections.frequency(lst, val);\n       \
    \     if(freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp182vohp.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1iwm5yds.java:35)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            long freq = Collections.frequency(lst, val);\n       \
    \     if(freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp182vohp.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (maxVal < 0 || val >= maxVal) {\n             \
    \   maxVal = val;\n                maxFreq = lst.get(frequency(lst));\n      \
    \      }\n        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr07e0yl8.java:26: error: cannot find symbol\n                maxFreq\
    \ = lst.get(frequency(lst));\n                                  ^\n  symbol: \
    \  method frequency(ArrayList<Long>)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659794307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            if (freq >= i) {\n                freq = i;\n               \
    \ max = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphgzutsnq.java:32)\n"
  stdout: ''
  timestamp: 1659794307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            long freq = Collections.frequency(lst, val);\n       \
    \     if(freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp182vohp.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq > maxFreq) {\n                    maxFreq = freq;\n\
    \                    maxVal = val;\n                }\n            }\n       \
    \ }\n        return maxVal;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8atyzn0k.java:35)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                if (maxFreq < val)\
    \ maxFreq = val;\n                if (maxVal < val) maxVal = val;\n          \
    \  }\n        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_ume5zb.java:32)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long maxFreq = -1;\n        for (long i :\
    \ lst) {\n            long freq = Collections.frequency(lst, i);\n           \
    \ if (freq > maxFreq) {\n                maxFreq = freq;\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy6rg1f8w.java:33)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            if (freq > i) {\n                freq = i;\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqctbn_00.java:32)\n"
  stdout: ''
  timestamp: 1659794307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            freq++;\n            if (freq > i) {\n                max = i;\n\
    \                freq = i;\n            }\n        }\n        return max;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnr408yp3.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long maxFreq = -1;\n        for (long i :\
    \ lst) {\n            if (i > 0 && maxFreq < i) {\n                max = i;\n\
    \                maxFreq = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfn5bhpfa.java:32)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            freq += i;\n            if (freq > max) {\n                max\
    \ = freq;\n            }\n        }\n        return max > 0 ? max : -1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvjzqmlif.java:32)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1iwm5yds.java:35)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(v\
    \ -> v == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1iwm5yds.java:35)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long currVal\
    \ = lst.get(0);\n        long currFreq = lst.get(0);\n        for (int i = 1;\
    \ i < lst.size(); i++) {\n            if (lst.get(i) > currVal) {\n          \
    \      currVal = lst.get(i);\n                currFreq = lst.get(i);\n       \
    \     } else if (lst.get(i) == currVal) {\n                currFreq++;\n     \
    \       }\n            if (currFreq > maxFreq) {\n                maxFreq = currFreq;\n\
    \                maxVal = currVal;\n            }\n        }\n        return maxVal;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqd0cisbh.java:40)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwz7uz2j.java:35)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long maxFreq = -1;\n        for (long i :\
    \ lst) {\n            if (maxFreq == -1 || maxFreq > i) {\n                maxFreq\
    \ = i;\n                max = i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw6plkdkn.java:33)\n"
  stdout: ''
  timestamp: 1659794307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long currFreq\
    \ = -1;\n        for(long val : lst) {\n            currFreq = Collections.frequency(lst,\
    \ val);\n            if(currFreq > maxFreq) {\n                maxFreq = currFreq;\n\
    \                maxVal = val;\n            }\n        }\n        return maxVal;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo0ijmo_p.java:34)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqln84oi4.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > maxVal) {\n                maxVal = val;\n\
    \                maxFreq = lst.get(lst.indexOf(val));\n            }\n       \
    \ }\n        return maxFreq > maxVal ? maxVal : -1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvxiim7tx.java:32)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            long freq = Collections.frequency(lst, val);\n       \
    \     if(freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp182vohp.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = -1;\n        for(long i : lst)\
    \ {\n            freq++;\n            if(freq > max) {\n                max =\
    \ freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf5avdpzb.java:32)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            if (freq == 0 || freq > i) {\n                freq = i;\n   \
    \             max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnmdb4xkl.java:33)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(x\
    \ -> x == val).count();\n                if (freq > maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuvitjdnn.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = -1;\n        for (long i : lst)\
    \ {\n            if (freq == -1) {\n                freq = i;\n              \
    \  max = i;\n            } else if (freq > i) {\n                freq = i;\n \
    \               max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2_gswqrs.java:36)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for(long i : lst)\
    \ {\n            freq++;\n            if(freq > i) {\n                max = i;\n\
    \                freq = i;\n            }\n        }\n        return max;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzxrx97tj.java:34)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwz7uz2j.java:35)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            freq += i;\n            if (freq > max) {\n                max\
    \ = freq;\n            }\n        }\n        return max > 0 ? max : -1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvjzqmlif.java:32)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = -1;\n        for (long i : lst)\
    \ {\n            if (freq == -1) {\n                freq = i;\n              \
    \  max = i;\n            } else if (freq >= i) {\n                freq = i;\n\
    \                max = i;\n            }\n        }\n        return max;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpueuvus8f.java:36)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq >= maxFreq) {\n                maxFreq = freq;\n          \
    \      maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplrwnkww0.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqln84oi4.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long currFreq\
    \ = -1;\n        for(long val : lst) {\n            currFreq = lst.stream().filter(x\
    \ -> x == val).count();\n            if(currFreq > maxFreq) {\n              \
    \  maxFreq = currFreq;\n                maxVal = val;\n            }\n       \
    \ }\n        return maxVal;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzyacqqax.java:34)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long maxValIndex\
    \ = -1;\n        long maxFreqIndex = -1;\n        for(long val : lst) {\n    \
    \        if(val > 0) {\n                long freq = lst.stream().filter(x -> x\
    \ == val).count();\n                if(freq > maxFreq) {\n                   \
    \ maxFreq = freq;\n                    maxVal = val;\n                    maxValIndex\
    \ = val;\n                    maxFreqIndex = freq;\n                }\n      \
    \      }\n        }\n        if(maxValIndex == -1) {\n            return -1;\n\
    \        }\n        long maxFreqMin = maxFreqIndex;\n        for(long freq : lst)\
    \ {\n            if(freq == maxFreqMin) {\n                return maxVal;\n  \
    \          }\n        }\n        return -1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv24w5a8u.java:48)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = -1;\n        for (long i : lst)\
    \ {\n            if (freq == -1 || freq > i) {\n                freq = i;\n  \
    \              max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgx86_ln4.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            if(val > 0) {\n                long freq = lst.stream().filter(i\
    \ -> i == val).count();\n                if(freq >= maxFreq) {\n             \
    \       maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpteof3s33.java:35)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqln84oi4.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwz7uz2j.java:35)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long currVal\
    \ = -1;\n        long currFreq = -1;\n        for (long i : lst) {\n         \
    \   if (currVal < 0) {\n                currVal = i;\n                currFreq\
    \ = lst.get(i);\n            } else {\n                if (currFreq >= i) {\n\
    \                    currFreq = lst.get(i);\n                }\n            }\n\
    \            if (currVal > 0 && currFreq >= i) {\n                maxVal = currVal;\n\
    \                maxFreq = currFreq;\n            }\n        }\n        return\
    \ maxVal;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8vw5qga1.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n                currFreq = lst.get(i);\n                 \
    \                  ^\n/tmp/tmp8vw5qga1.java:31: error: incompatible types: possible\
    \ lossy conversion from long to int\n                    currFreq = lst.get(i);\n\
    \                                       ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq > maxFreq) {\n                    maxFreq = freq;\n\
    \                    maxVal = val;\n                }\n            }\n       \
    \ }\n        return maxVal;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8atyzn0k.java:35)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long maxFreq = -1;\n        for (long i :\
    \ lst) {\n            if (maxFreq == -1 || maxFreq < i) {\n                maxFreq\
    \ = i;\n                max = i;\n            } else if (maxFreq == i) {\n   \
    \             maxFreq++;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvmstb1zl.java:34)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            if(val > 0) {\n                if(maxFreq == -1 || maxFreq\
    \ > val) {\n                    maxFreq = val;\n                    maxVal = val;\n\
    \                }\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgn0ozsks.java:35)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long currFreq\
    \ = -1;\n        for (long val : lst) {\n            if (currFreq == -1) {\n \
    \               currFreq = val;\n            } else if (currFreq == val) {\n \
    \               currFreq++;\n            } else {\n                if (currFreq\
    \ > maxFreq) {\n                    maxFreq = currFreq;\n                    maxVal\
    \ = val;\n                }\n                currFreq = val;\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2n9l_imf.java:40)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = -1;\n        for (long i : lst)\
    \ {\n            if (freq == -1) {\n                freq = i;\n              \
    \  max = i;\n            } else if (freq >= i) {\n                freq = i;\n\
    \                max = i;\n            }\n        }\n        return max;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpueuvus8f.java:36)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq > maxFreq) {\n                    maxFreq = freq;\n\
    \                    maxVal = val;\n                }\n            }\n       \
    \ }\n        return maxVal;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8atyzn0k.java:35)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            if (freq > i) {\n                freq = i;\n                max\
    \ = i;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqctbn_00.java:32)\n"
  stdout: ''
  timestamp: 1659794307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq > maxFreq) {\n                maxFreq = freq;\n           \
    \     maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqln84oi4.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = -1;\n        for (long i : lst)\
    \ {\n            if (freq == -1) {\n                freq = i;\n              \
    \  max = i;\n            } else if (freq > i) {\n                freq = i;\n \
    \               max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2_gswqrs.java:36)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > maxVal) {\n                maxVal = val;\n\
    \                maxFreq = lst.get(lst.indexOf(val));\n            }\n       \
    \ }\n        return maxFreq > maxVal ? maxVal : -1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvxiim7tx.java:32)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwz7uz2j.java:35)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            long freq = Collections.frequency(lst, val);\n       \
    \     if(freq >= maxFreq) {\n                maxFreq = freq;\n               \
    \ maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqureyni.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (maxFreq < val && val > 0) {\n                maxFreq\
    \ = val;\n                maxVal = val;\n            }\n        }\n        return\
    \ maxVal;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxzadf59r.java:32)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > maxVal) {\n                maxVal = val;\n\
    \                maxFreq = lst.get(lst.indexOf(val));\n            } else if (val\
    \ == maxVal) {\n                maxFreq++;\n            }\n        }\n       \
    \ return maxVal;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaz5ttp40.java:34)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            if (freq > i) {\n                max = i;\n                freq\
    \ = i;\n            } else if (freq == i) {\n                freq++;\n       \
    \     }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptu6u7sfn.java:34)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long maxFreq = -1;\n        for (long i :\
    \ lst) {\n            if (maxFreq < i) {\n                maxFreq = i;\n     \
    \           max = i;\n            }\n        }\n        return max;\n    }\n \
    \   public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmdiml9ej.java:32)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            long freq = Collections.frequency(lst, val);\n       \
    \     if(freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp182vohp.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            freq++;\n            if (freq > i) {\n                max = i;\n\
    \                freq = freq - i;\n            }\n        }\n        if (max <\
    \ 0) {\n            return -1;\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzh9yueat.java:37)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long curVal\
    \ = -1;\n        long curFreq = -1;\n        for (long val : lst) {\n        \
    \    if (val > 0) {\n                if (curVal == -1) {\n                   \
    \ curVal = val;\n                    curFreq = 1;\n                } else {\n\
    \                    if (val == curVal) {\n                        curFreq++;\n\
    \                    } else {\n                        if (curFreq > maxFreq)\
    \ {\n                            maxFreq = curFreq;\n                        \
    \    maxVal = curVal;\n                        }\n                        curVal\
    \ = val;\n                        curFreq = 1;\n                    }\n      \
    \          }\n            }\n        }\n        if (maxFreq > maxFreq) {\n   \
    \         maxFreq = maxFreq;\n            maxVal = maxVal;\n        }\n      \
    \  return maxVal;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ep5ljig.java:51)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            if (freq == 0 || freq > i) {\n                max = i;\n    \
    \            freq = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb4_u31d5.java:33)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            long freq = Collections.frequency(lst, val);\n       \
    \     if(freq > maxFreq) {\n                maxFreq = freq;\n                maxVal\
    \ = val;\n            }\n        }\n        return maxVal;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp182vohp.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            long freq = Collections.frequency(lst, val);\n       \
    \     if(freq >= maxFreq) {\n                maxFreq = freq;\n               \
    \ maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmqureyni.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                if (val > maxVal)\
    \ {\n                    maxVal = val;\n                    maxFreq = lst.get(lst.indexOf(val));\n\
    \                }\n            }\n        }\n        return maxFreq > maxVal\
    \ ? maxVal : -1;\n    }\n    public static void main(String[] args) {\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l, (long)1l))))\
    \ == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l,\
    \ (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfolvvrh4.java:34)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = -1;\n        for (long i : lst)\
    \ {\n            if (freq == -1 || freq > i) {\n                freq = i;\n  \
    \              max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgx86_ln4.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long currVal\
    \ = -1;\n        long currFreq = -1;\n        for (long val : lst) {\n       \
    \     if (val > 0) {\n                currVal = val;\n                currFreq\
    \ = lst.stream().filter(x -> x == val).count();\n                if (currFreq\
    \ > maxFreq) {\n                    maxFreq = currFreq;\n                    maxVal\
    \ = currVal;\n                }\n            }\n        }\n        return maxVal;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa2y4gx0m.java:38)\n"
  stdout: ''
  timestamp: 1659794309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long maxFreq = -1;\n        for (long i :\
    \ lst) {\n            if (maxFreq < i) {\n                max = i;\n         \
    \       maxFreq = i;\n            }\n        }\n        return max;\n    }\n \
    \   public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2_ez094l.java:32)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = lst.stream().filter(i\
    \ -> i == val).count();\n                if (freq >= maxFreq) {\n            \
    \        maxFreq = freq;\n                    maxVal = val;\n                }\n\
    \            }\n        }\n        return maxVal;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb_gin_pc.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = -1;\n        for (long i : lst)\
    \ {\n            if (freq == -1 || freq > i) {\n                freq = i;\n  \
    \              max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgx86_ln4.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq > maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8017psz.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        long currFreq\
    \ = -1;\n        for (long val : lst) {\n            currFreq = Collections.frequency(lst,\
    \ val);\n            if (currFreq > maxFreq) {\n                maxFreq = currFreq;\n\
    \                maxVal = val;\n            }\n        }\n        return maxVal;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp44_c__ki.java:34)\n"
  stdout: ''
  timestamp: 1659794309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            long freq = Collections.frequency(lst, val);\n   \
    \         if (freq >= maxFreq) {\n                maxFreq = freq;\n          \
    \      maxVal = val;\n            }\n        }\n        return maxVal;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplrwnkww0.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = 0;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            freq++;\n            if (freq > i) {\n                max = i;\n\
    \                freq = freq - i;\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj9342goo.java:34)\n"
  stdout: ''
  timestamp: 1659794309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            freq += i;\n            if (freq > max) {\n                max\
    \ = freq;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6iua6ut.java:32)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = 0;\n        for (long i : lst)\
    \ {\n            if (freq > 0) {\n                if (freq >= i) {\n         \
    \           freq--;\n                }\n            }\n            else {\n  \
    \              freq = i;\n            }\n            if (max < 0 || freq > max)\
    \ {\n                max = freq;\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphjmjxavg.java:39)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for(long val\
    \ : lst) {\n            if(val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if(freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwz7uz2j.java:35)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long maxFreq = -1;\n        for (long i :\
    \ lst) {\n            if (maxFreq < i) {\n                maxFreq = i;\n     \
    \           max = i;\n            }\n        }\n        return max;\n    }\n \
    \   public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmdiml9ej.java:32)\n"
  stdout: ''
  timestamp: 1659794308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long max = -1;\n        long freq = -1;\n        for (long i : lst)\
    \ {\n            if (freq == -1 || freq > i) {\n                freq = i;\n  \
    \              max = i;\n            }\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)4l, (long)1l, (long)4l,\
    \ (long)4l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l)))) == (-1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l, (long)8l)))) ==\
    \ (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)7l, (long)8l, (long)8l, (long)4l, (long)8l, (long)7l, (long)3l, (long)9l,\
    \ (long)6l, (long)5l, (long)10l, (long)4l, (long)3l, (long)6l, (long)7l, (long)1l,\
    \ (long)7l, (long)4l, (long)10l, (long)8l, (long)1l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)8l, (long)2l)))) ==\
    \ (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l,\
    \ (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l, (long)3l,\
    \ (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgx86_ln4.java:33)\n"
  stdout: ''
  timestamp: 1659794306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a non-empty list of positive integers. Return\
    \ the greatest integer that is greater than \n    // zero, and has a frequency\
    \ greater than or equal to the value of the integer itself. \n    // The frequency\
    \ of an integer is the number of times it appears in the list.\n    // If no such\
    \ a value exist, return -1.\n    // Examples:\n    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))\n    // (2l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l,\
    \ (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))\n    // (3l)\n    // >>>\
    \ search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l,\
    \ (long)4l))))\n    // (-1l)\n    public static long search(ArrayList<Long> lst)\
    \ {\n        long maxVal = -1;\n        long maxFreq = -1;\n        for (long\
    \ val : lst) {\n            if (val > 0) {\n                long freq = Collections.frequency(lst,\
    \ val);\n                if (freq >= maxFreq) {\n                    maxFreq =\
    \ freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l,\
    \ (long)5l, (long)5l, (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)4l, (long)1l, (long)4l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)8l, (long)8l, (long)8l, (long)8l, (long)8l,\
    \ (long)8l, (long)8l, (long)8l)))) == (8l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)3l, (long)2l, (long)2l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)8l, (long)8l, (long)4l,\
    \ (long)8l, (long)7l, (long)3l, (long)9l, (long)6l, (long)5l, (long)10l, (long)4l,\
    \ (long)3l, (long)6l, (long)7l, (long)1l, (long)7l, (long)4l, (long)10l, (long)8l,\
    \ (long)1l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)2l, (long)8l, (long)2l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)7l, (long)1l, (long)8l, (long)8l, (long)10l, (long)5l, (long)8l, (long)5l,\
    \ (long)3l, (long)10l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l,\
    \ (long)8l, (long)3l, (long)6l, (long)5l, (long)6l, (long)4l)))) == (-1l));\n\
    \    assert(search((new ArrayList<Long>(Arrays.asList((long)6l, (long)9l, (long)6l,\
    \ (long)7l, (long)1l, (long)4l, (long)7l, (long)1l, (long)8l, (long)8l, (long)9l,\
    \ (long)8l, (long)10l, (long)10l, (long)8l, (long)4l, (long)10l, (long)4l, (long)10l,\
    \ (long)1l, (long)2l, (long)9l, (long)5l, (long)7l, (long)9l)))) == (1l));\n \
    \   assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)9l, (long)10l,\
    \ (long)1l, (long)3l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)6l,\
    \ (long)9l, (long)7l, (long)5l, (long)8l, (long)7l, (long)5l, (long)3l, (long)7l,\
    \ (long)5l, (long)10l, (long)10l, (long)3l, (long)6l, (long)10l, (long)2l, (long)8l,\
    \ (long)6l, (long)5l, (long)4l, (long)9l, (long)5l, (long)3l, (long)10l)))) ==\
    \ (5l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)1l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)8l, (long)8l,\
    \ (long)10l, (long)6l, (long)4l, (long)3l, (long)5l, (long)8l, (long)2l, (long)4l,\
    \ (long)2l, (long)8l, (long)4l, (long)6l, (long)10l, (long)4l, (long)2l, (long)1l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)5l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)8l, (long)2l,\
    \ (long)10l, (long)5l, (long)1l, (long)2l, (long)9l, (long)5l, (long)5l, (long)6l,\
    \ (long)3l, (long)8l, (long)6l, (long)4l, (long)10l)))) == (2l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)10l, (long)1l, (long)6l,\
    \ (long)9l, (long)10l, (long)8l, (long)6l, (long)8l, (long)7l, (long)3l)))) ==\
    \ (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l,\
    \ (long)4l, (long)1l, (long)5l, (long)1l, (long)5l, (long)2l, (long)5l, (long)7l,\
    \ (long)7l, (long)7l, (long)3l, (long)10l, (long)1l, (long)5l, (long)4l, (long)2l,\
    \ (long)8l, (long)4l, (long)1l, (long)9l, (long)10l, (long)7l, (long)10l, (long)2l,\
    \ (long)8l, (long)10l, (long)9l, (long)4l)))) == (4l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)4l, (long)2l, (long)8l,\
    \ (long)7l, (long)5l, (long)6l, (long)4l, (long)10l, (long)4l, (long)6l, (long)3l,\
    \ (long)7l, (long)8l, (long)8l, (long)3l, (long)1l, (long)4l, (long)2l, (long)2l,\
    \ (long)10l, (long)7l)))) == (4l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)8l, (long)6l, (long)10l, (long)2l, (long)6l, (long)10l, (long)2l, (long)7l,\
    \ (long)8l, (long)10l, (long)3l, (long)8l, (long)2l, (long)6l, (long)2l, (long)3l,\
    \ (long)1l)))) == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)3l, (long)9l, (long)5l, (long)6l, (long)3l, (long)2l, (long)8l,\
    \ (long)5l, (long)6l, (long)10l, (long)10l, (long)6l, (long)8l, (long)4l, (long)10l,\
    \ (long)7l, (long)7l, (long)10l, (long)8l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)10l)))) == (-1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)7l, (long)2l, (long)4l,\
    \ (long)7l, (long)2l, (long)10l, (long)9l, (long)7l, (long)5l, (long)7l, (long)2l))))\
    \ == (2l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l,\
    \ (long)10l, (long)2l, (long)1l, (long)1l, (long)10l, (long)3l, (long)6l, (long)1l,\
    \ (long)8l)))) == (1l));\n    assert(search((new ArrayList<Long>(Arrays.asList((long)7l,\
    \ (long)9l, (long)9l, (long)9l, (long)3l, (long)4l, (long)1l, (long)5l, (long)9l,\
    \ (long)1l, (long)2l, (long)1l, (long)1l, (long)10l, (long)7l, (long)5l, (long)6l,\
    \ (long)7l, (long)6l, (long)7l, (long)7l, (long)6l)))) == (1l));\n    assert(search((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)10l, (long)10l, (long)9l, (long)2l))))\
    \ == (-1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp23jgoap1.java:35)\n"
  stdout: ''
