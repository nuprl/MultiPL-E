name: HumanEval_116_sort_array
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // In this Kata, you have to sort an array of non-negative\
  \ integers according to\n    // number of ones in their binary representation in\
  \ ascending order.\n    // For similar number of ones, sort based on decimal value.\n\
  \    // It must be implemented like this:\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)5l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)-2l,\
  \ (long)-3l, (long)-4l, (long)-5l, (long)-6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-6l,\
  \ (long)-5l, (long)-4l, (long)-3l, (long)-2l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)0l, (long)2l, (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l, (long)2l, (long)3l, (long)4l)))\n    public static ArrayList<Long> sortArray(ArrayList<Long>\
  \ arr) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)3l, (long)4l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l)))));\n\
  \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)-4l,\
  \ (long)-5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
  \ (long)-2l, (long)-6l, (long)-5l, (long)-3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)0l, (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l, (long)2l, (long)4l, (long)3l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList()))).equals((new\
  \ ArrayList<Long>(Arrays.asList()))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)5l, (long)77l, (long)4l, (long)5l, (long)3l, (long)5l, (long)7l, (long)2l,\
  \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)2l,\
  \ (long)4l, (long)4l, (long)3l, (long)3l, (long)5l, (long)5l, (long)5l, (long)7l,\
  \ (long)77l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)3l,\
  \ (long)6l, (long)44l, (long)12l, (long)32l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)32l,\
  \ (long)3l, (long)5l, (long)6l, (long)12l, (long)44l)))));\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)16l, (long)32l)))));\n\
  \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l,\
  \ (long)16l, (long)32l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l,\
  \ (long)8l, (long)16l, (long)32l)))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(arr,\
    \ (o1, o2) -> {\n            long ones = o1 & 1l;\n            long zeros = o2\
    \ & 1l;\n            if (ones > zeros) {\n                return -1;\n       \
    \     } else if (ones < zeros) {\n                return 1;\n            } else\
    \ {\n                return 0;\n            }\n        });\n        Arrays.sort(arr,\
    \ (o1, o2) -> {\n            long ones = o1 & 1l;\n            long zeros = o2\
    \ & 1l;\n            if (ones > zeros) {\n                return 1;\n        \
    \    } else if (ones < zeros) {\n                return -1;\n            } else\
    \ {\n                return 0;\n            }\n        });\n        Arrays.sort(arr,\
    \ (o1, o2) -> {\n            long ones = o1 & 1l;\n            long zeros = o2\
    \ & 1l;\n            if (ones > zeros) {\n                return -1;\n       \
    \     } else if (ones < zeros) {\n                return 1;\n            } else\
    \ {\n                return 0;\n            }\n        });\n        Arrays.sort(arr,\
    \ (o1, o2) -> {\n            long ones = o1 & 1l;\n            long zeros = o2\
    \ & 1l;\n            if (ones > zeros) {\n                return 1;\n        \
    \    } else if (ones < zeros) {\n                return -1;\n            } else\
    \ {\n                return 0;\n            }\n        });\n        Arrays.sort(arr,\
    \ (o1, o2) -> {\n            long ones = o1 & 1l;\n            long zeros = o2\
    \ & 1l;\n            if (ones > zeros) {\n                return -1;\n       \
    \     } else if (ones < zeros) {\n                return 1;\n            } else\
    \ {\n                return 0;\n            }\n        });\n        Arrays.sort(arr,\
    \ (o1, o2) -> {\n            long ones = o1 & 1l;\n            long zeros = o2\
    \ & 1l;\n            if (ones > zeros) {\n                return 1;\n        \
    \    } else if (ones < zeros) {\n                return -1;\n            } else\
    \ {\n                return 0;\n            }\n        });\n        Arrays.sort(arr,\
    \ (o1, o2) -> {\n            long ones = o1 & 1l;\n            long zeros = o2\
    \ & 1l;\n            if (ones > zeros) {\n                return -1;\n       \
    \     } else if (ones < zeros) {\n                return 1;\n            } else\
    \ {\n                return 0;\n            }\n        });\n        Arrays.sort(arr,\
    \ (o1, o2) -> {\n            long ones = o1 & 1l;\n            long zeros = o2\
    \ & 1l;\n            if (ones > zeros) {\n                return 1;\n        \
    \    } else if (ones < zeros) {\n                return -1;\n            } else\
    \ {\n                return 0;\n            }\n        });\n        Arrays.sort(arr,\
    \ (o1, o2) -> {\n            long ones = o1 & 1l;\n            long zeros = o2\
    \ & 1l;\n            if (ones > zeros) {\n                return -1;", "     \
    \   ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n    \
    \    long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long i : arr) {\n            if (i > 0) {\n                ones\
    \ += i;\n            }\n            if (i > 10) {\n                tens += i;\n\
    \            }\n            if (i > 100) {\n                hundreds += i;\n \
    \           }\n            if (i > 1000) {\n                thousands += i;\n\
    \            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        if (onesCount > onesCount) {\n            onesCount =\
    \ onesCount;\n        }\n        if (tensCount > tensCount) {\n            tensCount\
    \ = tensCount;\n        }\n        if (hundredsCount > hundredsCount) {\n    \
    \        hundredsCount = hundredsCount;\n        }\n        if (thousandsCount\
    \ > thousandsCount) {\n            thousandsCount = thousandsCount;\n        }\n\
    \        long onesCount2 = ones;\n        long tensCount2 = tens;\n        long\
    \ hundredsCount2 = hundreds;\n        long thousandsCount2 = thousands;\n    \
    \    if (onesCount2 > onesCount2) {\n            onesCount2 = onesCount2;\n  \
    \      }\n        if (tensCount2 > tensCount2) {\n            tensCount2 = tensCount2;\n\
    \        }\n        if (hundredsCount2 > hundredsCount2) {\n            hundredsCount2\
    \ = hundredsCount2;\n        }\n        if (thousandsCount2 > thousandsCount2)\
    \ {\n            thousandsCount2 = thousandsCount2;\n        }\n        long onesCount3\
    \ = ones;\n        long tensCount3 = tens;\n        long hundredsCount3 = hundreds;\n\
    \        long thousandsCount3 = thousands;\n        if (onesCount3 > onesCount3)\
    \ {\n            onesCount3 = onesCount3;\n        }\n        if (tensCount3 >\
    \ tensCount3) {\n            tensCount3 = tensCount3;\n        }\n        if (hundredsCount3\
    \ > hundredsCount3) {\n            hundredsCount3 = hundredsCount3;\n        }\n\
    \        if (thousandsCount3 > thousandsCount3) {\n            thousandsCount3\
    \ = thousandsCount3;\n        }\n        long onesCount4 = ones;\n        long ",
  "        ArrayList<Long> res = new ArrayList<>();\n        long ones = 0;\n    \
    \    long zeros = 0;\n        for (Long i : arr) {\n            if (i == 1l) {\n\
    \                ones++;\n            } else {\n                zeros++;\n   \
    \         }\n        }\n        long maxOnes = ones;\n        long maxZeros =\
    \ zeros;\n        for (Long i : arr) {\n            if (i == 1l) {\n         \
    \       ones--;\n            } else {\n                zeros--;\n            }\n\
    \        }\n        if (maxOnes > maxZeros) {\n            long temp = maxOnes;\n\
    \            maxOnes = maxZeros;\n            maxZeros = temp;\n        }\n  \
    \      long maxOnesDecimal = maxOnes / Math.pow(10, maxOnes % Math.log10(10));\n\
    \        long maxZerosDecimal = maxZeros / Math.pow(10, maxZeros % Math.log10(10));\n\
    \        long maxDecimal = Math.max(maxOnesDecimal, maxZerosDecimal);\n      \
    \  long maxDecimalDecimal = maxDecimal / Math.pow(10, maxDecimal % Math.log10(10));\n\
    \        long maxDecimalDecimalDecimal = maxDecimalDecimal / Math.pow(10, maxDecimalDecimal\
    \ % Math.log10(10));\n        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimal\
    \ / Math.pow(10, maxDecimalDecimalDecimal % Math.log10(10));\n        long maxDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimal / Math.pow(10, maxDecimalDecimalDecimalDecimal\
    \ % Math.log10(10));\n        long maxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimal / Math.pow(10, maxDecimalDecimalDecimalDecimalDecimal\
    \ % Math.log10(10));\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10, maxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ % Math.log10(10));\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10, maxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ % Math.log10(10));\n        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ maxDecimalDecimalDecimalDecimalDecimalDecimal % Math.log10(10));\n        long\
    \ maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal ",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        long tenThousands = 0;\n        long oneThousands = 0;\n       \
    \ long oneHundreds = 0;\n        long oneThousandHundreds = 0;\n        long oneHundredThousands\
    \ = 0;\n        long oneThousandHundredThousands = 0;\n        long oneHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundreds = 0;\n        long oneHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundreds = 0;\n        long\
    \ oneHundredThousandHundredThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredTh",
  "        ArrayList<Long> res = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (long l : arr) {\n            if (l == 1) {\n              \
    \  ones++;\n            } else if (l == 10) {\n                tens++;\n     \
    \       } else if (l == 100) {\n                hundreds++;\n            } else\
    \ if (l == 1000) {\n                thousands++;\n            } else {\n     \
    \           res.add(l);\n            }\n        }\n        long onesCount = 0;\n\
    \        long tensCount = 0;\n        long hundredsCount = 0;\n        long thousandsCount\
    \ = 0;\n        for (long l : arr) {\n            if (l == 1) {\n            \
    \    onesCount++;\n            } else if (l == 10) {\n                tensCount++;\n\
    \            } else if (l == 100) {\n                hundredsCount++;\n      \
    \      } else if (l == 1000) {\n                thousandsCount++;\n          \
    \  }\n        }\n        long onesCount2 = ones;\n        long tensCount2 = tens;\n\
    \        long hundredsCount2 = hundreds;\n        long thousandsCount2 = thousands;\n\
    \        long onesCount3 = ones;\n        long tensCount3 = tens;\n        long\
    \ hundredsCount3 = hundreds;\n        long thousandsCount3 = thousands;\n    \
    \    long onesCount4 = ones;\n        long tensCount4 = tens;\n        long hundredsCount4\
    \ = hundreds;\n        long thousandsCount4 = thousands;\n        long onesCount5\
    \ = ones;\n        long tensCount5 = tens;\n        long hundredsCount5 = hundreds;\n\
    \        long thousandsCount5 = thousands;\n        long onesCount6 = ones;\n\
    \        long tensCount6 = tens;\n        long hundredsCount6 = hundreds;\n  \
    \      long thousandsCount6 = thousands;\n        long onesCount7 = ones;\n  \
    \      long tensCount7 = tens;\n        long hundredsCount7 = hundreds;\n    \
    \    long thousandsCount7 = thousands;\n        long onesCount8 = ones;\n    \
    \    long tensCount8 = tens;\n        long hundredsCount8 = hundreds;\n      \
    \  long thousandsCount8 = thousands;\n        long onesCount9 = ones;\n      \
    \  long tensCount9 = tens;\n        long hundredsCount9 = 100;\n        long thousandsCount9\
    \ = 1000;\n        long onesCount10 = ones;\n", "        long ones = 0;\n    \
    \    long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long oneths = 0;\n        long tenth = 0;\n\
    \        long oneth = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long oneth = 0;\n        long tenthths = 0;\n        long onethths =\
    \ 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long onethth\
    \ = 0;\n        long tenththths = 0;\n        long onethths = 0;\n        long\
    \ onethth = 0;\n        long tenththths = 0;\n        long onethths = 0;\n   \
    \     long onethth = 0;\n        long tenththth = 0;\n        long onethths =\
    \ 0;\n        long onethth = 0;\n        long tenththths = 0;\n        long onethths\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethths\
    \ = 0;\n        long onethth = 0;\n        long tenththths = 0;\n        long\
    \ onethths = 0;\n        long onethth = 0;\n        long tenththth = 0;\n    \
    \    long onethths = 0;\n        long onethth = 0;\n        long tenththths =\
    \ 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththths\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththths\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththths\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththths\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethths = 0;\n        long onethth = 0;\n        long tenththths\
    \ = 0;\n        long onethths = 0;\n        long ", "        ArrayList<Long> res\
    \ = new ArrayList<>();\n        long ones = 0, zeros = 0;\n        for (Long l\
    \ : arr) {\n            if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n\
    \            else res.add(l);\n        }\n        if (ones > zeros) {\n      \
    \      Collections.sort(res);\n            return res;\n        }\n        Collections.sort(res,\
    \ Comparator.comparingLong(Long::longValue));\n        return res;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0, tens\
    \ = 0, hundreds = 0, thousands = 0, tenThousands = 0, hundredThousands = 0, thousandThousands\
    \ = 0;\n        for (long i : arr) {\n            int bits = Integer.bitCount(i);\n\
    \            if (bits == 1) {\n                ones++;\n            } else if\
    \ (bits == 2) {\n                tens++;\n            } else if (bits == 4) {\n\
    \                hundreds++;\n            } else if (bits == 8) {\n          \
    \      thousands++;\n            } else if (bits == 16) {\n                tenThousands++;\n\
    \            } else if (bits == 32) {\n                hundredThousands++;\n \
    \           } else if (bits == 64) {\n                thousandThousands++;\n \
    \           }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        long tenThousandsCount = tenThousands;\n        long hundredThousandsCount\
    \ = hundredThousands;\n        long thousandThousandsCount = thousandThousands;\n\
    \        long onesCount2 = onesCount;\n        long tensCount2 = tensCount;\n\
    \        long hundredsCount2 = hundredsCount;\n        long thousandsCount2 =\
    \ thousandsCount;\n        long tenThousandsCount2 = tenThousandsCount;\n    \
    \    long hundredThousandsCount2 = hundredThousandsCount;\n        long thousandThousandsCount2\
    \ = thousandThousandsCount;\n        long onesCount3 = onesCount2;\n        long\
    \ tensCount3 = tensCount2;\n        long hundredsCount3 = hundredsCount2;\n  \
    \      long thousandsCount3 = thousandsCount2;\n        long tenThousandsCount3\
    \ = tenThousandsCount2;\n        long hundredThousandsCount3 = hundredThousandsCount2;\n\
    \        long thousandThousandsCount3 = thousandThousandsCount2;\n        long\
    \ onesCount4 = onesCount3;\n        long tensCount4 = tensCount3;\n        long\
    \ hundredsCount4 = hundredsCount3;\n        long thousandsCount4 = thousandsCount3;\n\
    \        long tenThousandsCount4 = tenThousandsCount3;\n        long hundredThous",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (Long l : arr) {\n            if (l == 1l) ones++;\n       \
    \     else if (l == 10l) tens++;\n            else if (l == 100l) hundreds++;\n\
    \            else if (l == 1000l) thousands++;\n        }\n        long onesDecimal\
    \ = ones / 10;\n        long tensDecimal = tens / 10;\n        long hundredsDecimal\
    \ = (hundreds / 10) * 100;\n        long thousandsDecimal = (thousands / 10) *\
    \ 1000;\n        long onesDecimalDecimal = onesDecimal / 10;\n        long tensDecimalDecimal\
    \ = tensDecimal / 10;\n        long hundredsDecimalDecimal = (hundredsDecimal\
    \ / 10) * 100;\n        long thousandsDecimalDecimal = (thousandsDecimal / 10)\
    \ * 1000;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal / 10;\n\
    \        long tensDecimalDecimalDecimal = tensDecimalDecimal / 10;\n        long\
    \ hundredsDecimalDecimalDecimal = (hundredsDecimalDecimal / 10) * 100;\n     \
    \   long thousandsDecimalDecimalDecimal = (thousandsDecimalDecimal / 10) * 1000;\n\
    \        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / 10;\n\
    \        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal / 10;\n\
    \        long hundredsDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimal\
    \ / 10) * 100;\n        long thousandsDecimalDecimalDecimalDecimal = (thousandsDecimalDecimalDecimal\
    \ / 10) * 1000;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimalDecimal\
    \ / 10) * 100;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = (thousandsDecimalDecimalDecimalDecimal\
    \ / 10) * 1000;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = ten", "        ArrayList<Long> result = new ArrayList<Long>();\n        long\
    \ ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n        long\
    \ thousands = 0;\n        for (Long l : arr) {\n            if (l == 1l) ones++;\n\
    \            else if (l == 10l) tens++;\n            else if (l == 100l) hundreds++;\n\
    \            else if (l == 1000l) thousands++;\n        }\n        long onesDecimal\
    \ = ones / 10;\n        long tensDecimal = tens / 10;\n        long hundredsDecimal\
    \ = hundreds / 10;\n        long thousandsDecimal = thousands / 10;\n        long\
    \ onesDecimalDecimal = onesDecimal / 10;\n        long tensDecimalDecimal = tensDecimal\
    \ / 10;\n        long hundredsDecimalDecimal = hundredsDecimal / 10;\n       \
    \ long thousandsDecimalDecimal = thousandsDecimal / 10;\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal /\
    \ 10;\n        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal /\
    \ 10;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        Arrays.sort(arr);\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        for (long i : arr) {\n            if (i % 10 == 0) {\n         \
    \       tens++;\n            } else if (i % 100 == 0) {\n                hundreds++;\n\
    \            } else if (i % 1000 == 0) {\n                thousands++;\n     \
    \       } else if (i % 10000 == 0) {\n                tenths++;\n            }\
    \ else if (i % 100000 == 0) {\n                oneths++;\n            } else if\
    \ (i % 1000000 == 0) {\n                ones++;\n            } else {\n      \
    \          result.add(i);\n            }\n        }\n        ArrayList<Long> onesArr\
    \ = new ArrayList<Long>();\n        onesArr.add(ones);\n        onesArr.add(oneths);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(ones);\n\
    \        onesArr.add(ones);\n        onesArr.add(ones);\n        onesArr.add(",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (Long l : arr) {\n            if (l == 1l) ones++;\n       \
    \     if (l == 10l) tens++;\n            if (l == 100l) hundreds++;\n        \
    \    if (l == 1000l) thousands++;\n        }\n        long onesTens = ones * 10l;\n\
    \        long onesHundreds = ones * 100l;\n        long onesThousands = ones *\
    \ 1000l;\n        long tensHundreds = tens * 100l;\n        long tensThousands\
    \ = tens * 1000l;\n        long hundredsThousands = hundreds * 1000l;\n      \
    \  long thousandsThousands = thousands * 1000l;\n        long onesTensHundreds\
    \ = onesTens * 100l;\n        long onesTensThousands = onesTens * 1000l;\n   \
    \     long onesHundredsThousands = onesHundreds * 1000l;\n        long onesThousandsThousands\
    \ = onesThousands * 1000l;\n        long tensHundredsThousands = tensHundreds\
    \ * 1000l;\n        long tensThousandsThousands = tensThousands * 1000l;\n   \
    \     long hundredsThousandsThousands = hundredsThousands * 1000l;\n        long\
    \ thousandsThousandsThousands = thousandsThousands * 1000l;\n        long onesTensHundredsThousands\
    \ = onesTensHundreds * 100l;\n        long onesTensThousandsThousands = onesTensThousands\
    \ * 1000l;\n        long onesHundredsThousandsThousands = onesHundredsThousands\
    \ * 1000l;\n        long onesThousandsThousandsThousands = onesThousandsThousands\
    \ * 1000l;\n        long tensHundredsThousandsThousands = tensHundredsThousands\
    \ * 1000l;\n        long tensThousandsThousandsThousands = tensThousandsThousands\
    \ * 1000l;\n        long hundreds", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0, zeros = 0;\n        for (long i : arr) {\n           \
    \ if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n            else\
    \ result.add(i);\n        }\n        if (ones > zeros) {\n            Collections.sort(result,\
    \ new Comparator<Long>() {\n                public int compare(Long o1, Long o2)\
    \ {\n                    return Long.compare(ones, zeros);\n                }\n\
    \            });\n        } else {\n            Collections.sort(result, new Comparator<Long>()\
    \ {\n                public int compare(Long o1, Long o2) {\n                \
    \    return Long.compare(zeros, ones);\n                }\n            });\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        if (ones < tens) result.addAll(Arrays.asList(1l, tens, hundreds,\
    \ thousands));\n        else if (ones < hundreds) result.addAll(Arrays.asList(ones,\
    \ tens, hundreds, thousands));\n        else if (ones < thousands) result.addAll(Arrays.asList(ones,\
    \ tens, hundreds, thousands));\n        else if (tens < hundreds) result.addAll(Arrays.asList(ones,\
    \ tens, hundreds, thousands));\n        else if (tens < thousands) result.addAll(Arrays.asList(ones,\
    \ tens, hundreds, thousands));\n        else if (hundreds < thousands) result.addAll(Arrays.asList(ones,\
    \ tens, hundreds, thousands));\n        else result.addAll(Arrays.asList(ones,\
    \ tens, hundreds, thousands));\n        Collections.sort(result);\n        return\
    \ result;", "        ArrayList<Long> res = new ArrayList<Long>();\n        long\
    \ ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n        long\
    \ thousands = 0;\n        long tenths = 0;\n        long oneths = 0;\n       \
    \ long tenth = 0;\n        long oneth = 0;\n        long tenths = 0;\n       \
    \ long oneths = 0;\n        long tenthths = 0;\n        long onethths = 0;\n \
    \       long tenthth = 0;\n        long onethth = 0;\n        long tenththth =\
    \ 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththths = 0;\n        long onethths = 0;\n        long\
    \ tenththth = 0;\n        long onethth = 0;\n        long tenththth = 0;\n   \
    \     long onethth = 0;\n        long tenththth = 0;\n        long onethth = 0;\n\
    \        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long oneth", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long ones = 0, tens = 0, hundreds =\
    \ 0, thousands = 0, tenths = 0, hundredths = 0, thousandths = 0;\n        for\
    \ (long i : arr) {\n            if (i < 0) {\n                result.add(-i);\n\
    \            } else {\n                long binary = Long.parseLong(Long.toBinaryString(i),\
    \ 2);\n                ones += (binary & 1L);\n                tens += (binary\
    \ >> 1L) & 1L;\n                hundreds += (binary >> 2L) & 1L;\n           \
    \     thousands += (binary >> 3L) & 1L;\n                tenths += (binary >>\
    \ 4L) & 1L;\n                hundredths += (binary >> 5L) & 1L;\n            \
    \    thousandths += (binary >> 6L) & 1L;\n            }\n        }\n        long\
    \ onesCount = ones;\n        long tensCount = tens;\n        long hundredsCount\
    \ = hundreds;\n        long thousandsCount = thousands;\n        long tenthsCount\
    \ = tenths;\n        long hundredthsCount = hundredths;\n        long thousandthsCount\
    \ = thousandths;\n        if (onesCount > tensCount) {\n            result.add(onesCount);\n\
    \            result.add(tensCount);\n        } else if (onesCount < tensCount)\
    \ {\n            result.add(tensCount);\n            result.add(onesCount);\n\
    \        }\n        if (hundredsCount > thousandsCount) {\n            result.add(hundredsCount);\n\
    \            result.add(thousandsCount);\n        } else if (hundredsCount < thousandsCount)\
    \ {\n            result.add(thousandsCount);\n            result.add(hundredsCount);\n\
    \        }\n        if (tenthsCount > hundredthsCount) {\n            result.add(tenthsCount);\n\
    \            result.add(hundredthsCount);\n        } else if (tenthsCount < hundredthsCount)\
    \ {\n            result.add(hundredthsCount);\n            result.add(tenthsCount);\n\
    \        }\n        if (thousandthsCount > hundredthsCount) {\n            result.add(thousandthsCount);\n\
    \            result.add(hundredthsCount);\n        } else if (thousandthsCount\
    \ < hundredthsCount) {\n            result.add(hundredthsCount);\n           \
    \ result.add(thousandthsCount);\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (Long l : arr) {\n            if (l == 1l)\
    \ ones++;\n            else if (l == 0l) zeros++;\n            else result.add(l);\n\
    \        }\n        long onesMax = Long.parseLong(Long.toBinaryString(ones));\n\
    \        long zerosMax = Long.parseLong(Long.toBinaryString(zeros));\n       \
    \ long onesMin = Long.parseLong(Long.toBinaryString(onesMax));\n        long zerosMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax));\n        long onesDiff = onesMax\
    \ - onesMin;\n        long zerosDiff = zerosMax - zerosMin;\n        if (onesDiff\
    \ > zerosDiff) {\n            Collections.sort(result, new Comparator<Long>()\
    \ {\n                public int compare(Long o1, Long o2) {\n                \
    \    return Long.compare(o1, o2);\n                }\n            });\n      \
    \  } else {\n            Collections.sort(result, new Comparator<Long>() {\n \
    \               public int compare(Long o1, Long o2) {\n                    return\
    \ Long.compare(o2, o1);\n                }\n            });\n        }\n     \
    \   return result;", "        ArrayList<Long> result = new ArrayList<>();\n  \
    \      long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n  \
    \      long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num > 100 && num < 1000) {\n                thousands++;\n\
    \            }\n        }\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      for (long num : arr) {\n            if (num == 1) {\n                onesCount++;\n\
    \            } else if (num == 10) {\n                tensCount++;\n         \
    \   } else if (num == 100) {\n                hundredsCount++;\n            }\
    \ else if (num > 100 && num < 1000) {\n                thousandsCount++;\n   \
    \         }\n        }\n        long onesCountInt = onesCount;\n        long tensCountInt\
    \ = tensCount;\n        long hundredsCountInt = hundredsCount;\n        long thousandsCountInt\
    \ = thousandsCount;\n        long onesCountLong = onesCount;\n        long tensCountLong\
    \ = tensCount;\n        long hundredsCountLong = hundredsCount;\n        long\
    \ thousandsCountLong = thousandsCount;\n        long onesCountDouble = onesCount;\n\
    \        long tensCountDouble = tensCount;\n        long hundredsCountDouble =\
    \ hundredsCount;\n        long thousandsCountDouble = thousandsCount;\n      \
    \  long onesCountFloat = onesCount;\n        long tensCountFloat = tensCount;\n\
    \        long hundredsCountFloat = hundredsCount;\n        long thousandsCountFloat\
    \ = thousandsCount;\n        long onesCountBigDecimal = onesCount;\n        long\
    \ tensCountBigDecimal = tensCount;\n        long hundredsCountBigDecimal = hundredsCount;\n\
    \        long thousandsCountBigDecimal = thousandsCount;\n        long onesCountBigInteger\
    \ = onesCount;\n        long tensCountBigInteger = tensCount;\n        long hundredsCountBigInteger\
    \ = hundredsCount;\n        long thousandsCountBigInteger = thousandsCount;\n\
    \        long onesCountBigDecimalDouble = ", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        long ones = 0;\n        long tens = 0;\n   \
    \     long hundreds = 0;\n        long thousands = 0;\n        for (long num :\
    \ arr) {\n            if (num == 1) {\n                ones++;\n            }\
    \ else if (num == 10) {\n                tens++;\n            } else if (num ==\
    \ 100) {\n                hundreds++;\n            } else if (num > 100 && num\
    \ < 1000) {\n                thousands++;\n            }\n        }\n        long\
    \ onesCount = ones;\n        long tensCount = tens;\n        long hundredsCount\
    \ = hundreds;\n        long thousandsCount = thousands;\n        if (onesCount\
    \ > tensCount) {\n            onesCount = tensCount;\n        }\n        if (onesCount\
    \ > hundredsCount) {\n            onesCount = hundredsCount;\n        }\n    \
    \    if (onesCount > thousandsCount) {\n            onesCount = thousandsCount;\n\
    \        }\n        if (tensCount > hundredsCount) {\n            tensCount =\
    \ hundredsCount;\n        }\n        if (tensCount > thousandsCount) {\n     \
    \       tensCount = thousandsCount;\n        }\n        if (hundredsCount > thousandsCount)\
    \ {\n            hundredsCount = thousandsCount;\n        }\n        if (hundredsCount\
    \ > onesCount) {\n            hundredsCount = onesCount;\n        }\n        if\
    \ (thousandsCount > onesCount) {\n            thousandsCount = onesCount;\n  \
    \      }\n        if (thousandsCount > tensCount) {\n            thousandsCount\
    \ = tensCount;\n        }\n        if (thousandsCount > hundredsCount) {\n   \
    \         thousandsCount = hundredsCount;\n        }\n        if (onesCount >\
    \ hundredsCount) {\n            onesCount = hundredsCount;\n        }\n      \
    \  if (onesCount > thousandsCount) {\n            onesCount = thousandsCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n        }\n        if (hundredsCount > thousandsCount) {\n\
    \            hundredsCount = thousandsCount;\n        }\n        if (hundredsCount\
    \ > onesCount) {\n            hundredsCount = onesCount;\n        }\n        if\
    \ (thousandsCount > onesCount) {\n            thousandsCount = onesCount;\n  \
    \      }\n        if (thousandsCount > tensCount) {\n            thous", "   \
    \     ArrayList<Long> res = new ArrayList<Long>();\n        long ones = 0, tens\
    \ = 0, hundreds = 0, thousands = 0, tenths = 0, hundredths = 0, thousandths =\
    \ 0;\n        for (Long l : arr) {\n            if (l == 1l) ones++;\n       \
    \     if (l == 10l) tens++;\n            if (l == 100l) hundreds++;\n        \
    \    if (l == 1000l) thousands++;\n            if (l == 10000l) tenths++;\n  \
    \          if (l == 100000l) hundredths++;\n            if (l == 1000000l) thousandths++;\n\
    \        }\n        if (ones < tens) res.addAll(Arrays.asList(1l, tens, hundreds,\
    \ thousands, tenths, hundredths, thousandths));\n        else if (ones < hundreds)\
    \ res.addAll(Arrays.asList(1l, tens, hundreds, thousands, tenths, hundredths));\n\
    \        else if (ones < thousands) res.addAll(Arrays.asList(1l, tens, hundreds,\
    \ thousands));\n        else if (ones < tenths) res.addAll(Arrays.asList(1l, tens,\
    \ hundreds, thousands, tenths));\n        else if (ones < hundredths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands, tenths));\n        else if (ones < thousandths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands));\n        else if (ones < tenths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands, tenths));\n        else if (ones < hundredths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands, tenths));\n        else if (ones < thousandths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands));\n        else if (ones < tenths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands, tenths));\n        else if (ones < hundredths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands, tenths));\n        else if (ones < thousandths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands));\n        else if (ones < tenths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands, tenths));\n        else if (ones < hundredths) res.addAll(Arrays.asList(1l,\
    \ tens, hundreds, thousands, tenths));\n        else if (", "        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long ones = 0;\n        long tens = 0;\n \
    \       long hundreds = 0;\n        long thousands = 0;\n        for (Long val\
    \ : arr) {\n            if (val == 1) {\n                ones++;\n           \
    \ } else if (val == 10) {\n                tens++;\n            } else if (val\
    \ == 100) {\n                hundreds++;\n            } else if (val == 1000)\
    \ {\n                thousands++;\n            }\n        }\n        if (ones\
    \ > 0) {\n            res.add(ones);\n        }\n        if (tens > 0) {\n   \
    \         res.add(tens);\n        }\n        if (hundreds > 0) {\n           \
    \ res.add(hundreds);\n        }\n        if (thousands > 0) {\n            res.add(thousands);\n\
    \        }\n        if (ones > 0 || tens > 0 || hundreds > 0 || thousands > 0)\
    \ {\n            Collections.sort(res);\n        }\n        return res;", "  \
    \      ArrayList<Long> res = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long zeros = 0;\n        for (Long l : arr) {\n            if (l == 1l)\
    \ ones++;\n            else if (l == 0l) zeros++;\n            else res.add(l);\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(res);\n\
    \        }\n        else {\n            Collections.sort(res, Comparator.comparingLong(Long::intValue));\n\
    \        }\n        return res;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththths = 0;\n        long onethths = 0;\n        long\
    \ tenththth = 0;\n        long onethth = 0;\n        long tenththth = 0;\n   \
    \     long onethth = 0;\n        long tenththth = 0;\n        long onethth = 0;\n\
    \        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long oneth", "        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long ones = 0;\n        long tens = 0;\n \
    \       long hundreds = 0;\n        long thousands = 0;\n        for (long i :\
    \ arr) {\n            if (i % 2 == 0) {\n                ones++;\n           \
    \ } else if (i % 10 == 0) {\n                tens++;\n            } else if (i\
    \ % 100 == 0) {\n                hundreds++;\n            } else if (i % 1000\
    \ == 0) {\n                thousands++;\n            } else {\n              \
    \  throw new RuntimeException(\"Invalid input\");\n            }\n        }\n\
    \        long onesRes = ones;\n        long tensRes = tens;\n        long hundredsRes\
    \ = hundreds;\n        long thousandsRes = thousands;\n        if (onesRes > tensRes)\
    \ {\n            onesRes = tensRes;\n        }\n        if (onesRes > hundredsRes)\
    \ {\n            onesRes = hundredsRes;\n        }\n        if (onesRes > thousandsRes)\
    \ {\n            onesRes = thousandsRes;\n        }\n        if (tensRes > hundredsRes)\
    \ {\n            tensRes = hundredsRes;\n        }\n        if (tensRes > thousandsRes)\
    \ {\n            tensRes = thousandsRes;\n        }\n        if (hundredsRes >\
    \ thousandsRes) {\n            hundredsRes = thousandsRes;\n        }\n      \
    \  if (hundredsRes > onesRes) {\n            hundredsRes = onesRes;\n        }\n\
    \        if (thousandsRes > onesRes) {\n            thousandsRes = onesRes;\n\
    \        }\n        if (thousandsRes > tensRes) {\n            thousandsRes =\
    \ tensRes;\n        }\n        if (onesRes > 0) {\n            res.add(onesRes);\n\
    \        }\n        if (tensRes > 0) {\n            res.add(tensRes);\n      \
    \  }\n        if (hundredsRes > 0) {\n            res.add(hundredsRes);\n    \
    \    }\n        if (thousandsRes > 0) {\n            res.add(thousandsRes);\n\
    \        }\n        return res;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i.compareTo(1l)\
    \ == 0) {\n                ones++;\n            } else if (i.compareTo(10l) ==\
    \ 0) {\n                tens++;\n            } else if (i.compareTo(100l) == 0)\
    \ {\n                hundreds++;\n            } else if (i.compareTo(1000l) ==\
    \ 0) {\n                thousands++;\n            } else {\n                throw\
    \ new RuntimeException(\"Invalid input\");\n            }\n        }\n       \
    \ long onesDecimal = ones * 1000;\n        long tensDecimal = tens * 100;\n  \
    \      long hundredsDecimal = hundreds * 10;\n        long thousandsDecimal =\
    \ thousands * 1;\n        long decimal = onesDecimal + tensDecimal + hundredsDecimal\
    \ + thousandsDecimal;\n        Collections.sort(arr);\n        for (Long i : arr)\
    \ {\n            if (i.compareTo(decimal) == 0) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> res\
    \ = new ArrayList<>();\n        long ones = 0;\n        long zeros = 0;\n    \
    \    for (Long i : arr) {\n            if (i == 1l) ones++;\n            if (i\
    \ == 0l) zeros++;\n        }\n        long maxOnes = ones;\n        long maxZeros\
    \ = zeros;\n        long maxOnesDecimal = ones;\n        long maxZerosDecimal\
    \ = zeros;\n        for (Long i : arr) {\n            if (i == 1l) ones++;\n \
    \           if (i == 0l) zeros++;\n            if (ones > maxOnes) {\n       \
    \         maxOnes = ones;\n                maxOnesDecimal = ones;\n          \
    \  }\n            if (zeros > maxZeros) {\n                maxZeros = zeros;\n\
    \                maxZerosDecimal = zeros;\n            }\n        }\n        long\
    \ maxOnesDecimalDecimal = ones;\n        long maxZerosDecimalDecimal = zeros;\n\
    \        for (Long i : arr) {\n            if (i == 1l) ones++;\n            if\
    \ (i == 0l) zeros++;\n            if (ones > maxOnesDecimal) {\n             \
    \   maxOnesDecimal = ones;\n                maxOnesDecimalDecimal = ones;\n  \
    \          }\n            if (zeros > maxZerosDecimal) {\n                maxZerosDecimal\
    \ = zeros;\n                maxZerosDecimalDecimal = zeros;\n            }\n \
    \       }\n        long maxOnesDecimalDecimalDecimal = ones;\n        long maxZerosDecimalDecimalDecimal\
    \ = zeros;\n        for (Long i : arr) {\n            if (i == 1l) ones++;\n \
    \           if (i == 0l) zeros++;\n            if (ones > maxOnesDecimalDecimal)\
    \ {\n                maxOnesDecimalDecimal = ones;\n                maxOnesDecimalDecimalDecimal\
    \ = ones;\n            }\n            if (zeros > maxZerosDecimalDecimal) {\n\
    \                maxZerosDecimalDecimal = zeros;\n                maxZerosDecimalDecimalDecimal\
    \ = zeros;\n            }\n        }\n        long maxOnesDecimalDecimalDecimalDecimal\
    \ = ones;\n        long maxZerosDecimalDecimalDecimalDecimal = zeros;\n      \
    \  for (Long i : arr) {\n            if (i == 1l) ones++;\n            if (i ==\
    \ 0l) zeros++;\n            if (ones > maxOnesDecimalDecimalDecimal) {\n     \
    \           maxOnesDecimalDecimalDecimal = ones;\n                maxOnesDecimalDecimalDecimalDecimal\
    \ = ones;\n            }\n            if (zeros > maxZerosDecimalDecimalDecimal)\
    \ {\n                maxZerosDecimalDecimalDecimal = zeros;\n                maxZeros",
  "        ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n \
    \       long zeros = 0;\n        for (long l : arr) {\n            if (l == 1l)\
    \ ones++;\n            else if (l == 0l) zeros++;\n            else result.add(l);\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(result,\
    \ new Comparator<Long>() {\n                public int compare(Long o1, Long o2)\
    \ {\n                    return Long.compare(o1, o2);\n                }\n   \
    \         });\n        }\n        else if (ones < zeros) {\n            Collections.sort(result,\
    \ new Comparator<Long>() {\n                public int compare(Long o1, Long o2)\
    \ {\n                    return Long.compare(o2, o1);\n                }\n   \
    \         });\n        }\n        else if (ones == zeros) {\n            Collections.sort(result,\
    \ new Comparator<Long>() {\n                public int compare(Long o1, Long o2)\
    \ {\n                    return Long.compare(o1, o2);\n                }\n   \
    \         });\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long ones = 0;\n        long tens = 0;\n \
    \       long hundreds = 0;\n        long thousands = 0;\n        for (Long l :\
    \ arr) {\n            if (l == 1l) ones++;\n            else if (l == 10l) tens++;\n\
    \            else if (l == 100l) hundreds++;\n            else if (l == 1000l)\
    \ thousands++;\n        }\n        if (ones > 0) {\n            long tensRem =\
    \ tens % 10;\n            long hundredsRem = hundreds % 10;\n            long\
    \ thousandsRem = thousands % 10;\n            long tensRemRem = tensRem % 10;\n\
    \            long hundredsRemRem = hundredsRem % 10;\n            long thousandsRemRem\
    \ = thousandsRem % 10;\n            long tensRemRemRem = tensRemRem % 10;\n  \
    \          long hundredsRemRemRem = hundredsRemRem % 10;\n            long thousandsRemRemRem\
    \ = thousandsRemRem % 10;\n            long tensRemRemRemRem = tensRemRemRem %\
    \ 10;\n            long hundredsRemRemRemRem = hundredsRemRemRem % 10;\n     \
    \       long thousandsRemRemRemRem = thousandsRemRemRem % 10;\n            long\
    \ tensRemRemRemRemRem = tensRemRemRemRem % 10;\n            long hundredsRemRemRemRemRem\
    \ = hundredsRemRemRemRem % 10;\n            long thousandsRemRemRemRemRem = thousandsRemRemRemRem\
    \ % 10;\n            long tensRemRemRemRemRemRem = tensRemRemRemRemRem % 10;\n\
    \            long hundredsRemRemRemRemRemRem = hundredsRemRemRemRemRem % 10;\n\
    \            long thousandsRemRemRemRemRemRem = thousandsRemRemRemRemRem % 10;\n\
    \            long tensRemRemRemRemRemRemRem = ", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long ones = 0;\n        long tens = 0;\n \
    \       long hundreds = 0;\n        long thousands = 0;\n        for (long i :\
    \ arr) {\n            if (i % 2 == 0) {\n                ones++;\n           \
    \ } else if (i % 10 == 0) {\n                tens++;\n            } else if (i\
    \ % 100 == 0) {\n                hundreds++;\n            } else if (i % 1000\
    \ == 0) {\n                thousands++;\n            }\n        }\n        long\
    \ onesCount = ones;\n        long tensCount = tens;\n        long hundredsCount\
    \ = hundreds;\n        long thousandsCount = thousands;\n        if (onesCount\
    \ > tensCount) {\n            onesCount = tensCount;\n        }\n        if (onesCount\
    \ > hundredsCount) {\n            onesCount = hundredsCount;\n        }\n    \
    \    if (onesCount > thousandsCount) {\n            onesCount = thousandsCount;\n\
    \        }\n        if (tensCount > hundredsCount) {\n            tensCount =\
    \ hundredsCount;\n        }\n        if (tensCount > thousandsCount) {\n     \
    \       tensCount = thousandsCount;\n        }\n        if (hundredsCount > thousandsCount)\
    \ {\n            hundredsCount = thousandsCount;\n        }\n        if (hundredsCount\
    \ > onesCount) {\n            hundredsCount = onesCount;\n        }\n        if\
    \ (thousandsCount > onesCount) {\n            thousandsCount = onesCount;\n  \
    \      }\n        if (thousandsCount > tensCount) {\n            thousandsCount\
    \ = tensCount;\n        }\n        if (thousandsCount > hundredsCount) {\n   \
    \         thousandsCount = hundredsCount;\n        }\n        if (onesCount >\
    \ hundredsCount) {\n            onesCount = hundredsCount;\n        }\n      \
    \  if (onesCount > thousandsCount) {\n            onesCount = thousandsCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n        }\n        if (hundredsCount > thousandsCount) {\n\
    \            hundredsCount = thousandsCount;\n        }\n        if (hundredsCount\
    \ > onesCount) {\n            hundredsCount = onesCount;\n        }\n        if\
    \ (thousandsCount > onesCount) {\n            thousandsCount = onesCount;\n  \
    \      }\n        if (thousandsCount > tensCount) {\n            thousandsCount\
    \ = tensCount", "        ArrayList<Long> result = new ArrayList<>();\n       \
    \ long ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n    \
    \        if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n      \
    \      else result.add(l);\n        }\n        if (ones > zeros) {\n         \
    \   Collections.sort(result, new Comparator<Long>() {\n                public\
    \ int compare(Long o1, Long o2) {\n                    int ones = o1.compareTo(o2);\n\
    \                    if (ones == 0) return o1.compareTo(o2);\n               \
    \     return ones;\n                }\n            });\n        } else if (zeros\
    \ > ones) {\n            Collections.sort(result, new Comparator<Long>() {\n \
    \               public int compare(Long o1, Long o2) {\n                    int\
    \ zeros = o1.compareTo(o2);\n                    if (zeros == 0) return o2.compareTo(o1);\n\
    \                    return zeros;\n                }\n            });\n     \
    \   } else {\n            Collections.sort(result);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n       \
    \ long thousands = 0;\n        for (Long l : arr) {\n            if (l == 1l)\n\
    \                ones++;\n            else if (l == 10l)\n                tens++;\n\
    \            else if (l == 100l)\n                hundreds++;\n            else\
    \ if (l == 1000l)\n                thousands++;\n        }\n        long onesCount\
    \ = 0;\n        long tensCount = 0;\n        long hundredsCount = 0;\n       \
    \ long thousandsCount = 0;\n        for (Long l : arr) {\n            if (l ==\
    \ 1l)\n                onesCount++;\n            else if (l == 10l)\n        \
    \        tensCount++;\n            else if (l == 100l)\n                hundredsCount++;\n\
    \            else if (l == 1000l)\n                thousandsCount++;\n       \
    \ }\n        long onesCountInt = onesCount;\n        long tensCountInt = tensCount;\n\
    \        long hundredsCountInt = hundredsCount;\n        long thousandsCountInt\
    \ = thousandsCount;\n        long onesCountLong = onesCount;\n        long tensCountLong\
    \ = tensCount;\n        long hundredsCountLong = hundredsCount;\n        long\
    \ thousandsCountLong = thousandsCount;\n        long onesCountLongLong = onesCount;\n\
    \        long tensCountLongLong = tensCount;\n        long hundredsCountLongLong\
    \ = hundredsCount;\n        long thousandsCountLongLong = thousandsCount;\n  \
    \      long onesCountLongLongLong = onesCount;\n        long tensCountLongLongLong\
    \ = tensCount;\n        long hundredsCountLongLongLong = hundredsCount;\n    \
    \    long thousandsCountLongLongLong = thousandsCount;\n        long onesCountLongLongLongLong\
    \ = onesCount;\n        long tensCountLongLongLongLong = tensCount;\n        long\
    \ hundredsCountLongLongLongLong = hundredsCount;\n        long thousandsCountLongLongLongLong\
    \ = thousandsCount;\n        long onesCountLongLongLongLongLong = onesCount;\n\
    \        long tensCountLongLongLongLongLong = tensCount;\n        long hundredsCountLongLongLongLongLong\
    \ = h", "        ArrayList<Long> result = new ArrayList<Long>();\n        long\
    \ ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n         \
    \   if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n        }\n     \
    \   long maxOnes = ones;\n        long maxZeros = zeros;\n        for (long i\
    \ : arr) {\n            if (i == 1l) ones--;\n            if (i == 0l) zeros--;\n\
    \            if (ones > maxOnes) maxOnes = ones;\n            if (zeros > maxZeros)\
    \ maxZeros = zeros;\n        }\n        long maxOnesDecimal = maxOnes / Math.pow(10,\
    \ maxOnes - maxZeros + 1);\n        long maxZerosDecimal = maxZeros / Math.pow(10,\
    \ maxZeros - maxOnes + 1);\n        for (long i : arr) {\n            if (i ==\
    \ 1l) ones++;\n            if (i == 0l) zeros++;\n            if (ones > maxOnes)\
    \ maxOnes = ones;\n            if (zeros > maxZeros) maxZeros = zeros;\n     \
    \       if (ones == maxOnes && zeros == maxZeros) {\n                result.add(i);\n\
    \            } else if (ones > maxOnesDecimal) {\n                result.add(i);\n\
    \            } else if (zeros > maxZerosDecimal) {\n                result.add(i);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long ones = 0;\n        long tens = 0;\n \
    \       long hundreds = 0;\n        long thousands = 0;\n        for (Long i :\
    \ arr) {\n            if (i.longValue() == 1) {\n                ones++;\n   \
    \         } else if (i.longValue() == 10) {\n                tens++;\n       \
    \     } else if (i.longValue() == 100) {\n                hundreds++;\n      \
    \      } else if (i.longValue() == 1000) {\n                thousands++;\n   \
    \         }\n        }\n        if (ones > 0) {\n            result.add(ones);\n\
    \        }\n        if (tens > 0) {\n            result.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            result.add(hundreds);\n        }\n \
    \       if (thousands > 0) {\n            result.add(thousands);\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long oneth", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long ones = 0;\n        long tens = 0;\n\
    \        long hundreds = 0;\n        long thousands = 0;\n        for (long num\
    \ : arr) {\n            ones += num;\n            if (num >= 10) {\n         \
    \       tens += num;\n                if (num >= 100) {\n                    hundreds\
    \ += num;\n                    if (num >= 1000) {\n                        thousands\
    \ += num;\n                    }\n                }\n            }\n        }\n\
    \        long onesCount = ones;\n        long tensCount = tens;\n        long\
    \ hundredsCount = hundreds;\n        long thousandsCount = thousands;\n      \
    \  if (onesCount > tensCount) {\n            onesCount = tensCount;\n        }\n\
    \        if (onesCount > hundredsCount) {\n            onesCount = hundredsCount;\n\
    \        }\n        if (onesCount > thousandsCount) {\n            onesCount =\
    \ thousandsCount;\n        }\n        if (tensCount > hundredsCount) {\n     \
    \       tensCount = hundredsCount;\n        }\n        if (tensCount > thousandsCount)\
    \ {\n            tensCount = thousandsCount;\n        }\n        if (hundredsCount\
    \ > thousandsCount) {\n            hundredsCount = thousandsCount;\n        }\n\
    \        if (onesCount > 0) {\n            result.add(onesCount);\n        }\n\
    \        if (tensCount > 0) {\n            result.add(tensCount);\n        }\n\
    \        if (hundredsCount > 0) {\n            result.add(hundredsCount);\n  \
    \      }\n        if (thousandsCount > 0) {\n            result.add(thousandsCount);\n\
    \        }\n        if (onesCount > 0 && tensCount > 0 && hundredsCount > 0 &&\
    \ thousandsCount > 0) {\n            long maxOnes = onesCount;\n            long\
    \ maxTens = tensCount;\n            long maxHundreds = hundredsCount;\n      \
    \      long maxThousands = thousandsCount;\n            if (onesCount > tensCount)\
    \ {\n                maxOnes = tensCount;\n            }\n            if (onesCount\
    \ > hundredsCount) {\n                maxOnes = hundredsCount;\n            }\n\
    \            if (onesCount > thousandsCount) {\n                maxOnes = thousandsCount;\n\
    \            }\n            if (tensCount > hundredsCount) {\n               \
    \ maxTens = hundredsCount;\n            }\n            if (tensCount > thousandsCount)\
    \ {\n                maxTens = thousandsCount;\n            }\n            if\
    \ (hund", "        ArrayList<Long> result = new ArrayList<>();\n        long ones\
    \ = 0;\n        long tens = 0;\n        long hundreds = 0;\n        long thousands\
    \ = 0;\n        long tenths = 0;\n        for (long num : arr) {\n           \
    \ long bin = Long.parseLong(Long.toBinaryString(num));\n            ones += bin\
    \ & 1;\n            tens += bin >> 1 & 1;\n            hundreds += bin >> 2 &\
    \ 1;\n            thousands += bin >> 3 & 1;\n            tenths += bin >> 4 &\
    \ 1;\n        }\n        long onesCount = ones + tens + hundreds + thousands +\
    \ tenths;\n        long tensCount = tens + hundreds + thousands + tenths;\n  \
    \      long hundredsCount = hundreds + thousands + tenths;\n        long thousandsCount\
    \ = thousands + tenths;\n        long tenthsCount = tenths;\n        long onesSum\
    \ = ones;\n        long tensSum = tens;\n        long hundredsSum = hundreds;\n\
    \        long thousandsSum = thousands;\n        long tenthsSum = tenths;\n  \
    \      long onesDiff = onesCount - onesSum;\n        long tensDiff = tensCount\
    \ - tensSum;\n        long hundredsDiff = hundredsCount - hundredsSum;\n     \
    \   long thousandsDiff = thousandsCount - thousandsSum;\n        long tenthsDiff\
    \ = tenthsCount - tenthsSum;\n        if (onesDiff != 0) {\n            onesSum\
    \ -= onesDiff;\n            onesCount -= onesDiff;\n        }\n        if (tensDiff\
    \ != 0) {\n            tensSum -= tensDiff;\n            tensCount -= tensDiff;\n\
    \        }\n        if (hundredsDiff != 0) {\n            hundredsSum -= hundredsDiff;\n\
    \            hundredsCount -= hundredsDiff;\n        }\n        if (thousandsDiff\
    \ != 0) {\n            thousandsSum -= thousandsDiff;\n            thousandsCount\
    \ -= thousandsDiff;\n        }\n        if (tenthsDiff != 0) {\n            tenthsSum\
    \ -= tenthsDiff;\n            tenthsCount -= tenthsDiff;\n        }\n        onesSum\
    \ = onesSum + onesCount;\n        tensSum = tensSum + tensCount;\n        hundredsSum\
    \ = h", "        ArrayList<Long> result = new ArrayList<>();\n        long ones\
    \ = 0;\n        long tens = 0;\n        long hundreds = 0;\n        long thousands\
    \ = 0;\n        long tenThousands = 0;\n        long oneThousands = 0;\n     \
    \   long oneHundreds = 0;\n        long oneThousandHundreds = 0;\n        long\
    \ oneHundredThousands = 0;\n        long oneThousandHundredThousands = 0;\n  \
    \      long oneHundredThousandHundreds = 0;\n        long oneThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundreds = 0;\n        long\
    \ oneThousandHundredThousandHundredThousandHundreds = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThous", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        for (long num\
    \ : arr) {\n            if (num == 1) {\n                ones++;\n           \
    \ } else if (num == 10) {\n                tens++;\n            } else if (num\
    \ == 100) {\n                hundreds++;\n            } else if (num == 1000)\
    \ {\n                thousands++;\n            } else if (num % 10 == 0) {\n \
    \               tenths++;\n            }\n        }\n        if (ones > 0) {\n\
    \            result.add(ones);\n        }\n        if (tens > 0) {\n         \
    \   result.add(tens);\n        }\n        if (hundreds > 0) {\n            result.add(hundreds);\n\
    \        }\n        if (thousands > 0) {\n            result.add(thousands);\n\
    \        }\n        if (tenths > 0) {\n            result.add(tenths);\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    for (Long l : arr) {\n            if (l == 1l)\n                ones++;\n\
    \            else\n                zeros++;\n            if (ones > zeros) {\n\
    \                max = ones;\n                ones = 0;\n                zeros\
    \ = 0;\n            }\n            if (ones == zeros) {\n                result.add(l);\n\
    \            }\n        }\n        if (ones > zeros) {\n            max = ones;\n\
    \            ones = 0;\n            zeros = 0;\n        }\n        if (ones ==\
    \ zeros) {\n            result.add(max);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num > 100 && num < 1000) {\n                thousands++;\n\
    \            }\n        }\n        long onesDecimal = ones / 10;\n        long\
    \ tensDecimal = tens / 10;\n        long hundredsDecimal = hundreds / 10;\n  \
    \      long thousandsDecimal = thousands / 10;\n        long onesDecimalDecimal\
    \ = onesDecimal / 10;\n        long tensDecimalDecimal = tensDecimal / 10;\n \
    \       long hundredsDecimalDecimal = hundredsDecimal / 10;\n        long thousandsDecimalDecimal\
    \ = thousandsDecimal / 10;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal / 10;\n \
    \       long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal / 10;\n  \
    \      long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal / 10;\n \
    \       long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / 10;\n\
    \        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal / 10;\n\
    \        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimal", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long ones = 0;\n        long tens = 0;\n     \
    \   long hundreds = 0;\n        long thousands = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long tenth = 0;\n        long oneth = 0;\n\
    \        long tenths = 0;\n        long oneths = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenthth = 0;\n        long onethth =\
    \ 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long oneth",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (Long i : arr) {\n            if (i == 1l) ones++;\n       \
    \     else if (i == 10l) tens++;\n            else if (i == 100l) hundreds++;\n\
    \            else if (i == 1000l) thousands++;\n        }\n        long onesDecimal\
    \ = ones / 10;\n        long tensDecimal = tens / 10;\n        long hundredsDecimal\
    \ = hundreds / 10;\n        long thousandsDecimal = thousands / 10;\n        long\
    \ onesDecimalDecimal = onesDecimal / 10;\n        long tensDecimalDecimal = tensDecimal\
    \ / 10;\n        long hundredsDecimalDecimal = hundredsDecimal / 10;\n       \
    \ long thousandsDecimalDecimal = thousandsDecimal / 10;\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal /\
    \ 10;\n        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal /\
    \ 10;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal = hund",
  "        ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n \
    \       long zeros = 0;\n        long maxOnes = 0;\n        long maxZeros = 0;\n\
    \        for (long i : arr) {\n            if (i == 1l) ones++;\n            if\
    \ (i == 0l) zeros++;\n            if (i == -1l) maxOnes++;\n            if (i\
    \ == -2l) maxZeros++;\n        }\n        long maxOnesDiff = maxOnes - ones;\n\
    \        long maxZerosDiff = maxZeros - zeros;\n        long maxDiff = Math.max(maxOnesDiff,\
    \ maxZerosDiff);\n        long maxOnesDiff2 = maxOnes - maxDiff;\n        long\
    \ maxZerosDiff2 = maxZeros - maxDiff;\n        long maxDiff2 = Math.max(maxOnesDiff2,\
    \ maxZerosDiff2);\n        long maxDiff3 = Math.max(maxOnesDiff2, maxZerosDiff2);\n\
    \        long maxDiff4 = Math.max(maxOnesDiff2, maxZerosDiff2);\n        long\
    \ maxDiff5 = Math.max(maxOnesDiff2, maxZerosDiff2);\n        long maxDiff6 = Math.max(maxOnesDiff2,\
    \ maxZerosDiff2);\n        long maxDiff7 = Math.max(maxOnesDiff2, maxZerosDiff2);\n\
    \        long maxDiff8 = Math.max(maxOnesDiff2, maxZerosDiff2);\n        long\
    \ maxDiff9 = Math.max(maxOnesDiff2, maxZerosDiff2);\n        long maxDiff10 =\
    \ Math.max(maxOnesDiff2, maxZerosDiff2);\n        long maxDiff11 = Math.max(maxOnesDiff2,\
    \ maxZerosDiff2);\n        long maxDiff12 = Math.max(maxOnesDiff2, maxZerosDiff2);\n\
    \        long maxDiff13 = Math.max(maxOnesDiff2, maxZerosDiff2);\n        long\
    \ maxDiff14 = Math.max(maxOnesDiff2, maxZerosDiff2);\n        long maxDiff15 =\
    \ Math.max(maxOnesDiff2, maxZerosDiff2);\n        long maxDiff16 = Math.max(maxOnesDiff2,\
    \ maxZerosDiff2);\n        long maxDiff17 = Math.max(maxOnesDiff2, maxZerosDiff2);\n\
    \        long maxDiff18 = Math.max(maxOnesDiff2, maxZerosDiff2);\n        long\
    \ maxDiff19 = Math.max(maxOnesDiff2, maxZerosDiff2);\n        long maxDiff20 =\
    \ Math.max(maxOnesDiff2, maxZerosDiff2);", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long ones = 0;\n        long tens = 0;\n        long\
    \ hundreds = 0;\n        long thousands = 0;\n        long tenths = 0;\n     \
    \   long oneths = 0;\n        long tenthsCount = 0;\n        long onethsCount\
    \ = 0;\n        long onesCount = 0;\n        long tensCount = 0;\n        long\
    \ hundredsCount = 0;\n        long thousandsCount = 0;\n        long tenthsCount\
    \ = 0;\n        long onethsCount = 0;\n        long onesCount = 0;\n        long\
    \ tensCount = 0;\n        long hundredsCount = 0;\n        long thousandsCount\
    \ = 0;\n        long tenthsCount = 0;\n        long onethsCount = 0;\n       \
    \ long onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount\
    \ = 0;\n        long thousandsCount = 0;\n        long tenthsCount = 0;\n    \
    \    long onethsCount = 0;\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      long tenthsCount = 0;\n        long onethsCount = 0;\n        long onesCount\
    \ = 0;\n        long tensCount = 0;\n        long hundredsCount = 0;\n       \
    \ long thousandsCount = 0;\n        long tenthsCount = 0;\n        long onethsCount\
    \ = 0;\n        long onesCount = 0;\n        long tensCount = 0;\n        long\
    \ hundredsCount = 0;\n        long thousandsCount = 0;\n        long tenthsCount\
    \ = 0;\n        long onethsCount = 0;\n        long onesCount = 0;\n        long\
    \ tensCount = 0;\n        long hundredsCount = 0;\n        long thousandsCount\
    \ = 0;\n        long tenthsCount = 0;\n        long onethsCount = 0;\n       \
    \ long onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount\
    \ = 0;\n        long thousandsCount = 0;\n        long tenthsCount = 0;\n    \
    \    long onethsCount = 0;\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      long tenthsCount = 0;\n        long onethsCount = 0;\n        long onesCount\
    \ = 0;\n        long tensCount = 0;\n        long hundredsCount = 0;\n       \
    \ long thousandsCount = 0;\n        long tenthsCount = 0;\n        ", "      \
    \  ArrayList<Long> res = new ArrayList<Long>();\n        long ones = 0;\n    \
    \    long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1l) ones++;\n            else\
    \ if (l == 10l) tens++;\n            else if (l == 100l) hundreds++;\n       \
    \     else if (l == 1000l) thousands++;\n        }\n        long onesCount = 0;\n\
    \        long tensCount = 0;\n        long hundredsCount = 0;\n        long thousandsCount\
    \ = 0;\n        for (Long l : arr) {\n            if (l == 1l) onesCount++;\n\
    \            else if (l == 10l) tensCount++;\n            else if (l == 100l)\
    \ hundredsCount++;\n            else if (l == 1000l) thousandsCount++;\n     \
    \   }\n        long onesCount2 = onesCount * ones;\n        long tensCount2 =\
    \ tensCount * tens;\n        long hundredsCount2 = hundredsCount * hundreds;\n\
    \        long thousandsCount2 = thousandsCount * thousands;\n        long onesCount3\
    \ = onesCount2 * ones;\n        long tensCount3 = tensCount2 * tens;\n       \
    \ long hundredsCount3 = hundredsCount2 * hundreds;\n        long thousandsCount3\
    \ = thousandsCount2 * thousands;\n        long onesCount4 = onesCount3 * ones;\n\
    \        long tensCount4 = tensCount3 * tens;\n        long hundredsCount4 = hundredsCount3\
    \ * hundreds;\n        long thousandsCount4 = thousandsCount3 * thousands;\n \
    \       long onesCount5 = onesCount4 * ones;\n        long tensCount5 = tensCount4\
    \ * tens;\n        long hundredsCount5 = hundredsCount4 * hundreds;\n        long\
    \ thousandsCount5 = thousandsCount4 * thousands;\n        long onesCount6 = onesCount5\
    \ * ones;\n        long tensCount6 = tensCount5 * tens;\n        long hundredsCount6\
    \ = hundredsCount5 * hundreds;\n        long thousandsCount6 = thousandsCount5\
    \ * thousands;\n        long onesCount7 = onesCount6 * ones;\n        long tensCount7\
    \ = tensCount6 * tens;\n        long hundredsCount7 = hundredsCount6 * hundreds;\n\
    \        long thousand", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num > 100 && num < 1000) {\n                thousands++;\n\
    \            }\n        }\n        long onesDecimal = ones / 10;\n        long\
    \ tensDecimal = tens / 10;\n        long hundredsDecimal = (hundreds / 10) * 100;\n\
    \        long thousandsDecimal = (thousands / 10) * 1000;\n        long onesDecimalDecimal\
    \ = onesDecimal / 10;\n        long tensDecimalDecimal = tensDecimal / 10;\n \
    \       long hundredsDecimalDecimal = (hundredsDecimal / 10) * 100;\n        long\
    \ thousandsDecimalDecimal = (thousandsDecimal / 10) * 1000;\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimal = (hundredsDecimalDecimal\
    \ / 10) * 100;\n        long thousandsDecimalDecimalDecimal = (thousandsDecimalDecimal\
    \ / 10) * 1000;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimal\
    \ / 10) * 100;\n        long thousandsDecimalDecimalDecimalDecimal = (thousandsDecimalDecimalDecimal\
    \ / 10) * 1000;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimalDecimal\
    \ / 10) * 100;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = (thousandsDecimalDecimalDecimalDecimal\
    \ / 10) * 1000;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0,\
    \ tens = 0, hundreds = 0, thousands = 0, tenths = 0, hundredths = 0, thousandths\
    \ = 0;\n        for (long num : arr) {\n            if (num == 1) {\n        \
    \        ones++;\n            } else if (num == 10) {\n                tens++;\n\
    \            } else if (num == 100) {\n                hundreds++;\n         \
    \   } else if (num == 1000) {\n                thousands++;\n            } else\
    \ if (num % 10 == 0) {\n                tenths++;\n            } else if (num\
    \ % 100 == 0) {\n                hundredths++;\n            } else if (num % 1000\
    \ == 0) {\n                thousandths++;\n            } else {\n            \
    \    result.add(num);\n            }\n        }\n        long onesCount = 0;\n\
    \        long tensCount = 0;\n        long hundredsCount = 0;\n        long thousandsCount\
    \ = 0;\n        long tenthsCount = 0;\n        long hundredthsCount = 0;\n   \
    \     long thousandthsCount = 0;\n        for (long num : arr) {\n           \
    \ if (num == 1) {\n                onesCount++;\n            } else if (num ==\
    \ 10) {\n                tensCount++;\n            } else if (num == 100) {\n\
    \                hundredsCount++;\n            } else if (num == 1000) {\n   \
    \             thousandsCount++;\n            } else if (num % 10 == 0) {\n   \
    \             tenthsCount++;\n            } else if (num % 100 == 0) {\n     \
    \           hundredthsCount++;\n            } else if (num % 1000 == 0) {\n  \
    \              thousandthsCount++;\n            }\n        }\n        long onesCountReverse\
    \ = 0;\n        long tensCountReverse = 0;\n        long hundredsCountReverse\
    \ = 0;\n        long thousandsCountReverse = 0;\n        long tenthsCountReverse\
    \ = 0;\n        long hundredthsCountReverse = 0;\n        long thousandthsCountReverse\
    \ = 0;\n        for (long num : arr) {\n            if (num == 1) {\n        \
    \        onesCountReverse++;\n            } else if (num == 10) {\n          \
    \      tensCountReverse++;\n            } else if (num == 100) {\n           \
    \     hundredsCountReverse++;\n            } else if (num == 1000) {\n       \
    \         thousandsCountReverse++;\n            } else if (num % 10 == 0) {\n\
    \                tenthsCountReverse++;\n            } else if (num % 100 == 0)\
    \ {\n                hundredthsCountReverse++;\n            } else if (num % 1000\
    \ == 0) {\n                thousandthsCountReverse++;\n            }\n       \
    \ }\n        long onesCountReverseReverse = 0;\n        long tensCountReverseReverse\
    \ = 0;\n        long hundredsCountReverseReverse = 0;\n        long thousandsCountReverseReverse\
    \ = 0;\n        long tenthsCountReverse", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        if (ones > 0) {\n            long onesRes = ones;\n         \
    \   long tensRes = tens;\n            long hundredsRes = hundreds;\n         \
    \   long thousandsRes = thousands;\n            if (ones > tens) {\n         \
    \       onesRes = tens;\n                tensRes = ones;\n            }\n    \
    \        if (ones > hundreds) {\n                onesRes = hundreds;\n       \
    \         hundredsRes = ones;\n            }\n            if (ones > thousands)\
    \ {\n                onesRes = thousands;\n                thousandsRes = ones;\n\
    \            }\n            if (tens > hundreds) {\n                tensRes =\
    \ hundreds;\n                hundredsRes = tens;\n            }\n            if\
    \ (tens > thousands) {\n                tensRes = thousands;\n               \
    \ thousandsRes = tens;\n            }\n            if (hundreds > thousands) {\n\
    \                hundredsRes = thousands;\n                thousandsRes = hundreds;\n\
    \            }\n            if (hundreds > ones) {\n                hundredsRes\
    \ = ones;\n                onesRes = hundreds;\n            }\n            if\
    \ (thousands > ones) {\n                thousandsRes = ones;\n               \
    \ onesRes = thousands;\n            }\n            if (thousands > tens) {\n \
    \               thousandsRes = tens;\n                tensRes = thousands;\n \
    \           }\n            if (thousands > hundreds) {\n                thousandsRes\
    \ = hundreds;\n                hundredsRes = thousands;\n            }\n     \
    \       if (onesRes > tensRes) {\n                onesRes = tensRes;\n       \
    \         tensRes = onesRes;\n            }\n            if (onesRes > hundredsRes)\
    \ {\n                onesRes = hundredsRes;\n                hundredsRes = onesRes;\n\
    \            }\n            if (onesRes > thousandsRes) {\n                onesRes\
    \ = thousandsRes;\n                thousandsRes = onesRes;\n            }\n  \
    \          if (tensRes > ", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i.intValue()\
    \ == 1) {\n                ones++;\n            } else if (i.intValue() == 10)\
    \ {\n                tens++;\n            } else if (i.intValue() == 100) {\n\
    \                hundreds++;\n            } else if (i.intValue() == 1000) {\n\
    \                thousands++;\n            }\n        }\n        long onesDecimal\
    \ = ones * 100;\n        long tensDecimal = tens * 10;\n        long hundredsDecimal\
    \ = hundreds * 1;\n        long thousandsDecimal = thousands * 1;\n        long\
    \ onesDecimalDecimal = onesDecimal * 100;\n        long tensDecimalDecimal = tensDecimal\
    \ * 10;\n        long hundredsDecimalDecimal = hundredsDecimal * 1;\n        long\
    \ thousandsDecimalDecimal = thousandsDecimal * 1;\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal * 100;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal\
    \ * 10;\n        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal *\
    \ 1;\n        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal *\
    \ 1;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ * 100;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ * 10;\n        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ * 1;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimal\
    \ * 1;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * 100;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ * 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimalDecimal\
    \ * 1;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimalDecimal\
    \ * 1;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 100;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 1;\n        long thousandsDecimalDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 1;\n        long one", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n  \
    \          else result.add(i);\n        }\n        Collections.sort(result);\n\
    \        long onesCount = 0;\n        long zerosCount = 0;\n        for (long\
    \ i : arr) {\n            if (i == 1l) onesCount++;\n            else if (i ==\
    \ 0l) zerosCount++;\n        }\n        Collections.sort(result);\n        if\
    \ (onesCount > zerosCount) {\n            Collections.reverse(result);\n     \
    \   }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        long onesCount = 0;\n        long tensCount = 0;\n        long\
    \ hundredsCount = 0;\n        long thousandsCount = 0;\n        for (Long l :\
    \ arr) {\n            if (l == 1l) onesCount++;\n            else if (l == 10l)\
    \ tensCount++;\n            else if (l == 100l) hundredsCount++;\n           \
    \ else if (l == 1000l) thousandsCount++;\n        }\n        long onesCountInt\
    \ = onesCount;\n        long tensCountInt = tensCount;\n        long hundredsCountInt\
    \ = hundredsCount;\n        long thousandsCountInt = thousandsCount;\n       \
    \ if (onesCountInt > onesCount) {\n            onesCountInt = onesCount;\n   \
    \     }\n        if (tensCountInt > tensCount) {\n            tensCountInt = tensCount;\n\
    \        }\n        if (hundredsCountInt > hundredsCount) {\n            hundredsCountInt\
    \ = hundredsCount;\n        }\n        if (thousandsCountInt > thousandsCount)\
    \ {\n            thousandsCountInt = thousandsCount;\n        }\n        long\
    \ onesCountDecimal = onesCountInt * 10l;\n        long tensCountDecimal = tensCountInt\
    \ * 10l;\n        long hundredsCountDecimal = hundredsCountInt * 10l;\n      \
    \  long thousandsCountDecimal = thousandsCountInt * 10l;\n        long onesCountDecimalInt\
    \ = onesCountDecimal;\n        long tensCountDecimalInt = tensCountDecimal;\n\
    \        long hundredsCountDecimalInt = hundredsCountDecimal;\n        long thousandsCountDecimalInt\
    \ = thousandsCountDecimal;\n        if (onesCountDecimal > onesCountInt) {\n \
    \           onesCountDecimalInt = onesCountDecimal;\n        }\n        if (tensCountDecimal\
    \ > tensCountInt) {\n            tensCountDecimalInt = tensCountDecimal", "  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n \
    \       long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long total = 0;\n        for (long l : arr) {\n            if (l == 1l)\
    \ ones++;\n            else if (l == 10l) tens++;\n            else if (l == 100l)\
    \ hundreds++;\n            else if (l == 1000l) thousands++;\n            total\
    \ += l;\n        }\n        long onesTotal = ones * 10l;\n        long tensTotal\
    \ = tens * 10l;\n        long hundredsTotal = hundreds * 10l;\n        long thousandsTotal\
    \ = thousands * 10l;\n        long totalTotal = total * 10l;\n        long onesTotalMinusOnes\
    \ = onesTotal - ones;\n        long tensTotalMinusOnes = tensTotal - tens;\n \
    \       long hundredsTotalMinusOnes = hundredsTotal - hundreds;\n        long\
    \ thousandsTotalMinusOnes = thousandsTotal - thousands;\n        long totalTotalMinusOnes\
    \ = totalTotal - total;\n        long onesTotalMinusOnesMinusOnes = onesTotalMinusOnes\
    \ - ones;\n        long tensTotalMinusOnesMinusOnes = tensTotalMinusOnes - tens;\n\
    \        long hundredsTotalMinusOnesMinusOnes = hundredsTotalMinusOnes - hundreds;\n\
    \        long thousandsTotalMinusOnesMinusOnes = thousandsTotalMinusOnes - thousands;\n\
    \        long totalTotalMinusOnesMinusOnes = totalTotalMinusOnes - total;\n  \
    \      long onesTotalMinusOnesMinusOnesMinusOnes = onesTotalMinusOnesMinusOnes\
    \ - ones;\n        long tensTotalMinusOnesMinusOnesMinusOnes = tensTotalMinusOnesMinusOnes\
    \ - tens;\n        long hundredsTotalMinusOnesMinusOnesMinusOnes = hundredsTotalMinusOnesMinusOnes\
    \ - hundreds;\n        long thousandsTotalMinusOnesMinusOnesMinusOnes = thousandsTotalMinusOnesMinusOnes\
    \ - thousands;\n        long totalTotalMinusOnesMinusOnesMinusOnes = totalTotalMinusOnesMinusOnes\
    \ - ", "        ArrayList<Long> res = new ArrayList<Long>();\n        long ones\
    \ = 0;\n        long tens = 0;\n        long hundreds = 0;\n        long thousands\
    \ = 0;\n        for (Long i : arr) {\n            if (i > 0) {\n             \
    \   ones += i;\n            } else if (i > 0) {\n                tens += i;\n\
    \            } else if (i > 0) {\n                hundreds += i;\n           \
    \ } else if (i > 0) {\n                thousands += i;\n            }\n      \
    \  }\n        long onesCount = ones;\n        long tensCount = tens;\n       \
    \ long hundredsCount = hundreds;\n        long thousandsCount = thousands;\n \
    \       if (onesCount > hundredsCount) {\n            onesCount = hundredsCount;\n\
    \            hundredsCount = onesCount;\n        }\n        if (onesCount > thousandsCount)\
    \ {\n            onesCount = thousandsCount;\n            thousandsCount = onesCount;\n\
    \        }\n        if (tensCount > hundredsCount) {\n            tensCount =\
    \ hundredsCount;\n            hundredsCount = tensCount;\n        }\n        if\
    \ (tensCount > thousandsCount) {\n            tensCount = thousandsCount;\n  \
    \          thousandsCount = tensCount;\n        }\n        if (hundredsCount >\
    \ thousandsCount) {\n            hundredsCount = thousandsCount;\n           \
    \ thousandsCount = hundredsCount;\n        }\n        if (hundredsCount > onesCount)\
    \ {\n            hundredsCount = onesCount;\n            onesCount = hundredsCount;\n\
    \        }\n        if (thousandsCount > onesCount) {\n            thousandsCount\
    \ = onesCount;\n            onesCount = thousandsCount;\n        }\n        if\
    \ (thousandsCount > tensCount) {\n            thousandsCount = tensCount;\n  \
    \          tensCount = thousandsCount;\n        }\n        if (onesCount > tensCount)\
    \ {\n            onesCount = tensCount;\n            tensCount = onesCount;\n\
    \        }\n        if (onesCount > hundredsCount) {\n            onesCount =\
    \ hundredsCount;\n            hundredsCount = onesCount;\n        }\n        if\
    \ (onesCount > thousandsCount) {\n            onesCount = thousandsCount;\n  \
    \          thousandsCount = onesCount;\n        }\n        if (tensCount > hundredsCount)\
    \ {\n            tensCount = hundredsCount;\n            hundredsCount = tensCount;\n",
  "        long ones = 0, zeros = 0;\n        long maxOnes = Long.MIN_VALUE;\n   \
    \     long maxZeros = Long.MIN_VALUE;\n        for (Long i : arr) {\n        \
    \    if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n          \
    \  else if (ones > zeros) {\n                if (maxOnes < ones) maxOnes = ones;\n\
    \                if (maxZeros < zeros) maxZeros = zeros;\n            }\n    \
    \    }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for (Long\
    \ i : arr) {\n            if (i == 1l) result.add(1l);\n            else if (i\
    \ == 0l) result.add(0l);\n            else if (ones > zeros) {\n             \
    \   if (maxOnes < ones) result.add(maxOnes);\n                if (maxZeros < zeros)\
    \ result.add(maxZeros);\n            }\n        }\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n\
    \        long zeros = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long onesMax = Long.parseLong(Long.toBinaryString(ones));\n\
    \        long zerosMax = Long.parseLong(Long.toBinaryString(zeros));\n       \
    \ long onesMin = Long.parseLong(Long.toBinaryString(ones - 1));\n        long\
    \ zerosMin = Long.parseLong(Long.toBinaryString(zeros - 1));\n        long onesMaxMin\
    \ = Long.parseLong(Long.toBinaryString(ones - onesMax));\n        long zerosMaxMin\
    \ = Long.parseLong(Long.toBinaryString(zeros - zerosMax));\n        long onesMinMax\
    \ = Long.parseLong(Long.toBinaryString(ones - onesMin));\n        long zerosMinMax\
    \ = Long.parseLong(Long.toBinaryString(zeros - zerosMin));\n        long onesMaxMinMax\
    \ = Long.parseLong(Long.toBinaryString(ones - onesMax - onesMin));\n        long\
    \ zerosMaxMinMax = Long.parseLong(Long.toBinaryString(zeros - zerosMax - zerosMin));\n\
    \        long onesMinMaxMinMax = Long.parseLong(Long.toBinaryString(ones - onesMax\
    \ - onesMin - onesMax));\n        long zerosMaxMinMaxMinMax = Long.parseLong(Long.toBinaryString(zeros\
    \ - zerosMax - zerosMin - zerosMax));\n        long onesMinMaxMinMaxMinMax = Long.parseLong(Long.toBinaryString(ones\
    \ - onesMax - onesMin - onesMax - onesMax));\n        long zerosMaxMinMaxMinMaxMinMax\
    \ = Long.parseLong(Long.toBinaryString(zeros - zerosMax - zerosMin - zerosMax\
    \ - zerosMax));\n        long onesMinMaxMinMaxMinMaxMinMax = Long.parseLong(Long.toBinaryString(ones\
    \ - onesMax - onesMin - onesMax - onesMax - onesMax));\n        long zerosMaxMinMaxMinMaxMinMaxMinMax\
    \ = Long.parseLong(Long.toBinaryString(zeros - zerosMax - zerosMin - zerosMax\
    \ - zerosMax - zerosMax - zerosMax));\n        long onesMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = Long.parseLong(Long.toBinaryString(ones - ones", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long ones = 0;\n        long tens =\
    \ 0;\n        long hundreds = 0;\n        long thousands = 0;\n        for (Long\
    \ i : arr) {\n            if (i.longValue() == 1) {\n                ones++;\n\
    \            } else if (i.longValue() == 10) {\n                tens++;\n    \
    \        } else if (i.longValue() == 100) {\n                hundreds++;\n   \
    \         } else if (i.longValue() == 1000) {\n                thousands++;\n\
    \            }\n        }\n        if (ones > 0) {\n            Collections.sort(arr);\n\
    \            for (Long i : arr) {\n                if (i.longValue() == 1) {\n\
    \                    result.add(i);\n                }\n            }\n      \
    \  } else if (tens > 0) {\n            Collections.sort(arr);\n            for\
    \ (Long i : arr) {\n                if (i.longValue() == 10) {\n             \
    \       result.add(i);\n                }\n            }\n        } else if (hundreds\
    \ > 0) {\n            Collections.sort(arr);\n            for (Long i : arr) {\n\
    \                if (i.longValue() == 100) {\n                    result.add(i);\n\
    \                }\n            }\n        } else if (thousands > 0) {\n     \
    \       Collections.sort(arr);\n            for (Long i : arr) {\n           \
    \     if (i.longValue() == 1000) {\n                    result.add(i);\n     \
    \           }\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long ones = 0;\n        long tens = 0;\n\
    \        long hundreds = 0;\n        long thousands = 0;\n        long tenThousands\
    \ = 0;\n        long oneThousands = 0;\n        long oneHundreds = 0;\n      \
    \  long oneThousandHundreds = 0;\n        long oneHundredThousands = 0;\n    \
    \    long oneThousandHundredThousands = 0;\n        long oneHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundreds = 0;\n        long oneHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousands = 0;\n       \
    \ long oneHundredThousandHundredThousandHundredThousands = 0;\n        long oneThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneThousandHundredThousandHundredTh", "        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        for (Long i : arr) {\n            if (i == 1l) ones++;\n            if\
    \ (i == 0l) zeros++;\n        }\n        long onesMax = ones;\n        long zerosMax\
    \ = zeros;\n        long onesMin = ones;\n        long zerosMin = zeros;\n   \
    \     for (Long i : arr) {\n            if (i == 1l) ones++;\n            if (i\
    \ == 0l) zeros++;\n            if (ones > onesMax) onesMax = ones;\n         \
    \   if (zeros > zerosMax) zerosMax = zeros;\n            if (ones < onesMin) onesMin\
    \ = ones;\n            if (zeros < zerosMin) zerosMin = zeros;\n        }\n  \
    \      if (onesMax < zerosMax) {\n            long temp = onesMax;\n         \
    \   onesMax = zerosMax;\n            zerosMax = temp;\n        }\n        if (onesMin\
    \ > zerosMin) {\n            long temp = onesMin;\n            onesMin = zerosMin;\n\
    \            zerosMin = temp;\n        }\n        long onesMax2 = onesMax;\n \
    \       long zerosMax2 = zerosMax;\n        long onesMin2 = onesMin;\n       \
    \ long zerosMin2 = zerosMin;\n        long onesMax3 = onesMax;\n        long zerosMax3\
    \ = zerosMax;\n        long onesMin3 = onesMin;\n        long zerosMin3 = zerosMin;\n\
    \        long onesMax4 = onesMax;\n        long zerosMax4 = zerosMax;\n      \
    \  long onesMin4 = onesMin;\n        long zerosMin4 = zerosMin;\n        long\
    \ onesMax5 = onesMax;\n        long zerosMax5 = zerosMax;\n        long onesMin5\
    \ = onesMin;\n        long zerosMin5 = zerosMin;\n        long onesMax6 = onesMax;\n\
    \        long zerosMax6 = zerosMax;\n        long onesMin6 = onesMin;\n      \
    \  long zerosMin6 = zerosMin;\n        long onesMax7 = onesMax;\n        long\
    \ zerosMax7 = zerosMax;\n        long onesMin7 = onesMin;\n        long zerosMin7\
    \ = zerosMin;\n        long onesMax8 = onesMax;\n        long zerosMax8 = zerosMax;\n\
    \        long onesMin8 = onesMin;\n        long zerosMin8 = zerosMin;\n      \
    \  long ", "        ArrayList<Long> result = new ArrayList<Long>();\n        long\
    \ ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n        long\
    \ thousands = 0;\n        for (Long l : arr) {\n            if (l == 1l)\n   \
    \             ones++;\n            else if (l == 10l)\n                tens++;\n\
    \            else if (l == 100l)\n                hundreds++;\n            else\
    \ if (l == 1000l)\n                thousands++;\n        }\n        long onesCount\
    \ = 0;\n        long tensCount = 0;\n        long hundredsCount = 0;\n       \
    \ long thousandsCount = 0;\n        for (Long l : arr) {\n            if (l ==\
    \ 1l)\n                onesCount++;\n            else if (l == 10l)\n        \
    \        tensCount++;\n            else if (l == 100l)\n                hundredsCount++;\n\
    \            else if (l == 1000l)\n                thousandsCount++;\n       \
    \ }\n        long onesCountInt = onesCount;\n        long tensCountInt = tensCount;\n\
    \        long hundredsCountInt = hundredsCount;\n        long thousandsCountInt\
    \ = thousandsCount;\n        long onesCountLong = onesCount;\n        long tensCountLong\
    \ = tensCount;\n        long hundredsCountLong = hundredsCount;\n        long\
    \ thousandsCountLong = thousandsCount;\n        long onesCountLongLong = onesCount;\n\
    \        long tensCountLongLong = tensCount;\n        long hundredsCountLongLong\
    \ = hundredsCount;\n        long thousandsCountLongLong = thousandsCount;\n  \
    \      long onesCountLongLongLong = onesCount;\n        long tensCountLongLongLong\
    \ = tensCount;\n        long hundredsCountLongLongLong = hundredsCount;\n    \
    \    long thousandsCountLongLongLong = thousandsCount;\n        long onesCountLongLongLongLong\
    \ = onesCount;\n        long tensCountLongLongLongLong = tensCount;\n        long\
    \ hundredsCountLongLongLongLong = hundredsCount;\n        long thousandsCountLongLongLongLong\
    \ = thousandsCount;\n        long onesCountLongLongLongLongLong = onesCount;\n\
    \        long tensCountLongLongLongLongLong = tensCount;\n        long hundredsCountLongLongLongLongLong\
    \ = h", "        ArrayList<Long> result = new ArrayList<Long>();\n        long\
    \ ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n         \
    \   if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n           \
    \ else result.add(l);\n        }\n        if (ones > zeros) {\n            Collections.sort(result);\n\
    \        } else {\n            Collections.sort(result, new Comparator<Long>()\
    \ {\n                public int compare(Long o1, Long o2) {\n                \
    \    return Long.compare(o2, o1);\n                }\n            });\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        for (Long i :\
    \ arr) {\n            if (i > 0) {\n                ones += i;\n            }\
    \ else if (i < 0) {\n                tens += i;\n            } else if (i < 10)\
    \ {\n                tenths += i;\n            } else if (i < 100) {\n       \
    \         hundreds += i;\n            } else if (i < 1000) {\n               \
    \ thousands += i;\n            } else {\n                result.add(i);\n    \
    \        }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        long tenthsCount = tenths;\n        if (onesCount > tensCount)\
    \ {\n            onesCount = tensCount;\n        }\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n        }\n        if (onesCount\
    \ > thousandsCount) {\n            onesCount = thousandsCount;\n        }\n  \
    \      if (onesCount > tenthsCount) {\n            onesCount = tenthsCount;\n\
    \        }\n        if (onesCount > 0) {\n            onesCount /= 10;\n     \
    \   }\n        if (tensCount > 0) {\n            tensCount /= 10;\n        }\n\
    \        if (hundredsCount > 0) {\n            hundredsCount /= 10;\n        }\n\
    \        if (thousandsCount > 0) {\n            thousandsCount /= 10;\n      \
    \  }\n        if (tenthsCount > 0) {\n            tenthsCount /= 10;\n       \
    \ }\n        long onesCount2 = onesCount;\n        long tensCount2 = tensCount;\n\
    \        long hundredsCount2 = hundredsCount;\n        long thousandsCount2 =\
    \ thousandsCount;\n        long tenthsCount2 = tenthsCount;\n        if (onesCount2\
    \ > tensCount2) {\n            onesCount2 = tensCount2;\n        }\n        if\
    \ (onesCount2 > hundredsCount2) {\n            onesCount2 = hundredsCount2;\n\
    \        }\n        if (onesCount2 > thousandsCount2) {\n            onesCount2\
    \ = thousandsCount2;\n        }\n        if (onesCount2 > tenthsCount2) {\n  \
    \          onesCount2 = tenthsCount2;\n        }\n        if (onesCount2 > 0)\
    \ {\n            onesCount2 /= 10;\n        }\n        if (tensCount2 > 0) {\n\
    \            tensCount2 ", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long oneth = 0;\n        long tenth =\
    \ 0;\n        long oneth = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long oneth = 0;\n        long tenth = 0;\n        long oneth = 0;\n\
    \        long tenths = 0;\n        long oneths = 0;\n        long oneth = 0;\n\
    \        long tenth = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenths = 0;\n",
  "        ArrayList<Long> res = new ArrayList<>();\n        long ones = 0;\n    \
    \    long zeros = 0;\n        for (Long l : arr) {\n            if (l == 1l) ones++;\n\
    \            else if (l == 0l) zeros++;\n            else res.add(l);\n      \
    \  }\n        long onesRes = ones;\n        long zerosRes = zeros;\n        long\
    \ maxOnes = ones;\n        long maxZeros = zeros;\n        for (Long l : arr)\
    \ {\n            if (l == 1l) onesRes--;\n            else if (l == 0l) zerosRes--;\n\
    \            if (onesRes < 0) onesRes = maxOnes;\n            if (zerosRes < 0)\
    \ zerosRes = maxZeros;\n            if (onesRes > zerosRes) break;\n         \
    \   if (onesRes == zerosRes) {\n                long diff = l - onesRes;\n   \
    \             if (diff > maxOnes) maxOnes = diff;\n                if (diff <\
    \ maxZeros) maxZeros = diff;\n            }\n        }\n        long maxOnesRes\
    \ = maxOnes;\n        long maxZerosRes = maxZeros;\n        long maxDiff = maxOnesRes\
    \ - maxZerosRes;\n        if (maxDiff == 0) maxDiff = 1;\n        long maxDiffRes\
    \ = maxDiff;\n        for (Long l : arr) {\n            if (l == 1l) onesRes--;\n\
    \            else if (l == 0l) zerosRes--;\n            if (onesRes < 0) onesRes\
    \ = maxOnesRes;\n            if (zerosRes < 0) zerosRes = maxZerosRes;\n     \
    \       if (onesRes > zerosRes) break;\n            if (onesRes == zerosRes) {\n\
    \                long diff = l - onesRes;\n                if (diff > maxOnesRes)\
    \ maxOnesRes = diff;\n                if (diff < maxZerosRes) maxZerosRes = diff;\n\
    \            }\n        }\n        long maxOnesResRes = maxOnesRes;\n        long\
    \ maxZerosResRes = maxZerosRes;\n        long maxDiffRes = maxOnesResRes - maxZerosResRes;\n\
    \        if (maxDiffRes == 0) maxDiffRes = 1;\n        long maxDiffResRes = maxDiffRes;\n\
    \        for (Long l : arr) {\n            if (l == 1l) onesRes--;\n         \
    \   else if (l == 0l) zerosRes--;\n            if (onesRes < 0) onesRes = maxOnesRes",
  "        ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n \
    \       long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones++;\n            } else if (num == 10) {\n                tens++;\n    \
    \        } else if (num == 100) {\n                hundreds++;\n            }\
    \ else if (num == 1000) {\n                thousands++;\n            } else {\n\
    \                result.add(num);\n            }\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        if (onesCount > tensCount)\
    \ {\n            onesCount = tensCount;\n        }\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n        }\n        if (onesCount\
    \ > thousandsCount) {\n            onesCount = thousandsCount;\n        }\n  \
    \      if (tensCount > hundredsCount) {\n            tensCount = hundredsCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n        }\n        if (hundredsCount > thousandsCount) {\n\
    \            hundredsCount = thousandsCount;\n        }\n        long onesCountDec\
    \ = onesCount / 10;\n        long tensCountDec = tensCount / 10;\n        long\
    \ hundredsCountDec = hundredsCount / 10;\n        long thousandsCountDec = thousandsCount\
    \ / 10;\n        long onesCountDec2 = onesCount % 10;\n        long tensCountDec2\
    \ = tensCount % 10;\n        long hundredsCountDec2 = hundredsCount % 10;\n  \
    \      long thousandsCountDec2 = thousandsCount % 10;\n        long onesCountDec3\
    \ = onesCountDec / 100;\n        long tensCountDec3 = tensCountDec / 100;\n  \
    \      long hundredsCountDec3 = hundredsCountDec / 100;\n        long thousandsCountDec3\
    \ = thousandsCountDec / 100;\n        long onesCountDec4 = onesCountDec % 100;\n\
    \        long tensCountDec4 = tensCountDec % 100;\n        long hundredsCountDec4\
    \ = hundredsCountDec % 100;\n        long thousandsCountDec4 = thousandsCountDec\
    \ % 100;\n        long onesCountDec5 = onesCountDec * ", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long ones = 0;\n        long zeros\
    \ = 0;\n        for (long i : arr) {\n            if (i == 1l) ones++;\n     \
    \       if (i == 0l) zeros++;\n        }\n        long onesMax = ones;\n     \
    \   long zerosMax = zeros;\n        long onesMin = ones;\n        long zerosMin\
    \ = zeros;\n        long max = 0;\n        long min = Long.MAX_VALUE;\n      \
    \  for (long i : arr) {\n            if (i == 1l) {\n                onesMax--;\n\
    \                if (onesMax < 0) onesMax = 0;\n            } else if (i == 0l)\
    \ {\n                zerosMax--;\n                if (zerosMax < 0) zerosMax =\
    \ 0;\n            }\n            if (i == 1l) {\n                onesMin++;\n\
    \                if (onesMin > max) onesMin = max;\n            } else if (i ==\
    \ 0l) {\n                zerosMin++;\n                if (zerosMin > max) zerosMin\
    \ = max;\n            }\n            if (onesMax < zerosMax) {\n             \
    \   max = onesMax;\n                result.add(max);\n                onesMax\
    \ = zerosMax;\n                zerosMax = max;\n            } else if (zerosMax\
    \ < onesMin) {\n                max = zerosMax;\n                result.add(max);\n\
    \                zerosMax = onesMin;\n                onesMin = max;\n       \
    \     }\n            if (onesMin > zerosMin) {\n                min = onesMin;\n\
    \                result.add(min);\n                onesMin = zerosMin;\n     \
    \           zerosMin = min;\n            } else if (zerosMin > onesMax) {\n  \
    \              min = zerosMin;\n                result.add(min);\n           \
    \     zerosMin = onesMax;\n                onesMax = min;\n            }\n   \
    \     }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num == 1000) {\n                thousands++;\n       \
    \     }\n        }\n        if (ones > 0) {\n            result.add(ones);\n \
    \       }\n        if (tens > 0) {\n            result.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            result.add(hundreds);\n        }\n \
    \       if (thousands > 0) {\n            result.add(thousands);\n        }\n\
    \        if (ones > 0 || tens > 0 || hundreds > 0 || thousands > 0) {\n      \
    \      Collections.sort(result);\n        }\n        return result;", "      \
    \  ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0, zeros\
    \ = 0;\n        for (long i : arr) {\n            if (i == 1l) ones++;\n     \
    \       else if (i == 0l) zeros++;\n            else result.add(i);\n        }\n\
    \        if (ones > zeros) {\n            Collections.sort(result, new Comparator<Long>()\
    \ {\n                public int compare(Long o1, Long o2) {\n                \
    \    return Long.compare(o1, o2);\n                }\n            });\n      \
    \  } else {\n            Collections.sort(result, new Comparator<Long>() {\n \
    \               public int compare(Long o1, Long o2) {\n                    return\
    \ Long.compare(o2, o1);\n                }\n            });\n        }\n     \
    \   return result;", "        ArrayList<Long> result = new ArrayList<>();\n  \
    \      long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n  \
    \      long thousands = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long tenth = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long tenthths = 0;\n        long onethths =\
    \ 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long oneth", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long ones = 0;\n        long tens =\
    \ 0;\n        long hundreds = 0;\n        long thousands = 0;\n        for (long\
    \ num : arr) {\n            if (num == 1) {\n                ones++;\n       \
    \     } else if (num == 10) {\n                tens++;\n            } else if\
    \ (num == 100) {\n                hundreds++;\n            } else if (num > 100)\
    \ {\n                thousands++;\n            }\n        }\n        if (ones\
    \ > 0) {\n            result.add(ones);\n        }\n        if (tens > 0) {\n\
    \            result.add(tens);\n        }\n        if (hundreds > 0) {\n     \
    \       result.add(hundreds);\n        }\n        if (thousands > 0) {\n     \
    \       result.add(thousands);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long ones = 0;\n        long tens = 0;\n\
    \        long hundreds = 0;\n        long thousands = 0;\n        for (long num\
    \ : arr) {\n            if (num == 1) {\n                ones++;\n           \
    \ } else if (num == 10) {\n                tens++;\n            } else if (num\
    \ == 100) {\n                hundreds++;\n            } else if (num == 1000)\
    \ {\n                thousands++;\n            } else {\n                throw\
    \ new RuntimeException(\"Unexpected number: \" + num);\n            }\n      \
    \  }\n        long onesCount = ones;\n        long tensCount = tens;\n       \
    \ long hundredsCount = hundreds;\n        long thousandsCount = thousands;\n \
    \       if (onesCount > tensCount) {\n            onesCount = tensCount;\n   \
    \     }\n        if (onesCount > hundredsCount) {\n            onesCount = hundredsCount;\n\
    \        }\n        if (onesCount > thousandsCount) {\n            onesCount =\
    \ thousandsCount;\n        }\n        if (tensCount > hundredsCount) {\n     \
    \       tensCount = hundredsCount;\n        }\n        if (tensCount > thousandsCount)\
    \ {\n            tensCount = thousandsCount;\n        }\n        if (hundredsCount\
    \ > thousandsCount) {\n            hundredsCount = thousandsCount;\n        }\n\
    \        if (onesCount > 0) {\n            result.add(onesCount);\n        }\n\
    \        if (tensCount > 0) {\n            result.add(tensCount);\n        }\n\
    \        if (hundredsCount > 0) {\n            result.add(hundredsCount);\n  \
    \      }\n        if (thousandsCount > 0) {\n            result.add(thousandsCount);\n\
    \        }\n        Collections.sort(result);\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long ones = 0, zeros\
    \ = 0;\n        for (long l : arr) {\n            if (l == 1l) ones++;\n     \
    \       else if (l == 0l) zeros++;\n            else result.add(l);\n        }\n\
    \        if (ones > zeros) {\n            Collections.sort(result, new Comparator<Long>()\
    \ {\n                public int compare(Long o1, Long o2) {\n                \
    \    return Long.compare(o1, o2);\n                }\n            });\n      \
    \  } else if (zeros > ones) {\n            Collections.sort(result, new Comparator<Long>()\
    \ {\n                public int compare(Long o1, Long o2) {\n                \
    \    return Long.compare(o2, o1);\n                }\n            });\n      \
    \  } else {\n            Collections.sort(result);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ long ones = 0;\n        long zeros = 0;\n        for (long l : arr) {\n    \
    \        if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n        }\n\
    \        long maxOnes = ones;\n        long maxZeros = zeros;\n        long maxOnesCount\
    \ = 0;\n        long maxZerosCount = 0;\n        for (long l : arr) {\n      \
    \      if (l == 1l) maxOnesCount++;\n            if (l == 0l) maxZerosCount++;\n\
    \        }\n        if (maxOnesCount > maxZerosCount) {\n            long maxOnesCount2\
    \ = maxOnesCount;\n            long maxZerosCount2 = maxZerosCount;\n        \
    \    while (maxOnesCount2 > maxZerosCount2) {\n                long temp = maxOnesCount2;\n\
    \                maxOnesCount2 = maxZerosCount2;\n                maxZerosCount2\
    \ = temp;\n            }\n            long temp2 = maxOnesCount;\n           \
    \ maxOnesCount = maxZerosCount;\n            maxZerosCount = temp2;\n        }\n\
    \        long maxOnesCount3 = maxOnesCount;\n        long maxZerosCount3 = maxZerosCount;\n\
    \        while (maxOnesCount3 > maxZerosCount3) {\n            long temp = maxOnesCount3;\n\
    \            maxOnesCount3 = maxZerosCount3;\n            maxZerosCount3 = temp;\n\
    \        }\n        long temp3 = maxOnesCount;\n        maxOnesCount = maxZerosCount;\n\
    \        maxZerosCount = temp3;\n        long maxOnesCount4 = maxOnesCount;\n\
    \        long maxZerosCount4 = maxZerosCount;\n        while (maxOnesCount4 >\
    \ maxZerosCount4) {\n            long temp = maxOnesCount4;\n            maxOnesCount4\
    \ = maxZerosCount4;\n            maxZerosCount4 = temp;\n        }\n        long\
    \ temp4 = maxOnesCount;\n        maxOnesCount = maxZerosCount;\n        maxZerosCount\
    \ = temp4;\n        long maxOnesCount5 = maxOnesCount;\n        long maxZerosCount5\
    \ = maxZerosCount;\n        while (maxOnesCount5 > maxZerosCount5) {\n       \
    \     long temp = maxOnesCount5;\n            maxOnesCount5 = maxZerosCount5;\n\
    \            maxZerosCount", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i\
    \ == 1l) {\n                ones++;\n            } else if (i == 10l) {\n    \
    \            tens++;\n            } else if (i == 100l) {\n                hundreds++;\n\
    \            } else if (i == 1000l) {\n                thousands++;\n        \
    \    } else {\n                throw new RuntimeException(\"Unexpected input\"\
    );\n            }\n        }\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      for (Long i : arr) {\n            if (i == 1l) {\n                onesCount++;\n\
    \            } else if (i == 10l) {\n                tensCount++;\n          \
    \  } else if (i == 100l) {\n                hundredsCount++;\n            } else\
    \ if (i == 1000l) {\n                thousandsCount++;\n            } else {\n\
    \                throw new RuntimeException(\"Unexpected input\");\n         \
    \   }\n        }\n        long onesCount2 = onesCount * ones;\n        long tensCount2\
    \ = tensCount * tens;\n        long hundredsCount2 = hundredsCount * hundreds;\n\
    \        long thousandsCount2 = thousandsCount * thousands;\n        long onesCount3\
    \ = onesCount2 * ones;\n        long tensCount3 = tensCount2 * tens;\n       \
    \ long hundredsCount3 = hundredsCount2 * hundreds;\n        long thousandsCount3\
    \ = thousandsCount2 * thousands;\n        long onesCount4 = onesCount3 * ones;\n\
    \        long tensCount4 = tensCount3 * tens;\n        long hundredsCount4 = hundredsCount3\
    \ * hundreds;\n        long thousandsCount4 = thousandsCount3 * thousands;\n \
    \       long onesCount5 = onesCount4 * ones;\n        long tensCount5 = tensCount4\
    \ * tens;\n        long hundredsCount5 = hundredsCount4 * hundreds;\n        long\
    \ thousandsCount5 = thousandsCount4 * thousands;\n        long onesCount6 = onesCount5\
    \ * ones;\n        long tensCount6 = tensCount5 * tens;\n        long hundredsCount6\
    \ = hundredsCount5 * hundreds;\n        long thousandsCount6 = thousandsCount5\
    \ * thousands;\n        long onesCount7 = onesCount6 * ones;\n        long tensCount7\
    \ = tensCount6 * tens;\n        long hund", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        long ones = 0, zeros = 0;\n        for (Long\
    \ l : arr) {\n            if (l == 1l) ones++;\n            else if (l == 0l)\
    \ zeros++;\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                if (l == 1l) result.add(1l);\n\
    \                else if (l == 0l) result.add(0l);\n                else if (l\
    \ == -1l) result.add(-1l);\n                else if (l == -2l) result.add(-2l);\n\
    \                else if (l == -3l) result.add(-3l);\n                else if\
    \ (l == -4l) result.add(-4l);\n                else if (l == -5l) result.add(-5l);\n\
    \                else if (l == -6l) result.add(-6l);\n                else if\
    \ (l == -7l) result.add(-7l);\n                else if (l == -8l) result.add(-8l);\n\
    \                else if (l == -9l) result.add(-9l);\n                else if\
    \ (l == -10l) result.add(-10l);\n                else if (l == -11l) result.add(-11l);\n\
    \                else if (l == -12l) result.add(-12l);\n                else if\
    \ (l == -13l) result.add(-13l);\n                else if (l == -14l) result.add(-14l);\n\
    \                else if (l == -15l) result.add(-15l);\n                else if\
    \ (l == -16l) result.add(-16l);\n                else if (l == -17l) result.add(-17l);\n\
    \                else if (l == -18l) result.add(-18l);\n                else if\
    \ (l == -19l) result.add(-19l);\n                else if (l == -20l) result.add(-20l);\n\
    \                else if (l == -21l) result.add(-21l);\n                else if\
    \ (l == -22l) result.add(-22l);\n                else if (l == -23l) result.add(-23l);\n\
    \                else if (l == -24l) result.add(-24l);\n                else if\
    \ (l == -25l) result.add(-25l);\n                else if (l == -26l) result.add(-26l);\n\
    \                else if (l == -27l) result.add(-27l);\n                else if\
    \ (l == -28l) result.add(-28l);\n                else if (l == -29l) result.add(-29l);\n\
    \                else if (l == -30l) result.add(-30l);\n                else if\
    \ (l == -31l) result.add(-31l);\n                else if (l == -32l) ", "    \
    \    ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n   \
    \     long zeros = 0;\n        long max = 0;\n        for (Long i : arr) {\n \
    \           if (i == 1l) {\n                ones++;\n            } else if (i\
    \ == 0l) {\n                zeros++;\n            } else {\n                if\
    \ (ones > zeros) {\n                    result.add((long)ones);\n            \
    \        ones = 0;\n                } else if (ones < zeros) {\n             \
    \       result.add((long)zeros);\n                    zeros = 0;\n           \
    \     }\n                max = Math.max(max, i);\n            }\n        }\n \
    \       if (ones > zeros) {\n            result.add((long)ones);\n        } else\
    \ if (ones < zeros) {\n            result.add((long)zeros);\n        }\n     \
    \   if (max > 0) {\n            result.add((long)max);\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n    \
    \        if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n      \
    \      else result.add(i);\n        }\n        long onesMax = ones;\n        long\
    \ zerosMax = zeros;\n        long onesMin = ones;\n        long zerosMin = zeros;\n\
    \        long onesMaxIndex = 0;\n        long zerosMaxIndex = 0;\n        long\
    \ onesMinIndex = 0;\n        long zerosMinIndex = 0;\n        while (onesMax -\
    \ onesMin > 1) {\n            onesMaxIndex++;\n            onesMax = onesMaxIndex\
    \ * 2 + onesMax;\n        }\n        while (zerosMax - zerosMin > 1) {\n     \
    \       zerosMaxIndex++;\n            zerosMax = zerosMaxIndex * 2 + zerosMax;\n\
    \        }\n        while (onesMax - onesMin > 1) {\n            onesMinIndex++;\n\
    \            onesMin = onesMinIndex * 2 + onesMin;\n        }\n        while (zerosMax\
    \ - zerosMin > 1) {\n            zerosMinIndex++;\n            zerosMin = zerosMinIndex\
    \ * 2 + zerosMin;\n        }\n        Collections.sort(result, new Comparator<Long>()\
    \ {\n            public int compare(Long o1, Long o2) {\n                long\
    \ onesDiff = onesMax - onesMin;\n                long zerosDiff = zerosMax - zerosMin;\n\
    \                if (onesDiff > zerosDiff) return 1;\n                if (onesDiff\
    \ < zerosDiff) return -1;\n                return 0;\n            }\n        });\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 2) {\n     \
    \           tens++;\n            } else if (num == 3) {\n                hundreds++;\n\
    \            } else if (num == 4) {\n                thousands++;\n          \
    \  } else {\n                result.add(num);\n            }\n        }\n    \
    \    long onesCount = ones;\n        long tensCount = tens;\n        long hundredsCount\
    \ = hundreds;\n        long thousandsCount = thousands;\n        if (onesCount\
    \ > hundredsCount) {\n            onesCount = hundredsCount;\n            hundredsCount\
    \ = onesCount;\n        }\n        if (onesCount > thousandsCount) {\n       \
    \     onesCount = thousandsCount;\n            thousandsCount = onesCount;\n \
    \       }\n        if (tensCount > hundredsCount) {\n            tensCount = hundredsCount;\n\
    \            hundredsCount = tensCount;\n        }\n        if (tensCount > thousandsCount)\
    \ {\n            tensCount = thousandsCount;\n            thousandsCount = tensCount;\n\
    \        }\n        if (hundredsCount > thousandsCount) {\n            hundredsCount\
    \ = thousandsCount;\n            thousandsCount = hundredsCount;\n        }\n\
    \        long onesCount2 = onesCount;\n        long tensCount2 = tensCount;\n\
    \        long hundredsCount2 = hundredsCount;\n        long thousandsCount2 =\
    \ thousandsCount;\n        if (onesCount2 > hundredsCount2) {\n            onesCount2\
    \ = hundredsCount2;\n            hundredsCount2 = onesCount2;\n        }\n   \
    \     if (onesCount2 > thousandsCount2) {\n            onesCount2 = thousandsCount2;\n\
    \            thousandsCount2 = onesCount2;\n        }\n        if (tensCount2\
    \ > hundredsCount2) {\n            tensCount2 = hundredsCount2;\n            hundredsCount2\
    \ = tensCount2;\n        }\n        if (tensCount2 > thousandsCount2) {\n    \
    \        tensCount2 = thousandsCount2;\n            thousandsCount2 = tensCount2;\n\
    \        }\n        if (hundredsCount2 > thousandsCount2) {\n            hundredsCount2\
    \ = thousandsCount2;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long total = 0;\n        for (Long l : arr)\
    \ {\n            total += l;\n            if (l == 1l)\n                ones++;\n\
    \            else if (l == 10l)\n                tens++;\n            else if\
    \ (l == 100l)\n                hundreds++;\n            else if (l == 1000l)\n\
    \                thousands++;\n        }\n        long onesTotal = ones * ones;\n\
    \        long tensTotal = tens * tens;\n        long hundredsTotal = hundreds\
    \ * hundreds;\n        long thousandsTotal = thousands * thousands;\n        long\
    \ totalTotal = total * total;\n        long onesOnesTotal = onesTotal * onesTotal;\n\
    \        long tensTensTotal = tensTotal * tensTotal;\n        long hundredsHundredsTotal\
    \ = hundredsTotal * hundredsTotal;\n        long thousandsThousandsTotal = thousandsTotal\
    \ * thousandsTotal;\n        long totalTotalTotal = totalTotal * totalTotal;\n\
    \        long onesOnesOnesTotal = onesOnesTotal * onesOnesTotal;\n        long\
    \ tensTensTensTotal = tensTensTotal * tensTensTotal;\n        long hundredsHundredsHundredsTotal\
    \ = hundredsHundredsTotal * hundredsHundredsTotal;\n        long thousandsThousandsThousandsTotal\
    \ = thousandsThousandsTotal * thousandsThousandsTotal;\n        long totalTotalTotalTotal\
    \ = totalTotalTotal * totalTotalTotal;\n        long onesOnesOnesOnesTotal = onesOnesOnesTotal\
    \ * onesOnesOnesTotal;\n        long tensTensTensTensTotal = tensTensTensTotal\
    \ * tensTensTensTotal;\n        long hundredsHundredsHundredsHundredsTotal = hundredsHundredsHundredsTotal\
    \ * hundredsHundredsHundredsTotal;\n        long thousandsThousandsThousandsThousandsTotal\
    \ = thousandsThousands", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            if (l == 10l) tens++;\n            if (l == 100l)\
    \ hundreds++;\n            if (l == 1000l) thousands++;\n        }\n        long\
    \ onesTens = ones * 10l;\n        long onesHundreds = ones * 100l;\n        long\
    \ onesThousands = ones * 1000l;\n        long tensHundreds = tens * 100l;\n  \
    \      long tensThousands = tens * 1000l;\n        long hundredsThousands = hundreds\
    \ * 1000l;\n        long thousandsThousands = thousands * 1000l;\n        long\
    \ onesTensHundreds = onesTens * hundreds;\n        long onesTensThousands = onesTens\
    \ * thousands;\n        long onesHundredsThousands = onesHundreds * thousands;\n\
    \        long onesThousandsThousands = onesThousands * thousands;\n        long\
    \ tensHundredsThousands = tensHundreds * thousands;\n        long tensThousandsThousands\
    \ = tensThousands * thousands;\n        long hundredsThousandsThousands = hundredsThousands\
    \ * thousands;\n        long thousandsThousandsThousands = thousandsThousands\
    \ * thousands;\n        long onesTensHundredsThousands = onesTensHundreds * hundredsThousands;\n\
    \        long onesTensThousandsThousands = onesTensThousands * thousandsThousands;\n\
    \        long onesHundredsThousandsThousands = onesHundredsThousands * thousandsThousands;\n\
    \        long onesThousandsThousandsThousands = onesThousandsThousands * thousandsThousands;\n\
    \        long tensHundredsThousandsThousands = tensHundredsThousands * thousandsThousands;\n\
    \        long ", "        long ones = 0;\n        long zeros = 0;\n        for\
    \ (Long l : arr) {\n            if (l == 1l) ones++;\n            if (l == 0l)\
    \ zeros++;\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \        } else if (zeros > ones) {\n            Collections.sort(arr, Comparator.comparingLong(Long::intValue));\n\
    \        } else {\n            Collections.sort(arr, Comparator.comparingLong(Long::longValue));\n\
    \        }\n        return arr;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long one", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (Long i : arr) {\n            if (i.longValue() == 1) {\n  \
    \              ones++;\n            } else if (i.longValue() == 10) {\n      \
    \          tens++;\n            } else if (i.longValue() == 100) {\n         \
    \       hundreds++;\n            } else if (i.longValue() == 1000) {\n       \
    \         thousands++;\n            }\n        }\n        if (ones > 0) {\n  \
    \          Collections.sort(arr);\n            int i = 0;\n            while (i\
    \ < arr.size()) {\n                if (ones == 1) {\n                    result.add(arr.get(i));\n\
    \                    i++;\n                } else if (ones == 10) {\n        \
    \            result.add(arr.get(i));\n                    i++;\n             \
    \   } else if (ones == 100) {\n                    result.add(arr.get(i));\n \
    \                   i++;\n                } else if (ones == 1000) {\n       \
    \             result.add(arr.get(i));\n                    i++;\n            \
    \    } else if (ones == 10000) {\n                    result.add(arr.get(i));\n\
    \                    i++;\n                } else if (ones == 100000) {\n    \
    \                result.add(arr.get(i));\n                    i++;\n         \
    \       } else if (ones == 1000000) {\n                    result.add(arr.get(i));\n\
    \                    i++;\n                } else if (ones == 10000000) {\n  \
    \                  result.add(arr.get(i));\n                    i++;\n       \
    \         } else if (ones == 100000000) {\n                    result.add(arr.get(i));\n\
    \                    i++;\n                } else if (ones == 1000000000) {\n\
    \                    result.add(arr.get(i));\n                    i++;\n     \
    \           } else if (ones == 10000000000) {\n                    result.add(arr.get(i));\n\
    \                    i++;\n                } else if (ones == 100000000000) {\n\
    \                    result.add(arr.get(i));\n                    i++;\n     \
    \           } else if (ones == 1000000000000) {\n                    result.add(arr.get(i));\n\
    \                    i++;\n                } else if (ones == 10000000000000)\
    \ {\n                    result.add(arr.get(i));\n                    i++;\n \
    \               } else if (ones == 100000000000000) {\n                    result.add(arr.get(i));\n\
    \                    i++;\n                } else if (ones == 1000000000000000)\
    \ {\n                    result.add(arr.get(i));\n                    i++;\n \
    \               } else if (ones == 10000000000000000) {\n                    result.add(arr.get(i));\n\
    \                    i++;\n                } else if (ones == 100000000000000000)\
    \ {\n                    result.add(arr.get(i));\n                    i++;\n \
    \               } else if (ones == 1000000000000000000) {\n                  \
    \  result.add(arr.get(i));\n                    i++;\n                }\n    \
    \        }\n        } else if (tens > 0) {\n            Collections.sort(arr);\n\
    \            int ", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num > 100 && num < 1000) {\n                thousands++;\n\
    \            }\n        }\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      for (long num : arr) {\n            if (num == 1) {\n                onesCount++;\n\
    \            } else if (num == 10) {\n                tensCount++;\n         \
    \   } else if (num == 100) {\n                hundredsCount++;\n            }\
    \ else if (num > 100 && num < 1000) {\n                thousandsCount++;\n   \
    \         }\n        }\n        long onesCountInt = onesCount;\n        long tensCountInt\
    \ = tensCount;\n        long hundredsCountInt = hundredsCount;\n        long thousandsCountInt\
    \ = thousandsCount;\n        if (onesCount > onesCountInt) {\n            onesCountInt\
    \ = onesCount;\n        }\n        if (tensCount > tensCountInt) {\n         \
    \   tensCountInt = tensCount;\n        }\n        if (hundredsCount > hundredsCountInt)\
    \ {\n            hundredsCountInt = hundredsCount;\n        }\n        if (thousandsCount\
    \ > thousandsCountInt) {\n            thousandsCountInt = thousandsCount;\n  \
    \      }\n        long onesCountDecimal = onesCountInt / 10;\n        long tensCountDecimal\
    \ = tensCountInt / 10;\n        long hundredsCountDecimal = hundredsCountInt /\
    \ 10;\n        long thousandsCountDecimal = thousandsCountInt / 10;\n        if\
    \ (onesCountDecimal > onesCount) {\n            onesCountDecimal = onesCount;\n\
    \        }\n        if (tensCountDecimal > tensCount) {\n            tensCountDecimal\
    \ = tensCount;\n        }\n        if (hundredsCountDecimal > hundredsCount) {\n\
    \            hundredsCountDecimal = hundredsCount;\n        }\n        if (thousandsCountDecimal\
    \ > thousandsCount) {\n            thousandsCountDecimal = thousandsCount", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (Long i : arr) {\n            if (i.longValue() == 1) {\n  \
    \              ones++;\n            } else if (i.longValue() == 10) {\n      \
    \          tens++;\n            } else if (i.longValue() == 100) {\n         \
    \       hundreds++;\n            } else if (i.longValue() == 1000) {\n       \
    \         thousands++;\n            }\n        }\n        if (ones > 0) {\n  \
    \          result.add(ones);\n        }\n        if (tens > 0) {\n           \
    \ result.add(tens);\n        }\n        if (hundreds > 0) {\n            result.add(hundreds);\n\
    \        }\n        if (thousands > 0) {\n            result.add(thousands);\n\
    \        }\n        if (ones > 0) {\n            result.add(ones);\n        }\n\
    \        if (tens > 0) {\n            result.add(tens);\n        }\n        if\
    \ (hundreds > 0) {\n            result.add(hundreds);\n        }\n        if (thousands\
    \ > 0) {\n            result.add(thousands);\n        }\n        if (ones > 0)\
    \ {\n            result.add(ones);\n        }\n        if (tens > 0) {\n     \
    \       result.add(tens);\n        }\n        if (hundreds > 0) {\n          \
    \  result.add(hundreds);\n        }\n        if (thousands > 0) {\n          \
    \  result.add(thousands);\n        }\n        if (ones > 0) {\n            result.add(ones);\n\
    \        }\n        if (tens > 0) {\n            result.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            result.add(hundreds);\n        }\n \
    \       if (thousands > 0) {\n            result.add(thousands);\n        }\n\
    \        if (ones > 0) {\n            result.add(ones);\n        }\n        if\
    \ (tens > 0) {\n            result.add(tens);\n        }\n        if (hundreds\
    \ > 0) {\n            result.add(hundreds);\n        }\n        if (thousands\
    \ > 0) {\n            result.add(thousands);\n        }\n        if (ones > 0)\
    \ {\n            result.add(ones);\n        }\n        if (tens > 0) {\n     \
    \       result.add(tens);\n        }\n        if (hundreds > 0) {\n          \
    \  result.add(hundreds);\n        }\n        if (thousands > 0) {\n          \
    \  result.add(thousands);\n        }\n        if (ones > 0) {\n            result.add(ones);\n\
    \        }\n        if (tens > 0) {\n            result.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            result.add(hundreds);\n        }\n \
    \       if (thousands > 0) {\n            result.add(thousands);\n        }\n\
    \        if (ones > 0) {\n            result.add(ones);\n        }\n        if\
    \ (tens > 0) {\n            result.add(tens);\n        }\n        if (hundreds\
    \ > 0) {\n            result.add(hundreds);\n        }\n        if (thousands\
    \ > 0) {\n            result.add(thousands);\n        }", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long ones = 0, zeros = 0;\n        for\
    \ (Long i : arr) {\n            if (i.longValue() == 1) {\n                ones++;\n\
    \            } else {\n                zeros++;\n            }\n        }\n  \
    \      if (ones > zeros) {\n            Collections.sort(arr);\n            for\
    \ (Long i : arr) {\n                if (i.longValue() == 1) {\n              \
    \      result.add(i);\n                }\n            }\n        } else if (zeros\
    \ > ones) {\n            Collections.sort(arr, Comparator.comparingLong(Long::longValue));\n\
    \            for (Long i : arr) {\n                if (i.longValue() == 0) {\n\
    \                    result.add(i);\n                }\n            }\n      \
    \  } else {\n            Collections.sort(arr, Comparator.comparingLong(Long::longValue));\n\
    \            for (Long i : arr) {\n                if (i.longValue() == 0) {\n\
    \                    result.add(i);\n                }\n            }\n      \
    \      Collections.sort(arr, Comparator.comparingLong(Long::longValue));\n   \
    \         for (Long i : arr) {\n                if (i.longValue() == 1) {\n  \
    \                  result.add(i);\n                }\n            }\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0, zeros = 0;\n        for (long i : arr) {\n           \
    \ if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n            else\
    \ result.add(i);\n        }\n        if (ones > zeros) {\n            Collections.sort(result,\
    \ new Comparator<Long>() {\n                public int compare(Long o1, Long o2)\
    \ {\n                    return Long.compare(ones, zeros);\n                }\n\
    \            });\n        } else {\n            Collections.sort(result, new Comparator<Long>()\
    \ {\n                public int compare(Long o1, Long o2) {\n                \
    \    return Long.compare(zeros, ones);\n                }\n            });\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i\
    \ > 0) {\n                ones += i;\n            } else if (i < 0) {\n      \
    \          tens += i;\n            } else if (i < 100) {\n                hundreds\
    \ += i;\n            } else if (i < 1000) {\n                thousands += i;\n\
    \            }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        if (onesCount > hundredsCount) {\n            onesCount\
    \ = hundredsCount;\n            tensCount -= onesCount;\n        } else if (onesCount\
    \ > thousandsCount) {\n            onesCount = thousandsCount;\n            tensCount\
    \ -= onesCount;\n        }\n        if (tensCount > hundredsCount) {\n       \
    \     tensCount = hundredsCount;\n            hundredsCount -= tensCount;\n  \
    \      } else if (tensCount > thousandsCount) {\n            tensCount = thousandsCount;\n\
    \            hundredsCount -= tensCount;\n        }\n        if (hundredsCount\
    \ > thousandsCount) {\n            hundredsCount = thousandsCount;\n         \
    \   thousandsCount -= hundredsCount;\n        } else if (hundredsCount > onesCount)\
    \ {\n            hundredsCount = onesCount;\n            thousandsCount -= hundredsCount;\n\
    \        }\n        if (thousandsCount > hundredsCount) {\n            thousandsCount\
    \ = hundredsCount;\n            hundredsCount -= thousandsCount;\n        } else\
    \ if (thousandsCount > onesCount) {\n            thousandsCount = onesCount;\n\
    \            hundredsCount -= thousandsCount;\n        }\n        if (hundredsCount\
    \ > tensCount) {\n            hundredsCount = tensCount;\n            tensCount\
    \ -= hundredsCount;\n        } else if (hundredsCount > onesCount) {\n       \
    \     hundredsCount = onesCount;\n            tensCount -= hundredsCount;\n  \
    \      }\n        if (tensCount > onesCount) {\n            tensCount = onesCount;\n\
    \            onesCount -= tensCount;\n        } else if (tensCount > hundredsCount)\
    \ {\n            tensCount = hundredsCount;\n            hundredsCount -= ten",
  "        ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n \
    \       long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long oneths = 0;\n        long tenth = 0;\n\
    \        long oneth = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long tenthths = 0;\n        long onethths = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long oneth", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0, zeros = 0;\n        for (long l : arr) {\n           \
    \ if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n            else\
    \ result.add(l);\n        }\n        if (ones > zeros) {\n            Collections.sort(result);\n\
    \        }\n        else if (zeros > ones) {\n            Collections.sort(result,\
    \ Comparator.comparingLong(Long::longValue));\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long zeros = 0;\n        for (long l : arr) {\n            if (l == 1l)\
    \ ones++;\n            else if (l == 0l) zeros++;\n            else result.add(l);\n\
    \        }\n        long onesMax = Long.parseLong(Long.toString(ones));\n    \
    \    long zerosMax = Long.parseLong(Long.toString(zeros));\n        long onesMin\
    \ = Long.parseLong(Long.toString(onesMax));\n        long zerosMin = Long.parseLong(Long.toString(zerosMax));\n\
    \        long onesDiff = onesMax - onesMin;\n        long zerosDiff = zerosMax\
    \ - zerosMin;\n        long onesDiffMin = onesMax - onesMin;\n        long zerosDiffMin\
    \ = zerosMax - zerosMin;\n        long onesDiffMax = onesMax - onesMax;\n    \
    \    long zerosDiffMax = zerosMax - zerosMax;\n        long onesDiffMinMax = onesMax\
    \ - onesMax;\n        long zerosDiffMinMax = zerosMax - zerosMax;\n        long\
    \ onesDiffMinMaxMin = onesMax - onesMin;\n        long zerosDiffMinMaxMin = zerosMax\
    \ - zerosMin;\n        long onesDiffMinMaxMinMinMax = onesMax - onesMin;\n   \
    \     long zerosDiffMinMaxMinMax = zerosMax - zerosMin;\n        long onesDiffMinMaxMinMaxMinMax\
    \ = onesMax - onesMin;\n        long zerosDiffMinMaxMinMax = zerosMax - zerosMin;\n\
    \        long onesDiffMinMaxMinMaxMinMaxMin = onesMax - onesMin;\n        long\
    \ zerosDiffMinMaxMinMaxMinMax = zerosMax - zerosMin;\n        long onesDiffMinMaxMinMaxMinMaxMinMax\
    \ = onesMax - onesMin;\n        long zerosDiffMinMaxMinMaxMinMax = zerosMax -\
    \ zerosMin;\n        long onesDiffMinMaxMinMaxMinMaxMinMax = onesMax - onesMin;\n\
    \        long zerosDiffMinMaxMinMaxMinMax = zerosMax - zerosMin;\n        long\
    \ onesDiffMinMaxMinMaxMinMaxMinMax = onesMax - onesMin;\n        long zerosDiffMinMaxMinMaxMinMax\
    \ = zerosMax - zerosMin;\n        long ones", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long ones = 0;\n        long tens = 0;\n     \
    \   long hundreds = 0;\n        long thousands = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long tenth = 0;\n        long oneth = 0;\n\
    \        long tenths = 0;\n        long oneths = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenthth = 0;\n        long onethth =\
    \ 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenththth = 0;\n        long oneth", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long ones = 0;\n        long tens = 0;\n\
    \        long hundreds = 0;\n        long thousands = 0;\n        for (long i\
    \ : arr) {\n            if (i < 0) {\n                result.add(-i);\n      \
    \      } else {\n                if (i >= 1l) ones++;\n                if (i >=\
    \ 10l) tens++;\n                if (i >= 100l) hundreds++;\n                if\
    \ (i >= 1000l) thousands++;\n            }\n        }\n        long onesCount\
    \ = 0;\n        long tensCount = 0;\n        long hundredsCount = 0;\n       \
    \ long thousandsCount = 0;\n        for (long i : arr) {\n            if (i <\
    \ 0) {\n                result.add(-i);\n            } else {\n              \
    \  if (i >= 1l) onesCount++;\n                if (i >= 10l) tensCount++;\n   \
    \             if (i >= 100l) hundredsCount++;\n                if (i >= 1000l)\
    \ thousandsCount++;\n            }\n        }\n        long onesCountMinusOnes\
    \ = ones - 1l;\n        long tensCountMinusOnes = tens - 1l;\n        long hundredsCountMinusOnes\
    \ = hundreds - 1l;\n        long thousandsCountMinusOnes = thousands - 1l;\n \
    \       long onesCountMinusTens = ones - 10l;\n        long tensCountMinusTens\
    \ = tens - 10l;\n        long hundredsCountMinusTens = hundreds - 10l;\n     \
    \   long thousandsCountMinusTens = thousands - 10l;\n        long onesCountMinusHundreds\
    \ = ones - 100l;\n        long tensCountMinusHundreds = tens - 100l;\n       \
    \ long hundredsCountMinusHundreds = hundreds - 100l;\n        long thousandsCountMinusHundreds\
    \ = thousands - 100l;\n        long onesCountMinusThousands = ones - 1000l;\n\
    \        long tensCountMinusThousands = tens - 1000l;\n        long hundredsCountMinusThousands\
    \ = hundreds - 1000l;\n        long thousandsCountMinusThousands = thousands -\
    \ 1000l;\n        long onesCountMinusOnesPlusOnes = ones - 1l + onesCountMinusOnes;\n\
    \        long tensCountMinusOnesPlusTens = tens - 1l + tensCountMinusTens;\n \
    \       long hundredsCountMinusOnesPlusHundreds = hundreds - 1l + hund", "   \
    \     ArrayList<Long> res = new ArrayList<>();\n        long ones = 0, zeros =\
    \ 0;\n        for (long i : arr) {\n            if (i == 1l) ones++;\n       \
    \     else if (i == 0l) zeros++;\n            else res.add(i);\n        }\n  \
    \      if (ones > zeros) {\n            Collections.sort(res, new Comparator<Long>()\
    \ {\n                public int compare(Long o1, Long o2) {\n                \
    \    return Long.compare(ones, zeros);\n                }\n            });\n \
    \       } else if (zeros > ones) {\n            Collections.sort(res, new Comparator<Long>()\
    \ {\n                public int compare(Long o1, Long o2) {\n                \
    \    return Long.compare(zeros, ones);\n                }\n            });\n \
    \       } else {\n            Collections.sort(res);\n        }\n        return\
    \ res;", "        ArrayList<Long> result = new ArrayList<Long>();\n        long\
    \ ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n        long\
    \ thousands = 0;\n        long tenths = 0;\n        long onehundreds = 0;\n  \
    \      long onethousands = 0;\n        long onetenths = 0;\n        long onehundredths\
    \ = 0;\n        long onethousandths = 0;\n        long onetenthths = 0;\n    \
    \    long onehundredthths = 0;\n        long onethousandthths = 0;\n        long\
    \ onetenththths = 0;\n        long onehundredthths = 0;\n        long onethousandthths\
    \ = 0;\n        long onetenththths = 0;\n        long onehundredthths = 0;\n \
    \       long onethousandthths = 0;\n        long onetenththths = 0;\n        long\
    \ onehundredthths = 0;\n        long onethousandthths = 0;\n        long onetenththths\
    \ = 0;\n        long onehundredthths = 0;\n        long onethousandthths = 0;\n\
    \        long onetenththths = 0;\n        long onehundredthths = 0;\n        long\
    \ onethousandthths = 0;\n        long onetenththths = 0;\n        long onehundredthths\
    \ = 0;\n        long onethousandthths = 0;\n        long onetenththths = 0;\n\
    \        long onehundredthths = 0;\n        long onethousandthths = 0;\n     \
    \   long onetenththths = 0;\n        long onehundredthths = 0;\n        long onethousandths\
    \ = 0;\n        long onetenththths = 0;\n        long onehundredthths = 0;\n \
    \       long onethousandths = 0;\n        long onetenththths = 0;\n        long\
    \ onehundredthths = 0;\n        long onethousandths = 0;\n        long onetenththths\
    \ = 0;\n        long onehundredthths = 0;\n        long onethousandths = 0;\n\
    \        long onetenththths = 0;\n        long onehundredthths = 0;\n        long\
    \ onethousandths = 0;\n        long onetenththths = 0;\n        long onehundredthths\
    \ = 0;\n        long onethousandths = 0;\n        long onetenththths = 0;\n  \
    \      long onehundredthths = 0;\n        long onethousandths = 0;\n        long\
    \ onetenththths = 0;\n        long onehundredthths = 0;\n        long onethousandths\
    \ = 0;\n        long onetenththths = 0;\n        long onehundred", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long ones = 0;\n        long tens =\
    \ 0;\n        long hundreds = 0;\n        long thousands = 0;\n        for (Long\
    \ l : arr) {\n            if (l == 1l) ones++;\n            else if (l == 10l)\
    \ tens++;\n            else if (l == 100l) hundreds++;\n            else if (l\
    \ == 1000l) thousands++;\n        }\n        long onesDecimal = ones / Math.pow(10,\
    \ ones.length());\n        long tensDecimal = tens / Math.pow(10, tens.length());\n\
    \        long hundredsDecimal = hundreds / Math.pow(10, hundreds.length());\n\
    \        long thousandsDecimal = thousands / Math.pow(10, thousands.length());\n\
    \        if (onesDecimal > tensDecimal) {\n            if (onesDecimal > hundredsDecimal)\
    \ {\n                if (onesDecimal > thousandsDecimal) {\n                 \
    \   result.add(ones);\n                    result.add(tens);\n               \
    \     result.add(hundreds);\n                    result.add(thousands);\n    \
    \            }\n                result.add(ones);\n                result.add(hundreds);\n\
    \                result.add(thousands);\n            }\n            result.add(ones);\n\
    \            result.add(hundreds);\n            result.add(thousands);\n     \
    \   }\n        if (tensDecimal > hundredsDecimal) {\n            if (tensDecimal\
    \ > thousandsDecimal) {\n                result.add(tens);\n                result.add(hundreds);\n\
    \                result.add(thousands);\n            }\n            result.add(tens);\n\
    \            result.add(hundreds);\n            result.add(thousands);\n     \
    \   }\n        if (hundredsDecimal > thousandsDecimal) {\n            result.add(hundreds);\n\
    \            result.add(thousands);\n        }\n        return result;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (long i : arr) {\n            if (i % 2 == 0) {\n          \
    \      ones++;\n            } else if (i % 10 == 0) {\n                tens++;\n\
    \            } else if (i % 100 == 0) {\n                hundreds++;\n       \
    \     } else if (i % 1000 == 0) {\n                thousands++;\n            }\n\
    \        }\n        long onesCount = 0;\n        long tensCount = 0;\n       \
    \ long hundredsCount = 0;\n        long thousandsCount = 0;\n        for (long\
    \ i : arr) {\n            if (i % 2 == 0) {\n                onesCount++;\n  \
    \          } else if (i % 10 == 0) {\n                tensCount++;\n         \
    \   } else if (i % 100 == 0) {\n                hundredsCount++;\n           \
    \ } else if (i % 1000 == 0) {\n                thousandsCount++;\n           \
    \ }\n        }\n        long onesCountInt = onesCount;\n        long tensCountInt\
    \ = tensCount;\n        long hundredsCountInt = hundredsCount;\n        long thousandsCountInt\
    \ = thousandsCount;\n        if (onesCountInt > onesCount) {\n            onesCountInt\
    \ = onesCount;\n        }\n        if (tensCountInt > tensCount) {\n         \
    \   tensCountInt = tensCount;\n        }\n        if (hundredsCountInt > hundredsCount)\
    \ {\n            hundredsCountInt = hundredsCount;\n        }\n        if (thousandsCountInt\
    \ > thousandsCount) {\n            thousandsCountInt = thousandsCount;\n     \
    \   }\n        long onesCountDecimal = onesCount;\n        long tensCountDecimal\
    \ = tensCount;\n        long hundredsCountDecimal = hundredsCount;\n        long\
    \ thousandsCountDecimal = thousandsCount;\n        if (onesCountDecimal > onesCount)\
    \ {\n            onesCountDecimal = onesCount;\n        }\n        if (tensCountDecimal\
    \ > tensCount) {\n            tensCountDecimal = tensCount;\n        }\n     \
    \   if (hundredsCountDecimal > hundredsCount) {\n            hundredsCountDecimal\
    \ = hundredsCount;\n        }\n        if (thousandsCountDecimal > thousandsCount)\
    \ {\n            thousandsCountDecimal = thousandsCount;\n        }\n        long\
    \ onesCountDecimalInt = onesCountDecimal;\n        long ", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long ones = 0;\n        long tens =\
    \ 0;\n        long hundreds = 0;\n        long thousands = 0;\n        long tenths\
    \ = 0;\n        long oneths = 0;\n        long tenth = 0;\n        long oneth\
    \ = 0;\n        long tenths = 0;\n        long oneths = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenththth\
    \ = 0;\n        long one", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            ones +=\
    \ i;\n            tens += (i / 10l);\n            hundreds += (i / 100l);\n  \
    \          thousands += (i / 1000l);\n        }\n        long onesCount = ones;\n\
    \        long tensCount = tens;\n        long hundredsCount = hundreds;\n    \
    \    long thousandsCount = thousands;\n        long sumOnes = onesCount * onesCount;\n\
    \        long sumTens = tensCount * tensCount;\n        long sumHundreds = hundredsCount\
    \ * hundredsCount;\n        long sumThousands = thousandsCount * thousandsCount;\n\
    \        long sumAll = sumOnes + sumTens + sumHundreds + sumThousands;\n     \
    \   long sumOnesTens = sumOnes * tensCount;\n        long sumOnesHundreds = sumOnes\
    \ * hundredsCount;\n        long sumOnesThousands = sumOnes * thousandsCount;\n\
    \        long sumTensHundreds = sumTens * hundredsCount;\n        long sumTensThousands\
    \ = sumTens * thousandsCount;\n        long sumHundredsThousands = sumHundreds\
    \ * thousandsCount;\n        long sumAllHundreds = sumAll * hundredsCount;\n \
    \       long sumAllThousands = sumAll * thousandsCount;\n        long sumAllOnes\
    \ = sumAll * onesCount;\n        long sumAllTens = sumAll * tensCount;\n     \
    \   long sumAllHundreds = sumAll * hundredsCount;\n        long sumAllThousands\
    \ = sumAll * thousandsCount;\n        long sumAllOnesTens = sumAllOnes * tensCount;\n\
    \        long sumAllOnesHundreds = sumAllOnes * hundredsCount;\n        long sumAllOnesThousands\
    \ = sumAllOnes * thousandsCount;\n        long sumAllTensHundreds = sumAllTens\
    \ * hundredsCount;\n        long sumAllTensThousands = sumAllTens * thousandsCount;\n\
    \        long sumAllHundredsThousands = ", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long ones = 0;\n        long tens = 0;\n       \
    \ long hundreds = 0;\n        long thousands = 0;\n        for (Long i : arr)\
    \ {\n            if (i.longValue() == 1) {\n                ones++;\n        \
    \    } else if (i.longValue() == 10) {\n                tens++;\n            }\
    \ else if (i.longValue() == 100) {\n                hundreds++;\n            }\
    \ else if (i.longValue() == 1000) {\n                thousands++;\n          \
    \  }\n        }\n        long onesDecimal = ones / 10;\n        long tensDecimal\
    \ = tens / 10;\n        long hundredsDecimal = hundreds / 10;\n        long thousandsDecimal\
    \ = thousands / 10;\n        long onesDecimalDecimal = onesDecimal / 10;\n   \
    \     long tensDecimalDecimal = tensDecimal / 10;\n        long hundredsDecimalDecimal\
    \ = hundredsDecimal / 10;\n        long thousandsDecimalDecimal = thousandsDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal / 10;\n \
    \       long tensDecimalDecimalDecimal = tensDecimalDecimal / 10;\n        long\
    \ hundredsDecimalDecimalDecimal = hundredsDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimal\
    \ = thousandsDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimalDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimalDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimalDecimalDecimal / 10;", "        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long ones = 0, zeros = 0;\n        for (long\
    \ i : arr) {\n            if (i == 1l) ones++;\n            else if (i == 0l)\
    \ zeros++;\n            else res.add(i);\n        }\n        if (ones < zeros)\
    \ {\n            Collections.sort(res);\n            return res;\n        }\n\
    \        Collections.sort(res, Comparator.comparingLong(Long::longValue).reversed());\n\
    \        return res;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n  \
    \      }\n        long onesMax = ones;\n        long zerosMax = zeros;\n     \
    \   long max = 0;\n        for (long i : arr) {\n            if (i == 1l) {\n\
    \                if (ones > onesMax) {\n                    onesMax = ones;\n\
    \                    max = i;\n                }\n                ones--;\n  \
    \          } else if (i == 0l) {\n                if (zeros > zerosMax) {\n  \
    \                  zerosMax = zeros;\n                    max = i;\n         \
    \       }\n                zeros--;\n            }\n        }\n        if (onesMax\
    \ < zerosMax) {\n            onesMax = zerosMax;\n            zerosMax = max;\n\
    \        }\n        onesMax--;\n        zerosMax--;\n        for (long i : arr)\
    \ {\n            if (i == 1l) {\n                if (ones > onesMax) {\n     \
    \               onesMax = ones;\n                    max = i;\n              \
    \  }\n                ones--;\n            } else if (i == 0l) {\n           \
    \     if (zeros > zerosMax) {\n                    zerosMax = zeros;\n       \
    \             max = i;\n                }\n                zeros--;\n        \
    \    }\n        }\n        if (onesMax < zerosMax) {\n            onesMax = zerosMax;\n\
    \            zerosMax = max;\n        }\n        onesMax--;\n        zerosMax--;\n\
    \        for (long i : arr) {\n            if (i == 1l) {\n                if\
    \ (ones > onesMax) {\n                    onesMax = ones;\n                  \
    \  max = i;\n                }\n                ones--;\n            } else if\
    \ (i == 0l) {\n                if (zeros > zerosMax) {\n                    zerosMax\
    \ = zeros;\n                    max = i;\n                }\n                zeros--;\n\
    \            }\n        }\n        if (onesMax < zerosMax) {\n            onesMax\
    \ = zerosMax;\n            zerosMax = max;\n        }\n        onesMax--;\n  \
    \      zerosMax--;\n        for (long i : arr) {\n            if (i == 1l) {\n\
    \                if (ones > onesMax) {\n                    onesMax = ones;\n\
    \                    max = i;\n                }\n                ones--;\n  \
    \          } else if (i == 0l) {\n                if (zeros > zerosMax) {\n  \
    \                  zerosMax = zeros;\n                    max = i;\n         \
    \       }\n                zeros--;\n            }\n        }\n        if (onesMax\
    \ < zerosMax) {\n            onesMax = zerosMax;\n            zerosMax = max;\n\
    \        }\n        onesMax--;\n        zerosMax--;\n        for (long i ", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long zeros = 0;\n        for (long i : arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long onesDecimal = ones / Math.pow(10, arr.size());\n\
    \        long zerosDecimal = zeros / Math.pow(10, arr.size());\n        long onesDecimalDecimal\
    \ = onesDecimal / Math.pow(10, arr.size());\n        long zerosDecimalDecimal\
    \ = zerosDecimal / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / Math.pow(10, arr.size());\n        long zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / Math.pow(10, arr.size());\n        long zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n        long\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n    \
    \    long zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n\
    \        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ arr.size());\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ arr.size());\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0, tens = 0, hundreds = 0, thousands = 0, tenths = 0, hundredths\
    \ = 0, thousandths = 0;\n        for (Long num : arr) {\n            if (num ==\
    \ 1) {\n                ones++;\n            } else if (num == 10) {\n       \
    \         tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num == 1000) {\n                thousands++;\n       \
    \     } else if (num % 10 == 0) {\n                tenths++;\n            } else\
    \ if (num % 100 == 0) {\n                hundredths++;\n            } else if\
    \ (num % 1000 == 0) {\n                thousandths++;\n            }\n       \
    \ }\n        long onesNum = ones * ones;\n        long tensNum = tens * tens;\n\
    \        long hundredsNum = hundreds * hundreds;\n        long thousandsNum =\
    \ thousands * thousands;\n        long tenthsNum = tenths * tenths;\n        long\
    \ hundredthsNum = hundredths * hundredths;\n        long thousandthsNum = thousandths\
    \ * thousandths;\n        long onesNum2 = onesNum + onesNum;\n        long tensNum2\
    \ = tensNum + tensNum;\n        long hundredsNum2 = hundredsNum + hundredsNum;\n\
    \        long thousandsNum2 = thousandsNum + thousandsNum;\n        long tenthsNum2\
    \ = tenthsNum + tenthsNum;\n        long hundredthsNum2 = hundredthsNum + hundredthsNum;\n\
    \        long thousandthsNum2 = thousandthsNum + thousandthsNum;\n        long\
    \ onesNum3 = onesNum2 + onesNum2;\n        long tensNum3 = tensNum2 + tensNum2;\n\
    \        long hundredsNum3 = hundredsNum2 + hundredsNum2;\n        long thousandsNum3\
    \ = thousandsNum2 + thousandsNum2;\n        long tenthsNum3 = tenthsNum2 + tenthsNum2;\n\
    \        long hundredthsNum3 = hundredthsNum2 + hundredthsNum2;\n        long\
    \ thousandthsNum3 = thousandthsNum2 + thousandthsNum2;\n        long onesNum4\
    \ = onesNum3 + onesNum3;\n        long tensNum4 = tensNum3 + tens", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        Arrays.sort(arr);\n        long ones\
    \ = 0;\n        long tens = 0;\n        long hundreds = 0;\n        long thousands\
    \ = 0;\n        long tenths = 0;\n        long oneths = 0;\n        long tenth\
    \ = 0;\n        long oneth = 0;\n        long tenths = 0;\n        long oneths\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenth",
  "        ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n \
    \       long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long oneths = 0;\n        long tenth = 0;\n\
    \        long oneth = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long tenthth = 0;\n        long onethth = 0;\n        long tenthths =\
    \ 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n        long\
    \ tenththths = 0;\n        long oneththths = 0;\n        long tenththth = 0;\n\
    \        long oneththth = 0;\n        long tenththths = 0;\n        long oneththths\
    \ = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n        long\
    \ tenththths = 0;\n        long oneththths = 0;\n        long tenththth = 0;\n\
    \        long oneththth = 0;\n        long tenththths = 0;\n        long oneththths\
    \ = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n        long\
    \ tenththths = 0;\n        long oneththths = 0;\n        long tenththth = 0;\n\
    \        long oneththth = 0;\n        long tenththths = 0;\n        long oneththths\
    \ = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n        long\
    \ tenththths = 0;\n        long oneththths = 0;\n        long tenththth = 0;\n\
    \        long oneththth = 0;\n        long tenththths = 0;\n        long oneththths\
    \ = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n        long\
    \ tenththths = 0;\n        long oneththths = 0;\n        long tenththth = 0;\n\
    \        long oneththth = 0;\n        long tenththths = 0;\n        long oneththths\
    \ = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n        long\
    \ tenththths = 0;\n        long oneththths = 0;\n        long tenththth = 0;\n\
    \        long oneththth = 0;\n        long tenththths = 0;\n        long oneththths\
    \ = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n        long ",
  "        ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n \
    \       long zeros = 0;\n        for (Long l : arr) {\n            if (l.longValue()\
    \ == 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        long onesMax = Long.parseLong(Long.toBinaryString(ones));\n\
    \        long zerosMax = Long.parseLong(Long.toBinaryString(zeros));\n       \
    \ long onesMin = Long.parseLong(Long.toBinaryString(onesMax));\n        long zerosMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax));\n        long onesMaxMin =\
    \ Long.parseLong(Long.toBinaryString(onesMax * onesMin));\n        long zerosMaxMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax * zerosMin));\n        long onesMaxMinMin\
    \ = Long.parseLong(Long.toBinaryString(onesMax * onesMin * onesMin));\n      \
    \  long zerosMaxMinMin = Long.parseLong(Long.toBinaryString(zerosMax * zerosMin\
    \ * zerosMin));\n        long onesMaxMinMinMin = Long.parseLong(Long.toBinaryString(onesMax\
    \ * onesMin * onesMin * onesMin));\n        long zerosMaxMinMinMin = Long.parseLong(Long.toBinaryString(zerosMax\
    \ * zerosMin * zerosMin * zerosMin));\n        long onesMaxMinMinMinMin = Long.parseLong(Long.toBinaryString(onesMax\
    \ * onesMin * onesMin * onesMin * onesMin));\n        long zerosMaxMinMinMinMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax * zerosMin * zerosMin * zerosMin\
    \ * zerosMin));\n        long onesMaxMinMinMinMinMin = Long.parseLong(Long.toBinaryString(onesMax\
    \ * onesMin * onesMin * onesMin * onesMin * onesMin));\n        long zerosMaxMinMinMinMinMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax * zerosMin * zerosMin * zerosMin\
    \ * zerosMin * zerosMin));\n        long onesMaxMinMinMinMinMin = Long.parseLong(Long.toBinaryString(onesMax\
    \ * onesMin * onesMin * onesMin * onesMin * onesMin * onesMin));\n        long\
    \ zerosMaxMinMinMinMinMin = Long.parseLong(Long", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long ones = 0;\n        long tens = 0;\n \
    \       long hundreds = 0;\n        long thousands = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenth = 0;\n        long oneth =\
    \ 0;\n        long tenths = 0;\n        long oneths = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long one",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0,\
    \ tens = 0, hundreds = 0, thousands = 0, tenths = 0, hundredths = 0, thousandths\
    \ = 0;\n        long max = 0;\n        for (long i : arr) {\n            if (i\
    \ < 0) {\n                throw new RuntimeException(\"Negative numbers are not\
    \ allowed\");\n            }\n            if (i == 1) {\n                ones++;\n\
    \            } else if (i >= 10 && i <= 99) {\n                tens++;\n     \
    \       } else if (i >= 100 && i <= 999) {\n                hundreds++;\n    \
    \        } else if (i >= 1000 && i <= 9999) {\n                thousands++;\n\
    \            } else if (i >= 10000 && i <= 99999) {\n                tenths++;\n\
    \            } else if (i >= 100000 && i <= 999999) {\n                hundredths++;\n\
    \            } else if (i >= 1000000 && i <= 9999999) {\n                thousandths++;\n\
    \            } else {\n                max = i;\n            }\n        }\n  \
    \      long onesMax = ones * 1000;\n        long tensMax = tens * 1000;\n    \
    \    long hundredsMax = hundreds * 1000;\n        long thousandsMax = thousands\
    \ * 1000;\n        long tenthsMax = tenths * 1000;\n        long hundredthsMax\
    \ = hundredths * 1000;\n        long thousandthsMax = thousandths * 1000;\n  \
    \      if (onesMax > max) {\n            max = onesMax;\n        }\n        if\
    \ (tensMax > max) {\n            max = tensMax;\n        }\n        if (hundredsMax\
    \ > max) {\n            max = hundredsMax;\n        }\n        if (thousandsMax\
    \ > max) {\n            max = thousandsMax;\n        }\n        if (tenthsMax\
    \ > max) {\n            max = tenthsMax;\n        }\n        if (hundredthsMax\
    \ > max) {\n            max = hundredthsMax;\n        }\n        if (thousandthsMax\
    \ > max) {\n            max = thousandthsMax;\n        }\n        long onesMax2\
    \ = ones * 1000;\n        long tensMax2 = tens * 1000;\n        long hundredsMax2\
    \ = hundreds * 1000;\n        long thousandsMax2 = thousands * 1000;\n       \
    \ long tenthsMax2 = tenths * 1000;\n        long hundredthsMax2 = hundredths *\
    \ 1000;\n        long thousandthsMax2 = thousandths * 1000;\n        if (onesMax2\
    \ > max) {\n            max = onesMax2;\n        }\n        if (tensMax2 ", " \
    \       ArrayList<Long> res = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (Long l : arr) {\n            if (l == 1l) ones++;\n       \
    \     if (l == 10l) tens++;\n            if (l == 100l) hundreds++;\n        \
    \    if (l == 1000l) thousands++;\n        }\n        if (ones > 0) {\n      \
    \      int onesPos = 0;\n            int tensPos = 0;\n            int hundredsPos\
    \ = 0;\n            int thousandsPos = 0;\n            int onesCount = 0;\n  \
    \          int tensCount = 0;\n            int hundredsCount = 0;\n          \
    \  int thousandsCount = 0;\n            for (Long l : arr) {\n               \
    \ if (l == 1l) onesCount++;\n                if (l == 10l) tensCount++;\n    \
    \            if (l == 100l) hundredsCount++;\n                if (l == 1000l)\
    \ thousandsCount++;\n            }\n            int onesDiff = onesCount - ones;\n\
    \            int tensDiff = tensCount - tens;\n            int hundredsDiff =\
    \ hundredsCount - hundreds;\n            int thousandsDiff = thousandsCount -\
    \ thousands;\n            if (onesDiff > 0) {\n                res.add(onesPos);\n\
    \                onesPos += onesDiff;\n            }\n            if (tensDiff\
    \ > 0) {\n                res.add(tensPos);\n                tensPos += tensDiff;\n\
    \            }\n            if (hundredsDiff > 0) {\n                res.add(hundredsPos);\n\
    \                hundredsPos += hundredsDiff;\n            }\n            if (thousandsDiff\
    \ > 0) {\n                res.add(thousandsPos);\n                thousandsPos\
    \ += thousandsDiff;\n            }\n        }\n        if (ones == 0 && tens ==\
    \ 0 && hundreds == 0 && thousands == 0) {\n            return arr;\n        }\n\
    \        if (ones > 0) {\n            int onesPos = 0;\n            int tensPos\
    \ = 0;\n            int hundredsPos = 0;\n            int thousandsPos = 0;\n\
    \            int onesCount = 0;\n            int tensCount = 0;\n            int\
    \ hundredsCount = 0;\n            int thousandsCount = 0;\n            for (Long\
    \ l : arr) {\n                if (l == 1l) onesCount++;\n                if (l\
    \ == 10l) tensCount++;\n                if (l == 100l) hundredsCount++;\n    \
    \            if (l == 1000", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        long onesDecimal = ones / Math.pow(10, (arr.size() - 1));\n \
    \       long tensDecimal = tens / Math.pow(10, (arr.size() - 1));\n        long\
    \ hundredsDecimal = hundreds / Math.pow(10, (arr.size() - 1));\n        long thousandsDecimal\
    \ = thousands / Math.pow(10, (arr.size() - 1));\n        long decimal = onesDecimal\
    \ + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long onesDecimal2\
    \ = ones / Math.pow(10, (arr.size() - 2));\n        long tensDecimal2 = tens /\
    \ Math.pow(10, (arr.size() - 2));\n        long hundredsDecimal2 = hundreds /\
    \ Math.pow(10, (arr.size() - 2));\n        long thousandsDecimal2 = thousands\
    \ / Math.pow(10, (arr.size() - 2));\n        long decimal2 = onesDecimal2 + tensDecimal2\
    \ + hundredsDecimal2 + thousandsDecimal2;\n        long onesDecimal3 = ones /\
    \ Math.pow(10, (arr.size() - 3));\n        long tensDecimal3 = tens / Math.pow(10,\
    \ (arr.size() - 3));\n        long hundredsDecimal3 = hundreds / Math.pow(10,\
    \ (arr.size() - 3));\n        long thousandsDecimal3 = thousands / Math.pow(10,\
    \ (arr.size() - 3));\n        long decimal3 = onesDecimal3 + tensDecimal3 + hundredsDecimal3\
    \ + thousandsDecimal3;\n        long onesDecimal4 = ones / Math.pow(10, (arr.size()\
    \ - 4));\n        long tensDecimal4 = tens / Math.pow(10, (arr.size() - 4));\n\
    \        long hundredsDecimal4 = hundreds / Math.pow(10, (arr.size() - 4));\n\
    \        long thousandsDecimal4 = thousands / Math.pow(10, (arr.size() - 4));\n\
    \        long decimal4 = onesDecimal4 + tensDecimal4 + hundredsDecimal4 + thousandsDecimal4;\n\
    \        long onesDecimal5 = ones / Math.pow(10, (arr.size() - 5));\n        long\
    \ tensDecimal5 = tens / Math.pow(", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0, zeros = 0;\n        for (Long l : arr) {\n           \
    \ if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n        }\n       \
    \ if (ones > zeros) {\n            Collections.sort(arr);\n            for (Long\
    \ l : arr) {\n                if (l == 1l) ones--;\n                if (l == 0l)\
    \ zeros--;\n            }\n        }\n        for (Long l : arr) {\n         \
    \   if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n        }\n     \
    \   if (ones > zeros) {\n            Collections.sort(arr);\n            for (Long\
    \ l : arr) {\n                if (l == 1l) ones--;\n                if (l == 0l)\
    \ zeros--;\n            }\n        }\n        for (Long l : arr) {\n         \
    \   if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n        }\n     \
    \   if (ones > zeros) {\n            Collections.sort(arr);\n            for (Long\
    \ l : arr) {\n                if (l == 1l) ones--;\n                if (l == 0l)\
    \ zeros--;\n            }\n        }\n        for (Long l : arr) {\n         \
    \   if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n        }\n     \
    \   if (ones > zeros) {\n            Collections.sort(arr);\n            for (Long\
    \ l : arr) {\n                if (l == 1l) ones--;\n                if (l == 0l)\
    \ zeros--;\n            }\n        }\n        for (Long l : arr) {\n         \
    \   if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n        }\n     \
    \   if (ones > zeros) {\n            Collections.sort(arr);\n            for (Long\
    \ l : arr) {\n                if (l == 1l) ones--;\n                if (l == 0l)\
    \ zeros--;\n            }\n        }\n        for (Long l : arr) {\n         \
    \   if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n        }\n     \
    \   if (ones > zeros) {\n            Collections.sort(arr);\n            for (Long\
    \ l : arr) {\n                if (l == 1l) ones--;\n                if (l == 0l)\
    \ zeros--;\n            }\n        }\n        for (Long l : arr) {\n         \
    \   if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n        }\n     \
    \   if (ones > zeros) {\n            Collections.sort(arr);\n            for (Long\
    \ l : arr) {\n                if (l == 1l) one", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long ones = 0;\n        long tens = 0;\n \
    \       long hundreds = 0;\n        long thousands = 0;\n        for (Long l :\
    \ arr) {\n            if (l == 1l) ones++;\n            if (l == 10l) tens++;\n\
    \            if (l == 100l) hundreds++;\n            if (l == 1000l) thousands++;\n\
    \        }\n        long onesDecimal = ones / 10;\n        long tensDecimal =\
    \ tens / 10;\n        long hundredsDecimal = hundreds / 10;\n        long thousandsDecimal\
    \ = thousands / 10;\n        long onesDecimalDecimal = onesDecimal / 10;\n   \
    \     long tensDecimalDecimal = tensDecimal / 10;\n        long hundredsDecimalDecimal\
    \ = hundredsDecimal / 10;\n        long thousandsDecimalDecimal = thousandsDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal / 10;\n \
    \       long tensDecimalDecimalDecimal = tensDecimalDecimal / 10;\n        long\
    \ hundredsDecimalDecimalDecimal = hundredsDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimal\
    \ = thousandsDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal\
    \ = hundredsDecimalDecimalDecimalDecimal / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal\
    \ = thousandsDecimalDecimalDecimalDecimal / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = tensDecimalDecimalDecimalDecimalDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = hundred", "        ArrayList<Long> result = new ArrayList<Long>();\n     \
    \   long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n     \
    \   long thousands = 0;\n        for (Long i : arr) {\n            long val =\
    \ i;\n            if (val == 1) {\n                ones++;\n            } else\
    \ if (val == 2) {\n                tens++;\n            } else if (val == 3) {\n\
    \                hundreds++;\n            } else if (val == 4) {\n           \
    \     thousands++;\n            }\n        }\n        long onesCount = 0;\n  \
    \      long tensCount = 0;\n        long hundredsCount = 0;\n        long thousandsCount\
    \ = 0;\n        for (Long i : arr) {\n            long val = i;\n            if\
    \ (val == 1) {\n                onesCount++;\n            } else if (val == 2)\
    \ {\n                tensCount++;\n            } else if (val == 3) {\n      \
    \          hundredsCount++;\n            } else if (val == 4) {\n            \
    \    thousandsCount++;\n            }\n        }\n        long onesDecimal = ones\
    \ / onesCount;\n        long tensDecimal = tens / tensCount;\n        long hundredsDecimal\
    \ = hundreds / hundredsCount;\n        long thousandsDecimal = thousands / thousandsCount;\n\
    \        long onesDecimalDecimal = onesDecimal / onesCount;\n        long tensDecimalDecimal\
    \ = tensDecimal / tensCount;\n        long hundredsDecimalDecimal = hundredsDecimal\
    \ / hundredsCount;\n        long thousandsDecimalDecimal = thousandsDecimal /\
    \ thousandsCount;\n        long onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal /\
    \ tensCount;\n        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal\
    \ / hundredsCount;\n        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal\
    \ / thousandsCount;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ / tensCount;\n        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ / hundredsCount;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal\
    \ / thousandsCount;\n", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (Long i : arr) {\n\
    \            if (i.longValue() == 1) {\n                ones++;\n            }\
    \ else {\n                zeros++;\n            }\n        }\n        if (ones\
    \ > zeros) {\n            Collections.sort(arr);\n            for (Long i : arr)\
    \ {\n                if (i.longValue() == 1) {\n                    result.add(i);\n\
    \                }\n            }\n        } else {\n            Collections.sort(arr);\n\
    \            for (Long i : arr) {\n                if (i.longValue() == 0) {\n\
    \                    result.add(i);\n                }\n            }\n      \
    \  }\n        return result;", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            ones +=\
    \ l;\n            if (ones >= 1000000000) {\n                tens += ones / 1000000000;\n\
    \                ones %= 1000000000;\n            }\n            if (ones >= 1000000)\
    \ {\n                hundreds += ones / 1000000;\n                ones %= 1000000;\n\
    \            }\n            if (ones >= 1000) {\n                thousands +=\
    \ ones / 1000;\n                ones %= 1000;\n            }\n        }\n    \
    \    long onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount\
    \ = 0;\n        long thousandsCount = 0;\n        for (Long l : arr) {\n     \
    \       if (l == 1) {\n                onesCount++;\n            } else if (l\
    \ == 10) {\n                tensCount++;\n            } else if (l == 100) {\n\
    \                hundredsCount++;\n            } else if (l == 1000) {\n     \
    \           thousandsCount++;\n            }\n        }\n        long onesCountSorted\
    \ = onesCount - ones;\n        long tensCountSorted = tensCount - ones;\n    \
    \    long hundredsCountSorted = hundredsCount - ones;\n        long thousandsCountSorted\
    \ = thousandsCount - ones;\n        if (onesCountSorted == 0) {\n            onesCountSorted\
    \ = 1;\n        }\n        if (tensCountSorted == 0) {\n            tensCountSorted\
    \ = 1;\n        }\n        if (hundredsCountSorted == 0) {\n            hundredsCountSorted\
    \ = 1;\n        }\n        if (thousandsCountSorted == 0) {\n            thousandsCountSorted\
    \ = 1;\n        }\n        long onesCountSorted = onesCountSorted * ones;\n  \
    \      long tensCountSorted = tensCountSorted * ones;\n        long hundredsCountSorted\
    \ = hundredsCountSorted * ones;\n        long thousandsCountSorted = thousandsCountSorted\
    \ * ones;\n        long onesCountSorted = onesCountSorted + ones;\n        long\
    \ tensCountSorted = tensCountSorted + ones;\n        long hundredsCountSorted\
    \ = hundredsCountSorted + ones;\n        long thousandsCountSorted = thousandsCountSorted\
    \ + ones;\n        long onesCountSorted = onesCountSorted + ones;\n        long\
    \ tensCountSorted = tensCountSorted ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long maxOnes = 0;\n\
    \        long maxZeros = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n                if (ones > maxOnes) {\n  \
    \                  maxOnes = ones;\n                }\n            } else if (num\
    \ == 0) {\n                zeros++;\n                if (zeros > maxZeros) {\n\
    \                    maxZeros = zeros;\n                }\n            } else\
    \ {\n                ones = 0;\n                zeros = 0;\n            }\n  \
    \      }\n        Collections.sort(arr);\n        for (long num : arr) {\n   \
    \         if (num == 1) {\n                ones++;\n                if (ones >\
    \ maxOnes) {\n                    maxOnes = ones;\n                }\n       \
    \     } else if (num == 0) {\n                zeros++;\n                if (zeros\
    \ > maxZeros) {\n                    maxZeros = zeros;\n                }\n  \
    \          } else {\n                ones = 0;\n                zeros = 0;\n \
    \           }\n        }\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n                if (ones > maxOnes) {\n  \
    \                  maxOnes = ones;\n                }\n            } else if (num\
    \ == 0) {\n                zeros++;\n                if (zeros > maxZeros) {\n\
    \                    maxZeros = zeros;\n                }\n            } else\
    \ {\n                ones = 0;\n                zeros = 0;\n            }\n  \
    \      }\n        for (long num : arr) {\n            if (num == 1) {\n      \
    \          ones++;\n                if (ones > maxOnes) {\n                  \
    \  maxOnes = ones;\n                }\n            } else if (num == 0) {\n  \
    \              zeros++;\n                if (zeros > maxZeros) {\n           \
    \         maxZeros = zeros;\n                }\n            } else {\n       \
    \         ones = 0;\n                zeros = 0;\n            }\n        }\n  \
    \      for (long num : arr) {\n            if (num == 1) {\n                ones++;\n\
    \                if (ones > maxOnes) {\n                    maxOnes = ones;\n\
    \                }\n            } else if (num == 0) {\n                zeros++;\n\
    \                if (zeros > maxZeros) {\n                    maxZeros = zeros;\n\
    \                }\n            } else {\n                ones = 0;\n        \
    \        zeros = 0;\n            }\n        }\n        for (long num : arr) {\n\
    \            if (num == 1) {\n                ones++;\n                if (ones\
    \ > maxOnes) {\n                    maxOnes = ones;\n                }\n     \
    \       } else if (num == 0) {\n                zeros++;\n                if (zeros\
    \ > maxZeros) {\n                    maxZeros = zeros;\n                }\n  \
    \          } else {\n                ones = 0;\n                zeros = 0;\n \
    \           }\n        }\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n                if (ones > maxOnes) {\n  \
    \                  maxOnes = ones;\n                }\n            } else if (num\
    \ == 0) {\n                zeros++;\n                if (zeros > maxZeros) {\n\
    \                    ", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    for (long i : arr) {\n            if (i == 1) {\n                ones++;\n\
    \            } else if (i == 0) {\n                zeros++;\n            } else\
    \ {\n                if (ones > zeros) {\n                    max = ones;\n  \
    \              } else {\n                    max = zeros;\n                }\n\
    \            }\n            result.add(i);\n        }\n        if (ones > zeros)\
    \ {\n            max = ones;\n        } else {\n            max = zeros;\n   \
    \     }\n        Collections.sort(result, new Comparator<Long>() {\n         \
    \   public int compare(Long o1, Long o2) {\n                if (o1 > o2) {\n \
    \                   return 1;\n                } else if (o1 < o2) {\n       \
    \             return -1;\n                } else {\n                    return\
    \ 0;\n                }\n            }\n        });\n        if (max > ones) {\n\
    \            Collections.reverse(result);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n \
    \       long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long i : arr) {\n            if (i.compareTo(1l) == 0) {\n     \
    \           ones++;\n            } else if (i.compareTo(10l) == 0) {\n       \
    \         tens++;\n            } else if (i.compareTo(100l) == 0) {\n        \
    \        hundreds++;\n            } else if (i.compareTo(1000l) == 0) {\n    \
    \            thousands++;\n            }\n        }\n        long onesCount =\
    \ ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        if (onesCount > tensCount)\
    \ {\n            result.addAll(Arrays.asList(onesCount, tensCount));\n       \
    \ } else if (onesCount > hundredsCount) {\n            result.addAll(Arrays.asList(onesCount,\
    \ hundredsCount));\n        } else if (onesCount > thousandsCount) {\n       \
    \     result.addAll(Arrays.asList(onesCount, thousandsCount));\n        } else\
    \ if (tensCount > hundredsCount) {\n            result.addAll(Arrays.asList(tensCount,\
    \ hundredsCount));\n        } else if (tensCount > thousandsCount) {\n       \
    \     result.addAll(Arrays.asList(tensCount, thousandsCount));\n        } else\
    \ if (hundredsCount > thousandsCount) {\n            result.addAll(Arrays.asList(hundredsCount,\
    \ thousandsCount));\n        } else {\n            result.addAll(Arrays.asList(hundredsCount,\
    \ thousandsCount));\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long ones = 0;\n        long tens =\
    \ 0;\n        long hundreds = 0;\n        long thousands = 0;\n        long tenths\
    \ = 0;\n        long oneths = 0;\n        long tenth = 0;\n        long oneth\
    \ = 0;\n        long tenths = 0;\n        long oneths = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long one",
  "        ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long num : arr)\
    \ {\n            if (num == 1) {\n                ones++;\n            } else\
    \ {\n                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr, (o1, o2) -> {\n                long ones\
    \ = 0;\n                long zeros = 0;\n                for (long num : arr)\
    \ {\n                    if (num == 1) {\n                        ones++;\n  \
    \                  } else {\n                        zeros++;\n              \
    \      }\n                }\n                return ones - zeros;\n          \
    \  });\n        }\n        for (long num : arr) {\n            if (num == 1) {\n\
    \                result.add(num);\n            } else {\n                result.add(zeros);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long ones = 0;\n        long tens = 0;\n \
    \       long hundreds = 0;\n        long thousands = 0;\n        for (Long l :\
    \ arr) {\n            if (l == 1l) ones++;\n            else if (l == 10l) tens++;\n\
    \            else if (l == 100l) hundreds++;\n            else if (l == 1000l)\
    \ thousands++;\n        }\n        if (ones > 0) {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                if (l == 1l) result.add(l);\n\
    \                else if (l == 10l) result.add(l);\n                else if (l\
    \ == 100l) result.add(l);\n                else if (l == 1000l) result.add(l);\n\
    \            }\n        }\n        if (tens > 0) {\n            Collections.sort(arr);\n\
    \            for (Long l : arr) {\n                if (l == 10l) result.add(l);\n\
    \                else if (l == 100l) result.add(l);\n                else if (l\
    \ == 1000l) result.add(l);\n            }\n        }\n        if (hundreds > 0)\
    \ {\n            Collections.sort(arr);\n            for (Long l : arr) {\n  \
    \              if (l == 100l) result.add(l);\n                else if (l == 1000l)\
    \ result.add(l);\n            }\n        }\n        if (thousands > 0) {\n   \
    \         Collections.sort(arr);\n            for (Long l : arr) {\n         \
    \       if (l == 1000l) result.add(l);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n       \
    \ long thousands = 0;\n        for (long l : arr) {\n            if (l == 1l)\
    \ ones++;\n            if (l == 10l) tens++;\n            if (l == 100l) hundreds++;\n\
    \            if (l == 1000l) thousands++;\n        }\n        long onesDecimal\
    \ = ones / 10;\n        long tensDecimal = tens / 10;\n        long hundredsDecimal\
    \ = hundreds / 10;\n        long thousandsDecimal = thousands / 10;\n        long\
    \ onesDecimalDecimal = onesDecimal / 10;\n        long tensDecimalDecimal = tensDecimal\
    \ / 10;\n        long hundredsDecimalDecimal = hundredsDecimal / 10;\n       \
    \ long thousandsDecimalDecimal = thousandsDecimal / 10;\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal /\
    \ 10;\n        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal /\
    \ 10;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal = hundreds",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (Long i : arr) {\n            if (i.longValue() == 1) {\n  \
    \              ones++;\n            } else if (i.longValue() == 10) {\n      \
    \          tens++;\n            } else if (i.longValue() == 100) {\n         \
    \       hundreds++;\n            } else if (i.longValue() == 1000) {\n       \
    \         thousands++;\n            }\n        }\n        long onesCount = ones;\n\
    \        long tensCount = tens;\n        long hundredsCount = hundreds;\n    \
    \    long thousandsCount = thousands;\n        if (onesCount > tensCount) {\n\
    \            onesCount = tensCount;\n        }\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n        }\n        if (onesCount\
    \ > thousandsCount) {\n            onesCount = thousandsCount;\n        }\n  \
    \      if (tensCount > hundredsCount) {\n            tensCount = hundredsCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n        }\n        if (hundredsCount > thousandsCount) {\n\
    \            hundredsCount = thousandsCount;\n        }\n        if (onesCount\
    \ == 0) {\n            result.add(0);\n        } else if (onesCount == 1) {\n\
    \            result.add(onesCount);\n        } else if (onesCount == 2) {\n  \
    \          result.add(onesCount + 1);\n        } else if (onesCount == 3) {\n\
    \            result.add(onesCount + 2);\n        } else if (onesCount == 4) {\n\
    \            result.add(onesCount + 3);\n        } else if (onesCount == 5) {\n\
    \            result.add(onesCount + 4);\n        } else if (onesCount == 6) {\n\
    \            result.add(onesCount + 5);\n        } else if (onesCount == 7) {\n\
    \            result.add(onesCount + 6);\n        } else if (onesCount == 8) {\n\
    \            result.add(onesCount + 7);\n        } else if (onesCount == 9) {\n\
    \            result.add(onesCount + 8);\n        } else if (onesCount == 10) {\n\
    \            result.add(onesCount + 9);\n        } else if (onesCount == 11) {\n\
    \            result.add(onesCount + 10);\n        } else if (onesCount == 12)\
    \ {\n            result.add(onesCount + 11);\n        } else if (onesCount ==\
    \ 13) {\n            result.add(onesCount + 12);\n        } else if (onesCount\
    \ == 14) {\n            result.add(onesCount + 13);\n        } else if (onesCount\
    \ == 15) {\n            result.add(one", "        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long ones = 0;\n        long zeros = 0;\n      \
    \  for (long i : arr) {\n            if (i == 1l) ones++;\n            if (i ==\
    \ 0l) zeros++;\n        }\n        long onesMinusZeros = ones - zeros;\n     \
    \   long zeroMinusOnes = zeros - ones;\n        long onesMinusOnes = ones - ones;\n\
    \        long zeroMinusOnesMinusOnes = zeros - ones - ones;\n        long onesMinusOnesMinusOnes\
    \ = ones - ones - ones;\n        long zeroMinusOnesMinusOnesMinusOnes = zeros\
    \ - ones - ones - ones - ones;\n        long onesMinusOnesMinusOnesMinusOnes =\
    \ ones - ones - ones - ones - ones - ones;\n        long zeroMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zeros - ones - ones - ones - ones - ones - ones - ones;\n        long onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = ones - ones - ones - ones - ones - ones - ones - ones - ones;\n        long\
    \ zeroMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes = zeros - ones -\
    \ ones - ones - ones - ones - ones - ones - ones - ones - ones;\n        long\
    \ onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes = ones -\
    \ ones - ones - ones - ones - ones - ones - ones - ones - ones - ones - ones;\n\
    \        long zeroMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zeros - ones - ones - ones - ones - ones - ones - ones - ones - ones - ones\
    \ - ones - ones - ones;\n        long onesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = ones - ones - ones - ones - ones - ones - ones - ones - ones - ones - ones\
    \ - ones - ones - ones - ones - ones;\n        long zeroMinusOnesMinusOnesMinus",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (Long i : arr) {\n            if (i.longValue() == 1) {\n  \
    \              ones++;\n            } else if (i.longValue() == 10) {\n      \
    \          tens++;\n            } else if (i.longValue() == 100) {\n         \
    \       hundreds++;\n            } else if (i.longValue() == 1000) {\n       \
    \         thousands++;\n            }\n        }\n        long onesCount = ones;\n\
    \        long tensCount = tens;\n        long hundredsCount = hundreds;\n    \
    \    long thousandsCount = thousands;\n        if (onesCount > tensCount) {\n\
    \            onesCount = tensCount;\n        }\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n        }\n        if (onesCount\
    \ > thousandsCount) {\n            onesCount = thousandsCount;\n        }\n  \
    \      if (tensCount > hundredsCount) {\n            tensCount = hundredsCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n        }\n        if (hundredsCount > thousandsCount) {\n\
    \            hundredsCount = thousandsCount;\n        }\n        if (onesCount\
    \ > 0) {\n            result.add(onesCount);\n        }\n        if (tensCount\
    \ > 0) {\n            result.add(tensCount);\n        }\n        if (hundredsCount\
    \ > 0) {\n            result.add(hundredsCount);\n        }\n        if (thousandsCount\
    \ > 0) {\n            result.add(thousandsCount);\n        }\n        if (onesCount\
    \ > 0 && tensCount > 0 && hundredsCount > 0 && thousandsCount > 0) {\n       \
    \     result.add(onesCount + tensCount + hundredsCount + thousandsCount);\n  \
    \      }\n        if (onesCount > 0 && tensCount > 0 && hundredsCount > 0 && thousandsCount\
    \ > 0) {\n            result.add(onesCount + tensCount + hundredsCount + thousandsCount);\n\
    \        }\n        if (onesCount > 0 && tensCount > 0 && hundredsCount > 0 &&\
    \ thousandsCount > 0) {\n            result.add(onesCount + tensCount + hundredsCount\
    \ + thousandsCount);\n        }\n        if (onesCount > 0 && tensCount > 0 &&\
    \ hundredsCount > 0 && thousandsCount > 0) {\n            result.add(onesCount\
    \ + tensCount + hundredsCount + thous", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long ones = 0;\n        long tens = 0;\n        long\
    \ hundreds = 0;\n        long thousands = 0;\n        for (Long l : arr) {\n \
    \           if (l == 1l) ones++;\n            else if (l == 10l) tens++;\n   \
    \         else if (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n\
    \        }\n        long onesDecimal = ones / Math.pow(10, arr.size());\n    \
    \    long tensDecimal = tens / Math.pow(10, arr.size());\n        long hundredsDecimal\
    \ = (hundreds / Math.pow(10, arr.size())) * Math.pow(10, arr.size() - 1);\n  \
    \      long thousandsDecimal = (thousands / Math.pow(10, arr.size())) * Math.pow(10,\
    \ arr.size() - 1);\n        long decimal = onesDecimal + tensDecimal + hundredsDecimal\
    \ + thousandsDecimal;\n        for (Long l : arr) {\n            if (l == 1l)\
    \ result.add(l);\n            else if (l == 10l) result.add(l);\n            else\
    \ if (l == 100l) result.add(l);\n            else if (l == 1000l) result.add(l);\n\
    \            else if (l == onesDecimal) result.add(l);\n            else if (l\
    \ == tensDecimal) result.add(l);\n            else if (l == hundredsDecimal) result.add(l);\n\
    \            else if (l == thousandsDecimal) result.add(l);\n            else\
    \ if (l == decimal) result.add(l);\n        }\n        return result;", "    \
    \    ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0, zeros\
    \ = 0;\n        for (long i : arr) {\n            if (i == 1l) ones++;\n     \
    \       else if (i == 0l) zeros++;\n            else result.add(i);\n        }\n\
    \        if (ones > zeros) {\n            Collections.sort(result, (a, b) -> Long.compare(ones,\
    \ zeros));\n        }\n        else if (zeros > ones) {\n            Collections.sort(result,\
    \ (a, b) -> Long.compare(zeros, ones));\n        }\n        else {\n         \
    \   Collections.sort(result);\n        }\n        return result;", "        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        for (long i : arr) {\n            if (i == 1l) ones++;\n            if\
    \ (i == 0l) zeros++;\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1l) ones--;\n    \
    \            if (i == 0l) zeros--;\n            }\n        }\n        for (long\
    \ i : arr) {\n            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1l) ones--;\n    \
    \            if (i == 0l) zeros--;\n            }\n        }\n        for (long\
    \ i : arr) {\n            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1l) ones--;\n    \
    \            if (i == 0l) zeros--;\n            }\n        }\n        for (long\
    \ i : arr) {\n            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1l) ones--;\n    \
    \            if (i == 0l) zeros--;\n            }\n        }\n        for (long\
    \ i : arr) {\n            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1l) ones--;\n    \
    \            if (i == 0l) zeros--;\n            }\n        }\n        for (long\
    \ i : arr) {\n            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1l) ones--;\n    \
    \            if (i == 0l) zeros--;\n            }\n        }\n        for (long\
    \ i : arr) {\n            if (i == 1l) ones++;\n            if (i == 0l) zeros++;\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long i : arr) {\n                if (i == 1l) ones--;\n    \
    \            if (i == 0l) zeros--;\n            }\n        }\n        for (long\
    \ i : arr) {\n            if (i == 1l) ones++;\n            if (i == 0l) zeros++;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n \
    \       long zeros = 0;\n        for (long i : arr) {\n            if (i == 1l)\
    \ ones++;\n            else if (i == 0l) zeros++;\n            else result.add(i);\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(result,\
    \ new Comparator<Long>() {\n                public int compare(Long o1, Long o2)\
    \ {\n                    return Long.compare(o1, o2);\n                }\n   \
    \         });\n        } else {\n            Collections.sort(result, new Comparator<Long>()\
    \ {\n                public int compare(Long o1, Long o2) {\n                \
    \    return Long.compare(o2, o1);\n                }\n            });\n      \
    \  }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long i : arr) {\n            if (i.compareTo(1l)\
    \ == 0) {\n                ones++;\n            } else if (i.compareTo(10l) ==\
    \ 0) {\n                tens++;\n            } else if (i.compareTo(100l) == 0)\
    \ {\n                hundreds++;\n            } else if (i.compareTo(1000l) ==\
    \ 0) {\n                thousands++;\n            }\n        }\n        long onesDecimal\
    \ = ones / 10;\n        long tensDecimal = tens / 10;\n        long hundredsDecimal\
    \ = hundreds / 10;\n        long thousandsDecimal = thousands / 10;\n        long\
    \ onesDecimalDecimal = onesDecimal / 10;\n        long tensDecimalDecimal = tensDecimal\
    \ / 10;\n        long hundredsDecimalDecimal = hundredsDecimal / 10;\n       \
    \ long thousandsDecimalDecimal = thousandsDecimal / 10;\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal /\
    \ 10;\n        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal /\
    \ 10;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hund", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        for (Long l :\
    \ arr) {\n            if (l == 1l) ones++;\n            if (l == 10l) tens++;\n\
    \            if (l == 100l) hundreds++;\n            if (l == 1000l) thousands++;\n\
    \            if (l == 10000l) tenths++;\n        }\n        long onesTotal = ones\
    \ + tens + hundreds + thousands + tenths;\n        long tensTotal = tens + hundreds\
    \ + thousands + tenths;\n        long hundredsTotal = hundreds + thousands + tenths;\n\
    \        long thousandsTotal = thousands + tenths;\n        long tenthsTotal =\
    \ tenths;\n        long onesTotal2 = onesTotal + onesTotal;\n        long tensTotal2\
    \ = tensTotal + tensTotal;\n        long hundredsTotal2 = hundredsTotal + hundredsTotal;\n\
    \        long thousandsTotal2 = thousandsTotal + thousandsTotal;\n        long\
    \ tenthsTotal2 = tenthsTotal + tenthsTotal;\n        long onesTotal3 = onesTotal2\
    \ + onesTotal2;\n        long tensTotal3 = tensTotal2 + tensTotal2;\n        long\
    \ hundredsTotal3 = hundredsTotal2 + hundredsTotal2;\n        long thousandsTotal3\
    \ = thousandsTotal2 + thousandsTotal2;\n        long tenthsTotal3 = tenthsTotal2\
    \ + tenthsTotal2;\n        long onesTotal4 = onesTotal3 + onesTotal3;\n      \
    \  long tensTotal4 = tensTotal3 + tensTotal3;\n        long hundredsTotal4 = hundredsTotal3\
    \ + hundredsTotal3;\n        long thousandsTotal4 = thousandsTotal3 + thousandsTotal3;\n\
    \        long tenthsTotal4 = tenthsTotal3 + tenthsTotal3;\n        long onesTotal5\
    \ = onesTotal4 + onesTotal4;\n        long tensTotal5 = tensTotal4 + tensTotal4;\n\
    \        long hundredsTotal5 = hundredsTotal4 + hundredsTotal4;\n        long\
    \ thousandsTotal5 = thousandsTotal4 + thousandsTotal4;\n        long tenthsTotal5\
    \ = tenthsTotal4 + ten", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0, zeros = 0;\n        for (Long l : arr) {\n           \
    \ if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n            else\
    \ result.add(l);\n        }\n        if (ones > zeros) {\n            Collections.sort(result);\n\
    \        }\n        else if (zeros > ones) {\n            Collections.sort(result,\
    \ (a, b) -> Long.compare(b.longValue(), a.longValue()));\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n         \
    \   if (l == 1l) ones++;\n            else if (l == 0l) zeros++;\n           \
    \ else result.add(l);\n        }\n        long onesMax = ones;\n        long zerosMax\
    \ = zeros;\n        long onesMin = ones;\n        long zerosMin = zeros;\n   \
    \     while (onesMax - onesMin > zerosMax - zerosMin) {\n            long onesMaxNext\
    \ = onesMax;\n            long zerosMaxNext = zerosMax;\n            onesMax =\
    \ ones;\n            zerosMax = zeros;\n            ones = onesMaxNext;\n    \
    \        zeros = zerosMaxNext;\n        }\n        while (onesMax - onesMin <\
    \ zerosMax - zerosMin) {\n            long onesMinNext = onesMin;\n          \
    \  long zerosMinNext = zerosMin;\n            onesMin = ones;\n            zerosMin\
    \ = zeros;\n            ones = onesMinNext;\n            zeros = zerosMinNext;\n\
    \        }\n        Collections.sort(result, new Comparator<Long>() {\n      \
    \      public int compare(Long o1, Long o2) {\n                if (o1 == 1l) return\
    \ o2 == 1l ? 0 : -1;\n                if (o1 == 0l) return o2 == 0l ? 0 : 1;\n\
    \                return Long.compare(o1, o2);\n            }\n        });\n  \
    \      return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            if (l == 10l) tens++;\n            if (l == 100l)\
    \ hundreds++;\n            if (l == 1000l) thousands++;\n        }\n        long\
    \ onesMax = ones;\n        long tensMax = tens;\n        long hundredsMax = hundreds;\n\
    \        long thousandsMax = thousands;\n        if (onesMax > tensMax) onesMax\
    \ = tensMax;\n        if (onesMax > hundredsMax) onesMax = hundredsMax;\n    \
    \    if (onesMax > thousandsMax) onesMax = thousandsMax;\n        if (tensMax\
    \ > hundredsMax) tensMax = hundredsMax;\n        if (tensMax > thousandsMax) tensMax\
    \ = thousandsMax;\n        if (hundredsMax > thousandsMax) hundredsMax = thousandsMax;\n\
    \        if (onesMax < tensMax) onesMax = tensMax;\n        if (onesMax < hundredsMax)\
    \ onesMax = hundredsMax;\n        if (onesMax < thousandsMax) onesMax = thousandsMax;\n\
    \        if (tensMax < hundredsMax) tensMax = hundredsMax;\n        if (tensMax\
    \ < thousandsMax) tensMax = thousandsMax;\n        if (hundredsMax < thousandsMax)\
    \ hundredsMax = thousandsMax;\n        if (onesMax > onesMax) onesMax = onesMax;\n\
    \        if (tensMax > tensMax) tensMax = tensMax;\n        if (hundredsMax >\
    \ hundredsMax) hundredsMax = hundredsMax;\n        if (thousandsMax > thousandsMax)\
    \ thousandsMax = thousandsMax;\n        if (onesMax > tensMax) onesMax = tensMax;\n\
    \        if (onesMax > hundredsMax) onesMax = hundredsMax;\n        if (onesMax\
    \ > thousandsMax) onesMax = thousandsMax;\n        if (tensMax > hundredsMax) ",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (long num : arr) {\n            if (num == 1) {\n          \
    \      ones++;\n            } else if (num == 10) {\n                tens++;\n\
    \            } else if (num == 100) {\n                hundreds++;\n         \
    \   } else if (num > 100 && num < 1000) {\n                thousands++;\n    \
    \        }\n        }\n        if (ones > 0) {\n            result.add(ones);\n\
    \        }\n        if (tens > 0) {\n            result.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            result.add(hundreds);\n        }\n \
    \       if (thousands > 0) {\n            result.add(thousands);\n        }\n\
    \        if (ones > 0 || tens > 0 || hundreds > 0 || thousands > 0) {\n      \
    \      Collections.sort(result);\n        }\n        return result;", "      \
    \  ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n     \
    \   long zeros = 0;\n        for (Long l : arr) {\n            if (l == 1l) ones++;\n\
    \            if (l == 0l) zeros++;\n        }\n        if (ones > zeros) {\n \
    \           Collections.sort(arr);\n            for (Long l : arr) {\n       \
    \         if (l == 1l) ones--;\n                if (l == 0l) zeros--;\n      \
    \      }\n        }\n        result.addAll(arr);\n        if (ones > zeros) {\n\
    \            Collections.sort(result);\n            for (Long l : result) {\n\
    \                if (l == 1l) ones--;\n                if (l == 0l) zeros--;\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long ones = 0, tens = 0, hundreds = 0, thousands\
    \ = 0, tenths = 0, oneths = 0;\n        long total = 0;\n        for (long num\
    \ : arr) {\n            total += num;\n            if (num == 1) {\n         \
    \       ones++;\n            } else if (num == 10) {\n                tens++;\n\
    \            } else if (num == 100) {\n                hundreds++;\n         \
    \   } else if (num >= 1000) {\n                thousands++;\n            } else\
    \ if (num >= 100) {\n                tenths++;\n            } else if (num >=\
    \ 10) {\n                oneths++;\n            }\n        }\n        long onesTotal\
    \ = ones * oneths;\n        long tensTotal = tens * tenths;\n        long hundredsTotal\
    \ = hundreds * hundredths;\n        long thousandsTotal = thousands * thousandths;\n\
    \        long totalTotal = total * totalths;\n        long onesTotal2 = ones *\
    \ oneths;\n        long tensTotal2 = tens * tenths;\n        long hundredsTotal2\
    \ = hundreds * hundredths;\n        long thousandsTotal2 = thousands * thousandths;\n\
    \        long totalTotal2 = total * totalths;\n        long onesTotal3 = ones\
    \ * oneths;\n        long tensTotal3 = tens * tenths;\n        long hundredsTotal3\
    \ = hundreds * hundredths;\n        long thousandsTotal3 = thousands * thousandths;\n\
    \        long totalTotal3 = total * totalths;\n        long onesTotal4 = ones\
    \ * oneths;\n        long tensTotal4 = tens * tenths;\n        long hundredsTotal4\
    \ = hundreds * hundredths;\n        long thousandsTotal4 = thousands * thousandths;\n\
    \        long totalTotal4 = total * totalths;\n        long onesTotal5 = ones\
    \ * oneths;\n        long tensTotal5 = tens * tenths;\n        long hundredsTotal5\
    \ = hundreds * hundredths;\n        long thousandsTotal5 = thousands * thousandths;\n\
    \        long totalTotal5 = total * totalths;\n        long onesTotal6 = ones\
    \ * oneths;\n        long tensTotal6 = tens * tenths;\n        long hundredsTotal6\
    \ = hundreds * hundredths;\n        long thousandsTotal6 = thousands * thousandths;\n\
    \        long totalTotal6 = total * totalth", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long ones = 0;\n        long tens = 0;\n \
    \       long hundreds = 0;\n        long thousands = 0;\n        for (Long l :\
    \ arr) {\n            if (l == 1l) ones++;\n            else if (l == 10l) tens++;\n\
    \            else if (l == 100l) hundreds++;\n            else if (l == 1000l)\
    \ thousands++;\n            else result.add(l);\n        }\n        long onesCount\
    \ = ones;\n        long tensCount = tens;\n        long hundredsCount = hundreds;\n\
    \        long thousandsCount = thousands;\n        long maxOnes = ones;\n    \
    \    long maxTens = tens;\n        long maxHundreds = hundreds;\n        long\
    \ maxThousands = thousands;\n        long maxOnesCount = 0;\n        long maxTensCount\
    \ = 0;\n        long maxHundredsCount = 0;\n        long maxThousandsCount = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1l) onesCount--;\n       \
    \     else if (l == 10l) tensCount--;\n            else if (l == 100l) hundredsCount--;\n\
    \            else if (l == 1000l) thousandsCount--;\n            if (onesCount\
    \ > maxOnesCount) maxOnesCount = onesCount;\n            if (tensCount > maxTensCount)\
    \ maxTensCount = tensCount;\n            if (hundredsCount > maxHundredsCount)\
    \ maxHundredsCount = hundredsCount;\n            if (thousandsCount > maxThousandsCount)\
    \ maxThousandsCount = thousandsCount;\n        }\n        long maxOnesCountInt\
    \ = maxOnesCount;\n        long maxTensCountInt = maxTensCount;\n        long\
    \ maxHundredsCountInt = maxHundredsCount;\n        long maxThousandsCountInt =\
    \ maxThousandsCount;\n        long maxOnesCountLong = Long.valueOf(maxOnesCount);\n\
    \        long maxTensCountLong = Long.valueOf(maxTensCount);\n        long maxHundredsCountLong\
    \ = Long.valueOf(maxHundredsCount);\n        long maxThousandsCountLong = Long.valueOf(maxThousandsCount);\n\
    \        long maxOnesCountLongInt = maxOnesCountLong;\n        long maxTensCountLong",
  "        ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n \
    \       long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long l : arr) {\n            ones += l;\n            if (l == 1l)\n\
    \                tens++;\n            else if (l == 10l)\n                tens\
    \ = tens * 10l;\n            else if (l == 100l)\n                hundreds = hundreds\
    \ * 100l;\n            else if (l == 1000l)\n                thousands = thousands\
    \ * 1000l;\n        }\n        long onesCount = 0;\n        long tensCount = 0;\n\
    \        long hundredsCount = 0;\n        long thousandsCount = 0;\n        for\
    \ (Long l : arr) {\n            onesCount += l;\n            if (l == 1l)\n  \
    \              tensCount++;\n            else if (l == 10l)\n                tensCount\
    \ = tensCount * 10l;\n            else if (l == 100l)\n                hundredsCount\
    \ = hundredsCount * 100l;\n            else if (l == 1000l)\n                thousandsCount\
    \ = thousandsCount * 1000l;\n        }\n        long onesCount2 = onesCount *\
    \ ones;\n        long tensCount2 = tensCount * tens;\n        long hundredsCount2\
    \ = hundredsCount * hundreds;\n        long thousandsCount2 = thousandsCount *\
    \ thousands;\n        long onesCount3 = onesCount2 * ones;\n        long tensCount3\
    \ = tensCount2 * tens;\n        long hundredsCount3 = hundredsCount2 * hundreds;\n\
    \        long thousandsCount3 = thousandsCount2 * thousands;\n        long onesCount4\
    \ = onesCount3 * ones;\n        long tensCount4 = tensCount3 * tens;\n       \
    \ long hundredsCount4 = hundredsCount3 * hundreds;\n        long thousandsCount4\
    \ = thousandsCount3 * thousands;\n        long onesCount5 = onesCount4 * ones;\n\
    \        long tensCount5 = tensCount4 * tens;\n        long hundredsCount5 = hundredsCount4\
    \ * hundreds;\n        long thousandsCount5 = thousandsCount4 * thousands;\n \
    \       long onesCount6 = onesCount5 * ones;\n        long tensCount6 = tensCount5\
    \ * tens;\n        long hundredsCount6 = hundredsCount5 * hundreds;\n        long\
    \ thousandsCount6 = thousandsCount5 * thousands;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long ones = 0;\n        long tens = 0;\n     \
    \   long hundreds = 0;\n        long thousands = 0;\n        for (Long l : arr)\
    \ {\n            if (l == 1l) ones++;\n            else if (l == 10l) tens++;\n\
    \            else if (l == 100l) hundreds++;\n            else if (l == 1000l)\
    \ thousands++;\n        }\n        long onesDecimal = ones / 10;\n        long\
    \ tensDecimal = tens / 10;\n        long hundredsDecimal = (hundreds / 10) * 100;\n\
    \        long thousandsDecimal = (thousands / 10) * 1000;\n        long onesDecimalDecimal\
    \ = onesDecimal / 10;\n        long tensDecimalDecimal = tensDecimal / 10;\n \
    \       long hundredsDecimalDecimal = (hundredsDecimal / 10) * 100;\n        long\
    \ thousandsDecimalDecimal = (thousandsDecimal / 10) * 1000;\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimal = (hundredsDecimalDecimal\
    \ / 10) * 100;\n        long thousandsDecimalDecimalDecimal = (thousandsDecimalDecimal\
    \ / 10) * 1000;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimal\
    \ / 10) * 100;\n        long thousandsDecimalDecimalDecimalDecimal = (thousandsDecimalDecimalDecimal\
    \ / 10) * 1000;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = (hundredsDecimalDecimalDecimalDecimal\
    \ / 10) * 100;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = (thousandsDecimalDecimalDecimalDecimal\
    \ / 10) * 1000;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimal / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = tens", "        ArrayList<Long> result = new ArrayList<Long>();\n        long\
    \ ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n        long\
    \ thousands = 0;\n        long tenths = 0;\n        long oneths = 0;\n       \
    \ long tenthss = 0;\n        long onethss = 0;\n        long hundredths = 0;\n\
    \        long thousandths = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long hundredthss = 0;\n        long thousandthss = 0;\n      \
    \  long tenththss = 0;\n        long oneththss = 0;\n        long hundredthths\
    \ = 0;\n        long thousandthths = 0;\n        long tenththss = 0;\n       \
    \ long oneththss = 0;\n        long hundredththss = 0;\n        long thousandththss\
    \ = 0;\n        long tenthththss = 0;\n        long oneththss = 0;\n        long\
    \ hundredththss = 0;\n        long thousandththss = 0;\n        long tenthththss\
    \ = 0;\n        long oneththss = 0;\n        long hundredththss = 0;\n       \
    \ long thousandththss = 0;\n        long tenthththss = 0;\n        long oneththss\
    \ = 0;\n        long hundredththss = 0;\n        long thousandththss = 0;\n  \
    \      long tenthththss = 0;\n        long oneththss = 0;\n        long hundredththss\
    \ = 0;\n        long thousandththss = 0;\n        long tenthththss = 0;\n    \
    \    long oneththss = 0;\n        long hundredththss = 0;\n        long thousandththss\
    \ = 0;\n        long tenthththss = 0;\n        long oneththss = 0;\n        long\
    \ hundredththss = 0;\n        long thousandththss = 0;\n        long tenthththss\
    \ = 0;\n        long oneththss = 0;\n        long hundredththss = 0;\n       \
    \ long thousandththss = 0;\n        long tenthththss = 0;\n        long oneththss\
    \ = 0;\n        long hundredththss = 0;\n        long thousandththss = 0;\n  \
    \      long tenthththss = 0;\n        long oneththss = 0;\n        long hundredththss\
    \ = 0;\n        long thousandththss = 0;\n        long tenthththss = 0;\n    \
    \    long oneththss = 0;\n        long hundredththss = 0;\n        long thous",
  "        ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n \
    \       long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num == 1000) {\n                thousands++;\n       \
    \     } else if (num % 10 == 0) {\n                tenths++;\n            }\n\
    \        }\n        long onesNum = ones;\n        long tensNum = tens;\n     \
    \   long hundredsNum = hundreds;\n        long thousandsNum = thousands;\n   \
    \     long tenthsNum = tenths;\n        if (onesNum > tensNum) {\n           \
    \ onesNum = tensNum;\n        }\n        if (onesNum > hundredsNum) {\n      \
    \      onesNum = hundredsNum;\n        }\n        if (onesNum > thousandsNum)\
    \ {\n            onesNum = thousandsNum;\n        }\n        if (onesNum > tenthsNum)\
    \ {\n            onesNum = tenthsNum;\n        }\n        long onesDecimal = onesNum;\n\
    \        long tensDecimal = tensNum;\n        long hundredsDecimal = hundredsNum;\n\
    \        long thousandsDecimal = thousandsNum;\n        long tenthsDecimal = tenthsNum;\n\
    \        if (onesDecimal > tensDecimal) {\n            onesDecimal = tensDecimal;\n\
    \        }\n        if (onesDecimal > hundredsDecimal) {\n            onesDecimal\
    \ = hundredsDecimal;\n        }\n        if (onesDecimal > thousandsDecimal) {\n\
    \            onesDecimal = thousandsDecimal;\n        }\n        if (onesDecimal\
    \ > tenthsDecimal) {\n            onesDecimal = tenthsDecimal;\n        }\n  \
    \      long onesDecimalNum = onesDecimal;\n        long tensDecimalNum = tensDecimal;\n\
    \        long hundredsDecimalNum = hundredsDecimal;\n        long thousandsDecimalNum\
    \ = thousandsDecimal;\n        long tenthsDecimalNum = tenthsDecimal;\n      \
    \  if (onesDecimalNum > tensDecimalNum) {\n            onesDecimalNum = tensDecimalNum;\n\
    \        }\n        if (onesDecimal", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num > 100 && num < 1000) {\n                thousands++;\n\
    \            }\n        }\n        long onesDecimal = ones * 10l;\n        long\
    \ tensDecimal = tens * 10l;\n        long hundredsDecimal = hundreds * 10l;\n\
    \        long thousandsDecimal = thousands * 10l;\n        long decimal = onesDecimal\
    \ + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long decimalAsc\
    \ = decimal;\n        long decimalDesc = decimal;\n        if (ones > 0) {\n \
    \           decimalAsc = onesDecimal;\n            decimalDesc = onesDecimal -\
    \ ones;\n        } else if (tens > 0) {\n            decimalAsc = tensDecimal;\n\
    \            decimalDesc = tensDecimal - tens;\n        } else if (hundreds >\
    \ 0) {\n            decimalAsc = hundredsDecimal;\n            decimalDesc = hundredsDecimal\
    \ - hundreds;\n        } else if (thousands > 0) {\n            decimalAsc = thousandsDecimal;\n\
    \            decimalDesc = thousandsDecimal - thousands;\n        }\n        Collections.sort(arr,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                if (o1 == o2) {\n                    return 0;\n            \
    \    }\n                if (o1 > o2) {\n                    return 1;\n      \
    \          }\n                return -1;\n            }\n        });\n       \
    \ Collections.sort(arr, new Comparator<Long>() {\n            public int compare(Long\
    \ o1, Long o2) {\n                if (o1 == o2) {\n                    return\
    \ 0;\n                }\n                if (o1 > o2) {\n                    return\
    \ -1;\n                }\n                return 1;\n            }\n        });\n\
    \        Collections.sort(arr, new Comparator<Long>() {\n            public int\
    \ compare(Long o1, Long o2) {\n                if (o1 == o2) {\n             \
    \       return 0;\n                }\n                if (o1 > o2) {\n       \
    \             return 1;\n                }\n                return -1;\n     \
    \       }\n        });\n        Collections.sort(arr, new Comparator<Long>() {\n\
    \            public int compare(Long o1, Long o2) {\n                if (o1 ==\
    \ o2) {\n                    return 0;", "        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long ones = 0, zeros = 0;\n        for (long num : arr)\
    \ {\n            if (num == 1) {\n                ones++;\n            } else\
    \ {\n                zeros++;\n            }\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (long num : arr) {\n\
    \                if (num == 1) {\n                    result.add(1);\n       \
    \         } else {\n                    result.add(0);\n                }\n  \
    \          }\n        } else {\n            Collections.sort(arr);\n         \
    \   for (long num : arr) {\n                if (num == 0) {\n                \
    \    result.add(0);\n                } else {\n                    result.add(1);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> res = new ArrayList<>();\n        long ones = 0;\n       \
    \ long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n  \
    \      long tenths = 0;\n        long oneths = 0;\n        long tenthss = 0;\n\
    \        long onethss = 0;\n        long hundredths = 0;\n        long thousandths\
    \ = 0;\n        long hundredthss = 0;\n        long thousandthss = 0;\n      \
    \  long hundredthss = 0;\n        long thousandthss = 0;\n        long hundredthss\
    \ = 0;\n        long thousandthss = 0;\n        long hundredthss = 0;\n      \
    \  long thousandthss = 0;\n        long hundredthss = 0;\n        long thousandthss\
    \ = 0;\n        long hundredthss = 0;\n        long thousandthss = 0;\n      \
    \  long hundredthss = 0;\n        long thousandthss = 0;\n        long hundredthss\
    \ = 0;\n        long thousandthss = 0;\n        long hundredthss = 0;\n      \
    \  long thousandthss = 0;\n        long hundredthss = 0;\n        long thousandthss\
    \ = 0;\n        long hundredthss = 0;\n        long thousandthss = 0;\n      \
    \  long hundredthss = 0;\n        long thousandthss = 0;\n        long hundredthss\
    \ = 0;\n        long thousandthss = 0;\n        long hundredthss = 0;\n      \
    \  long thousandthss = 0;\n        long hundredthss = 0;\n        long thousandthss\
    \ = 0;\n        long hundredthss = 0;\n        long thousandthss = 0;\n      \
    \  long hundredthss = 0;\n        long thousandthss = 0;\n        long hundredthss\
    \ = 0;\n        long thousandthss = 0;\n        long hundredthss = 0;\n      \
    \  long thousandthss = 0;\n        long hundredthss = 0;\n        long thousandthss\
    \ = 0;\n        long hundredthss = 0;\n        long thousandthss = 0;\n      \
    \  long hundredthss = 0;\n        long thousandthss = 0;\n        long hundredthss\
    \ = 0;\n        long thousandthss = 0;\n        long hundredthss = 0;\n      \
    \  long thousandthss = 0;\n        long hundredthss = 0;\n        long thousandthss\
    \ = 0;\n        long hundredthss = 0;\n        long thousandthss = 0;\n      \
    \  long hundredthss = 0;\n        long thousandthss = 0;\n        long hundredthss\
    \ = 0;\n        ", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long i : arr) {\n            if (i\
    \ % 2 == 0) {\n                ones++;\n            } else if (i % 10 == 0) {\n\
    \                tens++;\n            } else if (i % 100 == 0) {\n           \
    \     hundreds++;\n            } else if (i % 1000 == 0) {\n                thousands++;\n\
    \            }\n        }\n        if (ones > 0) {\n            result.add(ones);\n\
    \        }\n        if (tens > 0) {\n            result.add(tens);\n        }\n\
    \        if (hundreds > 0) {\n            result.add(hundreds);\n        }\n \
    \       if (thousands > 0) {\n            result.add(thousands);\n        }\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long num : arr)\
    \ {\n            if (num == 1) {\n                ones++;\n            } else\
    \ {\n                zeros++;\n            }\n        }\n        long onesDecimal\
    \ = ones / Math.pow(10, arr.size());\n        long zerosDecimal = zeros / Math.pow(10,\
    \ arr.size());\n        long onesDecimalDecimal = onesDecimal / Math.pow(10, arr.size());\n\
    \        long zerosDecimalDecimal = zerosDecimal / Math.pow(10, arr.size());\n\
    \        long onesDecimalDecimalDecimal = onesDecimalDecimal / Math.pow(10, arr.size());\n\
    \        long zerosDecimalDecimalDecimal = zerosDecimalDecimal / Math.pow(10,\
    \ arr.size());\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n        long\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n    \
    \    long zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10, arr.size());\n\
    \        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ arr.size());\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ arr.size());\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.pow(10, arr.size());\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.pow(10,\
    \ arr.size());", "        ArrayList<Long> result = new ArrayList<Long>();\n  \
    \      long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n  \
    \      long thousands = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long tenthsOnes = 0;\n        long onethsOnes = 0;\n        long tenthsTens\
    \ = 0;\n        long onethsTens = 0;\n        long tenthsHundreds = 0;\n     \
    \   long onethsHundreds = 0;\n        long tenthsThousands = 0;\n        long\
    \ onethsThousands = 0;\n        long tenthsOneths = 0;\n        long onethsOneths\
    \ = 0;\n        long tenthsTenths = 0;\n        long onethsTenths = 0;\n     \
    \   long tenthsHundredths = 0;\n        long onethsHundredths = 0;\n        long\
    \ tenthsThousandths = 0;\n        long onethsThousandths = 0;\n        long tenthsOneths=\
    \ 0;\n        long onethsOneths= 0;\n        long tenthsTenths= 0;\n        long\
    \ onethsTenths= 0;\n        long tenthsHundredths= 0;\n        long onethsHundredths=\
    \ 0;\n        long tenthsThousandths= 0;\n        long onethsThousandths= 0;\n\
    \        long tenthsOnethsOnes= 0;\n        long onethsOnethsOnes= 0;\n      \
    \  long tenthsTenthsTens= 0;\n        long onethsTenthsTens= 0;\n        long\
    \ tenthsHundredthsHundreds= 0;\n        long onethsHundredthsHundreds= 0;\n  \
    \      long tenthsThousandthsThousands= 0;\n        long onethsThousandthsThousands=\
    \ 0;\n        long tenthsOnethsOnesOnes= 0;\n        long onethsOnethsOnesOnes=\
    \ 0;\n        long tenthsTenthsTenths= 0;\n        long onethsTenthsTenths= 0;\n\
    \        long tenthsHundredthsHundredths= 0;\n        long onethsHundredthsHundredths=\
    \ 0;\n        long tenthsTh", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenThousands = 0;\n        long oneThousands\
    \ = 0;\n        long oneHundreds = 0;\n        long oneThousandHundreds = 0;\n\
    \        long oneHundredThousands = 0;\n        long oneThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundreds = 0;\n        long oneThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundreds = 0;\n        long\
    \ oneThousandHundredThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundreds = 0;\n\
    \        long oneHundredThousandHundredThousandHundredThousandHundreds = 0;\n\
    \        long oneThousandHundredThousandHundredThousandHundredThousands = 0;\n\
    \        long oneHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneThousandHundredThousandHundred", "        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1l)\n                ones++;\n\
    \            else\n                zeros++;\n        }\n        if (ones > zeros)\
    \ {\n            Collections.sort(arr);\n            for (Long l : arr) {\n  \
    \              if (l == 1l)\n                    res.add(l);\n               \
    \ else\n                    res.add(0l);\n            }\n        } else {\n  \
    \          Collections.sort(arr);\n            for (Long l : arr) {\n        \
    \        if (l == 0l)\n                    res.add(l);\n                else\n\
    \                    res.add(1l);\n            }\n        }\n        return res;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n \
    \       long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1l)\n                ones++;\n\
    \            else if (l == 10l)\n                tens++;\n            else if\
    \ (l == 100l)\n                hundreds++;\n            else if (l == 1000l)\n\
    \                thousands++;\n            else\n                result.add(l);\n\
    \        }\n        long onesCount = 0;\n        long tensCount = 0;\n       \
    \ long hundredsCount = 0;\n        long thousandsCount = 0;\n        for (Long\
    \ l : arr) {\n            if (l == 1l)\n                onesCount++;\n       \
    \     else if (l == 10l)\n                tensCount++;\n            else if (l\
    \ == 100l)\n                hundredsCount++;\n            else if (l == 1000l)\n\
    \                thousandsCount++;\n        }\n        long onesCountInt = onesCount;\n\
    \        long tensCountInt = tensCount;\n        long hundredsCountInt = hundredsCount;\n\
    \        long thousandsCountInt = thousandsCount;\n        if (onesCount > onesCountInt)\
    \ {\n            onesCountInt = onesCount;\n        }\n        if (tensCount >\
    \ tensCountInt) {\n            tensCountInt = tensCount;\n        }\n        if\
    \ (hundredsCount > hundredsCountInt) {\n            hundredsCountInt = hundredsCount;\n\
    \        }\n        if (thousandsCount > thousandsCountInt) {\n            thousandsCountInt\
    \ = thousandsCount;\n        }\n        long onesCountDecimal = onesCountInt /\
    \ 10;\n        long tensCountDecimal = tensCountInt / 10;\n        long hundredsCountDecimal\
    \ = hundredsCountInt / 10;\n        long thousandsCountDecimal = thousandsCountInt\
    \ / 10;\n        long onesCountDecimalDecimal = onesCountInt % 10;\n        long\
    \ tensCountDecimalDecimal = tensCountInt % 10;\n        long hundredsCountDecimalDecimal\
    \ = hundredsCountInt % 10;\n        long thousandsCountDecimalDecimal = thousandsCountInt\
    \ % 10;\n        long onesCountDecimalDecimalDecimal = onesCountInt % 100;\n \
    \       long tensCountDecimalDecimalDecimal = tensCountInt % 100;\n        long\
    \ hundredsCountDecimalDecimalDecimal", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            if (l == 10l) tens++;\n            if (l == 100l)\
    \ hundreds++;\n            if (l == 1000l) thousands++;\n        }\n        long\
    \ onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount = 0;\n\
    \        long thousandsCount = 0;\n        for (Long l : arr) {\n            if\
    \ (l == 1l) onesCount++;\n            if (l == 10l) tensCount++;\n           \
    \ if (l == 100l) hundredsCount++;\n            if (l == 1000l) thousandsCount++;\n\
    \        }\n        long onesCount2 = onesCount;\n        long tensCount2 = tensCount;\n\
    \        long hundredsCount2 = hundredsCount;\n        long thousandsCount2 =\
    \ thousandsCount;\n        if (onesCount > onesCount2) {\n            onesCount2\
    \ = onesCount;\n        }\n        if (tensCount > tensCount2) {\n           \
    \ tensCount2 = tensCount;\n        }\n        if (hundredsCount > hundredsCount2)\
    \ {\n            hundredsCount2 = hundredsCount;\n        }\n        if (thousandsCount\
    \ > thousandsCount2) {\n            thousandsCount2 = thousandsCount;\n      \
    \  }\n        long onesCount3 = onesCount2;\n        long tensCount3 = tensCount2;\n\
    \        long hundredsCount3 = hundredsCount2;\n        long thousandsCount3 =\
    \ thousandsCount2;\n        if (onesCount < onesCount3) {\n            onesCount3\
    \ = onesCount;\n        }\n        if (tensCount < tensCount3) {\n           \
    \ tensCount3 = tensCount;\n        }\n        if (hundredsCount < hundredsCount3)\
    \ {\n            hundredsCount3 = hundredsCount;\n        }\n        if (thousandsCount\
    \ < thousandsCount3) {\n            thousandsCount3 = thousandsCount;\n      \
    \  }\n        long onesCount4 = onesCount3;\n        long tensCount4 = tensCount3;\n\
    \        long hundredsCount4 = hundredsCount3;\n        long thousandsCount4 =\
    \ thousandsCount3;\n        if (ones", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenththth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenththth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethth = 0;\n        long tenthths = 0;\n        long onethths = 0;\n     \
    \   long tenththth = 0;\n        long onethth = 0;\n        long tenthths = 0;\n\
    \        long onethths = 0;\n        long tenththth = 0;\n        long oneth",
  "        ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n \
    \       long zeros = 0;\n        for (long l : arr) {\n            if (l == 1l)\
    \ ones++;\n            else if (l == 0l) zeros++;\n            else result.add(l);\n\
    \        }\n        long onesMax = ones;\n        long zerosMax = zeros;\n   \
    \     long onesMin = ones;\n        long zerosMin = zeros;\n        while (onesMax\
    \ - onesMin > zerosMax - zerosMin) {\n            if (onesMax - onesMin > zerosMax\
    \ - zerosMin) {\n                onesMax--;\n                zerosMax--;\n   \
    \         }\n            else {\n                onesMin++;\n                zerosMin++;\n\
    \            }\n        }\n        while (onesMax - onesMin < zerosMax - zerosMin)\
    \ {\n            if (onesMax - onesMin < zerosMax - zerosMin) {\n            \
    \    onesMax++;\n                zerosMax++;\n            }\n            else\
    \ {\n                onesMin--;\n                zerosMin--;\n            }\n\
    \        }\n        long onesMaxIndex = onesMax;\n        long zerosMaxIndex =\
    \ zerosMax;\n        long onesMinIndex = onesMin;\n        long zerosMinIndex\
    \ = zerosMin;\n        long onesMaxValue = onesMax;\n        long zerosMaxValue\
    \ = zerosMax;\n        long onesMinValue = onesMin;\n        long zerosMinValue\
    \ = zerosMin;\n        while (onesMaxIndex > onesMinIndex) {\n            if (onesMaxValue\
    \ - onesMinValue > zerosMaxValue - zerosMinValue) {\n                onesMaxValue--;\n\
    \                zerosMaxValue--;\n            }\n            else {\n       \
    \         onesMinValue++;\n                zerosMinValue++;\n            }\n \
    \       }\n        while (onesMaxIndex < onesMinIndex) {\n            if (onesMaxValue\
    \ - onesMinValue < zerosMaxValue - zerosMinValue) {\n                onesMaxValue++;\n\
    \                zerosMaxValue++;\n            }\n            else {\n       \
    \         onesMinValue--;\n                zerosMinValue--;\n            }\n \
    \       }\n        long onesMaxIndexValue = onesMaxIndex;\n        long zerosMaxIndexValue\
    \ = zerosMaxIndex;\n        long onesMinIndexValue = onesMinIndex;\n        long\
    \ zerosMinIndexValue = zerosMinIndex;\n        long onesMaxValueValue = onesMaxValue;\n\
    \        long zerosMaxValueValue = zerosMaxValue;\n        long onesMinValueValue\
    \ = onesMinValue;\n        long zerosMinValueValue = zerosMinValue;\n        while\
    \ (onesMaxIndex", "        ArrayList<Long> result = new ArrayList<>();\n     \
    \   long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n     \
    \   long thousands = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long tenth = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long tenthths = 0;\n        long onethths =\
    \ 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long oneth", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long ones = 0;\n        long tens =\
    \ 0;\n        long hundreds = 0;\n        long thousands = 0;\n        for (long\
    \ num : arr) {\n            if (num == 1) {\n                ones++;\n       \
    \     } else if (num == 10) {\n                tens++;\n            } else if\
    \ (num == 100) {\n                hundreds++;\n            } else if (num > 100\
    \ && num < 1000) {\n                thousands++;\n            }\n        }\n \
    \       if (ones > 0) {\n            Collections.sort(arr);\n            for (long\
    \ num : arr) {\n                if (num == 1) {\n                    result.add(num);\n\
    \                } else if (num == 10) {\n                    result.add(num);\n\
    \                } else if (num == 100) {\n                    result.add(num);\n\
    \                } else if (num > 100 && num < 1000) {\n                    result.add(num);\n\
    \                }\n            }\n        } else if (tens > 0) {\n          \
    \  Collections.sort(arr);\n            for (long num : arr) {\n              \
    \  if (num == 1) {\n                    result.add(num);\n                } else\
    \ if (num == 10) {\n                    result.add(num);\n                } else\
    \ if (num == 100) {\n                    result.add(num);\n                } else\
    \ if (num > 100 && num < 1000) {\n                    result.add(num);\n     \
    \           }\n            }\n        } else if (hundreds > 0) {\n           \
    \ Collections.sort(arr);\n            for (long num : arr) {\n               \
    \ if (num == 1) {\n                    result.add(num);\n                } else\
    \ if (num == 10) {\n                    result.add(num);\n                } else\
    \ if (num == 100) {\n                    result.add(num);\n                } else\
    \ if (num > 100 && num < 1000) {\n                    result.add(num);\n     \
    \           }\n            }\n        } else if (thousands > 0) {\n          \
    \  Collections.sort(arr);\n            for (long num : arr) {\n              \
    \  if (num == 1) {\n                    result.add(num);\n                } else\
    \ if (num == 10) {\n                    result.add(num);\n                } else\
    \ if (num == 100) {\n                    result.add(num);\n                } else\
    \ if (num > 100 && num < 1000) {\n                    result.add(num);\n     \
    \           }\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long ones = 0;\n        long tens =\
    \ 0;\n        long hundreds = 0;\n        long thousands = 0;\n        long tenths\
    \ = 0;\n        long oneths = 0;\n        long tenth = 0;\n        long oneth\
    \ = 0;\n        long tenths = 0;\n        long oneths = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long one",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        long tenths = 0;\n        long oneths = 0;\n        long tenth =\
    \ 0;\n        long oneth = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethths = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n  \
    \      long tenththths = 0;\n        long oneththths = 0;\n        long tenththth\
    \ = 0;\n        long oneththth = 0;\n        long tenththths = 0;\n        long\
    \ oneththths = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n\
    \        long tenththths = 0;\n        long oneththths = 0;\n        long tenththth\
    \ = 0;\n        long oneththth = 0;\n        long tenththths = 0;\n        long\
    \ oneththths = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n\
    \        long tenththths = 0;\n        long oneththths = 0;\n        long tenththth\
    \ = 0;\n        long oneththth = 0;\n        long tenththths = 0;\n        long\
    \ oneththths = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n\
    \        long tenththths = 0;\n        long oneththths = 0;\n        long tenththth\
    \ = 0;\n        long oneththth = 0;\n        long tenththths = 0;\n        long\
    \ oneththths = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n\
    \        long tenththths = 0;\n        long oneththths = 0;\n        long tenththth\
    \ = 0;\n        long oneththth = 0;\n        long tenththths = 0;\n        long\
    \ oneththths = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n\
    \        long tenththths = 0;\n        long oneththths = 0;\n        long tenththth\
    \ = 0;\n        long oneththth = 0;\n        long tenththths = 0;\n        long\
    \ oneththths = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n\
    \        ", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ ones = 0;\n        long zeros = 0;\n        for (Long l : arr) {\n         \
    \   if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n        }\n     \
    \   long maxOnes = ones;\n        long maxZeros = zeros;\n        long maxOnesCount\
    \ = 0;\n        long maxZerosCount = 0;\n        for (Long l : arr) {\n      \
    \      if (l == 1l) maxOnesCount++;\n            if (l == 0l) maxZerosCount++;\n\
    \        }\n        long maxOnesCountDiff = maxOnesCount - maxOnes;\n        long\
    \ maxZerosCountDiff = maxZerosCount - maxZeros;\n        if (maxOnesCountDiff\
    \ > maxZerosCountDiff) {\n            Collections.sort(arr, (l, r) -> {\n    \
    \            if (l == 1l) {\n                    if (r == 1l) {\n            \
    \            return 0;\n                    } else {\n                       \
    \ return -1;\n                    }\n                } else if (r == 1l) {\n \
    \                   return 1;\n                } else {\n                    return\
    \ Long.compare(l, r);\n                }\n            });\n        } else {\n\
    \            Collections.sort(arr, (l, r) -> {\n                if (l == 0l) {\n\
    \                    if (r == 0l) {\n                        return 0;\n     \
    \               } else {\n                        return -1;\n               \
    \     }\n                } else if (r == 0l) {\n                    return 1;\n\
    \                } else {\n                    return Long.compare(l, r);\n  \
    \              }\n            });\n        }\n        for (Long l : arr) {\n \
    \           if (l == 1l) ones++;\n            if (l == 0l) zeros++;\n        }\n\
    \        long maxOnesCountDiff2 = maxOnesCount - maxOnes;\n        long maxZerosCountDiff2\
    \ = maxZerosCount - maxZeros;\n        if (maxOnesCountDiff2 > maxZerosCountDiff2)\
    \ {\n            Collections.sort(arr, (l, r) -> {\n                if (l == 1l)\
    \ {\n                    if (r == -1l) {\n                        return 0;\n\
    \                    } else {\n                        return 1;\n           \
    \         }\n                } else if (r == -1l) {\n                    return\
    \ -1;\n                } else {\n                    return Long.compare(l, r);\n\
    \                }\n            });\n        } else {\n            Collections.sort(arr,\
    \ (l, r) -> {\n                if (l == 0l) {\n                    if (r == -1l)\
    \ {\n                        return 0;\n                    } else {\n       \
    \                 return -1;\n                    }\n                } else if\
    \ (r == -1l) {\n                    return 1;\n                } else {\n    \
    \                return Long.compare(l, r);\n                }\n            });\n\
    \        }\n        for (Long l : arr) {\n            if (l == 1l) ones++;\n \
    \           if (l == 0l) zeros", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        long onesSorted = ones;\n        long tensSorted = tens;\n  \
    \      long hundredsSorted = hundreds;\n        long thousandsSorted = thousands;\n\
    \        if (onesSorted > tensSorted) {\n            if (onesSorted > hundredsSorted)\
    \ {\n                if (onesSorted > thousandsSorted) {\n                   \
    \ res.add(onesSorted);\n                    onesSorted = 0;\n                }\n\
    \                res.add(tensSorted);\n                tensSorted = 0;\n     \
    \       }\n            res.add(hundredsSorted);\n            hundredsSorted =\
    \ 0;\n        }\n        if (tensSorted > hundredsSorted) {\n            res.add(tensSorted);\n\
    \            tensSorted = 0;\n        }\n        res.add(thousandsSorted);\n \
    \       thousandsSorted = 0;\n        return res;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long ones = 0;\n        long tens = 0;\n \
    \       long hundreds = 0;\n        long thousands = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthsCount = 0;\n        long onethsCount\
    \ = 0;\n        long tenthsCount2 = 0;\n        long onethsCount2 = 0;\n     \
    \   long tenthsCount3 = 0;\n        long onethsCount3 = 0;\n        long tenthsCount4\
    \ = 0;\n        long onethsCount4 = 0;\n        long tenthsCount5 = 0;\n     \
    \   long onethsCount5 = 0;\n        long tenthsCount6 = 0;\n        long onethsCount6\
    \ = 0;\n        long tenthsCount7 = 0;\n        long onethsCount7 = 0;\n     \
    \   long tenthsCount8 = 0;\n        long onethsCount8 = 0;\n        long tenthsCount9\
    \ = 0;\n        long onethsCount9 = 0;\n        long tenthsCount10 = 0;\n    \
    \    long onethsCount10 = 0;\n        long tenthsCount11 = 0;\n        long onethsCount11\
    \ = 0;\n        long tenthsCount12 = 0;\n        long onethsCount12 = 0;\n   \
    \     long tenthsCount13 = 0;\n        long onethsCount13 = 0;\n        long tenthsCount14\
    \ = 0;\n        long onethsCount14 = 0;\n        long tenthsCount15 = 0;\n   \
    \     long onethsCount15 = 0;\n        long tenthsCount16 = 0;\n        long onethsCount16\
    \ = 0;\n        long tenthsCount17 = 0;\n        long onethsCount17 = 0;\n   \
    \     long tenthsCount18 = 0;\n        long onethsCount18 = 0;\n        long tenthsCount19\
    \ = 0;\n        long onethsCount19 = 0;\n        long tenthsCount20 = 0;\n   \
    \     long onethsCount20 = 0;\n        long tenthsCount21 = 0;\n        long onethsCount21\
    \ = 0;\n        long tenthsCount22 = 0;\n        long onethsCount22 = 0;\n   \
    \     long tenthsCount23 = 0;\n        long onethsCount23 = 0;\n        long tenthsCount24\
    \ = 0;\n        long onethsCount24 = 0;\n        long tenthsCount25 = 0;\n   \
    \     long onethsCount25 = 0;\n        long tenthsCount26 = 0;\n        long onethsCount26\
    \ = 0;\n        long tenthsCount27 = 0;\n        ", "        long ones = 0, zeros\
    \ = 0;\n        for (long l : arr) {\n            if (l == 1l) ones++;\n     \
    \       else if (l == 0l) zeros++;\n        }\n        if (ones > zeros) {\n \
    \           Collections.sort(arr);\n        } else if (zeros > ones) {\n     \
    \       Collections.sort(arr, Comparator.comparingLong(Long::longValue));\n  \
    \      } else {\n            Collections.sort(arr, Comparator.comparingLong(Long::longValue).thenComparingLong(Long::longValue));\n\
    \        }\n        return arr;", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthths = 0;\n        long onethths\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long oneth", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long ones = 0, zeros = 0;\n       \
    \ for (long i : arr) {\n            if (i == 1l) ones++;\n            else if\
    \ (i == 0l) zeros++;\n            else result.add(i);\n        }\n        if (ones\
    \ > zeros) {\n            Collections.sort(result, new Comparator<Long>() {\n\
    \                public int compare(Long o1, Long o2) {\n                    return\
    \ Long.compare(o1, o2);\n                }\n            });\n        } else {\n\
    \            Collections.sort(result, new Comparator<Long>() {\n             \
    \   public int compare(Long o1, Long o2) {\n                    return Long.compare(o2,\
    \ o1);\n                }\n            });\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (long i : arr) {\n            if (i % 2 == 0) {\n          \
    \      ones++;\n            } else if (i % 10 == 0) {\n                tens++;\n\
    \            } else if (i % 100 == 0) {\n                hundreds++;\n       \
    \     } else if (i % 1000 == 0) {\n                thousands++;\n            }\n\
    \        }\n        long onesCount = ones;\n        long tensCount = tens;\n \
    \       long hundredsCount = hundreds;\n        long thousandsCount = thousands;\n\
    \        long onesCount2 = ones;\n        long tensCount2 = tens;\n        long\
    \ hundredsCount2 = hundreds;\n        long thousandsCount2 = thousands;\n    \
    \    long onesCount3 = ones;\n        long tensCount3 = tens;\n        long hundredsCount3\
    \ = hundreds;\n        long thousandsCount3 = thousands;\n        long onesCount4\
    \ = ones;\n        long tensCount4 = tens;\n        long hundredsCount4 = hundreds;\n\
    \        long thousandsCount4 = thousands;\n        long onesCount5 = ones;\n\
    \        long tensCount5 = tens;\n        long hundredsCount5 = hundreds;\n  \
    \      long thousandsCount5 = thousands;\n        long onesCount6 = ones;\n  \
    \      long tensCount6 = tens;\n        long hundredsCount6 = hundreds;\n    \
    \    long thousandsCount6 = thousands;\n        long onesCount7 = ones;\n    \
    \    long tensCount7 = tens;\n        long hundredsCount7 = hundreds;\n      \
    \  long thousandsCount7 = thousands;\n        long onesCount8 = ones;\n      \
    \  long tensCount8 = tens;\n        long hundredsCount8= hundreds;\n        long\
    \ thousandsCount8 = thousands;\n        long onesCount9 = ones;\n        long\
    \ tensCount9 = tens;\n        long hundredsCount9= hundreds;\n        long thousandsCount9\
    \ = thousands;\n        long onesCount10 = ones;\n        long tensCount10 = tens;\n\
    \        long hundredsCount10= hundreds;\n        long thousandsCount10 = thousands;\n\
    \        long onesCount11 = ones;\n        long tensCount11 = tens;\n        long\
    \ hundredsCount11= hundred", "        long ones = 0;\n        long tens = 0;\n\
    \        long hundreds = 0;\n        long thousands = 0;\n        for (Long l\
    \ : arr) {\n            if (l == 1l) ones++;\n            else if (l == 10l) tens++;\n\
    \            else if (l == 100l) hundreds++;\n            else if (l == 1000l)\
    \ thousands++;\n        }\n        long onesDecimal = 0;\n        long tensDecimal\
    \ = 0;\n        long hundredsDecimal = 0;\n        long thousandsDecimal = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1l) onesDecimal++;\n     \
    \       else if (l == 10l) tensDecimal++;\n            else if (l == 100l) hundredsDecimal++;\n\
    \            else if (l == 1000l) thousandsDecimal++;\n        }\n        long\
    \ onesDecimalDecimal = 0;\n        long tensDecimalDecimal = 0;\n        long\
    \ hundredsDecimalDecimal = 0;\n        long thousandsDecimalDecimal = 0;\n   \
    \     for (Long l : arr) {\n            if (l == 1l) onesDecimalDecimal++;\n \
    \           else if (l == 10l) tensDecimalDecimal++;\n            else if (l ==\
    \ 100l) hundredsDecimalDecimal++;\n            else if (l == 1000l) thousandsDecimalDecimal++;\n\
    \        }\n        long onesDecimalDecimalDecimal = 0;\n        long tensDecimalDecimalDecimal\
    \ = 0;\n        long hundredsDecimalDecimalDecimal = 0;\n        long thousandsDecimalDecimalDecimal\
    \ = 0;\n        for (Long l : arr) {\n            if (l == 1l) onesDecimalDecimalDecimal++;\n\
    \            else if (l == 10l) tensDecimalDecimalDecimal++;\n            else\
    \ if (l == 100l) hundredsDecimalDecimalDecimal++;\n            else if (l == 1000l)\
    \ thousandsDecimalDecimalDecimal++;\n        }\n        long onesDecimalDecimalDecimalDecimal\
    \ = 0;\n        long tensDecimalDecimalDecimalDecimal = 0;\n        long hundredsDecimalDecimalDecimalDecimal\
    \ = 0;\n        long thousandsDecimalDecimalDecimalDecimal = 0;\n        for (Long\
    \ l : arr) {\n            if (l == 1l) onesDecimalDecimalDecimalDecimal++;\n \
    \           else if (l == 10l) tensDecimalDecimalDecimalDecimal++;\n         \
    \   else if (l == 100l) hundredsDecimalDecimalDecimalDecimal++;\n            else\
    \ if (l == 1000l) thousandsDecimalDecimalDecimalDecimal++;\n        }\n      \
    \  long onesDecimalDecimalDecimalDecimalDecimal = 0;\n        long tensDecimalDecimalDecimalDecimalDecimal\
    \ = 0;\n        long hundredsDecimalDecimalDecimalDecimal", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        long ones = 0;\n        long tens =\
    \ 0;\n        long hundreds = 0;\n        long thousands = 0;\n        long tenths\
    \ = 0;\n        long oneths = 0;\n        long tenth = 0;\n        long oneth\
    \ = 0;\n        long tenths = 0;\n        long oneths = 0;\n        long oneth\
    \ = 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths\
    \ = 0;\n        long oneths = 0;\n        long oneth = 0;\n        long tenth\
    \ = 0;\n        long oneth = 0;\n        long tenths = 0;\n        long oneths\
    \ = 0;\n        long oneth = 0;\n        long tenth = 0;\n        long oneth =\
    \ 0;\n        long tenths = 0;\n        long oneths = 0;\n        long oneth =\
    \ 0;\n        long tenth = 0;\n        long oneth = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long oneth = 0;\n        long tenth =\
    \ 0;\n        long oneth = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long oneth = 0;\n        long tenth = 0;\n        long oneth = 0;\n\
    \        long tenths = 0;\n        long oneths = 0;\n        long oneth = 0;\n\
    \        long tenth = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenth = 0;\n\
    \        long oneth = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long oneth = 0;\n        long tenth = 0;\n        long oneth = 0;\n \
    \       long tenths = 0;\n        long oneths = 0;\n        long oneth = 0;\n\
    \        long tenth = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenth = 0;\n\
    \        long oneth = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long oneth = 0;\n        long tenth = 0;\n        long oneth = 0;\n \
    \       long tenths = 0;\n        long oneths = 0;\n        long oneth = 0;\n\
    \        long tenth = 0;\n        long oneth = 0;\n        long tenths = 0;\n\
    \        long oneths = 0;\n        long oneth = 0;\n        long tenth = 0;\n\
    \        long oneth = 0;\n        long tenths = 0;\n        long oneths = 0;\n\
    \        long oneth = 0;\n        long tenth = 0;\n        long oneth = 0;\n \
    \       long tenths = 0;\n", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    for (long i : arr) {\n            if (i == 1l) ones++;\n            if (i\
    \ == 0l) zeros++;\n            if (i == max) max = i;\n        }\n        long\
    \ onesMax = ones;\n        long zerosMax = zeros;\n        long maxMax = max;\n\
    \        while (onesMax > zerosMax && maxMax > 0) {\n            if (maxMax <\
    \ onesMax) {\n                result.add(maxMax);\n                maxMax--;\n\
    \            }\n            if (maxMax < zerosMax) {\n                result.add(maxMax);\n\
    \                maxMax--;\n            }\n            if (maxMax < maxMax) {\n\
    \                result.add(maxMax);\n                maxMax--;\n            }\n\
    \            onesMax--;\n            zerosMax--;\n            maxMax--;\n    \
    \    }\n        while (onesMax > zerosMax && maxMax > 0) {\n            if (maxMax\
    \ < onesMax) {\n                result.add(maxMax);\n                maxMax--;\n\
    \            }\n            if (maxMax < zerosMax) {\n                result.add(maxMax);\n\
    \                maxMax--;\n            }\n            if (maxMax < maxMax) {\n\
    \                result.add(maxMax);\n                maxMax--;\n            }\n\
    \            onesMax--;\n            zerosMax--;\n            maxMax--;\n    \
    \    }\n        while (onesMax > zerosMax && maxMax > 0) {\n            if (maxMax\
    \ < onesMax) {\n                result.add(maxMax);\n                maxMax--;\n\
    \            }\n            if (maxMax < zerosMax) {\n                result.add(maxMax);\n\
    \                maxMax--;\n            }\n            if (maxMax < maxMax) {\n\
    \                result.add(maxMax);\n                maxMax--;\n            }\n\
    \            onesMax--;\n            zerosMax--;\n            maxMax--;\n    \
    \    }\n        while (onesMax > zerosMax && maxMax > 0) {\n            if (maxMax\
    \ < onesMax) {\n                result.add(maxMax);\n                maxMax--;\n\
    \            }\n            if (maxMax < zerosMax) {\n                result.add(maxMax);\n\
    \                maxMax--;\n            }\n            if (maxMax < maxMax) {\n\
    \                result.add(maxMax);\n                maxMax--;\n            }\n\
    \            onesMax--;\n            zerosMax--;\n            maxMax--;\n    \
    \    }\n        while (onesMax > zerosMax && maxMax > 0) {\n            if (maxMax\
    \ < onesMax) {\n                result.add(maxMax);\n                maxMax--;\n\
    \            }\n            if (maxMax < zerosMax) {\n                result.",
  "        ArrayList<Long> res = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        long tenths = 0;\n        long oneths = 0;\n        long tenth =\
    \ 0;\n        long oneth = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long one", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0, tens = 0, hundreds = 0, thousands = 0, tenThousands =\
    \ 0;\n        long sum = 0;\n        for (long num : arr) {\n            sum +=\
    \ num;\n            ones += num == 1 ? 1 : 0;\n            tens += num == 10 ?\
    \ 1 : 0;\n            hundreds += num == 100 ? 1 : 0;\n            thousands +=\
    \ num == 1000 ? 1 : 0;\n            tenThousands += num == 10000 ? 1 : 0;\n  \
    \      }\n        long onesSum = ones == 0 ? 0 : ones;\n        long tensSum =\
    \ tens == 0 ? 0 : tens;\n        long hundredsSum = hundreds == 0 ? 0 : hundreds;\n\
    \        long thousandsSum = thousands == 0 ? 0 : thousands;\n        long tenThousandsSum\
    \ = tenThousands == 0 ? 0 : tenThousands;\n        long sumOfAll = sum == 0 ?\
    \ 0 : sum;\n        long onesSumOfAll = onesSum == 0 ? 0 : onesSum;\n        long\
    \ tensSumOfAll = tensSum == 0 ? 0 : tensSum;\n        long hundredsSumOfAll =\
    \ hundredsSum == 0 ? 0 : hundredsSum;\n        long thousandsSumOfAll = thousandsSum\
    \ == 0 ? 0 : thousandsSum;\n        long tenThousandsSumOfAll = tenThousandsSum\
    \ == 0 ? 0 : tenThousandsSum;\n        long sumOfAllOfAll = sumOfAll == 0 ? 0\
    \ : sumOfAll;\n        long onesSumOfAllOfAll = onesSumOfAll == 0 ? 0 : onesSumOfAll;\n\
    \        long tensSumOfAllOfAll = tensSumOfAll == 0 ? 0 : tensSumOfAll;\n    \
    \    long hundredsSumOfAllOfAll = hundredsSumOfAll == 0 ? 0 : hundredsSumOfAll;\n\
    \        long thousandsSumOfAllOfAll = thousandsSumOfAll == 0 ? 0 : thousandsSumOfAll;\n\
    \        long tenThousandsSumOfAllOfAll = tenThousandsSumOfAll == 0 ? 0 : tenThousandsSumOfAll;\n\
    \        long sumOfAllOfAllOfAll = sumOfAllOfAll == 0 ? 0 : sumOfAllOfAll;\n \
    \       long onesSumOfAllOfAllOfAll = onesSumOfAllOfAll == 0 ? 0 : onesSum", " \
    \       ArrayList<Long> res = new ArrayList<>();\n        long ones = 0;\n   \
    \     long zeros = 0;\n        for (long i : arr) {\n            if (i == 1l)\
    \ ones++;\n            else if (i == 0l) zeros++;\n            else res.add(i);\n\
    \        }\n        if (ones > zeros) {\n            Collections.sort(res, new\
    \ Comparator<Long>() {\n                public int compare(Long o1, Long o2) {\n\
    \                    int res = Long.compare(o1, o2);\n                    if (res\
    \ == 0) return Long.compare(ones, zeros);\n                    return res;\n \
    \               }\n            });\n        } else {\n            Collections.sort(res,\
    \ new Comparator<Long>() {\n                public int compare(Long o1, Long o2)\
    \ {\n                    int res = Long.compare(o1, o2);\n                   \
    \ if (res == 0) return Long.compare(zeros, ones);\n                    return\
    \ res;\n                }\n            });\n        }\n        return res;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (long l : arr) {\n            if (l == 1l) ones++;\n       \
    \     else if (l == 10l) tens++;\n            else if (l == 100l) hundreds++;\n\
    \            else if (l == 1000l) thousands++;\n        }\n        long onesDecimal\
    \ = ones / 10;\n        long tensDecimal = tens / 10;\n        long hundredsDecimal\
    \ = hundreds / 10;\n        long thousandsDecimal = thousands / 10;\n        long\
    \ onesDecimalDecimal = onesDecimal / 10;\n        long tensDecimalDecimal = tensDecimal\
    \ / 10;\n        long hundredsDecimalDecimal = hundredsDecimal / 10;\n       \
    \ long thousandsDecimalDecimal = thousandsDecimal / 10;\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 10;\n        long tensDecimalDecimalDecimal = tensDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal /\
    \ 10;\n        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal /\
    \ 10;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal = hundred",
  "        ArrayList<Long> res = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        long tenths = 0;\n        long hundredths = 0;\n        long thousandths\
    \ = 0;\n        long tenthhundredths = 0;\n        long hundredththousandths =\
    \ 0;\n        long thousandthhundredths = 0;\n        long hundredththousandthhundredths\
    \ = 0;\n        long thousandthhundredththousandths = 0;\n        long hundredththousandthhundredththousandths\
    \ = 0;\n        long thousandthhundredththousandthhundredththousandths = 0;\n\
    \        long hundredththousandthhundredththousandthhundredththousandths = 0;\n\
    \        long thousandthhundredththousandthhundredththousandthhundredththousandths\
    \ = 0;\n        long hundredththousandthhundredththousandthhundredththousandthhundredththousandths\
    \ = 1;\n        long thousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandths\
    \ = 1;\n        long hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandths\
    \ = 1;\n        long thousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 1;\n        long hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 1;\n        long thousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 1;\n        long hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 1;\n        long thousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththous",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (Long i : arr) {\n            if (i > 0) {\n               \
    \ ones += i;\n            } else if (i < 0) {\n                tens += i;\n  \
    \          } else if (i < 10) {\n                hundreds += i;\n            }\
    \ else if (i < 100) {\n                thousands += i;\n            }\n      \
    \  }\n        long onesCount = ones;\n        long tensCount = tens;\n       \
    \ long hundredsCount = hundreds;\n        long thousandsCount = thousands;\n \
    \       if (onesCount > hundredsCount) {\n            onesCount = hundredsCount;\n\
    \            tensCount -= onesCount;\n        } else if (onesCount > thousandsCount)\
    \ {\n            onesCount = thousandsCount;\n            tensCount -= onesCount;\n\
    \        }\n        if (tensCount > hundredsCount) {\n            tensCount =\
    \ hundredsCount;\n            hundredsCount -= tensCount;\n        } else if (tensCount\
    \ > thousandsCount) {\n            tensCount = thousandsCount;\n            hundredsCount\
    \ -= tensCount;\n        }\n        if (hundredsCount > thousandsCount) {\n  \
    \          hundredsCount = thousandsCount;\n            thousandsCount -= hundredsCount;\n\
    \        } else if (hundredsCount > onesCount) {\n            hundredsCount =\
    \ onesCount;\n            thousandsCount -= hundredsCount;\n        }\n      \
    \  if (thousandsCount > hundredsCount) {\n            thousandsCount = hundredsCount;\n\
    \            hundredsCount -= thousandsCount;\n        } else if (thousandsCount\
    \ > onesCount) {\n            thousandsCount = onesCount;\n            hundredsCount\
    \ -= thousandsCount;\n        }\n        if (hundredsCount > tensCount) {\n  \
    \          hundredsCount = tensCount;\n            tensCount -= hundredsCount;\n\
    \        } else if (hundredsCount > onesCount) {\n            hundredsCount =\
    \ onesCount;\n            tensCount -= hundredsCount;\n        }\n        if (tensCount\
    \ > onesCount) {\n            tensCount = onesCount;\n            onesCount -=\
    \ tensCount;\n        } else if (tensCount > hundredsCount) {\n            tensCount\
    \ = hundredsCount;\n            hundredsCount -= ", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long ones = 0;\n        long tens = 0;\n \
    \       long hundreds = 0;\n        long thousands = 0;\n        for (Long l :\
    \ arr) {\n            if (l == 1l)\n                ones++;\n            else\
    \ if (l == 10l)\n                tens++;\n            else if (l == 100l)\n  \
    \              hundreds++;\n            else if (l == 1000l)\n               \
    \ thousands++;\n        }\n        if (ones > 0) {\n            Collections.sort(arr);\n\
    \            int i = 0;\n            while (i < arr.size()) {\n              \
    \  if (arr.get(i) == 1l)\n                    result.add(arr.get(i));\n      \
    \          i++;\n            }\n        }\n        if (tens > 0) {\n         \
    \   Collections.sort(arr);\n            int i = 0;\n            while (i < arr.size())\
    \ {\n                if (arr.get(i) == 10l)\n                    result.add(arr.get(i));\n\
    \                i++;\n            }\n        }\n        if (hundreds > 0) {\n\
    \            Collections.sort(arr);\n            int i = 0;\n            while\
    \ (i < arr.size()) {\n                if (arr.get(i) == 100l)\n              \
    \      result.add(arr.get(i));\n                i++;\n            }\n        }\n\
    \        if (thousands > 0) {\n            Collections.sort(arr);\n          \
    \  int i = 0;\n            while (i < arr.size()) {\n                if (arr.get(i)\
    \ == 1000l)\n                    result.add(arr.get(i));\n                i++;\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long ones = 0;\n        long tens = 0;\n \
    \       long hundreds = 0;\n        long thousands = 0;\n        long tenths =\
    \ 0;\n        long oneths = 0;\n        long tenthsCount = 0;\n        long onethsCount\
    \ = 0;\n        long onesCount = 0;\n        long tensCount = 0;\n        long\
    \ hundredsCount = 0;\n        long thousandsCount = 0;\n        long tenthsCount\
    \ = 0;\n        long onethsCount = 0;\n        long onesCount = 0;\n        long\
    \ tensCount = 0;\n        long hundredsCount = 0;\n        long thousandsCount\
    \ = 0;\n        long tenthsCount = 0;\n        long onethsCount = 0;\n       \
    \ long onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount\
    \ = 0;\n        long thousandsCount = 0;\n        long tenthsCount = 0;\n    \
    \    long onethsCount = 0;\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      long tenthsCount = 0;\n        long onethsCount = 0;\n        long onesCount\
    \ = 0;\n        long tensCount = 0;\n        long hundredsCount = 0;\n       \
    \ long thousandsCount = 0;\n        long tenthsCount = 0;\n        long onethsCount\
    \ = 0;\n        long onesCount = 0;\n        long tensCount = 0;\n        long\
    \ hundredsCount = 0;\n        long thousandsCount = 0;\n        long tenthsCount\
    \ = 0;\n        long onethsCount = 0;\n        long onesCount = 0;\n        long\
    \ tensCount = 0;\n        long hundredsCount = 0;\n        long thousandsCount\
    \ = 0;\n        long tenthsCount = 0;\n        long onethsCount = 0;\n       \
    \ long onesCount = 0;\n        long tensCount = 0;\n        long hundredsCount\
    \ = 0;\n        long thousandsCount = 0;\n        long tenthsCount = 0;\n    \
    \    long onethsCount = 0;\n        long onesCount = 0;\n        long tensCount\
    \ = 0;\n        long hundredsCount = 0;\n        long thousandsCount = 0;\n  \
    \      long tenthsCount = 0;\n        long onethsCount = 0;\n        long onesCount\
    \ = 0;\n        long tensCount = 0;\n        long hundredsCount = 0;\n       \
    \ long thousandsCount = 0;\n        long tenthsCount = 0;\n", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long ones = 0;\n        long tens = 0;\n\
    \        long hundreds = 0;\n        long thousands = 0;\n        for (Long l\
    \ : arr) {\n            if (l == 1l) ones++;\n            else if (l == 10l) tens++;\n\
    \            else if (l == 100l) hundreds++;\n            else if (l == 1000l)\
    \ thousands++;\n        }\n        long onesSorted = ones;\n        long tensSorted\
    \ = tens;\n        long hundredsSorted = hundreds;\n        long thousandsSorted\
    \ = thousands;\n        if (onesSorted > tensSorted) {\n            onesSorted\
    \ = tensSorted;\n            hundredsSorted = onesSorted;\n        }\n       \
    \ if (onesSorted > hundredsSorted) {\n            onesSorted = hundredsSorted;\n\
    \            thousandsSorted = onesSorted;\n        }\n        if (onesSorted\
    \ > thousandsSorted) {\n            onesSorted = thousandsSorted;\n          \
    \  hundredsSorted = onesSorted;\n        }\n        if (onesSorted > hundredsSorted)\
    \ {\n            onesSorted = hundredsSorted;\n            thousandsSorted = onesSorted;\n\
    \        }\n        if (onesSorted > thousandsSorted) {\n            onesSorted\
    \ = thousandsSorted;\n            hundredsSorted = onesSorted;\n        }\n  \
    \      if (onesSorted > hundredsSorted) {\n            onesSorted = hundredsSorted;\n\
    \            thousandsSorted = onesSorted;\n        }\n        if (onesSorted\
    \ > thousandsSorted) {\n            onesSorted = thousandsSorted;\n          \
    \  hundredsSorted = onesSorted;\n        }\n        if (onesSorted > hundredsSorted)\
    \ {\n            onesSorted = hundredsSorted;\n            thousandsSorted = onesSorted;\n\
    \        }\n        if (onesSorted > thousandsSorted) {\n            onesSorted\
    \ = thousandsSorted;\n            hundredsSorted = onesSorted;\n        }\n  \
    \      if (onesSorted > hundredsSorted) {\n            onesSorted = hundredsSorted;\n\
    \            thousandsSorted = onesSorted;\n        }\n        if (onesSorted\
    \ > thousandsSorted) {\n            onesSorted = thousandsSorted;\n          \
    \  hundredsSor", "        ArrayList<Long> result = new ArrayList<Long>();\n  \
    \      long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n  \
    \          else result.add(i);\n        }\n        long onesMax = Long.parseLong(Long.toBinaryString(ones));\n\
    \        long zerosMax = Long.parseLong(Long.toBinaryString(zeros));\n       \
    \ long onesMin = Long.parseLong(Long.toBinaryString(onesMax));\n        long zerosMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax));\n        long onesMaxMin =\
    \ Long.parseLong(Long.toBinaryString(onesMax - onesMin));\n        long zerosMaxMin\
    \ = Long.parseLong(Long.toBinaryString(zerosMax - zerosMin));\n        long onesMinMax\
    \ = Long.parseLong(Long.toBinaryString(onesMin - onesMax));\n        long zerosMinMax\
    \ = Long.parseLong(Long.toBinaryString(zerosMin - zerosMax));\n        long onesMinMaxMin\
    \ = Long.parseLong(Long.toBinaryString(onesMinMax - onesMinMax));\n        long\
    \ zerosMinMaxMin = Long.parseLong(Long.toBinaryString(zerosMinMax - zerosMinMax));\n\
    \        long onesMinMaxMinMax = Long.parseLong(Long.toBinaryString(onesMinMaxMin\
    \ - onesMinMax));\n        long zerosMinMaxMinMax = Long.parseLong(Long.toBinaryString(zerosMinMaxMin\
    \ - zerosMinMax));\n        long onesMinMaxMinMaxMin = Long.parseLong(Long.toBinaryString(onesMinMaxMinMax\
    \ - onesMinMax));\n        long zerosMinMaxMinMaxMin = Long.parseLong(Long.toBinaryString(zerosMinMaxMinMax\
    \ - zerosMinMax));\n        long onesMinMaxMinMaxMinMax = Long.parseLong(Long.toBinaryString(onesMinMaxMinMaxMin\
    \ - onesMinMax));\n        long zerosMinMaxMinMaxMinMax = Long.parseLong(Long.toBinaryString(zerosMinMaxMinMaxMin\
    \ - zerosMinMax));\n        long onesMinMaxMinMaxMinMaxMin = Long.parseLong(Long.toBinaryString(onesMinMaxMinMaxMinMax\
    \ - onesMinMax));\n        long zerosMinMaxMinMaxMinMaxMin = Long.parseLong(Long.toBinaryString(zeros",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (long l : arr) {\n            ones += l;\n            tens +=\
    \ (l / 10);\n            hundreds += (l / 100);\n            thousands += (l /\
    \ 1000);\n        }\n        long onesCount = ones;\n        long tensCount =\
    \ tens;\n        long hundredsCount = hundreds;\n        long thousandsCount =\
    \ thousands;\n        long onesCountMinusOnes = ones - 1;\n        long tensCountMinusOnes\
    \ = tens - 1;\n        long hundredsCountMinusOnes = hundreds - 1;\n        long\
    \ thousandsCountMinusOnes = thousands - 1;\n        long onesCountMinusTens =\
    \ ones - 10;\n        long tensCountMinusTens = tens - 10;\n        long hundredsCountMinusTens\
    \ = hundreds - 10;\n        long thousandsCountMinusTens = thousands - 10;\n \
    \       long onesCountMinusHundreds = ones - 100;\n        long tensCountMinusHundreds\
    \ = tens - 100;\n        long hundredsCountMinusHundreds = hundreds - 100;\n \
    \       long thousandsCountMinusHundreds = thousands - 100;\n        long onesCountMinusThousands\
    \ = ones - 1000;\n        long tensCountMinusThousands = tens - 1000;\n      \
    \  long hundredsCountMinusThousands = hundreds - 1000;\n        long thousandsCountMinusThousands\
    \ = thousands - 1000;\n        long onesCountMinusOnesPlusOnes = ones - 10000\
    \ + 1;\n        long tensCountMinusOnesPlusOnes = tens - 10000 + 1;\n        long\
    \ hundredsCountMinusOnesPlusOnes = hundreds - 10000 + 1;\n        long thousandsCountMinusOnesPlusOnes\
    \ = thousands - 10000 + 1;\n        long onesCountMinusOnesPlusTens = ones - 100000;\n\
    \        long tensCountMinusOnesPlusTens = tens - 100000;\n        long hundredsCountMinusOnesPlusTens\
    \ = hundreds - 100000;\n        long thousandsCountMinusOnesPlusTens = thousands\
    \ - 100000;\n        long onesCountMinusOnesPlusHundreds = ones - ", "       \
    \ ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n  \
    \      long zeros = 0;\n        for (long num : arr) {\n            if (num ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long num : arr) {\n                if (num == 1) {\n       \
    \             result.add(num);\n                }\n            }\n        } else\
    \ if (ones < zeros) {\n            Collections.sort(arr);\n            for (long\
    \ num : arr) {\n                if (num == 0) {\n                    result.add(num);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (long num : arr) {\n            if (num == 1) {\n          \
    \      ones++;\n            } else if (num == 10) {\n                tens++;\n\
    \            } else if (num == 100) {\n                hundreds++;\n         \
    \   } else if (num > 100) {\n                thousands++;\n            }\n   \
    \     }\n        long onesCount = 0;\n        long tensCount = 0;\n        long\
    \ hundredsCount = 0;\n        long thousandsCount = 0;\n        for (long num\
    \ : arr) {\n            if (num == 1) {\n                onesCount++;\n      \
    \      } else if (num == 10) {\n                tensCount++;\n            } else\
    \ if (num == 100) {\n                hundredsCount++;\n            } else if (num\
    \ > 100) {\n                thousandsCount++;\n            }\n        }\n    \
    \    long onesCount2 = onesCount * ones;\n        long tensCount2 = tensCount\
    \ * tens;\n        long hundredsCount2 = hundredsCount * hundreds;\n        long\
    \ thousandsCount2 = thousandsCount * thousands;\n        long onesCount3 = onesCount2\
    \ * ones;\n        long tensCount3 = tensCount2 * tens;\n        long hundredsCount3\
    \ = hundredsCount2 * hundreds;\n        long thousandsCount3 = thousandsCount2\
    \ * thousands;\n        long onesCount4 = onesCount3 * ones;\n        long tensCount4\
    \ = tensCount3 * tens;\n        long hundredsCount4 = hundredsCount3 * hundreds;\n\
    \        long thousandsCount4 = thousandsCount3 * thousands;\n        long onesCount5\
    \ = onesCount4 * ones;\n        long tensCount5 = tensCount4 * tens;\n       \
    \ long hundredsCount5 = hundredsCount4 * hundreds;\n        long thousandsCount5\
    \ = thousandsCount4 * thousands;\n        long onesCount6 = onesCount5 * ones;\n\
    \        long tensCount6 = tensCount5 * tens;\n        long hundredsCount6 = hundredsCount5\
    \ * hundreds;\n        long thousandsCount6 = thousandsCount5 * thousands;\n \
    \       long onesCount7 = onesCount6 * ones;\n        long tensCount7 = tensCount6\
    \ * tens;\n        long hundredsCount7 = hundredsCount6 * hundreds;\n        long\
    \ thousand", "        ArrayList<Long> result = new ArrayList<Long>();\n      \
    \  long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n      \
    \  long thousands = 0;\n        for (Long l : arr) {\n            if (l == 1l)\n\
    \                ones++;\n            else if (l == 10l)\n                tens++;\n\
    \            else if (l == 100l)\n                hundreds++;\n            else\
    \ if (l == 1000l)\n                thousands++;\n            else\n          \
    \      result.add(l);\n        }\n        long onesCount = ones;\n        long\
    \ tensCount = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        long onesCount2 = onesCount;\n        long tensCount2\
    \ = tensCount;\n        long hundredsCount2 = hundredsCount;\n        long thousandsCount2\
    \ = thousandsCount;\n        long onesCount3 = onesCount2;\n        long tensCount3\
    \ = tensCount2;\n        long hundredsCount3 = hundredsCount2;\n        long thousandsCount3\
    \ = thousandsCount2;\n        long onesCount4 = onesCount3;\n        long tensCount4\
    \ = tensCount3;\n        long hundredsCount4 = hundredsCount3;\n        long thousandsCount4\
    \ = thousandsCount3;\n        long onesCount5 = onesCount4;\n        long tensCount5\
    \ = tensCount4;\n        long hundredsCount5 = hundredsCount4;\n        long thousandsCount5\
    \ = thousandsCount4;\n        long onesCount6 = onesCount5;\n        long tensCount6\
    \ = tensCount5;\n        long hundredsCount6 = hundredsCount5;\n        long thousandsCount6\
    \ = thousandsCount5;\n        long onesCount7 = onesCount6;\n        long tensCount7\
    \ = tensCount6;\n        long hundredsCount7 = hundredsCount6;\n        long thousandsCount7\
    \ = thousandsCount6;\n        long onesCount8 = onesCount7;\n        long tensCount8\
    \ = tensCount7;\n        long hundredsCount8 = hundredsCount7;\n        long thousandsCount8\
    \ = thousandsCount7;\n        long onesCount9 = onesCount8;\n        long tensCount9\
    \ = tensCount8;\n        long hundredsCount9 = 1000000000;\n        long thousandsCount9\
    \ = 100", "        long ones = 0;\n        long tens = 0;\n        long hundreds\
    \ = 0;\n        long thousands = 0;\n        long tenths = 0;\n        long hundredths\
    \ = 0;\n        long thousandths = 0;\n        long tenthhundredths = 0;\n   \
    \     long hundredththousandths = 0;\n        long thousandthhundredths = 0;\n\
    \        long tenththousandths = 0;\n        long hundredththousandths = 0;\n\
    \        long thousandthhundredths = 0;\n        long tenthhundredththousandths\
    \ = 0;\n        long hundredththousandthhundredths = 0;\n        long thousandthhundredththousandths\
    \ = 0;\n        long tenththousandthhundredththousandths = 0;\n        long hundredththousandthhundredththousandths\
    \ = 0;\n        long thousandthhundredththousandthhundredths = 0;\n        long\
    \ tenthhundredththousandthhundredththousandths = 0;\n        long hundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long thousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long tenththousandthhundredththousandthhundredththousandthhundredththousandths\
    \ = 0;\n        long hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long thousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long tenthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long hundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long thousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousandthhundredths\
    \ = 0;\n        long tenththousandthhundredththousandthhundredththousandthhundredththousandthhundredththousand",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        long tenths = 0;\n        long oneths = 0;\n        long tenth =\
    \ 0;\n        long oneth = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthths\
    \ = 0;\n        long onethths = 0;\n        long tenththth = 0;\n        long\
    \ onethths = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n  \
    \      long tenththths = 0;\n        long oneththths = 0;\n        long tenththth\
    \ = 0;\n        long oneththth = 0;\n        long tenththths = 0;\n        long\
    \ oneththths = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n\
    \        long tenththths = 0;\n        long oneththths = 0;\n        long tenththth\
    \ = 0;\n        long oneththth = 0;\n        long tenththths = 0;\n        long\
    \ oneththths = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n\
    \        long tenththths = 0;\n        long oneththths = 0;\n        long tenththth\
    \ = 0;\n        long oneththth = 0;\n        long tenththths = 0;\n        long\
    \ oneththths = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n\
    \        long tenththths = 0;\n        long oneththths = 0;\n        long tenththth\
    \ = 0;\n        long oneththth = 0;\n        long tenththths = 0;\n        long\
    \ oneththths = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n\
    \        long tenththths = 0;\n        long oneththths = 0;\n        long tenththth\
    \ = 0;\n        long oneththth = 0;\n        long tenththths = 0;\n        long\
    \ oneththths = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n\
    \        long tenththths = 0;\n        long oneththths = 0;\n        long tenththth\
    \ = 0;\n        long oneththth = 0;\n        long tenththths = 0;\n        long\
    \ oneththths = 0;\n        long tenththth = 0;\n        long oneththth = 0;\n\
    \        ", "        ArrayList<Long> result = new ArrayList<>();\n        long\
    \ ones = 0, zeros = 0;\n        for (long num : arr) {\n            if (num ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n        }\n        if (ones > zeros) {\n            Collections.sort(arr);\n\
    \            for (long num : arr) {\n                if (num == 1) {\n       \
    \             ones--;\n                } else {\n                    zeros--;\n\
    \                }\n            }\n        }\n        for (long num : arr) {\n\
    \            if (num == 1) {\n                ones++;\n            } else {\n\
    \                zeros++;\n            }\n        }\n        Collections.sort(arr);\n\
    \        for (long num : arr) {\n            if (num == 1) {\n               \
    \ ones--;\n            } else {\n                zeros--;\n            }\n   \
    \     }\n        for (long num : arr) {\n            if (num == 1) {\n       \
    \         ones++;\n            } else {\n                zeros++;\n          \
    \  }\n        }\n        for (long num : arr) {\n            if (num == 1) {\n\
    \                ones--;\n            } else {\n                zeros--;\n   \
    \         }\n        }\n        for (long num : arr) {\n            if (num ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros--;\n\
    \            }\n        }\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones--;\n            } else {\n                zeros--;\n\
    \            }\n        }\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else {\n                zeros--;\n\
    \            }\n        }\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones--;\n            } else {\n                zeros--;\n\
    \            }\n        }\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else {\n                zeros--;\n\
    \            }\n        }\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones--;\n            } else {\n                zeros--;\n\
    \            }\n        }\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else {\n                zeros--;\n\
    \            }\n        }\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones--;\n            } else {\n                zeros--;\n\
    \            }\n        }\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else {\n                zeros--;\n\
    \            }\n        }\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones--;\n            } else {\n                zeros--;\n\
    \            }\n        }\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else {\n                zeros--;\n\
    \            }\n        }\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long num : arr) {\n            if (num\
    \ == 1) {\n                ones++;\n            } else if (num == 10) {\n    \
    \            tens++;\n            } else if (num == 100) {\n                hundreds++;\n\
    \            } else if (num == 1000) {\n                thousands++;\n       \
    \     } else {\n                throw new RuntimeException(\"Invalid input\");\n\
    \            }\n        }\n        long onesDecimal = ones / 10;\n        long\
    \ tensDecimal = tens / 10;\n        long hundredsDecimal = (hundreds / 10) * 100;\n\
    \        long thousandsDecimal = (thousands / 10) * 1000;\n        long decimal\
    \ = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n        long\
    \ maxDecimal = decimal;\n        long minDecimal = decimal;\n        long maxOnes\
    \ = 0;\n        long minOnes = 0;\n        for (long num : arr) {\n          \
    \  if (num == 1) {\n                maxOnes++;\n            } else if (num ==\
    \ 10) {\n                minOnes++;\n            } else {\n                long\
    \ tempDecimal = num / 10;\n                if (tempDecimal > maxDecimal) {\n \
    \                   maxDecimal = tempDecimal;\n                } else if (tempDecimal\
    \ < minDecimal) {\n                    minDecimal = tempDecimal;\n           \
    \     }\n            }\n        }\n        long maxOnesDecimal = maxOnes / 10;\n\
    \        long minOnesDecimal = minOnes / 10;\n        long maxDecimalDecimal =\
    \ maxDecimal / 10;\n        long minDecimalDecimal = minDecimal / 10;\n      \
    \  long maxDecimalDecimalDecimal = maxDecimalDecimal / 10;\n        long minDecimalDecimalDecimal\
    \ = minDecimalDecimal / 10;\n        long maxDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimal = minDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long minDecimalDecimalDecimalDecimalDecimalDecimal = minDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long maxDecimalDecimalDecimalDecimalDecimalDecimal = maxDecimalDecimalDecimalDecimalDecimalDe",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        long tenths = 0;\n        long oneths = 0;\n        long tenth =\
    \ 0;\n        long oneth = 0;\n        long tenths = 0;\n        long oneths =\
    \ 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthths = 0;\n        long onethths = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long onethth = 0;\n        long tenthth = 0;\n        long onethth\
    \ = 0;\n        long tenthth = 0;\n        long onethth = 0;\n        long tenthth\
    \ = 0;\n        long one", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        for (long i : arr) {\n\
    \            if (i == 1l) ones++;\n            else if (i == 0l) zeros++;\n  \
    \      }\n        if (ones > zeros) {\n            Collections.sort(arr);\n  \
    \          for (long i : arr) {\n                if (i == 1l) result.add((long)i);\n\
    \                else if (i == 0l) result.add((long)-i);\n            }\n    \
    \    } else {\n            Collections.sort(arr);\n            for (long i : arr)\
    \ {\n                if (i == 0l) result.add((long)i);\n                else if\
    \ (i == 1l) result.add((long)-i);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (long num : arr) {\n            if (num == 1) {\n          \
    \      ones++;\n            } else if (num == 10) {\n                tens++;\n\
    \            } else if (num == 100) {\n                hundreds++;\n         \
    \   } else if (num > 100 && num < 1000) {\n                thousands++;\n    \
    \        }\n        }\n        if (ones > 0) {\n            Collections.sort(arr);\n\
    \            result.addAll(arr);\n        } else if (tens > 0) {\n           \
    \ Collections.sort(arr);\n            result.addAll(arr);\n        } else if (hundreds\
    \ > 0) {\n            Collections.sort(arr);\n            result.addAll(arr);\n\
    \        } else if (thousands > 0) {\n            Collections.sort(arr);\n   \
    \         result.addAll(arr);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        for (Long l : arr) {\n            if (l == 1l) ones++;\n            else\
    \ if (l == 0l) zeros++;\n            else result.add(l);\n        }\n        long\
    \ onesMax = ones;\n        long zerosMax = zeros;\n        long onesMin = ones;\n\
    \        long zerosMin = zeros;\n        long onesMaxMin = ones;\n        long\
    \ zerosMaxMin = zeros;\n        long onesMaxMax = ones;\n        long zerosMaxMax\
    \ = zeros;\n        long onesMaxMinMax = ones;\n        long zerosMaxMinMax =\
    \ zeros;\n        long onesMaxMaxMin = ones;\n        long zerosMaxMaxMin = zeros;\n\
    \        long onesMaxMinMaxMin = ones;\n        long zerosMaxMinMaxMin = zeros;\n\
    \        long onesMaxMinMaxMaxMin = ones;\n        long zerosMaxMinMaxMaxMin =\
    \ zeros;\n        long onesMaxMinMaxMaxMaxMin = ones;\n        long zerosMaxMinMaxMaxMin\
    \ = zeros;\n        long onesMaxMinMaxMaxMaxMax = ones;\n        long zerosMaxMinMaxMaxMax\
    \ = zeros;\n        long onesMaxMinMaxMaxMaxMax = ones;\n        long zerosMaxMinMaxMaxMax\
    \ = zeros;\n        long onesMaxMinMaxMaxMaxMax = ones;\n        long zerosMaxMinMaxMaxMax\
    \ = zeros;\n        long onesMaxMinMaxMaxMaxMax = ones;\n        long zerosMaxMinMaxMaxMax\
    \ = zeros;\n        long onesMaxMinMaxMaxMaxMax = ones;\n        long zerosMaxMinMaxMaxMax\
    \ = zeros;\n        long onesMaxMinMaxMaxMaxMax = ones;\n        long zerosMaxMinMaxMaxMax\
    \ = zeros;\n        long onesMaxMinMaxMaxMaxMax = ones;\n        long zerosMaxMinMaxMaxMax\
    \ = zeros;\n        long onesMaxMinMaxMaxMaxMax = ones;\n        long zerosMaxMinMaxMaxMax\
    \ = zeros;\n        long onesMaxMinMaxMaxMaxMax = ones;\n        long zerosMaxMinMaxMaxMax\
    \ = zeros;\n        long onesMaxMinMaxMaxMaxMax = ones;\n        long zerosMaxMinMaxMaxMax\
    \ = zeros;\n        long onesMaxMinMaxMaxMaxMax", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long ones = 0;\n        long tens = 0;\n \
    \       long hundreds = 0;\n        long thousands = 0;\n        for (long num\
    \ : arr) {\n            if (num == 1) {\n                ones++;\n           \
    \ } else if (num == 10) {\n                tens++;\n            } else if (num\
    \ == 100) {\n                hundreds++;\n            } else if (num > 100) {\n\
    \                thousands++;\n            }\n        }\n        long onesNum\
    \ = ones;\n        long tensNum = tens;\n        long hundredsNum = hundreds;\n\
    \        long thousandsNum = thousands;\n        if (onesNum > 0) {\n        \
    \    onesNum *= 100;\n        }\n        if (tensNum > 0) {\n            tensNum\
    \ *= 10;\n        }\n        if (hundredsNum > 0) {\n            hundredsNum *=\
    \ 100;\n        }\n        if (thousandsNum > 0) {\n            thousandsNum *=\
    \ 1000;\n        }\n        long onesNum2 = onesNum;\n        long tensNum2 =\
    \ tensNum;\n        long hundredsNum2 = hundredsNum;\n        long thousandsNum2\
    \ = thousandsNum;\n        if (onesNum2 > 0) {\n            onesNum2 *= 100;\n\
    \        }\n        if (tensNum2 > 0) {\n            tensNum2 *= 10;\n       \
    \ }\n        if (hundredsNum2 > 0) {\n            hundredsNum2 *= 100;\n     \
    \   }\n        if (thousandsNum2 > 0) {\n            thousandsNum2 *= 1000;\n\
    \        }\n        long onesNum3 = onesNum2;\n        long tensNum3 = tensNum2;\n\
    \        long hundredsNum3 = hundredsNum2;\n        long thousandsNum3 = thousandsNum2;\n\
    \        if (onesNum3 > 0) {\n            onesNum3 *= 100;\n        }\n      \
    \  if (tensNum3 > 0) {\n            tensNum3 *= 10;\n        }\n        if (hundredsNum3\
    \ > 0) {\n            hundredsNum3 *= 100;\n        }\n        if (thousandsNum3\
    \ > 0) {\n            thousandsNum3 *= 1000;\n        }\n        long onesNum4\
    \ = onesNum3;\n        long tensNum4 = tensNum3;\n        long hundredsNum4 =\
    \ hundredsNum3;\n        long thousandsNum4 = thousandsNum3;\n        if (onesNum4\
    \ > 0) {\n            onesNum4 *= 100;\n        }\n        if (tensNum4 > 0) {\n\
    \            ten", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (Long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            if (l == 10l) tens++;\n            if (l == 100l)\
    \ hundreds++;\n            if (l == 1000l) thousands++;\n        }\n        long\
    \ onesDecimal = ones / 10;\n        long tensDecimal = tens / 10;\n        long\
    \ hundredsDecimal = hundreds / 10;\n        long thousandsDecimal = thousands\
    \ / 10;\n        long onesDecimalDecimal = onesDecimal / 10;\n        long tensDecimalDecimal\
    \ = tensDecimal / 10;\n        long hundredsDecimalDecimal = hundredsDecimal /\
    \ 10;\n        long thousandsDecimalDecimal = thousandsDecimal / 10;\n       \
    \ long onesDecimalDecimalDecimal = onesDecimalDecimal / 10;\n        long tensDecimalDecimalDecimal\
    \ = tensDecimalDecimal / 10;\n        long hundredsDecimalDecimalDecimal = hundredsDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimal = thousandsDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimal = hundredsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long thousandsDecimalDecimalDecimalDecimalDecimal = thousandsDecimalDecimalDecimalDecimal\
    \ / 10;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long tensDecimalDecimalDecimalDecimalDecimalDecimal = tensDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10;\n        long hundredsDecimalDecimalDecimalDecimalDecimalDecimal = hundred",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (Long i : arr) {\n            if (i.longValue() == 1) {\n  \
    \              ones++;\n            } else if (i.longValue() == 10) {\n      \
    \          tens++;\n            } else if (i.longValue() == 100) {\n         \
    \       hundreds++;\n            } else if (i.longValue() == 1000) {\n       \
    \         thousands++;\n            }\n        }\n        long onesCount = ones;\n\
    \        long tensCount = tens;\n        long hundredsCount = hundreds;\n    \
    \    long thousandsCount = thousands;\n        if (onesCount > tensCount) {\n\
    \            onesCount = tensCount;\n        }\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n        }\n        if (onesCount\
    \ > thousandsCount) {\n            onesCount = thousandsCount;\n        }\n  \
    \      if (tensCount > hundredsCount) {\n            tensCount = hundredsCount;\n\
    \        }\n        if (tensCount > thousandsCount) {\n            tensCount =\
    \ thousandsCount;\n        }\n        if (hundredsCount > thousandsCount) {\n\
    \            hundredsCount = thousandsCount;\n        }\n        if (onesCount\
    \ == 0) {\n            result.add(0l);\n        } else if (onesCount == 1) {\n\
    \            result.add(1l);\n        } else if (onesCount == 2) {\n         \
    \   result.add(2l);\n        } else if (onesCount == 3) {\n            result.add(3l);\n\
    \        } else if (onesCount == 4) {\n            result.add(4l);\n        }\
    \ else if (onesCount == 5) {\n            result.add(5l);\n        } else if (onesCount\
    \ == 6) {\n            result.add(6l);\n        } else if (onesCount == 7) {\n\
    \            result.add(7l);\n        } else if (onesCount == 8) {\n         \
    \   result.add(8l);\n        } else if (onesCount == 9) {\n            result.add(9l);\n\
    \        } else if (onesCount == 10) {\n            result.add(10l);\n       \
    \ } else if (onesCount == 11) {\n            result.add(11l);\n        } else\
    \ if (onesCount == 12) {\n            result.add(12l);\n        } else if (onesCount\
    \ == 13) {\n            result.add(13l);\n        } else if (onesCount == 14)\
    \ {\n            result.add(14l);\n        } else if (onesCount == 15) {\n   \
    \         result.add(15l);\n        } else if (onesCount == 16) {\n          \
    \  result.add(16l);\n        } else if (onesCount == 17) {\n            result.add(17l);\n\
    \        } else if (onesCount == 18) {\n            result.add(18l);", "     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        long tenths = 0;\n        for (long num : arr) {\n            if\
    \ (num == 1) {\n                ones++;\n            } else if (num == 10) {\n\
    \                tens++;\n            } else if (num == 100) {\n             \
    \   hundreds++;\n            } else if (num == 1000) {\n                thousands++;\n\
    \            } else if (num % 10 == 0) {\n                tenths++;\n        \
    \    }\n        }\n        long onesCount = 0;\n        long tensCount = 0;\n\
    \        long hundredsCount = 0;\n        long thousandsCount = 0;\n        long\
    \ tenthsCount = 0;\n        for (long num : arr) {\n            if (num == 1)\
    \ {\n                onesCount++;\n            } else if (num == 10) {\n     \
    \           tensCount++;\n            } else if (num == 100) {\n             \
    \   hundredsCount++;\n            } else if (num == 1000) {\n                thousandsCount++;\n\
    \            } else if (num % 10 == 0) {\n                tenthsCount++;\n   \
    \         }\n        }\n        if (onesCount > ones) {\n            ones = onesCount;\n\
    \        }\n        if (tensCount > tens) {\n            tens = tensCount;\n \
    \       }\n        if (hundredsCount > hundreds) {\n            hundreds = hundredsCount;\n\
    \        }\n        if (thousandsCount > thousands) {\n            thousands =\
    \ thousandsCount;\n        }\n        if (tenthsCount > tenths) {\n          \
    \  tenths = tenthsCount;\n        }\n        long onesCount2 = 0;\n        long\
    \ tensCount2 = 0;\n        long hundredsCount2 = 0;\n        long thousandsCount2\
    \ = 0;\n        long tenthsCount2 = 0;\n        for (long num : arr) {\n     \
    \       if (num == 1) {\n                onesCount2++;\n            } else if\
    \ (num == 10) {\n                tensCount2++;\n            } else if (num ==\
    \ 100) {\n                hundredsCount2++;\n            } else if (num == 1000)\
    \ {\n                thousandsCount2++;\n            } else if (num % 10 == 0)\
    \ {\n                tenthsCount2++;\n            }\n        }\n        if (onesCount2\
    \ > ones) {\n            ones = onesCount2;\n        }\n        if (tensCount2\
    \ > tens) {\n            tens = tensCount2;\n        }\n        if (hundredsCount2\
    \ > hundreds) {\n            hundreds = hundredsCount2;\n        }\n        if\
    \ (thousandsCount2 > thousands) {\n            thousands = thousandsCount", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        long ones = 0;\n\
    \        long tens = 0;\n        long hundreds = 0;\n        long thousands =\
    \ 0;\n        for (long num : arr) {\n            if (num == 1) {\n          \
    \      ones++;\n            } else if (num == 10) {\n                tens++;\n\
    \            } else if (num == 100) {\n                hundreds++;\n         \
    \   } else if (num > 100 && num < 1000) {\n                thousands++;\n    \
    \        }\n        }\n        long onesDecimal = ones * 1000;\n        long tensDecimal\
    \ = tens * 100;\n        long hundredsDecimal = hundreds * 10;\n        long thousandsDecimal\
    \ = thousands * 1;\n        long decimal = onesDecimal + tensDecimal + hundredsDecimal\
    \ + thousandsDecimal;\n        long maxDecimal = decimal;\n        for (long num\
    \ : arr) {\n            if (num == 1) {\n                ones++;\n           \
    \ } else if (num == 10) {\n                tens++;\n            } else if (num\
    \ == 100) {\n                hundreds++;\n            } else if (num > 100 &&\
    \ num < 1000) {\n                thousands++;\n            }\n        }\n    \
    \    long onesDecimal = ones * 1000;\n        long tensDecimal = tens * 100;\n\
    \        long hundredsDecimal = hundreds * 10;\n        long thousandsDecimal\
    \ = thousands * 1;\n        long decimal = onesDecimal + tensDecimal + hundredsDecimal\
    \ + thousandsDecimal;\n        long maxDecimal = decimal;\n        for (long num\
    \ : arr) {\n            if (num == 1) {\n                ones++;\n           \
    \ } else if (num == 10) {\n                tens++;\n            } else if (num\
    \ == 100) {\n                hundreds++;\n            } else if (num > 100 &&\
    \ num < 1000) {\n                thousands++;\n            }\n        }\n    \
    \    long onesDecimal = ones * 1000;\n        long tensDecimal = tens * 100;\n\
    \        long hundredsDecimal = hundreds * 10;\n        long thousandsDecimal\
    \ = thousands * 1;\n        long decimal = onesDecimal + tensDecimal + hundredsDecimal\
    \ + thousandsDecimal;\n        long maxDecimal = decimal;\n        for (long num\
    \ : arr) {\n            if (num == 1) {\n                ones++;\n           \
    \ } else if (num == 10) {\n                tens++;\n            } else if (num\
    \ == 100) {\n                hundreds++;\n            } else if (num > 100 &&\
    \ num < 1000) {\n", "        ArrayList<Long> result = new ArrayList<>();\n   \
    \     long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n   \
    \     long thousands = 0;\n        for (Long l : arr) {\n            if (l ==\
    \ 1l) ones++;\n            else if (l == 10l) tens++;\n            else if (l\
    \ == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n      \
    \  }\n        long onesDecimal = ones / 10;\n        long tensDecimal = tens /\
    \ 10;\n        long hundredsDecimal = (hundreds / 10) * 10;\n        long thousandsDecimal\
    \ = (thousands / 10) * 10;\n        long decimal = onesDecimal + tensDecimal +\
    \ hundredsDecimal + thousandsDecimal;\n        long onesDecimal2 = ones / 100;\n\
    \        long tensDecimal2 = tens / 100;\n        long hundredsDecimal2 = (hundreds\
    \ / 100) * 100;\n        long thousandsDecimal2 = (thousands / 100) * 100;\n \
    \       long decimal2 = onesDecimal2 + tensDecimal2 + hundredsDecimal2 + thousandsDecimal2;\n\
    \        long onesDecimal3 = ones / 1000;\n        long tensDecimal3 = tens /\
    \ 1000;\n        long hundredsDecimal3 = (hundreds / 1000) * 1000;\n        long\
    \ thousandsDecimal3 = (thousands / 1000) * 1000;\n        long decimal3 = onesDecimal3\
    \ + tensDecimal3 + hundredsDecimal3 + thousandsDecimal3;\n        long onesDecimal4\
    \ = ones / 100000;\n        long tensDecimal4 = tens / 100000;\n        long hundredsDecimal4\
    \ = (hundreds / 100000) * 100000;\n        long thousandsDecimal4 = (thousands\
    \ / 100000) * 100000;\n        long decimal4 = onesDecimal4 + tensDecimal4 + hundredsDecimal4\
    \ + thousandsDecimal4;\n        long onesDecimal5 = ones / 10000000;\n       \
    \ long tensDecimal5 = tens / 10000000;\n        long hundredsDecimal5 = (hundreds\
    \ / 1000000) * 1000000;\n        long thousandsDecimal5 = (thousands / 1000000)\
    \ * 1000000;\n        long decimal5 = onesDecimal5 + tensDecimal5 + hundredsDecimal5\
    \ + thousandsDecimal5;\n        long onesDecimal6 = ones / 1000000000;\n     \
    \   long tensDecimal6 = tens / 1000000000;\n        long hundredsDecimal6 = (hundreds\
    \ / 1000000000) * 100000000", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long total = 0;\n        for (Long l : arr)\
    \ {\n            total += l;\n            if (l == 1l) ones++;\n            else\
    \ if (l == 10l) tens++;\n            else if (l == 100l) hundreds++;\n       \
    \     else if (l == 1000l) thousands++;\n        }\n        long onesDecimal =\
    \ ones / total;\n        long tensDecimal = tens / total;\n        long hundredsDecimal\
    \ = hundreds / total;\n        long thousandsDecimal = thousands / total;\n  \
    \      long decimal = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        if (decimal > 0) result.add(decimal);\n        ones = 0;\n        tens\
    \ = 0;\n        hundreds = 0;\n        thousands = 0;\n        total = 0;\n  \
    \      for (Long l : arr) {\n            total += l;\n            if (l == 1l)\
    \ ones++;\n            else if (l == 10l) tens++;\n            else if (l == 100l)\
    \ hundreds++;\n            else if (l == 1000l) thousands++;\n        }\n    \
    \    onesDecimal = ones / total;\n        tensDecimal = tens / total;\n      \
    \  hundredsDecimal = hundreds / total;\n        thousandsDecimal = thousands /\
    \ total;\n        decimal = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        if (decimal > 0) result.add(decimal);\n        ones = 0;\n        tens\
    \ = 0;\n        hundreds = 0;\n        thousands = 0;\n        total = 0;\n  \
    \      for (Long l : arr) {\n            total += l;\n            if (l == 1l)\
    \ ones++;\n            else if (l == 10l) tens++;\n            else if (l == 100l)\
    \ hundreds++;\n            else if (l == 1000l) thousands++;\n        }\n    \
    \    onesDecimal = ones / total;\n        tensDecimal = tens / total;\n      \
    \  hundredsDecimal = hundreds / total;\n        thousandsDecimal = thousands /\
    \ total;\n        decimal = onesDecimal + tensDecimal + hundredsDecimal + thousandsDecimal;\n\
    \        if (decimal > ", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        for (long l : arr) {\n            if (l\
    \ == 1l) ones++;\n            else if (l == 10l) tens++;\n            else if\
    \ (l == 100l) hundreds++;\n            else if (l == 1000l) thousands++;\n   \
    \     }\n        long onesDecimal = ones / Math.pow(10, arr.size());\n       \
    \ long tensDecimal = tens / Math.pow(10, arr.size());\n        long hundredsDecimal\
    \ = (hundreds / Math.pow(10, arr.size())) * Math.pow(10, arr.size());\n      \
    \  long thousandsDecimal = (thousands / Math.pow(10, arr.size())) * Math.pow(10,\
    \ arr.size());\n        long decimal = onesDecimal + tensDecimal + hundredsDecimal\
    \ + thousandsDecimal;\n        long maxDecimal = decimal;\n        long maxDecimalIndex\
    \ = 0;\n        long maxDecimalValue = 0;\n        for (long i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) > maxDecimal) {\n                maxDecimal\
    \ = arr.get(i);\n                maxDecimalIndex = i;\n                maxDecimalValue\
    \ = maxDecimal;\n            }\n        }\n        ArrayList<Long> sortedArr =\
    \ new ArrayList<Long>();\n        sortedArr.add(maxDecimalValue);\n        sortedArr.add(maxDecimalIndex);\n\
    \        for (long i = 0; i < arr.size(); i++) {\n            if (arr.get(i) ==\
    \ maxDecimalValue) {\n                sortedArr.add(arr.get(i));\n           \
    \ }\n        }\n        return sortedArr;", "        ArrayList<Long> result =\
    \ new ArrayList<>();\n        long ones = 0;\n        long tens = 0;\n       \
    \ long hundreds = 0;\n        long thousands = 0;\n        long tenths = 0;\n\
    \        long onehundreds = 0;\n        long onethousands = 0;\n        long onetenths\
    \ = 0;\n        long oneonehundreds = 0;\n        long oneonethousands = 0;\n\
    \        long oneonetenths = 0;\n        long oneoneonehundreds = 0;\n       \
    \ long oneoneonethousands = 0;\n        long oneoneonetenths = 0;\n        long\
    \ oneoneoneonehundreds = 0;\n        long oneoneoneonethousands = 0;\n       \
    \ long oneoneoneonetenths = 0;\n        long oneoneoneoneonehundreds = 0;\n  \
    \      long oneoneoneoneonethousands = 0;\n        long oneoneoneoneonetenths\
    \ = 0;\n        long oneoneoneoneoneonehundreds = 0;\n        long oneoneoneoneonethousands\
    \ = 0;\n        long oneoneoneoneonetenths = 0;\n        long oneoneoneoneoneonehundreds\
    \ = 0;\n        long oneoneoneoneonethousands = 0;\n        long oneoneoneoneonetenths\
    \ = 0;\n        long oneoneoneoneoneonehundreds = 0;\n        long oneoneoneoneonethousands\
    \ = 0;\n        long oneoneoneoneonetenths = 0;\n        long oneoneoneoneoneonehundreds\
    \ = 0;\n        long oneoneoneoneonethousands = 0;\n        long oneoneoneoneonetenths\
    \ = 0;\n        long oneoneoneoneoneonehundreds = 0;\n        long oneoneoneoneonethousands\
    \ = 0;\n        long oneoneoneoneonetenths = 0)))\n        long ones = 0;\n  \
    \      long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n\
    \        long tenths = 0;\n        long onehundreds = 0;\n        long onethousands\
    \ = 0;\n        long onetenths = 0;\n        long oneonehundreds = 0;\n      \
    \  long oneonethousands = 0;\n        long oneonetenths = 0;\n        long oneoneonehundreds\
    \ = 0;\n        long oneoneonethousands = 0;\n        long oneoneonetenths = 0;\n\
    \        long oneoneoneonehundreds = 0;\n        long oneoneoneonethousands =\
    \ 0;\n        long oneoneoneonetenths = 0;\n        long oneoneoneoneonehundreds\
    \ = 0;\n        long oneoneoneoneonethousands = 0;\n        long oneoneoneoneonetenths\
    \ = 0;\n        long oneoneoneone", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n\
    \        long thousands = 0;\n        long tenths = 0;\n        for (Long i :\
    \ arr) {\n            if (i.longValue() == 1) {\n                ones++;\n   \
    \         } else if (i.longValue() == 10) {\n                tens++;\n       \
    \     } else if (i.longValue() == 100) {\n                hundreds++;\n      \
    \      } else if (i.longValue() == 1000) {\n                thousands++;\n   \
    \         } else if (i.longValue() == 10000) {\n                tenths++;\n  \
    \          }\n        }\n        long onesCount = ones;\n        long tensCount\
    \ = tens;\n        long hundredsCount = hundreds;\n        long thousandsCount\
    \ = thousands;\n        long tenthsCount = tenths;\n        if (onesCount > tensCount)\
    \ {\n            onesCount = tensCount;\n        }\n        if (onesCount > hundredsCount)\
    \ {\n            onesCount = hundredsCount;\n        }\n        if (onesCount\
    \ > thousandsCount) {\n            onesCount = thousandsCount;\n        }\n  \
    \      if (onesCount > tenthsCount) {\n            onesCount = tenthsCount;\n\
    \        }\n        long onesCount2 = onesCount;\n        long tensCount2 = tensCount;\n\
    \        long hundredsCount2 = hundredsCount;\n        long thousandsCount2 =\
    \ thousandsCount;\n        long tenthsCount2 = tenthsCount;\n        if (onesCount2\
    \ > tensCount2) {\n            onesCount2 = tensCount2;\n        }\n        if\
    \ (onesCount2 > hundredsCount2) {\n            onesCount2 = hundredsCount2;\n\
    \        }\n        if (onesCount2 > thousandsCount2) {\n            onesCount2\
    \ = thousandsCount2;\n        }\n        if (onesCount2 > tenthsCount2) {\n  \
    \          onesCount2 = tenthsCount2;\n        }\n        long onesCount3 = onesCount2;\n\
    \        long tensCount3 = tensCount2;\n        long hundredsCount3 = hundredsCount2;\n\
    \        long thousandsCount3 = thousandsCount2;\n        long tenthsCount3 =\
    \ tenthsCount2;\n        if (onesCount3 > tensCount3) {\n            onesCount3\
    \ = tensCount3;\n        }\n        if (onesCount3 > hundredsCount3) {\n     \
    \       one"]
stop_tokens:
- "\n    }\n"
