name: HumanEval_54_same_chars
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Check if two words have the same characters.\n    // >>>\
  \ sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>>\
  \ sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"\
  dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"\
  dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"\
  ))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"\
  ))\n    // (false)\n    public static boolean sameChars(String s0, String s1) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(sameChars((\"\
  eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(sameChars((\"abcd\"\
  ), (\"dddddddabc\")) == (true));\n    assert(sameChars((\"dddddddabc\"), (\"abcd\"\
  )) == (true));\n    assert(sameChars((\"eabcd\"), (\"dddddddabc\")) == (false));\n\
  \    assert(sameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(sameChars((\"\
  eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(sameChars((\"aabb\"\
  ), (\"aaccc\")) == (false));\n    }\n\n}\n"
completions: ["        if (s0.length() != s1.length()) {\n            return false;\n\
    \        }\n        Set<Character> set0 = new HashSet<>();\n        Set<Character>\
    \ set1 = new HashSet<>();\n        for (int i = 0; i < s0.length(); i++) {\n \
    \           set0.add(s0.charAt(i));\n            set1.add(s1.charAt(i));\n   \
    \     }\n        return set0.equals(set1);", "        if (s0.length() != s1.length())\
    \ {\n            return false;\n        }\n        char[] c0 = s0.toCharArray();\n\
    \        char[] c1 = s1.toCharArray();\n        for (int i = 0; i < c0.length;\
    \ i++) {\n            if (c0[i] != c1[i]) {\n                return false;\n \
    \           }\n        }\n        return true;", "        Set<Character> set0\
    \ = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n       \
    \ for (int i = 0; i < s0.length(); i++) {\n            set0.add(s0.charAt(i));\n\
    \            set1.add(s1.charAt(i));\n        }\n        return set0.equals(set1);",
  "        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new\
    \ HashSet<>();\n        for(int i = 0; i < s0.length(); i++) {\n            set0.add(s0.charAt(i));\n\
    \            set1.add(s1.charAt(i));\n        }\n        return set0.equals(set1);",
  "        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new\
    \ HashSet<>();\n        for (int i = 0; i < s0.length(); i++) {\n            set0.add(s0.charAt(i));\n\
    \            set1.add(s1.charAt(i));\n        }\n        return set0.equals(set1);",
  "        if (s0.length() != s1.length()) {\n            return false;\n        }\n\
    \        char[] c0 = s0.toCharArray();\n        char[] c1 = s1.toCharArray();\n\
    \        for (int i = 0; i < c0.length; i++) {\n            if (c0[i] != c1[i])\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new\
    \ HashSet<>();\n        for(int i = 0; i < s0.length(); i++) {\n            set0.add(s0.charAt(i));\n\
    \            set1.add(s1.charAt(i));\n        }\n        return set0.equals(set1);",
  "        if (s0.length() != s1.length()) return false;\n        char[] c0 = s0.toCharArray();\n\
    \        char[] c1 = s1.toCharArray();\n        for (int i = 0; i < c0.length;\
    \ i++) {\n            if (c0[i] != c1[i]) return false;\n        }\n        return\
    \ true;", "        Set<Character> set0 = new HashSet<>();\n        Set<Character>\
    \ set1 = new HashSet<>();\n        for (int i = 0; i < s0.length(); i++) {\n \
    \           set0.add(s0.charAt(i));\n            set1.add(s1.charAt(i));\n   \
    \     }\n        return set0.equals(set1);", "        char[] c0 = s0.toCharArray();\n\
    \        char[] c1 = s1.toCharArray();\n        Arrays.sort(c0);\n        Arrays.sort(c1);\n\
    \        return Arrays.equals(c0, c1);", "        if (s0.length() != s1.length())\
    \ {\n            return false;\n        }\n        Map<Character, Integer> map\
    \ = new HashMap<>();\n        for (int i = 0; i < s0.length(); i++) {\n      \
    \      char c = s0.charAt(i);\n            if (map.containsKey(c)) {\n       \
    \         map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c,\
    \ 1);\n            }\n        }\n        for (int i = 0; i < s1.length(); i++)\
    \ {\n            char c = s1.charAt(i);\n            if (map.containsKey(c)) {\n\
    \                map.put(c, map.get(c) - 1);\n            } else {\n         \
    \       return false;\n            }\n        }\n        return map.isEmpty();",
  "        boolean same = true;\n        for (int i = 0; i < s0.length() && same &&\
    \ i < s1.length(); i++) {\n            if (s0.charAt(i) != s1.charAt(i)) {\n \
    \               same = false;\n            }\n        }\n        return same;",
  "        if (s0.length() != s1.length()) {\n            return false;\n        }\n\
    \        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 =\
    \ new HashSet<>();\n        for (int i = 0; i < s0.length(); i++) {\n        \
    \    set0.add(s0.charAt(i));\n            set1.add(s1.charAt(i));\n        }\n\
    \        return set0.equals(set1);", "        boolean sameChars = false;\n   \
    \     char[] c0 = s0.toCharArray();\n        char[] c1 = s1.toCharArray();\n \
    \       if (c0.length != c1.length) {\n            return sameChars;\n       \
    \ }\n        for (int i = 0; i < c0.length; i++) {\n            if (c0[i] != c1[i])\
    \ {\n                return sameChars;\n            }\n        }\n        sameChars\
    \ = true;\n        return sameChars;", "        char[] c0 = s0.toCharArray();\n\
    \        char[] c1 = s1.toCharArray();\n        if (c0.length != c1.length)\n\
    \            return false;\n        for (int i = 0; i < c0.length; i++) {\n  \
    \          if (c0[i] != c1[i])\n                return false;\n        }\n   \
    \     return true;", "        if (s0.length() != s1.length()) {\n            return\
    \ false;\n        }\n        char[] c0 = s0.toCharArray();\n        char[] c1\
    \ = s1.toCharArray();\n        for (int i = 0; i < c0.length; i++) {\n       \
    \     if (c0[i] != c1[i]) {\n                return false;\n            }\n  \
    \      }\n        return true;", "        char[] c0 = s0.toCharArray();\n    \
    \    char[] c1 = s1.toCharArray();\n        if (c0.length != c1.length)\n    \
    \        return false;\n        for (int i = 0; i < c0.length; i++)\n        \
    \    if (c0[i] != c1[i])\n                return false;\n        return true;",
  "        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new\
    \ HashSet<>();\n        for(int i = 0; i < s0.length(); i++) {\n            set0.add(s0.charAt(i));\n\
    \            set1.add(s1.charAt(i));\n        }\n        return set0.equals(set1);",
  "        if (s0.length() != s1.length()) {\n            return false;\n        }\n\
    \        char[] c0 = s0.toCharArray();\n        char[] c1 = s1.toCharArray();\n\
    \        for (int i = 0; i < c0.length; i++) {\n            if (c0[i] != c1[i])\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new\
    \ HashSet<>();\n        for (int i = 0; i < s0.length(); i++) {\n            set0.add(s0.charAt(i));\n\
    \            set1.add(s1.charAt(i));\n        }\n        return set0.equals(set1);"]
stop_tokens:
- "\n    }\n"
