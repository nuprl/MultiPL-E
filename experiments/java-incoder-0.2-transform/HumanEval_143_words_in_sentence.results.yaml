language: java
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int len = word.length();\n            if (len == 1) continue;\n\
    \            boolean isPrime = true;\n            for (int i = 2; i <= Math.sqrt(len);\
    \ i++) {\n                if (len % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                sb.append(word);\n                sb.append(\"\
    \ \");\n            }\n        }\n        return sb.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_51_e6c8.java:45)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            boolean isPrime\
    \ = true;\n            for (int i = 2; i <= Math.sqrt(len); i++) {\n         \
    \       if (len % i == 0) {\n                    isPrime = false;\n          \
    \          break;\n                }\n            }\n            if (isPrime)\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 3 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 4 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 5 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 6 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 7 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 8 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 9 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 10 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 11 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 12 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 13 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 14 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 15 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 16 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 17 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 18 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 19 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 20 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 21 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 22 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 23 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 24 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 25 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 26 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 27 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 28 && isPrime(length)) {\n                result.add(\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyj8r9t6p.java:84: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpyj8r9t6p.java:84: error: ';' expected\n    }\n     ^\n/tmp/tmpyj8r9t6p.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpyj8r9t6p.java:85: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpyj8r9t6p.java:85: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpyj8r9t6p.java:85: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpyj8r9t6p.java:95: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmpyj8r9t6p.java:96: error: reached end of file while parsing\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp2zbeqv.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (len == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (len == 3 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (len == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (len == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (len == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (len == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (len == 9 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7))) {\n                result.add(word);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyt8e6f1h.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpyt8e6f1h.java:52: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpyt8e6f1h.java:52: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpyt8e6f1h.java:52: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpyt8e6f1h.java:52: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpyt8e6f1h.java:62:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 3 && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (length == 5 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (length == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 8 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLet\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps9kanmaa.java:50: error: ')' expected\n            } else if (length\
    \ == 9 && Character.isLet\n                                                  \
    \   ^\n/tmp/tmps9kanmaa.java:51: error: illegal start of statement\n    }\n  \
    \  ^\n/tmp/tmps9kanmaa.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmps9kanmaa.java:52: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmps9kanmaa.java:52: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmps9kanmaa.java:52: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmps9kanmaa.java:52: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmps9kanmaa.java:62:\
    \ error: reached end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) continue;\n            if (isPrime(len)) {\n      \
    \          result.add(word);\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpocalzhuu.java:29: error: cannot find symbol\n            if (isPrime(len))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 3 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 4 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 5 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 6 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 7 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 8 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 9 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 10 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 11 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 12 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 13 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 14 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 15 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 16 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 17 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 18 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 19 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 20 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 21 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 22 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 23 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 24 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 25 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 26 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 27 && isPrime(len)) {\n                result.add(word);\n\
    \            } else if (len == 28 && isPrime(len)) {\n                result.add(\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk80k41cv.java:84: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpk80k41cv.java:84: error: ';' expected\n    }\n     ^\n/tmp/tmpk80k41cv.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpk80k41cv.java:85: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpk80k41cv.java:85: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpk80k41cv.java:85: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpk80k41cv.java:95: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmpk80k41cv.java:96: error: reached end of file while parsing\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len > 1 && len % 2 == 0) {\n             \
    \   result.add(word);\n            }\n        }\n        return result.stream().sorted().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3h3_i7m.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04i5dg08.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    b\") && word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\") && word.startsWith(\"\
    d\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"b\") && word.endsWith(\"z\") && word.startsWith(\"c\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"d\") && word.endsWith(\"z\") && word.startsWith(\"\
    e\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"b\") && word.endsWith(\"z\") && word.startsWith(\"c\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"d\") && word.endsWith(\"z\") && word.startsWith(\"\
    e\") && word.endsWith(\"z\") && word.startsWith(\"f\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\") && word.startsWith(\"\
    d\") && word.endsWith(\"z\") && word.startsWith(\"e\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"f\") && word.endsWith(\"z\") && word.startsWith(\"g\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 2 && word.startsWith(\"a\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm_xzq67w.java:44: error: unclosed string literal\n            }\
    \ else if (length == 2 && word.startsWith(\"a\n                              \
    \                        ^\n/tmp/tmpm_xzq67w.java:44: error: ')' expected\n  \
    \          } else if (length == 2 && word.startsWith(\"a\n                   \
    \                                     ^\n/tmp/tmpm_xzq67w.java:46: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpm_xzq67w.java:46:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpm_xzq67w.java:46: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpm_xzq67w.java:46:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpm_xzq67w.java:46: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpm_xzq67w.java:56: error: reached end of file while parsing\n}\n ^\n\
    8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else if (length == 2 && word.contains(\"o\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.contains(\"e\")) {\n             \
    \   result.add(word);\n            } else if (length == 2 && word.contains(\"\
    s\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.contains(\"t\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.contains(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.contains(\"s\")) {\n             \
    \   result.add(word);\n            } else if (length == 3 && word.contains(\"\
    t\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.contains(\"i\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.contains(\"n\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.contains(\"g\")) {\n             \
    \   result.add(word);\n            } else if (length == 3 && word.contains(\"\
    m\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.contains(\"e\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.contains(\"n\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.contains(\"s\")) {\n             \
    \   result.add(word);\n            } else if (length == 3 && word.contains(\"\
    t\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.contains(\"o\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.contains(\"r\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.contains(\"m\")) {\n             \
    \   result.add(word);\n            } else if (length == 3 && word.contains(\"\
    e\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.contains(\"t\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.contains(\"i\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.contains(\"n\")) {\n             \
    \   result.add(word);\n            } else if (length == 3 && word.contains(\"\
    g\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.contains(\"m\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.contains(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.contains(\"n\")) {\n             \
    \   result.add(word);\n            } else if (length == 3 && word.contains(\"\
    s\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.contains(\"t\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.contains(\"o\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.contains(\"\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsh_usmfi.java:88: error: unclosed string literal\n            }\
    \ else if (length == 3 && word.contains(\"\n                                 \
    \                   ^\n/tmp/tmpsh_usmfi.java:88: error: ')' expected\n       \
    \     } else if (length == 3 && word.contains(\"\n                           \
    \                          ^\n/tmp/tmpsh_usmfi.java:90: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpsh_usmfi.java:90:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpsh_usmfi.java:90: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpsh_usmfi.java:90:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpsh_usmfi.java:90: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpsh_usmfi.java:100: error: reached end of file while parsing\n}\n\
    \ ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            }\n            else if (length == 2 && word.charAt(0) == word.charAt(1))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            }\n            else if (length == 5 && word.charAt(0) == word.charAt(1)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7)) {\n                result.add(word);\n            }\n   \
    \         else if (length == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) {\n                result.add(word);\n\
    \            }\n            else if (length == 7 && word.charAt(0) == word.charAt(1)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10) ==\
    \ word.charAt(11)) {\n                result.add(word);\n            }\n     \
    \       else if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) {\n                result.add(word);\n \
    \           }\n            else if (length == 9 && word.charAt(0) == word.charAt(1)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10) ==\
    \ word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14) ==\
    \ word.charAt(15)) {\n                result.add(word);\n            }\n     \
    \       else if (length == 10 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15) &&\
    \ word.\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdqz4rtq_.java:55: error: <identifier> expected\n            else\
    \ if (length == 10 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15) && word.\n           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     ^\n/tmp/tmpdqz4rtq_.java:57: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmpdqz4rtq_.java:57:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpdqz4rtq_.java:57: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpdqz4rtq_.java:57:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpdqz4rtq_.java:57: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpdqz4rtq_.java:67: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    b\") && word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 5 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\") && word.startsWith(\"\
    d\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 7 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"b\") && word.endsWith(\"z\") && word.startsWith(\"c\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"d\") && word.endsWith(\"z\") && word.startsWith(\"\
    e\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 9 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"b\") && word.endsWith(\"z\") && word.startsWith(\"c\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"d\") && word.endsWith(\"z\") && word.startsWith(\"\
    e\") && word.endsWith(\"z\") && word.startsWith(\"f\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 11 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\") && word.startsWith(\"\
    d\") && word.endsWith(\"z\") && word.startsWith(\"e\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"f\") && word.endsWith(\"z\") && word.startsWith(\"g\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 12 && word.startsWith(\"a\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdi334izh.java:44: error: unclosed string literal\n            }\
    \ else if (length == 12 && word.startsWith(\"a\n                             \
    \                          ^\n/tmp/tmpdi334izh.java:44: error: ')' expected\n\
    \            } else if (length == 12 && word.startsWith(\"a\n                \
    \                                         ^\n/tmp/tmpdi334izh.java:46: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n/tmp/tmpdi334izh.java:46: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpdi334izh.java:46: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpdi334izh.java:46: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpdi334izh.java:46:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpdi334izh.java:56: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\
    \ else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n   \
    \             result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\"\
    ) && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (len == 3 && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (len == 3 && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\"\
    ) && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\")) {\n                result.add(word);\n            } else\
    \ if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnswtvs_i.java:44: error: unclosed string literal\n            }\
    \ else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\n                                                                          \
    \                       ^\n/tmp/tmpnswtvs_i.java:44: error: ')' expected\n   \
    \         } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\n                                                   \
    \                                                ^\n/tmp/tmpnswtvs_i.java:46:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpnswtvs_i.java:46: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpnswtvs_i.java:46: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpnswtvs_i.java:46: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpnswtvs_i.java:46:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpnswtvs_i.java:56: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 3 && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (length == 5 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4))) {\n                result.add(word);\n \
    \           } else if (length == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (length == 8 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp55s0qene.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\
    \ else {\n                for (int i = 2; i <= Math.sqrt(len); i++) {\n      \
    \              if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzj5_inpp.java:42)\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                boolean isPrime = true;\n             \
    \   for (int i = 2; i <= Math.sqrt(length); i++) {\n                    if (length\
    \ % i == 0) {\n                        isPrime = false;\n                    \
    \    break;\n                    }\n                }\n                if (isPrime)\
    \ {\n                    result.add(word);\n                }\n            }\n\
    \        }\n        return result.stream().collect(Collectors.joining(\" \"));\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp631lm4hp.java:46)\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt7n8y6gf.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\
    \ else if (len == 2 && word.charAt(0) == word.charAt(1)) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i < len; i++) {\n     \
    \               if (word.charAt(i) != word.charAt(i - 1)) {\n                \
    \        result.add(word);\n                        break;\n                 \
    \   }\n                }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6aexsqmq.java:44)\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                continue;\n            }\n     \
    \       boolean isPrime = true;\n            for (int i = 2; i <= Math.sqrt(len);\
    \ i++) {\n                if (len % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                result.add(word);\n            }\n        }\n \
    \       return result.stream().collect(Collectors.joining(\" \"));\n    }\n  \
    \  public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len > 1 && len % 2 == 0) {\n             \
    \   result.add(word);\n            }\n        }\n        return result.stream().sorted().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3h3_i7m.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else if (length == 2 && word.contains(\"o\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.contains(\"e\")) {\n             \
    \   result.add(word);\n            } else if (length == 2 && word.contains(\"\
    s\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.contains(\"t\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.contains(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.contains(\"s\")) {\n             \
    \   result.add(word);\n            } else if (length == 3 && word.contains(\"\
    t\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.contains(\"o\")) {\n                result.add(word);\n            }\
    \ else if (length == 4 && word.contains(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.contains(\"s\")) {\n             \
    \   result.add(word);\n            } else if (length == 4 && word.contains(\"\
    t\")) {\n                result.add(word);\n            } else if (length == 4\
    \ && word.contains(\"o\")) {\n                result.add(word);\n            }\
    \ else if (length == 5 && word.contains(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.contains(\"s\")) {\n             \
    \   result.add(word);\n            } else if (length == 5 && word.contains(\"\
    t\")) {\n                result.add(word);\n            } else if (length == 5\
    \ && word.contains(\"o\")) {\n                result.add(word);\n            }\
    \ else if (length == 6 && word.contains(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 6 && word.contains(\"s\")) {\n             \
    \   result.add(word);\n            } else if (length == 6 && word.contains(\"\
    t\")) {\n                result.add(word);\n            } else if (length == 6\
    \ && word.contains(\"o\")) {\n                result.add(word);\n            }\
    \ else if (length == 7 && word.contains(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 7 && word.contains(\"s\")) {\n             \
    \   result.add(word);\n            } else if (length == 7 && word.contains(\"\
    t\")) {\n                result.add(word);\n            } else if (length == 7\
    \ && word.contains(\"o\")) {\n                result.add(word);\n            }\
    \ else if (length == 8 && word.contains(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.contains(\"s\")) {\n             \
    \   result.add(word);\n            } else if (length == 8 && word.contains(\"\
    t\")) {\n                result.add(word);\n            } else if (length == 8\
    \ && word.contains(\"o\")) {\n                result.add(word);\n            }\
    \ else if (length == 9 && word.contains(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 9 && word.contains(\"\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57egsxbp.java:88: error: unclosed string literal\n            }\
    \ else if (length == 9 && word.contains(\"\n                                 \
    \                   ^\n/tmp/tmp57egsxbp.java:90: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 5 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 7 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 11 && word.startsWith(\"a\") && word.endsWith(\"z\")\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\")) {\n                result.add(word);\n            } else\
    \ if (length == 13 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (length == 17 && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeiqqw9dw.java:44: error: ')' expected\n            } else if (length\
    \ == 17 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith\n\
    \                                                                            \
    \                        ^\n/tmp/tmpeiqqw9dw.java:45: error: illegal start of\
    \ statement\n    }\n    ^\n/tmp/tmpeiqqw9dw.java:46: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.equals(\"a\")) continue;\n            if (length == 2 && word.equals(\"\
    e\")) continue;\n            if (length == 2 && word.equals(\"i\")) continue;\n\
    \            if (length == 2 && word.equals(\"o\")) continue;\n            if\
    \ (length == 2 && word.equals(\"u\")) continue;\n            if (length == 3 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 3 && word.equals(\"\
    e\")) continue;\n            if (length == 3 && word.equals(\"i\")) continue;\n\
    \            if (length == 3 && word.equals(\"o\")) continue;\n            if\
    \ (length == 3 && word.equals(\"u\")) continue;\n            if (length == 4 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 4 && word.equals(\"\
    e\")) continue;\n            if (length == 4 && word.equals(\"i\")) continue;\n\
    \            if (length == 4 && word.equals(\"o\")) continue;\n            if\
    \ (length == 4 && word.equals(\"u\")) continue;\n            if (length == 5 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 5 && word.equals(\"\
    e\")) continue;\n            if (length == 5 && word.equals(\"i\")) continue;\n\
    \            if (length == 5 && word.equals(\"o\")) continue;\n            if\
    \ (length == 5 && word.equals(\"u\")) continue;\n            if (length == 6 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 6 && word.equals(\"\
    e\")) continue;\n            if (length == 6 && word.equals(\"i\")) continue;\n\
    \            if (length == 6 && word.equals(\"o\")) continue;\n            if\
    \ (length == 6 && word.equals(\"u\")) continue;\n            if (length == 7 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 7 && word.equals(\"\
    e\")) continue;\n            if (length == 7 && word.equals(\"i\")) continue;\n\
    \            if (length == 7 && word.equals(\"o\")) continue;\n            if\
    \ (length == 7 && word.equals(\"u\")) continue;\n            if (length == 8 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 8 && word.equals(\"\
    e\")) continue;\n            if (length == 8 && word.equals(\"i\")) continue;\n\
    \            if (length == 8 && word.equals(\"o\")) continue;\n            if\
    \ (length == 8 && word.equals(\"u\")) continue;\n            if (length == 9 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 9 && word.equals(\"\
    e\")) continue;\n            if (length == 9 && word.equals(\"i\")) continue;\n\
    \            if (length == 9 && word.equals(\"o\")) continue;\n            if\
    \ (length == 9 && word.equals(\"u\")) continue;\n            if (length == 10\
    \ && \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm5lyusmu.java:70: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpm5lyusmu.java:71: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n            } else if (length == 11 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)) &&\
    \ Character.isLetter(word.charAt(8))) {\n                result.add(word);\n \
    \           } else if (length == 13 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))\
    \ && Character.\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpafdcpciz.java:44: error: <identifier> expected\n            } else\
    \ if (length == 13 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))\
    \ && Character.\n                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                 ^\n/tmp/tmpafdcpciz.java:45:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpafdcpciz.java:46: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\
    \ else {\n                for (int i = 2; i <= Math.sqrt(len); i++) {\n      \
    \              if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzj5_inpp.java:42)\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp2zbeqv.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            }\n            else if (length == 2 && word.contains(\"o\")) {\n\
    \                result.add(word);\n            }\n            else if (length\
    \ == 2 && word.contains(\"e\")) {\n                result.add(word);\n       \
    \     }\n            else if (length == 3 && word.contains(\"s\")) {\n       \
    \         result.add(word);\n            }\n            else if (length == 3 &&\
    \ word.contains(\"t\")) {\n                result.add(word);\n            }\n\
    \            else if (length == 4 && word.contains(\"e\")) {\n               \
    \ result.add(word);\n            }\n            else if (length == 4 && word.contains(\"\
    s\")) {\n                result.add(word);\n            }\n            else if\
    \ (length == 5 && word.contains(\"t\")) {\n                result.add(word);\n\
    \            }\n            else if (length == 6 && word.contains(\"e\")) {\n\
    \                result.add(word);\n            }\n            else if (length\
    \ == 6 && word.contains(\"s\")) {\n                result.add(word);\n       \
    \     }\n            else if (length == 7 && word.contains(\"t\")) {\n       \
    \         result.add(word);\n            }\n            else if (length == 8 &&\
    \ word.contains(\"e\")) {\n                result.add(word);\n            }\n\
    \            else if (length == 8 && word.contains(\"s\")) {\n               \
    \ result.add(word);\n            }\n            else if (length == 9 && word.contains(\"\
    t\")) {\n                result.add(word);\n            }\n            else if\
    \ (length == 10 && word.contains(\"e\")) {\n                result.add(word);\n\
    \            }\n            else if (length == 10 && word.contains(\"s\")) {\n\
    \                result.add(word);\n            }\n            else if (length\
    \ == 11 && word.contains(\"t\")) {\n                result.add(word);\n      \
    \      }\n            else if (length == 12 && word.contains(\"e\")) {\n     \
    \           result.add(word);\n            }\n            else if (length == 12\
    \ && word.contains(\"s\")) {\n                result.add(word);\n            }\n\
    \            else if (length == 13 && word.contains(\"t\")) {\n              \
    \  result.add(word);\n            }\n            else if (length == 14 && word.contains(\"\
    e\")) {\n                result.add(word);\n            }\n            else if\
    \ (length == 14 && word.contains(\"s\")) {\n                result.add(word);\n\
    \            }\n            else if (length == 15 && word.contains(\"t\")) {\n\
    \                result.add(word);\n            }\n            else if (length\
    \ == 16 && word.contains(\"e\")) {\n                result.add(word);\n      \
    \      }\n            else if (length == 16 && word.contains(\"s\")) {\n     \
    \           result.add(word);\n            }\n            else if (length == 17\
    \ && word.\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpknp_qty8.java:103: error: <identifier> expected\n            else\
    \ if (length == 17 && word.\n                                          ^\n/tmp/tmpknp_qty8.java:104:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpknp_qty8.java:105:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoba__dx_.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else {\n                for (int i = 2; i <= Math.sqrt(length); i++) {\n\
    \                    if (length % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8i1yj7nu.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"the\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"an\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"is\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"was\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"were\")) {\n               \
    \ result.add(word);\n            } else if (len == 2 && word.equals(\"am\")) {\n\
    \                result.add(word);\n            } else if (len == 2 && word.equals(\"\
    is\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.equals(\"are\")) {\n                result.add(word);\n            } else\
    \ if (len == 2 && word.equals(\"were\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"will\")) {\n               \
    \ result.add(word);\n            } else if (len == 2 && word.equals(\"would\"\
    )) {\n                result.add(word);\n            } else if (len == 2 && word.equals(\"\
    would\")) {\n                result.add(word);\n            } else if (len ==\
    \ 2 && word.equals(\"will\")) {\n                result.add(word);\n         \
    \   } else if (len == 2 && word.equals(\"is\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"are\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"an\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"an\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"an\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphk90e8m4.java:88: error: ')' expected\n            } else if (len\n\
    \                          ^\n/tmp/tmphk90e8m4.java:89: error: illegal start of\
    \ statement\n    }\n    ^\n/tmp/tmphk90e8m4.java:90: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len > 1 && len % 2 == 0) {\n             \
    \   for (int i = 3; i < Math.sqrt(len); i += 2) {\n                    if (len\
    \ % i == 0) {\n                        result.add(word);\n                   \
    \     break;\n                    }\n                }\n            }\n      \
    \  }\n        return result.stream().collect(Collectors.joining(\" \"));\n   \
    \ }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdmbzdc7o.java:40)\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int n\
    \ = word.length();\n            if (n % 2 == 0) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().sorted().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr1pze5vg.java:35)\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.equals(\"a\")) continue;\n            if (length == 2 && word.equals(\"\
    the\")) continue;\n            if (length == 2 && word.equals(\"is\")) continue;\n\
    \            if (length == 2 && word.equals(\"of\")) continue;\n            if\
    \ (length == 2 && word.equals(\"and\")) continue;\n            if (length == 2\
    \ && word.equals(\"to\")) continue;\n            if (length == 2 && word.equals(\"\
    in\")) continue;\n            if (length == 2 && word.equals(\"that\")) continue;\n\
    \            if (length == 2 && word.equals(\"it\")) continue;\n            if\
    \ (length == 2 && word.equals(\"that\")) continue;\n            if (length ==\
    \ 2 && word.equals(\"have\")) continue;\n            if (length == 2 && word.equals(\"\
    it\")) continue;\n            if (length == 2 && word.equals(\"not\")) continue;\n\
    \            if (length == 2 && word.equals(\"on\")) continue;\n            if\
    \ (length == 2 && word.equals(\"that\")) continue;\n            if (length ==\
    \ 2 && word.equals(\"was\")) continue;\n            if (length == 2 && word.equals(\"\
    it\")) continue;\n            if (length == 2 && word.equals(\"were\")) continue;\n\
    \            if (length == 2 && word.equals(\"you\")) continue;\n            if\
    \ (length == 2 && word.equals(\"not\")) continue;\n            if (length == 2\
    \ && word.equals(\"don't\")) continue;\n            if (length == 2 && word.equals(\"\
    don't\")) continue;\n            if (length == 2 && word.equals(\"don't\")) continue;\n\
    \            if (length == 2 && word.equals(\"don't\")) continue;\n          \
    \  if (length == 2 && word.equals(\"don't\")) continue;\n            if (length\
    \ == 2 && word.equals(\"don't\")) continue;\n            if (length == 2 && word.equals(\"\
    don't\")) continue;\n            if (length == 2 && word.equals(\"don't\")) continue;\n\
    \            if (length == 2 && word.equals(\"don't\")) continue;\n          \
    \  if (length == 2 && word.equals(\"don't\")) continue;\n            if (length\
    \ == 2 && word.equals(\"don't\")) continue;\n            if (length == 2 && word.equals(\"\
    don't\")) continue;\n            if (length == 2 && word.equals(\"don't\")) continue;\n\
    \            if (length == 2 && word.equals(\"don't\")) continue;\n          \
    \  if (length == 2 && word.equals(\"don't\")) continue;\n            if (length\
    \ == 2 && word.equals(\"don't\")) continue;\n            if (length == 2 && word.equals(\"\
    don't\")) continue;\n            if (length == 2 && word.equals(\"don't\")) continue;\n\
    \            if (length == 2 && word.equals(\"don't\")) continue;\n          \
    \  if (length == 2 && word.equals(\"don't\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp__gy7wf3.java:68: error: unclosed string literal\n            if\
    \ (length == 2 && word.equals(\"don't\n                                      \
    \     ^\n/tmp/tmp__gy7wf3.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   }\n            else if (length == 2 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 3 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            }\n            else if (length == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            }\n            else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 8 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6))) {\n                result.add(word);\n\
    \            }\n            else if (length == 9 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7))) {\n                result.add(word);\n\
    \            }\n            else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && \n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp68bj6i_j.java:56: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp68bj6i_j.java:57: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 2 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (len == 3 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            } else if (len == 3 && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (len == 4 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (len == 5 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 5 && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (len == 6 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 6 && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (len == 7 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 7 && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (len == 8 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 8 && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (len == 9 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 9 && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (len == 10 && Character.isLetter(word.charAt(0))) {\n \
    \               result.add(word);\n            } else if (len == 10 && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (len == 11 && Character.isLetter(word.charAt(0))) {\n \
    \               result.add(word);\n            } else if (len == 11 && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n   \
    \ assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaed_ithz.java:68: error: <identifier> expected\n            } else\
    \ if (len == 11 && Character.isLetter(word.charAt(1)) && Character.isLetter(word.\n\
    \                                                                            \
    \                      ^\n/tmp/tmpaed_ithz.java:69: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmpaed_ithz.java:70: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len % 2 == 0) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().sorted().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzne8b9mp.java:35)\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            }\n            else if (length == 2 && isPrime(length)) {\n     \
    \           result.add(word);\n            }\n            else if (length == 3\
    \ && isPrime(length)) {\n                result.add(word);\n            }\n  \
    \          else if (length == 4 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 5 && isPrime(length)) {\n     \
    \           result.add(word);\n            }\n            else if (length == 6\
    \ && isPrime(length)) {\n                result.add(word);\n            }\n  \
    \          else if (length == 7 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 8 && isPrime(length)) {\n     \
    \           result.add(word);\n            }\n            else if (length == 9\
    \ && isPrime(length)) {\n                result.add(word);\n            }\n  \
    \          else if (length == 10 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 11 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 12 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 13 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 14 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 15 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 16 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 17 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 18 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 19 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 20 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 21 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 22 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 23 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 24 && isPrime(length)) {\n                result.add(word);\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpradujg6l.java:101: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else if (length == 2 && word.charAt(0)\
    \ == word.charAt(2)) {\n                result.add(word);\n            } else\
    \ if (length == 3 && word.charAt(0) == word.charAt(2)\n                    &&\
    \ word.charAt(1) == word.charAt(3)) {\n                result.add(word);\n   \
    \         } else if (length == 3 && word.charAt(0) == word.charAt(3)\n       \
    \             && word.charAt(1) == word.charAt(2)) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.charAt(0) == word.charAt(2)\n    \
    \                && word.charAt(1) == word.charAt(3) && word.charAt(2) == word.charAt(4))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ word.charAt(0) == word.charAt(2)\n                    && word.charAt(1) == word.charAt(3)\
    \ && word.charAt(2) == word.charAt(4)\n                    && word.charAt(3) ==\
    \ word.charAt(5)) {\n                result.add(word);\n            } else if\
    \ (length == 6 && word.charAt(0) == word.charAt(2)\n                    && word.charAt(1)\
    \ == word.charAt(3) && word.charAt(2) == word.charAt(4)\n                    &&\
    \ word.charAt(3) == word.charAt(5) && word.charAt(4) == word.charAt(6)) {\n  \
    \              result.add(word);\n            } else if (length == 7 && word.charAt(0)\
    \ == word.charAt(2)\n                    && word.charAt(1) == word.charAt(3) &&\
    \ word.charAt(2) == word.charAt(4)\n                    && word.charAt(3) == word.charAt(5)\
    \ && word.charAt(4) == word.charAt(6)\n                    && word.charAt(5) ==\
    \ word.charAt(7)) {\n                result.add(word);\n            } else if\
    \ (length == 8 && word.charAt(0) == word.charAt(2)\n                    && word.charAt(1)\
    \ == word.charAt(3) && word.charAt(2) == word.charAt(4)\n                    &&\
    \ word.charAt(3) == word.charAt(5) && word.charAt(4) == word.charAt(6)\n     \
    \               && word.charAt(5) == word.charAt(7) && word.charAt(6) == word.charAt(8))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ word.charAt(0) == word.charAt(2)\n                    && word.charAt(1) == word.charAt(3)\
    \ && word.charAt(2) == word.charAt(4)\n                    && word.charAt(3) ==\
    \ word.charAt(5) && word.charAt(4) == word.charAt(6)\n                    && word.charAt(5)\
    \ == word.charAt(7) && word.charAt(6) == word.charAt(8)\n                    &&\
    \ word.charAt(7) == word.charAt(9)) {\n                result.add(word);\n   \
    \         } else if (length == 10 && word.charAt(0) == word.charAt(2)\n      \
    \              && word.charAt(1) == word.charAt(3) && word.charAt(2\n    }\n \
    \   public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgvbz93fg.java:68: error: ')' expected\n                    && word.charAt(1)\
    \ == word.charAt(3) && word.charAt(2\n                                       \
    \                                 ^\n/tmp/tmpgvbz93fg.java:69: error: illegal\
    \ start of statement\n    }\n    ^\n/tmp/tmpgvbz93fg.java:70: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) continue;\n            if (len == 2 && word.charAt(0)\
    \ == word.charAt(1)) continue;\n            if (len == 2 && word.charAt(0) ==\
    \ word.charAt(1)) continue;\n            if (len == 3 && word.charAt(0) == word.charAt(1)\
    \ && word.charAt(1) == word.charAt(2)) continue;\n            if (len == 3 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2)) continue;\n\
    \            if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3)) continue;\n         \
    \   if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2)\
    \ && word.charAt(2) == word.charAt(3)) continue;\n            if (len == 5 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(3) == word.charAt(4)) continue;\n         \
    \   if (len == 5 && word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)) continue;\n\
    \            if (len == 6 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)\
    \ && word.charAt(4) == word.charAt(5)) continue;\n            if (len == 6 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(3) == word.charAt(4) && word.charAt(4) == word.charAt(5))\
    \ continue;\n            if (len == 7 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(5) == word.charAt(6)) continue;\n\
    \            if (len == 7 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(5) == word.charAt(6)) continue;\n\
    \            if (len == 8 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(5) == word.charAt(6) && word.charAt(6)\
    \ == word.charAt(7)) continue;\n            if (len == 8 && word.charAt(0) ==\
    \ word.charAt(1) && word.charAt(1) == word.charAt(2) \n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1qlxp_o.java:42: error: ')' expected\n            if (len == 8\
    \ && word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2) \n \
    \                                                                            \
    \                   ^\n/tmp/tmpb1qlxp_o.java:43: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmpb1qlxp_o.java:44: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\
    \ else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"a\")) {\n   \
    \             result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\") && word.endsWith(\"e\")) {\n                result.add(word);\n         \
    \   } else if (len == 2 && word.startsWith(\"e\") && word.endsWith(\"a\")) {\n\
    \                result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    e\") && word.endsWith(\"e\")) {\n                result.add(word);\n         \
    \   } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"e\") && word.startsWith(\"\
    i\") && word.endsWith(\"i\")) {\n                result.add(word);\n         \
    \   } else if (len == 3 && word.startsWith(\"e\") && word.endsWith(\"i\") && word.startsWith(\"\
    a\") && word.endsWith(\"a\")) {\n                result.add(word);\n         \
    \   } else if (len == 3 && word.startsWith(\"e\") && word.endsWith(\"i\") && word.startsWith(\"\
    e\") && word.endsWith(\"e\")) {\n                result.add(word);\n         \
    \   } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"i\") && word.startsWith(\"\
    e\") && word.endsWith(\"i\")) {\n                result.add(word);\n         \
    \   } else if (len == 3 && word.startsWith(\"e\") && word.endsWith(\"i\") && word.startsWith(\"\
    a\") && word.endsWith(\"a\")) {\n                result.add(word);\n         \
    \   } else if (len == 3 && word.startsWith(\"e\") && word.endsWith(\"i\") && word.startsWith(\"\
    e\") && word.endsWith(\"e\")) {\n                result.add(word);\n         \
    \   } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"i\") && word.startsWith(\"\
    e\") && word.endsWith(\"i\")) {\n                result.add(word);\n         \
    \   } else if (len == 3 && word.startsWith(\"e\") && word.endsWith(\"i\") && word.startsWith(\"\
    a\") && word.endsWith(\"a\")) {\n                result.add(word);\n         \
    \   } else if (len == 3 && word.startsWith(\"e\") && word.endsWith(\"i\") && word.startsWith(\"\
    e\") && word.endsWith(\"e\")) {\n                result.add(word);\n         \
    \   } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"i\") && word.startsWith(\"\
    e\") && word.endsWith(\"i\")) {\n                \n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2wy9cnlh.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) continue;\n            if (isPrime(len)) {\n      \
    \          result.add(word);\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpocalzhuu.java:29: error: cannot find symbol\n            if (isPrime(len))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp2zbeqv.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n        \
    \        result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 3 && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (length == 5 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (length == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 8 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLet\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv2dv45z3.java:50: error: ')' expected\n            } else if (length\
    \ == 9 && Character.isLet\n                                                  \
    \   ^\n/tmp/tmpv2dv45z3.java:51: error: illegal start of statement\n    }\n  \
    \  ^\n/tmp/tmpv2dv45z3.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpv2dv45z3.java:52: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpv2dv45z3.java:52: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpv2dv45z3.java:52: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpv2dv45z3.java:52: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpv2dv45z3.java:62:\
    \ error: reached end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 11 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))\
    \ && Character.isLetter(word.charAt(8)) && Character.isLetter(word.charAt(9))\
    \ && Character.isLetter(word.charAt(10)) && Character.isLetter(word.charAt(11)))\
    \ {\n                result.add(word);\n            } else if (length == 13 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)) &&\
    \ Character.isLetter(word.charAt(8)) && Character.isLetter(word.charAt(9)) &&\
    \ Character.isLetter(word.charAt(10)) && Character.isLetter(word.charAt(11)) &&\
    \ Character.isLetter(word.charAt(12)) && Character.isLetter(word.charAt(13)))\
    \ {\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgykgvidp.java:44: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 3 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 4 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 5 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 6 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 7 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 8 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 9 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 10 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 11 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 12 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 13 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 14 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 15 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 16 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 17 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 18 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 19 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 20 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 21 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 22 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 23 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 24 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 25 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 26 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 27 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 28 && isPrime(length)) {\n                result.add(\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyj8r9t6p.java:84: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpyj8r9t6p.java:84: error: ';' expected\n    }\n     ^\n/tmp/tmpyj8r9t6p.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpyj8r9t6p.java:85: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpyj8r9t6p.java:85: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpyj8r9t6p.java:85: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpyj8r9t6p.java:95: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmpyj8r9t6p.java:96: error: reached end of file while parsing\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.equals(\"a\") || word.equals(\"the\")) continue;\n            if\
    \ (length == 2 && word.equals(\"an\")) continue;\n            if (length == 3\
    \ && word.equals(\"the\")) continue;\n            if (length == 3 && word.equals(\"\
    a\")) continue;\n            if (length == 3 && word.equals(\"an\")) continue;\n\
    \            if (length == 4 && word.equals(\"the\")) continue;\n            if\
    \ (length == 4 && word.equals(\"a\")) continue;\n            if (length == 4 &&\
    \ word.equals(\"an\")) continue;\n            if (length == 5 && word.equals(\"\
    the\")) continue;\n            if (length == 5 && word.equals(\"a\")) continue;\n\
    \            if (length == 5 && word.equals(\"an\")) continue;\n            if\
    \ (length == 6 && word.equals(\"the\")) continue;\n            if (length == 6\
    \ && word.equals(\"a\")) continue;\n            if (length == 6 && word.equals(\"\
    an\")) continue;\n            if (length == 7 && word.equals(\"the\")) continue;\n\
    \            if (length == 7 && word.equals(\"a\")) continue;\n            if\
    \ (length == 7 && word.equals(\"an\")) continue;\n            if (length == 8\
    \ && word.equals(\"the\")) continue;\n            if (length == 8 && word.equals(\"\
    a\")) continue;\n            if (length == 8 && word.equals(\"an\")) continue;\n\
    \            if (length == 9 && word.equals(\"the\")) continue;\n            if\
    \ (length == 9 && word.equals(\"a\")) continue;\n            if (length == 9 &&\
    \ word.equals(\"an\")) continue;\n            if (length == 10 && word.equals(\"\
    the\")) continue;\n            if (length == 10 && word.equals(\"a\")) continue;\n\
    \            if (length == 10 && word.equals(\"an\")) continue;\n            if\
    \ (length == 11 && word.equals(\"the\")) continue;\n            if (length ==\
    \ 11 && word.equals(\"a\")) continue;\n            if (length == 11 && word.equals(\"\
    an\")) continue;\n            if (length == 12 && word.equals(\"the\")) continue;\n\
    \            if (length == 12 && word.equals(\"a\")) continue;\n            if\
    \ (length == 12 && word.equals(\"an\")) continue;\n            if (length == 13\
    \ && word.equals(\"the\")) continue;\n            if (length == 13 && word.equals(\"\
    a\")) continue;\n            if (length == 13 && word.equals(\"an\")) continue;\n\
    \            if (length == 14 && word.equals(\"the\")) continue;\n           \
    \ if (length == 14 && word.equals(\"a\")) continue;\n            if (length ==\
    \ 14 && word.equals(\"an\")) continue;\n            if (length == 15 && word.equals(\"\
    the\")) continue;\n            if (length == 15 && word.equal\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa31fri5c.java:68: error: ')' expected\n            if (length ==\
    \ 15 && word.equal\n                                          ^\n/tmp/tmpa31fri5c.java:69:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpa31fri5c.java:70: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else {\n                for (int i = 2; i <= Math.sqrt(length); i++) {\n\
    \                    if (length % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8i1yj7nu.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"a\"))\
    \ {\n                result.add(word);\n            } else if (length == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"e\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"i\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    i\") && word.startsWith(\"a\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    i\") && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"i\") && word.endsWith(\"\
    a\") && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"i\") && word.endsWith(\"\
    e\") && word.startsWith(\"a\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"i\") && word.endsWith(\"\
    e\") && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"i\") && word.endsWith(\"i\") && word.startsWith(\"a\"\
    ) && word.endsWith(\"a\")) {\n                result.add(word);\n            }\
    \ else if (length == 4 && word.startsWith(\"e\") && word.endsWith(\"i\") && word.startsWith(\"\
    a\") && word.endsWith(\"a\") && word.startsWith(\"e\") && word.endsWith(\"e\"\
    )) {\n                result.add(word);\n            } else if (length == 4 &&\
    \ word.startsWith(\"e\") && word.endsWith(\"i\") && word.startsWith(\"e\") &&\
    \ word.endsWith(\"e\") && word.startsWith(\"a\") && word.endsWith(\"\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt47rrmma.java:54: error: unclosed string literal\n            }\
    \ else if (length == 4 && word.startsWith(\"e\") && word.endsWith(\"i\") && word.startsWith(\"\
    e\") && word.endsWith(\"e\") && word.startsWith(\"a\") && word.endsWith(\"\n \
    \                                                                            \
    \                                                                            \
    \               ^\n/tmp/tmpt47rrmma.java:56: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt7n8y6gf.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\
    \ else if (len == 2 && Character.isLetter(word.charAt(0))) {\n               \
    \ result.add(word);\n            } else if (len == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (len == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (len == 3 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (len == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (len == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (len == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (len == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (len == 9 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7))) {\n                result.add(word);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4jgbv56n.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp2zbeqv.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoba__dx_.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp2zbeqv.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (len == 3 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)) continue;\n\
    \            if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) continue;\n         \
    \   if (len == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)) continue;\n\
    \            if (len == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) continue;\n            if (len == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11)) continue;\n            if (len == 8 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13))\
    \ continue;\n            if (len == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) continue;\n\
    \            if (len == 10 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15) &&\
    \ word.charAt(16) == word.charAt(17)) continue;\n            if (len == 11 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv_xucw8c.java:39: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpv_xucw8c.java:40: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"for\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"go\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.equals(\"swimming\")) {\n           \
    \     result.add(word);\n            } else if (len == 3 && word.equals(\"for\"\
    )) {\n                result.add(word);\n            } else if (len == 3 && word.equals(\"\
    go\")) {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.equals(\"is\")) {\n                result.add(word);\n            } else\
    \ if (len == 3 && word.equals(\"a\")) {\n                result.add(word);\n \
    \           } else if (len == 3 && word.equals(\"test\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.equals(\"is\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.equals(\"test\")) {\n               \
    \ result.add(word);\n            } else if (len == 3 && word.equals(\"is\")) {\n\
    \                result.add(word);\n            } else if (len == 3 && word.equals(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.equals(\"test\")) {\n                result.add(word);\n            } else\
    \ if (len == 3 && word.equals(\"is\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.equals(\"test\")) {\n               \
    \ result.add(word);\n            } else if (len == 3 && word.equals(\"is\")) {\n\
    \                result.add(word);\n            } else if (len == 3 && word.equals(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.equals(\"test\")) {\n                result.add(word);\n            } else\
    \ if (len == 3 && word.equals(\"is\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.equals(\"test\")) {\n               \
    \ result.add(word);\n            } else if (len == 3 && word.equals(\"is\")) {\n\
    \                result.add(word);\n            } else if (len == 3 && word.equals(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.equals(\"test\")) {\n                result.add(word);\n            } else\
    \ if (len == 3 && word.equals(\"is\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.equals(\"test\")) {\n               \
    \ result.add(word);\n            } else if (len == 3 && word.\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmputfg54h7.java:88: error: <identifier> expected\n            } else\
    \ if (len == 3 && word.\n                                        ^\n/tmp/tmputfg54h7.java:89:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmputfg54h7.java:90: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            }\n            else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'a') {\n                result.add(word);\n            }\n            else\
    \ if (length == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'e') {\n     \
    \           result.add(word);\n            }\n            else if (length == 2\
    \ && word.charAt(0) == 'a' && word.charAt(1) == 'i') {\n                result.add(word);\n\
    \            }\n            else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'o') {\n                result.add(word);\n            }\n            else\
    \ if (length == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'u') {\n     \
    \           result.add(word);\n            }\n            else if (length == 2\
    \ && word.charAt(0) == 'e' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            }\n            else if (length == 2 && word.charAt(0) == 'e' && word.charAt(1)\
    \ == 'i') {\n                result.add(word);\n            }\n            else\
    \ if (length == 2 && word.charAt(0) == 'e' && word.charAt(1) == 'o') {\n     \
    \           result.add(word);\n            }\n            else if (length == 2\
    \ && word.charAt(0) == 'e' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            }\n            else if (length == 2 && word.charAt(0) == 'i' && word.charAt(1)\
    \ == 'i') {\n                result.add(word);\n            }\n            else\
    \ if (length == 2 && word.charAt(0) == 'i' && word.charAt(1) == 'o') {\n     \
    \           result.add(word);\n            }\n            else if (length == 2\
    \ && word.charAt(0) == 'i' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            }\n            else if (length == 2 && word.charAt(0) == 'o' && word.charAt(1)\
    \ == 'o') {\n                result.add(word);\n            }\n            else\
    \ if (length == 2 && word.charAt(0) == 'o' && word.charAt(1) == 'u') {\n     \
    \           result.add(word);\n            }\n            else if (length == 2\
    \ && word.charAt(0) == 'u' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            }\n            else if (length == 3 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'a' && word.charAt(2) == 'a') {\n                result.add(word);\n    \
    \        }\n            else if (length == 3 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'a' && word.charAt(2) == 'e') {\n                result.add(word);\n    \
    \        }\n            else if (length == 3 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == '\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwgchrdil.java:82: error: illegal line end in character literal\n\
    \            else if (length == 3 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ '\n                                                                        \
    \       ^\n/tmp/tmpwgchrdil.java:84: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt7n8y6gf.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 3 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 4 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 5 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 6 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 7 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 8 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 9 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 10 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 11 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 12 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 13 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 14 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 15 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 16 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 17 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 18 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 19 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 20 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 21 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 22 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 23 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 24 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 25 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 26 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 27 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 28 && isPrime(length)) {\n                result.add(\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyj8r9t6p.java:84: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpyj8r9t6p.java:84: error: ';' expected\n    }\n     ^\n/tmp/tmpyj8r9t6p.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpyj8r9t6p.java:85: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpyj8r9t6p.java:85: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpyj8r9t6p.java:85: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpyj8r9t6p.java:95: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmpyj8r9t6p.java:96: error: reached end of file while parsing\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == word.charAt(1)) {\n    \
    \            result.add(word);\n            } else {\n                for (int\
    \ i = 2; i <= Math.sqrt(len); i++) {\n                    if (len % i == 0) {\n\
    \                        result.add(word);\n                        break;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu6n9sokj.java:44)\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.equals(\"for\")) {\n             \
    \   result.add(word);\n            } else if (length == 2 && word.equals(\"go\"\
    )) {\n                result.add(word);\n            } else if (length == 2 &&\
    \ word.equals(\"swimming\")) {\n                result.add(word);\n          \
    \  } else if (length == 3 && word.equals(\"for\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.equals(\"go\")) {\n              \
    \  result.add(word);\n            } else if (length == 3 && word.equals(\"swimming\"\
    )) {\n                result.add(word);\n            } else if (length == 4 &&\
    \ word.equals(\"for\")) {\n                result.add(word);\n            } else\
    \ if (length == 4 && word.equals(\"go\")) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.equals(\"swimming\")) {\n        \
    \        result.add(word);\n            } else if (length == 5 && word.equals(\"\
    for\")) {\n                result.add(word);\n            } else if (length ==\
    \ 5 && word.equals(\"go\")) {\n                result.add(word);\n           \
    \ } else if (length == 5 && word.equals(\"swimming\")) {\n                result.add(word);\n\
    \            } else if (length == 6 && word.equals(\"for\")) {\n             \
    \   result.add(word);\n            } else if (length == 6 && word.equals(\"go\"\
    )) {\n                result.add(word);\n            } else if (length == 6 &&\
    \ word.equals(\"swimming\")) {\n                result.add(word);\n          \
    \  } else if (length == 7 && word.equals(\"for\")) {\n                result.add(word);\n\
    \            } else if (length == 7 && word.equals(\"go\")) {\n              \
    \  result.add(word);\n            } else if (length == 7 && word.equals(\"swimming\"\
    )) {\n                result.add(word);\n            } else if (length == 8 &&\
    \ word.equals(\"for\")) {\n                result.add(word);\n            } else\
    \ if (length == 8 && word.equals(\"go\")) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.equals(\"swimming\")) {\n        \
    \        result.add(word);\n            } else if (length == 9 && word.equals(\"\
    for\")) {\n                result.add(word);\n            } else if (length ==\
    \ 9 && word.equals(\"go\")) {\n                result.add(word);\n           \
    \ } else if (length == 9 && word.equals(\"swimming\")) {\n                result.add(word);\n\
    \            } else if (length == 10 && word.equals(\"for\")) {\n            \
    \    result.add(word);\n            } else if (length == 10 && word.equals(\"\
    go\")) {\n                result.add(word);\n            } else if (length ==\
    \ 10 && word.equals(\"swimming\")) {\n                result.add(word);\n    \
    \        } else if (length == 11 && word.equals(\"for\")) {\n                result.add(word);\n\
    \            } else if (length == 11 && word.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpako6u28i.java:86: error: <identifier> expected\n            } else\
    \ if (length == 11 && word.\n                                            ^\n/tmp/tmpako6u28i.java:87:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpako6u28i.java:88: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (length\
    \ == 3 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3))\
    \ continue;\n            if (length == 4 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)) continue;\n\
    \            if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ continue;\n            if (length == 6 && word.charAt(0) == word.charAt(1) &&\
    \ word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6)\
    \ == word.charAt(7) && word.charAt(8) == word.charAt(9)) continue;\n         \
    \   if (length == 7 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11)) continue;\n       \
    \     if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2) ==\
    \ word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) continue;\n            if (length == 9 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(14) == word.charAt(15)) continue;\n            if (length ==\
    \ 10 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14) == word.charAt(15) && word.charAt(16) ==\
    \ word.charAt(17)) continue;\n            if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1cgbqcz2.java:38: error: ')' expected\n            if (length ==\
    \ 11 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) &&\
    \ word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8)\
    \ == word.charAt(9) && word.charAt(10) == word.charAt(11) && word.charAt(12) ==\
    \ word.charAt(13) && word.charAt(14\n                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                  ^\n/tmp/tmp1cgbqcz2.java:40: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmp1cgbqcz2.java:40:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmp1cgbqcz2.java:40: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmp1cgbqcz2.java:40:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmp1cgbqcz2.java:40: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmp1cgbqcz2.java:50: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt7n8y6gf.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoba__dx_.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   }\n            else if (length == 2 && isPrime(length)) {\n              \
    \  result.add(word);\n            }\n            else if (length == 3 && isPrime(length))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 4 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 5 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 6 && isPrime(length)) {\n     \
    \           result.add(word);\n            }\n            else if (length == 7\
    \ && isPrime(length)) {\n                result.add(word);\n            }\n  \
    \          else if (length == 8 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 9 && isPrime(length)) {\n     \
    \           result.add(word);\n            }\n            else if (length == 10\
    \ && isPrime(length)) {\n                result.add(word);\n            }\n  \
    \          else if (length == 11 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 12 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 13 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 14 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 15 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 16 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 17 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 18 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 19 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 20 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 21 && isPrime(length)) {\n    \
    \            result.add(word);\n            }\n            else if (length ==\
    \ 22 && isPrime(length)) {\n                result.add(word);\n            }\n\
    \            else if (length == 23 && isPrime(length)) {\n                result.add(word);\n\
    \            }\n            else if (length == 24 && isPrime(length)) {\n    \
    \            result.add(word);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0zyvhfoi.java:101: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            }\n            else if (length == 2 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 3 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            }\n            else if (length == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            }\n            else if (length == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6))) {\n                result.add(word);\n\
    \            }\n            else if (length == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7))) {\n                result.add(word);\n\
    \            }\n            else if (length == 9 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.is\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7xcx_0xf.java:52: error: ')' expected\n            else if (length\
    \ == 9 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.is\n                    \
    \                                                                            \
    \                                                                            \
    \                                                                  ^\n/tmp/tmp7xcx_0xf.java:53:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmp7xcx_0xf.java:54: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            boolean isPrime\
    \ = true;\n            for (int i = 2; i <= Math.sqrt(len); i++) {\n         \
    \       if (len % i == 0) {\n                    isPrime = false;\n          \
    \          break;\n                }\n            }\n            if (isPrime)\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (len == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (len == 3 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (len == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (len == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5))) {\n                result.add(word);\n\
    \            } else if (len == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6))) {\n                result.add(word);\n\
    \            } else if (len == 8 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n            } else if (len == 9 && Character.isLet\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxt8fpibc.java:50: error: ')' expected\n            } else if (len\
    \ == 9 && Character.isLet\n                                                  ^\n\
    /tmp/tmpxt8fpibc.java:51: error: illegal start of statement\n    }\n    ^\n/tmp/tmpxt8fpibc.java:52:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (len == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (len == 3 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (len == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (len == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (len == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (len == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (len == 9 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7))) {\n                result.add(word);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyt8e6f1h.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpyt8e6f1h.java:52: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpyt8e6f1h.java:52: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpyt8e6f1h.java:52: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpyt8e6f1h.java:52: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpyt8e6f1h.java:62:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            boolean isPrime\
    \ = true;\n            for (int i = 2; i <= Math.sqrt(len); i++) {\n         \
    \       if (len % i == 0) {\n                    isPrime = false;\n          \
    \          break;\n                }\n            }\n            if (isPrime)\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.equals(\"a\") || word.equals(\"the\"\
    )) {\n                result.add(word);\n            } else if (length == 2 &&\
    \ word.equals(\"an\") || word.equals(\"the\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.equals(\"the\") || word.equals(\"\
    a\") || word.equals(\"an\")) {\n                result.add(word);\n          \
    \  } else if (length == 2 && word.equals(\"is\") || word.equals(\"the\") || word.equals(\"\
    an\")) {\n                result.add(word);\n            } else if (length ==\
    \ 2 && word.equals(\"it\") || word.equals(\"the\") || word.equals(\"an\")) {\n\
    \                result.add(word);\n            } else if (length == 2 && word.equals(\"\
    it\") || word.equals(\"a\") || word.equals(\"an\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.equals(\"the\") || word.equals(\"\
    a\") || word.equals(\"an\")) {\n                result.add(word);\n          \
    \  } else if (length == 3 && word.equals(\"a\") || word.equals(\"an\")) {\n  \
    \              result.add(word);\n            } else if (length == 3 && word.equals(\"\
    for\") || word.equals(\"the\") || word.equals(\"a\") || word.equals(\"an\")) {\n\
    \                result.add(word);\n            } else if (length == 3 && word.equals(\"\
    for\") || word.equals(\"a\") || word.equals(\"an\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.equals(\"for\") || word.equals(\"\
    the\") || word.equals(\"a\") || word.equals(\"an\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.equals(\"for\") || word.equals(\"\
    a\") || word.equals(\"an\")) {\n                result.add(word);\n          \
    \  } else if (length == 3 && word.equals(\"for\") || word.equals(\"the\") || word.equals(\"\
    a\") || word.equals(\"an\")) {\n                result.add(word);\n          \
    \  } else if (length == 3 && word.equals(\"for\") || word.equals(\"a\") || word.equals(\"\
    an\")) {\n                result.add(word);\n            } else if (length ==\
    \ 3 && word.equals(\"for\") || word.equals(\"the\") || word.equals(\"a\") || word.equals(\"\
    an\")) {\n                result.add(word);\n            } else if (length ==\
    \ 3 && word.equals(\"for\") || word.equals(\"a\") || word.equals(\"an\")) {\n\
    \                result.add(word);\n            } else if (length == 3 && word.equals(\"\
    for\") || word.equals(\"the\") || word.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbzakfdep.java:62: error: <identifier> expected\n            } else\
    \ if (length == 3 && word.equals(\"for\") || word.equals(\"the\") || word.\n \
    \                                                                            \
    \          ^\n/tmp/tmpbzakfdep.java:63: error: illegal start of statement\n  \
    \  }\n    ^\n/tmp/tmpbzakfdep.java:64: error: illegal start of expression\n  \
    \  public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                boolean isPrime = true;\n             \
    \   for (int i = 2; i <= Math.sqrt(length); i++) {\n                    if (length\
    \ % i == 0) {\n                        isPrime = false;\n                    \
    \    break;\n                    }\n                }\n                if (isPrime)\
    \ {\n                    result.add(word);\n                }\n            }\n\
    \        }\n        return result.stream().collect(Collectors.joining(\" \"));\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp631lm4hp.java:46)\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\
    \ else {\n                for (int i = 2; i <= Math.sqrt(len); i++) {\n      \
    \              if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzj5_inpp.java:42)\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len % 2 == 0) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().sorted().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzne8b9mp.java:35)\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int n\
    \ = word.length();\n            if (isPrime(n)) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6l03sqb3.java:28: error: cannot find symbol\n            if (isPrime(n))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 3 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 4 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 5 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 6 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 7 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 8 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 9 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 10 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 11 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 12 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 13 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 14 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 15 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 16 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 17 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 18 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 19 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 20 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 21 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 22 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 23 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 24 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 25 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 26 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 27 && isPrime(length)) {\n                result.add(word);\n\
    \            } else if (length == 28 && isPrime(length)) {\n                result.add(\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyj8r9t6p.java:84: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpyj8r9t6p.java:84: error: ';' expected\n    }\n     ^\n/tmp/tmpyj8r9t6p.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpyj8r9t6p.java:85: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpyj8r9t6p.java:85: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpyj8r9t6p.java:85: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpyj8r9t6p.java:95: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmpyj8r9t6p.java:96: error: reached end of file while parsing\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp2zbeqv.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.equals(\"a\")) continue;\n            if (length == 2 && word.equals(\"\
    e\")) continue;\n            if (length == 2 && word.equals(\"i\")) continue;\n\
    \            if (length == 2 && word.equals(\"o\")) continue;\n            if\
    \ (length == 2 && word.equals(\"u\")) continue;\n            if (length == 3 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 3 && word.equals(\"\
    e\")) continue;\n            if (length == 3 && word.equals(\"i\")) continue;\n\
    \            if (length == 3 && word.equals(\"o\")) continue;\n            if\
    \ (length == 3 && word.equals(\"u\")) continue;\n            if (length == 4 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 4 && word.equals(\"\
    e\")) continue;\n            if (length == 4 && word.equals(\"i\")) continue;\n\
    \            if (length == 4 && word.equals(\"o\")) continue;\n            if\
    \ (length == 4 && word.equals(\"u\")) continue;\n            if (length == 5 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 5 && word.equals(\"\
    e\")) continue;\n            if (length == 5 && word.equals(\"i\")) continue;\n\
    \            if (length == 5 && word.equals(\"o\")) continue;\n            if\
    \ (length == 5 && word.equals(\"u\")) continue;\n            if (length == 6 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 6 && word.equals(\"\
    e\")) continue;\n            if (length == 6 && word.equals(\"i\")) continue;\n\
    \            if (length == 6 && word.equals(\"o\")) continue;\n            if\
    \ (length == 6 && word.equals(\"u\")) continue;\n            if (length == 7 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 7 && word.equals(\"\
    e\")) continue;\n            if (length == 7 && word.equals(\"i\")) continue;\n\
    \            if (length == 7 && word.equals(\"o\")) continue;\n            if\
    \ (length == 7 && word.equals(\"u\")) continue;\n            if (length == 8 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 8 && word.equals(\"\
    e\")) continue;\n            if (length == 8 && word.equals(\"i\")) continue;\n\
    \            if (length == 8 && word.equals(\"o\")) continue;\n            if\
    \ (length == 8 && word.equals(\"u\")) continue;\n            if (length == 9 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 9 && word.equals(\"\
    e\")) continue;\n            if (length == 9 && word.equals(\"i\")) continue;\n\
    \            if (length == 9 && word.equals(\"o\")) continue;\n            if\
    \ (length == 9 && word.equals(\"u\")) continue;\n            if (length == 10\
    \ && \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm5lyusmu.java:70: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpm5lyusmu.java:71: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoba__dx_.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.equals(\"for\")) {\n             \
    \   result.add(word);\n            } else if (length == 2 && word.equals(\"go\"\
    )) {\n                result.add(word);\n            } else if (length == 2 &&\
    \ word.equals(\"swimming\")) {\n                result.add(word);\n          \
    \  } else if (length == 3 && word.equals(\"for\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.equals(\"go\")) {\n              \
    \  result.add(word);\n            } else if (length == 3 && word.equals(\"swimming\"\
    )) {\n                result.add(word);\n            } else if (length == 4 &&\
    \ word.equals(\"for\")) {\n                result.add(word);\n            } else\
    \ if (length == 4 && word.equals(\"go\")) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.equals(\"swimming\")) {\n        \
    \        result.add(word);\n            } else if (length == 5 && word.equals(\"\
    for\")) {\n                result.add(word);\n            } else if (length ==\
    \ 5 && word.equals(\"go\")) {\n                result.add(word);\n           \
    \ } else if (length == 5 && word.equals(\"swimming\")) {\n                result.add(word);\n\
    \            } else if (length == 6 && word.equals(\"for\")) {\n             \
    \   result.add(word);\n            } else if (length == 6 && word.equals(\"go\"\
    )) {\n                result.add(word);\n            } else if (length == 6 &&\
    \ word.equals(\"swimming\")) {\n                result.add(word);\n          \
    \  } else if (length == 7 && word.equals(\"for\")) {\n                result.add(word);\n\
    \            } else if (length == 7 && word.equals(\"go\")) {\n              \
    \  result.add(word);\n            } else if (length == 7 && word.equals(\"swimming\"\
    )) {\n                result.add(word);\n            } else if (length == 8 &&\
    \ word.equals(\"for\")) {\n                result.add(word);\n            } else\
    \ if (length == 8 && word.equals(\"go\")) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.equals(\"swimming\")) {\n        \
    \        result.add(word);\n            } else if (length == 9 && word.equals(\"\
    for\")) {\n                result.add(word);\n            } else if (length ==\
    \ 9 && word.equals(\"go\")) {\n                result.add(word);\n           \
    \ } else if (length == 9 && word.equals(\"swimming\")) {\n                result.add(word);\n\
    \            } else if (length == 10 && word.equals(\"for\")) {\n            \
    \    result.add(word);\n            } else if (length == 10 && word.equals(\"\
    go\")) {\n                result.add(word);\n            } else if (length ==\
    \ 10 && word.equals(\"swimming\")) {\n                result.add(word);\n    \
    \        } else if (length == 11 && word.equals(\"for\")) {\n                result.add(word);\n\
    \            } else if (length == 11 && word.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpako6u28i.java:86: error: <identifier> expected\n            } else\
    \ if (length == 11 && word.\n                                            ^\n/tmp/tmpako6u28i.java:87:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpako6u28i.java:88: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int n\
    \ = Integer.parseInt(word);\n            if (isPrime(n)) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp34x7kr1n.java:28: error: cannot find symbol\n            if (isPrime(n))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"e\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"i\") && word.endsWith(\"\
    i\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"i\") && word.endsWith(\"o\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"o\") && word.endsWith(\"\
    i\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"o\") && word.endsWith(\"o\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"u\") && word.endsWith(\"\
    u\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"u\") && word.endsWith(\"o\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"u\") && word.endsWith(\"\
    u\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"y\") && word.endsWith(\"y\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"y\") && word.endsWith(\"\
    y\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"y\") && word.endsWith(\"y\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"o\") && word.endsWith(\"\
    o\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"e\") && word.endsWith(\"\
    e\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"i\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"o\") && word.endsWith(\"\
    o\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"u\") && word.endsWith(\"u\")) {\n                \n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wg3ffd9.java:71: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 3 && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (length == 5 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (length == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 8 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLet\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps9kanmaa.java:50: error: ')' expected\n            } else if (length\
    \ == 9 && Character.isLet\n                                                  \
    \   ^\n/tmp/tmps9kanmaa.java:51: error: illegal start of statement\n    }\n  \
    \  ^\n/tmp/tmps9kanmaa.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmps9kanmaa.java:52: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmps9kanmaa.java:52: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmps9kanmaa.java:52: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmps9kanmaa.java:52: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmps9kanmaa.java:62:\
    \ error: reached end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else {\n                for (int i = 2; i <= Math.sqrt(length); i++) {\n\
    \                    if (length % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8i1yj7nu.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04i5dg08.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"the\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"a\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"an\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"is\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"was\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"were\")) {\n               \
    \ result.add(word);\n            } else if (len == 2 && word.equals(\"am\")) {\n\
    \                result.add(word);\n            } else if (len == 2 && word.equals(\"\
    is\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.equals(\"are\")) {\n                result.add(word);\n            } else\
    \ if (len == 2 && word.equals(\"have\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"had\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"do\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"does\")) {\n               \
    \ result.add(word);\n            } else if (len == 2 && word.equals(\"don't\"\
    )) {\n                result.add(word);\n            } else if (len == 2 && word.equals(\"\
    has\")) {\n                result.add(word);\n            } else if (len == 2\
    \ && word.equals(\"had\")) {\n                result.add(word);\n            }\
    \ else if (len == 2 && word.equals(\"would\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"should\")) {\n             \
    \   result.add(word);\n            } else if (len == 2 && word.equals(\"can\"\
    )) {\n                result.add(word);\n            } else if (len == 2 && word.equals(\"\
    could\")) {\n                result.add(word);\n            } else if (len ==\
    \ 2 && word.equals(\"should\")) {\n                result.add(word);\n       \
    \     } else if (len == 2 && word.equals(\"can\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"should\")) {\n             \
    \   result.add(word);\n            } else if (len == 2 && word.equals(\"can\"\
    )) {\n                result.add(word);\n            } else if (len == 2 && word.equals(\"\
    should\")) {\n                result.add(word);\n            } else if (len ==\
    \ 2 && word.equals(\"can\")) {\n                result.add(word);\n          \
    \  } else if (len == 2 && word.equals(\"should\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"can\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"should\")) {\n             \
    \   result.add(word);\n            } else if (len == 2 && \n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ra5se7m.java:89: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp_ra5se7m.java:90: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int len = word.length();\n            if (len == 1) {\n     \
    \           sb.append(word);\n            } else {\n                for (int i\
    \ = 2; i <= Math.sqrt(len); i++) {\n                    if (len % i == 0) {\n\
    \                        sb.append(word);\n                        break;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppwroqnds.java:43)\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 3\
    \ && word.startsWith(\"a\") && word.endsWith(\"\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp68lfemrr.java:68: error: unclosed string literal\n            }\
    \ else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\n       \
    \                                                                     ^\n/tmp/tmp68lfemrr.java:70:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp2zbeqv.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))) {\n\
    \                result.add(word);\n            } else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))) {\n\
    \                result.add(word);\n            } else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5noqroa2.java:49: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp5noqroa2.java:50: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\
    \ else {\n                for (int i = 2; i <= Math.sqrt(len); i++) {\n      \
    \              if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzj5_inpp.java:42)\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (len == 3 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)) continue;\n\
    \            if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) continue;\n         \
    \   if (len == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)) continue;\n\
    \            if (len == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) continue;\n            if (len == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11)) continue;\n            if (len == 8 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13))\
    \ continue;\n            if (len == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) continue;\n\
    \            if (len == 10 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15) &&\
    \ word.charAt(16) == word.charAt(17)) continue;\n            if (len == 11 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv_xucw8c.java:39: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpv_xucw8c.java:40: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))) {\n\
    \                result.add(word);\n            } else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))) {\n\
    \                result.add(word);\n            } else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5noqroa2.java:49: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp5noqroa2.java:50: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len > 1) {\n                for (int i = 2; i <= Math.sqrt(len);\
    \ i++) {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe06j3yq9.java:40)\n"
  stdout: ''
  timestamp: 1659793805
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.equals(\"for\")) {\n             \
    \   result.add(word);\n            } else if (length == 2 && word.equals(\"go\"\
    )) {\n                result.add(word);\n            } else if (length == 2 &&\
    \ word.equals(\"swimming\")) {\n                result.add(word);\n          \
    \  } else if (length == 3 && word.equals(\"for\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.equals(\"go\")) {\n              \
    \  result.add(word);\n            } else if (length == 3 && word.equals(\"swimming\"\
    )) {\n                result.add(word);\n            } else if (length == 4 &&\
    \ word.equals(\"for\")) {\n                result.add(word);\n            } else\
    \ if (length == 4 && word.equals(\"go\")) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.equals(\"swimming\")) {\n        \
    \        result.add(word);\n            } else if (length == 5 && word.equals(\"\
    for\")) {\n                result.add(word);\n            } else if (length ==\
    \ 5 && word.equals(\"go\")) {\n                result.add(word);\n           \
    \ } else if (length == 5 && word.equals(\"swimming\")) {\n                result.add(word);\n\
    \            } else if (length == 6 && word.equals(\"for\")) {\n             \
    \   result.add(word);\n            } else if (length == 6 && word.equals(\"go\"\
    )) {\n                result.add(word);\n            } else if (length == 6 &&\
    \ word.equals(\"swimming\")) {\n                result.add(word);\n          \
    \  } else if (length == 7 && word.equals(\"for\")) {\n                result.add(word);\n\
    \            } else if (length == 7 && word.equals(\"go\")) {\n              \
    \  result.add(word);\n            } else if (length == 7 && word.equals(\"swimming\"\
    )) {\n                result.add(word);\n            } else if (length == 8 &&\
    \ word.equals(\"for\")) {\n                result.add(word);\n            } else\
    \ if (length == 8 && word.equals(\"go\")) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.equals(\"swimming\")) {\n        \
    \        result.add(word);\n            } else if (length == 9 && word.equals(\"\
    for\")) {\n                result.add(word);\n            } else if (length ==\
    \ 9 && word.equals(\"go\")) {\n                result.add(word);\n           \
    \ } else if (length == 9 && word.equals(\"swimming\")) {\n                result.add(word);\n\
    \            } else if (length == 10 && word.equals(\"for\")) {\n            \
    \    result.add(word);\n            } else if (length == 10 && word.equals(\"\
    go\")) {\n                result.add(word);\n            } else if (length ==\
    \ 10 && word.equals(\"swimming\")) {\n                result.add(word);\n    \
    \        } else if (length == 11 && word.equals(\"for\")) {\n                result.add(word);\n\
    \            } else if (length == 11 && word.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpako6u28i.java:86: error: <identifier> expected\n            } else\
    \ if (length == 11 && word.\n                                            ^\n/tmp/tmpako6u28i.java:87:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpako6u28i.java:88: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp2zbeqv.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 3 && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (length == 5 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (length == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 8 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLet\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps9kanmaa.java:50: error: ')' expected\n            } else if (length\
    \ == 9 && Character.isLet\n                                                  \
    \   ^\n/tmp/tmps9kanmaa.java:51: error: illegal start of statement\n    }\n  \
    \  ^\n/tmp/tmps9kanmaa.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmps9kanmaa.java:52: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmps9kanmaa.java:52: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmps9kanmaa.java:52: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmps9kanmaa.java:52: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmps9kanmaa.java:62:\
    \ error: reached end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'a') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'i') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'u') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'e' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'e' && word.charAt(1) ==\
    \ 'i') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'e' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'e' && word.charAt(1) ==\
    \ 'u') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'i' && word.charAt(1) == 'i') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'i' && word.charAt(1) ==\
    \ 'o') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'i' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'o' && word.charAt(1) ==\
    \ 'o') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'o' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'u' && word.charAt(1) ==\
    \ 'u') {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'a') {\n\
    \                result.add(word);\n            } else if (len == 3 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'e') {\n              \
    \  result.add(word);\n            } else if (len == 3 && word.charAt(0) == 'a'\
    \ && word.charAt(1) == 'a' && word.charAt(2) == 'i') {\n                result.add(word);\n\
    \            } else if (len == 3 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'a' && word.charAt(2) == 'o') {\n                result.add(word);\n       \
    \     } else if (len == 3 && word.charAt(0) == 'a' && \n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc4fo4juy.java:69: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpc4fo4juy.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793805
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else {\n                for (int i = 2; i <= Math.sqrt(length); i++) {\n\
    \                    if (length % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8i1yj7nu.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp2zbeqv.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\
    \ else if (len == 2 && word.equals(\"for\")) {\n                result.add(\"\
    for\");\n            } else if (len == 2 && word.equals(\"go\")) {\n         \
    \       result.add(\"go\");\n            } else if (len == 2 && word.equals(\"\
    swimming\")) {\n                result.add(\"swimming\");\n            } else\
    \ if (len == 3 && word.equals(\"for\")) {\n                result.add(\"for\"\
    );\n            } else if (len == 3 && word.equals(\"go\")) {\n              \
    \  result.add(\"go\");\n            } else if (len == 3 && word.equals(\"swimming\"\
    )) {\n                result.add(\"swimming\");\n            } else if (len ==\
    \ 3 && word.equals(\"is\")) {\n                result.add(\"is\");\n         \
    \   } else if (len == 4 && word.equals(\"for\")) {\n                result.add(\"\
    for\");\n            } else if (len == 4 && word.equals(\"go\")) {\n         \
    \       result.add(\"go\");\n            } else if (len == 4 && word.equals(\"\
    swimming\")) {\n                result.add(\"swimming\");\n            } else\
    \ if (len == 4 && word.equals(\"is\")) {\n                result.add(\"is\");\n\
    \            } else if (len == 5 && word.equals(\"for\")) {\n                result.add(\"\
    for\");\n            } else if (len == 5 && word.equals(\"go\")) {\n         \
    \       result.add(\"go\");\n            } else if (len == 5 && word.equals(\"\
    swimming\")) {\n                result.add(\"swimming\");\n            } else\
    \ if (len == 5 && word.equals(\"is\")) {\n                result.add(\"is\");\n\
    \            } else if (len == 6 && word.equals(\"for\")) {\n                result.add(\"\
    for\");\n            } else if (len == 6 && word.equals(\"go\")) {\n         \
    \       result.add(\"go\");\n            } else if (len == 6 && word.equals(\"\
    swimming\")) {\n                result.add(\"swimming\");\n            } else\
    \ if (len == 6 && word.equals(\"is\")) {\n                result.add(\"is\");\n\
    \            } else if (len == 7 && word.equals(\"for\")) {\n                result.add(\"\
    for\");\n            } else if (len == 7 && word.equals(\"go\")) {\n         \
    \       result.add(\"go\");\n            } else if (len == 7 && word.equals(\"\
    swimming\")) {\n                result.add(\"swimming\");\n            } else\
    \ if (len == 7 && word.equals(\"is\")) {\n                result.add(\"is\");\n\
    \            } else if (len == 8 && word.equals(\"for\")) {\n                result.add(\"\
    for\");\n            } else if (len == 8 && word.equals(\"go\")) {\n         \
    \       result.add(\"go\");\n            } else if (len == 8 && word.equals(\"\
    swimming\")) {\n                result.add(\"swimming\");\n            } else\
    \ if (\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp02sv3g0i.java:83: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp02sv3g0i.java:84: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n        \
    \        result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))) {\n\
    \                result.add(word);\n            } else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))) {\n\
    \                result.add(word);\n            } else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt86mayy6.java:49: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpt86mayy6.java:50: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793805
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 5 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 7 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 9 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 11 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"a\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"a\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 13 && word.startsWith(\"\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1k90ax2s.java:44: error: unclosed string literal\n            }\
    \ else if (length == 13 && word.startsWith(\"\n                              \
    \                         ^\n/tmp/tmp1k90ax2s.java:46: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            if (isPrime(word.length())) {\n                result.append(word);\n\
    \            }\n        }\n        return result.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04i5dg08.java:28: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len > 1 && len % 2 == 0) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2zl5o8ta.java:35)\n"
  stdout: ''
  timestamp: 1659793805
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"a\") || word.equals(\"the\"\
    )) {\n                result.add(word);\n            } else if (len == 2 && word.equals(\"\
    an\") || word.equals(\"the\")) {\n                result.add(word);\n        \
    \    } else if (len == 2 && word.equals(\"is\") || word.equals(\"was\") || word.equals(\"\
    were\")) {\n                result.add(word);\n            } else if (len == 2\
    \ && word.equals(\"are\") || word.equals(\"were\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"am\") || word.equals(\"is\"\
    ) || word.equals(\"was\") || word.equals(\"were\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"in\") || word.equals(\"of\"\
    )) {\n                result.add(word);\n            } else if (len == 2 && word.equals(\"\
    to\") || word.equals(\"in\") || word.equals(\"of\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"for\") || word.equals(\"to\"\
    ) || word.equals(\"in\") || word.equals(\"of\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"by\") || word.equals(\"with\"\
    ) || word.equals(\"to\") || word.equals(\"in\") || word.equals(\"of\")) {\n  \
    \              result.add(word);\n            } else if (len == 2 && word.equals(\"\
    on\") || word.equals(\"in\") || word.equals(\"of\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"in\") || word.equals(\"of\"\
    )) {\n                result.add(word);\n            } else if (len == 2 && word.equals(\"\
    to\") || word.equals(\"in\") || word.equals(\"of\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"of\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"to\") || word.equals(\"in\"\
    ) || word.equals(\"of\")) {\n                result.add(word);\n            }\
    \ else if (len == 2 && word.equals(\"for\") || word.equals(\"to\") || word.equals(\"\
    in\") || word.equals(\"of\")) {\n                result.add(word);\n         \
    \   } else if (len == 2 && word.equals(\"by\") || word.equals(\"with\") || word.equals(\"\
    to\") || word.equals(\"in\") || word.equals(\"of\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.equals(\"on\") || word.equals(\"in\"\
    ) || word.equals(\"of\n    }\n    public static void main(String[] args) {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppd9qrf_3.java:62: error: unclosed string literal\n            }\
    \ else if (len == 2 && word.equals(\"on\") || word.equals(\"in\") || word.equals(\"\
    of\n                                                                         \
    \                ^\n/tmp/tmppd9qrf_3.java:64: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            int len = word.length();\n            if (len == 1)\
    \ {\n                result.append(word);\n            } else {\n            \
    \    for (int i = 2; i <= Math.sqrt(len); i++) {\n                    if (len\
    \ % i == 0) {\n                        int j = (int) Math.ceil(len / i);\n   \
    \                     String sub = word.substring(0, j);\n                   \
    \     result.append(sub);\n                        break;\n                  \
    \  }\n                }\n            }\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnnny38fc.java:45)\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (length == 5 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4))) {\n                result.add(word);\n \
    \           } else if (length == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (length == 8 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n            } else if (length == 10 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2tyubc7i.java:46: error: ')' expected\n            } else if (length\
    \ == 10 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4\n                                      \
    \                                                                            \
    \                                                                            \
    \                                 ^\n/tmp/tmp2tyubc7i.java:47: error: illegal\
    \ start of statement\n    }\n    ^\n/tmp/tmp2tyubc7i.java:48: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.charAt(0) == 'a' && word.charAt(1) == 'e') continue;\n           \
    \ if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'i') continue;\n\
    \            if (len == 2 && word.charAt(0) == 'e' && word.charAt(1) == 'i') continue;\n\
    \            if (len == 2 && word.charAt(0) == 'i' && word.charAt(1) == 'a') continue;\n\
    \            if (len == 3 && word.charAt(0) == 'a' && word.charAt(1) == 'e' &&\
    \ word.charAt(2) == 'i') continue;\n            if (len == 3 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'i' && word.charAt(2) == 'e') continue;\n      \
    \      if (len == 3 && word.charAt(0) == 'e' && word.charAt(1) == 'i' && word.charAt(2)\
    \ == 'a') continue;\n            if (len == 3 && word.charAt(0) == 'i' && word.charAt(1)\
    \ == 'e' && word.charAt(2) == 'a') continue;\n            if (len == 4 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'e' && word.charAt(2) == 'i' && word.charAt(3) ==\
    \ 'a') continue;\n            if (len == 4 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'i' && word.charAt(2) == 'e' && word.charAt(3) == 'a') continue;\n      \
    \      if (len == 4 && word.charAt(0) == 'e' && word.charAt(1) == 'i' && word.charAt(2)\
    \ == 'a' && word.charAt(3) == 'a') continue;\n            if (len == 5 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'e' && word.charAt(2) == 'i' && word.charAt(3) ==\
    \ 'a' && word.charAt(4) == 'a') continue;\n            if (len == 5 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'i' && word.charAt(2) == 'e' && word.charAt(3) ==\
    \ 'a' && word.charAt(4) == 'a') continue;\n            if (len == 5 && word.charAt(0)\
    \ == 'e' && word.charAt(1) == 'i' && word.charAt(2) == 'a' && word.charAt(3) ==\
    \ 'a' && word.charAt(4) == 'a') continue;\n            if (len == 6 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'e' && word.charAt(2) == 'i' && word.charAt(3) ==\
    \ 'a' && word.charAt(4) == 'a' && word.charAt(5) == 'a') continue;\n         \
    \   if (len == 6 && word.charAt(0) == 'a' && word.charAt(1) == 'i' && word.charAt(2)\
    \ == 'e' && word.charAt(3) == 'a' && word.charAt(4) == 'a' && word.charAt(5) ==\
    \ 'a') continue;\n            if (len == 6 && word.charAt(0) == 'e' && word.charAt(1)\
    \ == 'i' && word.charAt(2) == 'a' && word.charAt(3) == '\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpro6336rh.java:45: error: illegal line end in character literal\n\
    \            if (len == 6 && word.charAt(0) == 'e' && word.charAt(1) == 'i' &&\
    \ word.charAt(2) == 'a' && word.charAt(3) == '\n                             \
    \                                                                            \
    \                ^\n/tmp/tmpro6336rh.java:47: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else {\n                for (int i = 2; i <= Math.sqrt(length); i++) {\n\
    \                    if (length % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8i1yj7nu.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'a') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'i') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'u') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'e' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'e' && word.charAt(1) ==\
    \ 'i') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'e' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'e' && word.charAt(1) ==\
    \ 'u') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'i' && word.charAt(1) == 'i') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'i' && word.charAt(1) ==\
    \ 'o') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'i' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'o' && word.charAt(1) ==\
    \ 'o') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'o' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'u' && word.charAt(1) ==\
    \ 'u') {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'a') {\n\
    \                result.add(word);\n            } else if (len == 3 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'e') {\n              \
    \  result.add(word);\n            } else if (len == 3 && word.charAt(0) == 'a'\
    \ && word.charAt(1) == 'a' && word.charAt(2) == 'i') {\n                result.add(word);\n\
    \            } else if (len == 3 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'a' && word.charAt(2) == 'o') {\n                result.add(word);\n       \
    \     } else if (len == 3 && word.charAt(0) == 'a' && \n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc4fo4juy.java:69: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpc4fo4juy.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793805
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder result = new StringBuilder();\n        for (String word\
    \ : words) {\n            int length = word.length();\n            if (length\
    \ == 1) {\n                result.append(word);\n            } else {\n      \
    \          for (int i = 2; i <= Math.sqrt(length); i++) {\n                  \
    \  if (length % i == 0) {\n                        result.append(word);\n    \
    \                    break;\n                    }\n                }\n      \
    \      }\n        }\n        return result.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwwfwu9yl.java:43)\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len > 1 && len % 2 == 0) {\n             \
    \   result.add(word);\n            }\n        }\n        return result.stream().sorted().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3h3_i7m.java:35)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\
    \ else {\n                for (int i = 2; i <= Math.sqrt(len); i++) {\n      \
    \              if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzj5_inpp.java:42)\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp2zbeqv.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) continue;\n            if (length\
    \ == 2 && word.equals(\"a\")) continue;\n            if (length == 2 && word.equals(\"\
    e\")) continue;\n            if (length == 2 && word.equals(\"i\")) continue;\n\
    \            if (length == 2 && word.equals(\"o\")) continue;\n            if\
    \ (length == 2 && word.equals(\"u\")) continue;\n            if (length == 3 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 3 && word.equals(\"\
    e\")) continue;\n            if (length == 3 && word.equals(\"i\")) continue;\n\
    \            if (length == 3 && word.equals(\"o\")) continue;\n            if\
    \ (length == 3 && word.equals(\"u\")) continue;\n            if (length == 4 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 4 && word.equals(\"\
    e\")) continue;\n            if (length == 4 && word.equals(\"i\")) continue;\n\
    \            if (length == 4 && word.equals(\"o\")) continue;\n            if\
    \ (length == 4 && word.equals(\"u\")) continue;\n            if (length == 5 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 5 && word.equals(\"\
    e\")) continue;\n            if (length == 5 && word.equals(\"i\")) continue;\n\
    \            if (length == 5 && word.equals(\"o\")) continue;\n            if\
    \ (length == 5 && word.equals(\"u\")) continue;\n            if (length == 6 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 6 && word.equals(\"\
    e\")) continue;\n            if (length == 6 && word.equals(\"i\")) continue;\n\
    \            if (length == 6 && word.equals(\"o\")) continue;\n            if\
    \ (length == 6 && word.equals(\"u\")) continue;\n            if (length == 7 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 7 && word.equals(\"\
    e\")) continue;\n            if (length == 7 && word.equals(\"i\")) continue;\n\
    \            if (length == 7 && word.equals(\"o\")) continue;\n            if\
    \ (length == 7 && word.equals(\"u\")) continue;\n            if (length == 8 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 8 && word.equals(\"\
    e\")) continue;\n            if (length == 8 && word.equals(\"i\")) continue;\n\
    \            if (length == 8 && word.equals(\"o\")) continue;\n            if\
    \ (length == 8 && word.equals(\"u\")) continue;\n            if (length == 9 &&\
    \ word.equals(\"a\")) continue;\n            if (length == 9 && word.equals(\"\
    e\")) continue;\n            if (length == 9 && word.equals(\"i\")) continue;\n\
    \            if (length == 9 && word.equals(\"o\")) continue;\n            if\
    \ (length == 9 && word.equals(\"u\")) continue;\n            if (length == 10\
    \ && \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm5lyusmu.java:70: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpm5lyusmu.java:71: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\") &&\
    \ word.endsWith(\"z\")) {\n                result.add(word);\n            } else\
    \ if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    b\") && word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"b\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"c\") && word.endsWith(\"z\") && word.startsWith(\"d\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    b\") && word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"d\") && word.endsWith(\"z\") && word.startsWith(\"e\")\
    \ && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    b\") && word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"d\") && word.endsWith(\"z\") && word.startsWith(\"e\")\
    \ && word.endsWith(\"z\") && word.startsWith(\"f\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"b\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"c\") && word.endsWith(\"z\") && word.startsWith(\"d\")\
    \ && word.endsWith(\"z\") && word.startsWith(\"e\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"f\") && word.endsWith(\"z\") && word.startsWith(\"g\") &&\
    \ word.endsWith(\"z\")) {\n                result.add(word);\n            } else\
    \ if (len == 2 && word.startsWith(\"a\") && \n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptpmce7os.java:45: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmptpmce7os.java:46: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.contains(\"o\")) {\n             \
    \   result.add(word);\n            } else if (length == 2 && word.contains(\"\
    e\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.contains(\"i\")) {\n                result.add(word);\n            }\
    \ else if (length == 2 && word.contains(\"n\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.contains(\"s\")) {\n             \
    \   result.add(word);\n            } else if (length == 2 && word.contains(\"\
    t\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.contains(\"g\")) {\n                result.add(word);\n            }\
    \ else if (length == 2 && word.contains(\"m\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.contains(\"h\")) {\n             \
    \   result.add(word);\n            } else if (length == 2 && word.contains(\"\
    r\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.contains(\"p\")) {\n                result.add(word);\n            }\
    \ else if (length == 2 && word.contains(\"w\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.contains(\"v\")) {\n             \
    \   result.add(word);\n            } else if (length == 2 && word.contains(\"\
    b\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.contains(\"k\")) {\n                result.add(word);\n            }\
    \ else if (length == 2 && word.contains(\"n\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.contains(\"e\")) {\n             \
    \   result.add(word);\n            } else if (length == 2 && word.contains(\"\
    s\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.contains(\"t\")) {\n                result.add(word);\n            }\
    \ else if (length == 2 && word.contains(\"g\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.contains(\"m\")) {\n             \
    \   result.add(word);\n            } else if (length == 2 && word.contains(\"\
    h\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.contains(\"r\")) {\n                result.add(word);\n            }\
    \ else if (length == 2 && word.contains(\"p\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.contains(\"w\")) {\n             \
    \   result.add(word);\n            } else if (length == 2 && word.contains(\"\
    v\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.contains(\"b\")) {\n                result.add(word);\n            }\
    \ else if (length == 2 && word.contains(\"k\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.contains(\"n\")) {\n             \
    \   result.add(word);\n            } else if (length == 2 && word.contains(\"\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe0h3xkx2.java:88: error: unclosed string literal\n            }\
    \ else if (length == 2 && word.contains(\"\n                                 \
    \                   ^\n/tmp/tmpe0h3xkx2.java:90: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int n\
    \ = Integer.parseInt(word);\n            if (isPrime(n)) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp34x7kr1n.java:28: error: cannot find symbol\n            if (isPrime(n))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp2zbeqv.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp2zbeqv.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int length = word.length();\n            if (length == 1) {\n\
    \                sb.append(word);\n            } else if (length == 2 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'a') {\n                sb.append(word);\n     \
    \       } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'e')\
    \ {\n                sb.append(word);\n            } else if (length == 2 && word.charAt(0)\
    \ == 'e' && word.charAt(1) == 'a') {\n                sb.append(word);\n     \
    \       } else if (length == 2 && word.charAt(0) == 'e' && word.charAt(1) == 'e')\
    \ {\n                sb.append(word);\n            } else if (length == 3 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'a') {\n              \
    \  sb.append(word);\n            } else if (length == 3 && word.charAt(0) == 'a'\
    \ && word.charAt(1) == 'e' && word.charAt(2) == 'a') {\n                sb.append(word);\n\
    \            } else if (length == 3 && word.charAt(0) == 'e' && word.charAt(1)\
    \ == 'a' && word.charAt(2) == 'a') {\n                sb.append(word);\n     \
    \       } else if (length == 3 && word.charAt(0) == 'e' && word.charAt(1) == 'e'\
    \ && word.charAt(2) == 'a') {\n                sb.append(word);\n            }\
    \ else if (length == 3 && word.charAt(0) == 'a' && word.charAt(1) == 'a' && word.charAt(2)\
    \ == 'e') {\n                sb.append(word);\n            } else if (length ==\
    \ 3 && word.charAt(0) == 'a' && word.charAt(1) == 'e' && word.charAt(2) == 'e')\
    \ {\n                sb.append(word);\n            } else if (length == 3 && word.charAt(0)\
    \ == 'e' && word.charAt(1) == 'a' && word.charAt(2) == 'e') {\n              \
    \  sb.append(word);\n            } else if (length == 3 && word.charAt(0) == 'e'\
    \ && word.charAt(1) == 'e' && word.charAt(2) == 'e') {\n                sb.append(word);\n\
    \            } else if (length == 4 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'a' && word.charAt(2) == 'a' && word.charAt(3) == 'a') {\n              \
    \  sb.append(word);\n            } else if (length == 4 && word.charAt(0) == 'a'\
    \ && word.charAt(1) == 'e' && word.charAt(2) == 'a' && word.charAt(3) == 'a')\
    \ {\n                sb.append(word);\n            } else if (length == 4 && word.charAt(0)\
    \ == 'e' && word.charAt(1) == 'a' && word.charAt(2) == 'a' && word.charAt(3) ==\
    \ 'a') {\n                sb.append(word);\n            } else if (length == 4\
    \ && word.charAt(0) == 'e' && word.charAt(1) == 'e' && word.charAt(2\n    }\n\
    \    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzrbfasip.java:61: error: ')' expected\n            } else if (length\
    \ == 4 && word.charAt(0) == 'e' && word.charAt(1) == 'e' && word.charAt(2\n  \
    \                                                                            \
    \                       ^\n/tmp/tmpzrbfasip.java:62: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmpzrbfasip.java:63: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"b\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"b\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.startsWith(\"a\") && word.endsWith(\"\
    z\") && word.startsWith(\"b\") && word.endsWith(\"z\") && word.startsWith(\"c\"\
    ) && word.endsWith(\"z\")) {\n                result.add(word);\n            }\
    \ else if (length == 4 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    b\") && word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\"\
    )) {\n                result.add(word);\n            } else if (length == 5 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"b\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"c\") && word.endsWith(\"z\") && word.startsWith(\"\
    d\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (length == 5 && word.startsWith(\"a\") && word.endsWith(\"z\") &&\
    \ word.startsWith(\"b\") && word.endsWith(\"z\") && word.startsWith(\"c\") &&\
    \ word.endsWith(\"z\") && word.startsWith(\"d\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (length == 6 && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"b\") && word.endsWith(\"z\"\
    ) && word.startsWith(\"c\") && word.endsWith(\"z\") && word.startsWith(\"d\")\
    \ && word.endsWith(\"z\") && word.startsWith(\"e\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (length == 6 && word.startsWith(\"\
    a\") && word.endsWith(\"z\") && word.startsWith(\"b\") && word.endsWith(\"z\"\
    ) \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_yw3qq0y.java:48: error: ')' expected\n            } else if (length\
    \ == 6 && word.startsWith(\"a\") && word.endsWith(\"z\") && word.startsWith(\"\
    b\") && word.endsWith(\"z\") \n                                              \
    \                                                                            \
    \    ^\n/tmp/tmp_yw3qq0y.java:49: error: illegal start of statement\n    }\n \
    \   ^\n/tmp/tmp_yw3qq0y.java:50: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp2zbeqv.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (length == 5 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4))) {\n                result.add(word);\n \
    \           } else if (length == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (length == 8 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n            } else if (length == 10 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2tyubc7i.java:46: error: ')' expected\n            } else if (length\
    \ == 10 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4\n                                      \
    \                                                                            \
    \                                                                            \
    \                                 ^\n/tmp/tmp2tyubc7i.java:47: error: illegal\
    \ start of statement\n    }\n    ^\n/tmp/tmp2tyubc7i.java:48: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt7n8y6gf.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (len == 2 &&\
    \ word.charAt(0) == word.charAt(1)) continue;\n            if (len == 3 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(1) == word.charAt(2)) continue;\n         \
    \   if (len == 3 && word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2))\
    \ continue;\n            if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3)) continue;\n         \
    \   if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2)\
    \ && word.charAt(2) == word.charAt(3)) continue;\n            if (len == 5 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(3) == word.charAt(4)) continue;\n         \
    \   if (len == 5 && word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2)\
    \ && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)) continue;\n\
    \            if (len == 6 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)\
    \ && word.charAt(4) == word.charAt(5)) continue;\n            if (len == 6 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(3) == word.charAt(4) && word.charAt(4) == word.charAt(5))\
    \ continue;\n            if (len == 7 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(5) == word.charAt(6)) continue;\n\
    \            if (len == 7 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(5) == word.charAt(6)) continue;\n\
    \            if (len == 8 && word.charAt(0) == word.charAt(1) && word.charAt(1)\
    \ == word.charAt(2) && word.charAt(2) == word.charAt(3) && word.charAt(3) == word.charAt(4)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(5) == word.charAt(6) && word.charAt(6)\
    \ == word.charAt(7)) continue;\n            if (len == 8 && word.charAt(0) ==\
    \ word.charAt(1) && word.charAt(1) == word.charAt(2) \n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnqc5d7y3.java:42: error: ')' expected\n            if (len == 8\
    \ && word.charAt(0) == word.charAt(1) && word.charAt(1) == word.charAt(2) \n \
    \                                                                            \
    \                   ^\n/tmp/tmpnqc5d7y3.java:43: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmpnqc5d7y3.java:44: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) continue;\n            if (len ==\
    \ 2 && word.charAt(0) == word.charAt(1)) continue;\n            if (len == 3 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)) continue;\n\
    \            if (len == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) continue;\n         \
    \   if (len == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3)\
    \ && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)) continue;\n\
    \            if (len == 6 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9)) continue;\n            if (len == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11)) continue;\n            if (len == 8 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13))\
    \ continue;\n            if (len == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) continue;\n\
    \            if (len == 10 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15) &&\
    \ word.charAt(16) == word.charAt(17)) continue;\n            if (len == 11 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(14\n    }\n    public static void main(String[] args) {\n   \
    \ assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw29ges3x.java:38: error: ')' expected\n            if (len == 11\
    \ && word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11) && word.charAt(12) == word.charAt(13)\
    \ && word.charAt(14\n                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \               ^\n/tmp/tmpw29ges3x.java:39: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmpw29ges3x.java:40: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else {\n                for (int\
    \ i = 2; i <= Math.sqrt(length); i++) {\n                    if (length % i ==\
    \ 0) {\n                        result.add(word);\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3s0y0wf2.java:44)\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoba__dx_.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt7n8y6gf.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            }\n            else if (length == 2 && Character.isLetter(word.charAt(0)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 3 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            }\n            else if (length == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            }\n            else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            }\n            else if (length\
    \ == 8 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6))) {\n                result.add(word);\n\
    \            }\n            else if (length == 9 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7))) {\n                result.add(word);\n\
    \            }\n            else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && \n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfayhlscd.java:56: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpfayhlscd.java:57: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp2zbeqv.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (length == 5 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4))) {\n                result.add(word);\n \
    \           } else if (length == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (length == 8 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n            } else if (length == 10 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2tyubc7i.java:46: error: ')' expected\n            } else if (length\
    \ == 10 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4\n                                      \
    \                                                                            \
    \                                                                            \
    \                                 ^\n/tmp/tmp2tyubc7i.java:47: error: illegal\
    \ start of statement\n    }\n    ^\n/tmp/tmp2tyubc7i.java:48: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n \
    \               result.add(word);\n            } else if (length == 3 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11)) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) {\n                result.add(word);\n \
    \           } else if (length == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) {\n\
    \                result.add(word);\n            } else if (length == 10 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14)\
    \ == word.charAt(15) && word.charAt(16) == word.charAt(17)) {\n              \
    \  result.add(word);\n            } else if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpccfzlicu.java:48: error: <identifier> expected\n            } else\
    \ if (length == 11 && word.charAt(0) == word.charAt(1) && word.\n            \
    \                                                                    ^\n/tmp/tmpccfzlicu.java:50:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpccfzlicu.java:50: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpccfzlicu.java:50: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpccfzlicu.java:50: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpccfzlicu.java:50:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpccfzlicu.java:60: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp2zbeqv.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"e\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"i\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    i\") && word.startsWith(\"a\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    i\") && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    i\") && word.startsWith(\"e\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    i\") && word.startsWith(\"a\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    i\") && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    i\") && word.startsWith(\"a\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    i\") && word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"i\") && word.endsWith(\"i\") && word.startsWith(\"o\"\
    ) && word.endsWith(\"o\")) {\n                result.add(word);\n            }\
    \ else if (length == 4 && word.startsWith(\"e\") && word.endsWith(\"i\") && word.\n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp45k4dvqt.java:56: error: <identifier> expected\n            } else\
    \ if (length == 4 && word.startsWith(\"e\") && word.endsWith(\"i\") && word.\n\
    \                                                                            \
    \             ^\n/tmp/tmp45k4dvqt.java:57: error: illegal start of statement\n\
    \    }\n    ^\n/tmp/tmp45k4dvqt.java:58: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (length == 5 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))) {\n\
    \                result.add(word);\n            } else if (length == 6 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4)))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))) {\n\
    \                result.add(word);\n            } else if (length == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (length == 9 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7))) {\n\
    \                result.add(word);\n            } else if (length == 10 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(\n \
    \   }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5noqroa2.java:49: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp5noqroa2.java:50: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else if (length == 2 && word.equals(\"the\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.equals(\"a\")) {\n               \
    \ result.add(word);\n            } else if (length == 2 && word.equals(\"an\"\
    )) {\n                result.add(word);\n            } else if (length == 3 &&\
    \ word.equals(\"is\")) {\n                result.add(word);\n            } else\
    \ if (length == 3 && word.equals(\"was\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.equals(\"were\")) {\n            \
    \    result.add(word);\n            } else if (length == 3 && word.equals(\"am\"\
    )) {\n                result.add(word);\n            } else if (length == 3 &&\
    \ word.equals(\"is\")) {\n                result.add(word);\n            } else\
    \ if (length == 3 && word.equals(\"was\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.equals(\"were\")) {\n            \
    \    result.add(word);\n            } else if (length == 3 && word.equals(\"am\"\
    )) {\n                result.add(word);\n            } else if (length == 4 &&\
    \ word.equals(\"is\")) {\n                result.add(word);\n            } else\
    \ if (length == 4 && word.equals(\"was\")) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.equals(\"were\")) {\n            \
    \    result.add(word);\n            } else if (length == 4 && word.equals(\"am\"\
    )) {\n                result.add(word);\n            } else if (length == 5 &&\
    \ word.equals(\"is\")) {\n                result.add(word);\n            } else\
    \ if (length == 5 && word.equals(\"was\")) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.equals(\"were\")) {\n            \
    \    result.add(word);\n            } else if (length == 5 && word.equals(\"am\"\
    )) {\n                result.add(word);\n            } else if (length == 6 &&\
    \ word.equals(\"is\")) {\n                result.add(word);\n            } else\
    \ if (length == 6 && word.equals(\"was\")) {\n                result.add(word);\n\
    \            } else if (length == 6 && word.equals(\"were\")) {\n            \
    \    result.add(word);\n            } else if (length == 6 && word.equals(\"am\"\
    )) {\n                result.add(word);\n            } else if (length == 7 &&\
    \ word.equals(\"is\")) {\n                result.add(word);\n            } else\
    \ if (length == 7 && word.equals(\"was\")) {\n                result.add(word);\n\
    \            } else if (length == 7 && word.equals(\"were\")) {\n            \
    \    result.add(word);\n            } else if (length == 7 && word.equals(\"am\"\
    )) {\n                result.add(word);\n            } else if (length == 8 &&\
    \ word.equals(\"is\")) {\n                result.add(word);\n            } else\
    \ if (length == 8 && word.equals(\"was\")) {\n                result.add(word);\n\
    \            } else if (\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx52nhubz.java:89: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpx52nhubz.java:90: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'a')\
    \ {\n                result.add(word);\n            } else if (length == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'i') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'u') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'e' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'e' && word.charAt(1)\
    \ == 'i') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'e' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'e' && word.charAt(1)\
    \ == 'u') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'i' && word.charAt(1) == 'i') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'i' && word.charAt(1)\
    \ == 'o') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'i' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'o' && word.charAt(1)\
    \ == 'o') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'o' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'u' && word.charAt(1)\
    \ == 'u') {\n                result.add(word);\n            } else if (length\
    \ == 3 && word.charAt(0) == 'a' && word.charAt(1) == 'a' && word.charAt(2) ==\
    \ 'a') {\n                result.add(word);\n            } else if (length ==\
    \ 3 && word.charAt(0) == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'e')\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'i') {\n\
    \                result.add(word);\n            } else if (length == 3 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'o') {\n              \
    \  result.add(word);\n            } else if (length == 3 && word.charAt(0) ==\
    \ 'a' && \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsry1nm_h.java:69: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpsry1nm_h.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793803
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else if (length == 2 && word.charAt(0) == 'a' && word.charAt(1) == 'a')\
    \ {\n                result.add(word);\n            } else if (length == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (length == 2 && word.charAt(0) == 'e' && word.charAt(1)\
    \ == 'a') {\n                result.add(word);\n            } else if (length\
    \ == 2 && word.charAt(0) == 'e' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (length == 3 && word.charAt(0) == 'a' && word.charAt(1)\
    \ == 'a' && word.charAt(2) == 'a') {\n                result.add(word);\n    \
    \        } else if (length == 3 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'e' && word.charAt(2) == 'a') {\n                result.add(word);\n       \
    \     } else if (length == 3 && word.charAt(0) == 'e' && word.charAt(1) == 'a'\
    \ && word.charAt(2) == 'a') {\n                result.add(word);\n           \
    \ } else if (length == 3 && word.charAt(0) == 'e' && word.charAt(1) == 'e' &&\
    \ word.charAt(2) == 'a') {\n                result.add(word);\n            } else\
    \ if (length == 3 && word.charAt(0) == 'a' && word.charAt(1) == 'a' && word.charAt(2)\
    \ == 'e') {\n                result.add(word);\n            } else if (length\
    \ == 3 && word.charAt(0) == 'a' && word.charAt(1) == 'e' && word.charAt(2) ==\
    \ 'e') {\n                result.add(word);\n            } else if (length ==\
    \ 3 && word.charAt(0) == 'e' && word.charAt(1) == 'a' && word.charAt(2) == 'e')\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ word.charAt(0) == 'e' && word.charAt(1) == 'e' && word.charAt(2) == 'e') {\n\
    \                result.add(word);\n            } else if (length == 4 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'a' && word.charAt(3) ==\
    \ 'a') {\n                result.add(word);\n            } else if (length ==\
    \ 4 && word.charAt(0) == 'a' && word.charAt(1) == 'e' && word.charAt(2) == 'a'\
    \ && word.charAt(3) == 'a') {\n                result.add(word);\n           \
    \ } else if (length == 4 && word.charAt(0) == 'e' && word.charAt(1) == 'a' &&\
    \ word.charAt(2) == 'a' && word.charAt(3) == 'a') {\n                result.add(word);\n\
    \            } else if (length == 4 && word.charAt(0) == 'e' && word.charAt(1)\
    \ == 'e' && word.charAt(2) == 'a' && word.charAt(3) == 'a') {\n              \
    \  result.add(word);\n            } else if (length == 4 && word.charAt(0\n  \
    \  }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0_0cyq3l.java:62: error: ')' expected\n            } else if (length\
    \ == 4 && word.charAt(0\n                                                   ^\n\
    /tmp/tmp0_0cyq3l.java:63: error: illegal start of statement\n    }\n    ^\n/tmp/tmp0_0cyq3l.java:64:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else if (length == 2 && word.charAt(0) == word.charAt(1)) {\n          \
    \      result.add(word);\n            } else if (length == 3 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3)) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5)) {\n                result.add(word);\n\
    \            } else if (length == 5 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9))\
    \ {\n                result.add(word);\n            } else if (length == 7 &&\
    \ word.charAt(0) == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4)\
    \ == word.charAt(5) && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9)\
    \ && word.charAt(10) == word.charAt(11)) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13)) {\n                result.add(word);\n \
    \           } else if (length == 9 && word.charAt(0) == word.charAt(1) && word.charAt(2)\
    \ == word.charAt(3) && word.charAt(4) == word.charAt(5) && word.charAt(6) == word.charAt(7)\
    \ && word.charAt(8) == word.charAt(9) && word.charAt(10) == word.charAt(11) &&\
    \ word.charAt(12) == word.charAt(13) && word.charAt(14) == word.charAt(15)) {\n\
    \                result.add(word);\n            } else if (length == 10 && word.charAt(0)\
    \ == word.charAt(1) && word.charAt(2) == word.charAt(3) && word.charAt(4) == word.charAt(5)\
    \ && word.charAt(6) == word.charAt(7) && word.charAt(8) == word.charAt(9) && word.charAt(10)\
    \ == word.charAt(11) && word.charAt(12) == word.charAt(13) && word.charAt(14)\
    \ == word.charAt(15) && word.charAt(16) == word.charAt(17)) {\n              \
    \  result.add(word);\n            } else if (length == 11 && word.charAt(0) ==\
    \ word.charAt(1) && word.\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzky93eq9.java:48: error: <identifier> expected\n            } else\
    \ if (length == 11 && word.charAt(0) == word.charAt(1) && word.\n            \
    \                                                                    ^\n/tmp/tmpzky93eq9.java:49:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpzky93eq9.java:50: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659793805
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"a\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.startsWith(\"e\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.startsWith(\"e\") && word.endsWith(\"e\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"i\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"i\") && word.endsWith(\"o\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    a\") && word.startsWith(\"i\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    e\") && word.startsWith(\"i\") && word.endsWith(\"o\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"i\") && word.endsWith(\"o\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    a\") && word.startsWith(\"i\") && word.endsWith(\"o\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"o\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    e\") && word.startsWith(\"o\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"o\") && word.endsWith(\"o\")) {\n                result.add(word);\n\
    \            } else if (len == 3 && word.startsWith(\"e\") && word.endsWith(\"\
    a\") && word.startsWith(\"o\") && word.endsWith(\"o\")) {\n                \n\
    \    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxuolko5.java:59: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    z\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.startsWith(\"a\") && word.endsWith(\"\n    }\n    public static void\
    \ main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmjttenaj.java:68: error: unclosed string literal\n            }\
    \ else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\n       \
    \                                                                     ^\n/tmp/tmpmjttenaj.java:70:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793805
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && Character.isLetter(word.charAt(0))) {\n\
    \                result.add(word);\n            } else if (length == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (length == 3 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))) {\n\
    \                result.add(word);\n            } else if (length == 3 && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (length == 4 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2))) {\n                result.add(word);\n\
    \            } else if (length == 5 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (length == 6 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4))) {\n                result.add(word);\n \
    \           } else if (length == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (length == 8 &&\
    \ Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1)) &&\
    \ Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)) &&\
    \ Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)) &&\
    \ Character.isLetter(word.charAt(6))) {\n                result.add(word);\n \
    \           } else if (length == 9 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5))\
    \ && Character.isLetter(word.charAt(6)) && Character.isLetter(word.charAt(7)))\
    \ {\n                result.add(word);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp55s0qene.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int n\
    \ = Integer.parseInt(word);\n            if (isPrime(n)) {\n                result.add(word);\n\
    \            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp34x7kr1n.java:28: error: cannot find symbol\n            if (isPrime(n))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'a') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'i') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'u') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'e' && word.charAt(1) == 'e') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'e' && word.charAt(1) ==\
    \ 'i') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'e' && word.charAt(1) == 'o') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'e' && word.charAt(1) ==\
    \ 'u') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'i' && word.charAt(1) == 'i') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'i' && word.charAt(1) ==\
    \ 'o') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'i' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'o' && word.charAt(1) ==\
    \ 'o') {\n                result.add(word);\n            } else if (len == 2 &&\
    \ word.charAt(0) == 'o' && word.charAt(1) == 'u') {\n                result.add(word);\n\
    \            } else if (len == 2 && word.charAt(0) == 'u' && word.charAt(1) ==\
    \ 'u') {\n                result.add(word);\n            } else if (len == 3 &&\
    \ word.charAt(0) == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'a') {\n\
    \                result.add(word);\n            } else if (len == 3 && word.charAt(0)\
    \ == 'a' && word.charAt(1) == 'a' && word.charAt(2) == 'e') {\n              \
    \  result.add(word);\n            } else if (len == 3 && word.charAt(0) == 'a'\
    \ && word.charAt(1) == 'a' && word.charAt(2) == 'i') {\n                result.add(word);\n\
    \            } else if (len == 3 && word.charAt(0) == 'a' && word.charAt(1) ==\
    \ 'a' && word.charAt(2) == 'o') {\n                result.add(word);\n       \
    \     } else if (len == 3 && word.charAt(0) == 'a' && \n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc4fo4juy.java:69: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpc4fo4juy.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793805
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else if (length == 2 && word.equals(\"a\") || word.equals(\"the\")) {\n\
    \                result.add(word);\n            } else if (length == 2 && word.equals(\"\
    an\") || word.equals(\"the\")) {\n                result.add(word);\n        \
    \    } else if (length == 3 && word.equals(\"the\") || word.equals(\"a\") || word.equals(\"\
    an\")) {\n                result.add(word);\n            } else if (length ==\
    \ 2 && word.equals(\"a\") || word.equals(\"an\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.equals(\"the\") || word.equals(\"\
    a\") || word.equals(\"an\")) {\n                result.add(word);\n          \
    \  } else if (length == 2 && word.equals(\"a\") || word.equals(\"an\")) {\n  \
    \              result.add(word);\n            } else if (length == 3 && word.equals(\"\
    the\") || word.equals(\"a\") || word.equals(\"an\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.equals(\"a\") || word.equals(\"an\"\
    )) {\n                result.add(word);\n            } else if (length == 3 &&\
    \ word.equals(\"the\") || word.equals(\"a\") || word.equals(\"an\")) {\n     \
    \           result.add(word);\n            } else if (length == 2 && word.equals(\"\
    a\") || word.equals(\"an\")) {\n                result.add(word);\n          \
    \  } else if (length == 3 && word.equals(\"the\") || word.equals(\"a\") || word.equals(\"\
    an\")) {\n                result.add(word);\n            } else if (length ==\
    \ 2 && word.equals(\"a\") || word.equals(\"an\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.equals(\"the\") || word.equals(\"\
    a\") || word.equals(\"an\")) {\n                result.add(word);\n          \
    \  } else if (length == 2 && word.equals(\"a\") || word.equals(\"an\")) {\n  \
    \              result.add(word);\n            } else if (length == 3 && word.equals(\"\
    the\") || word.equals(\"a\") || word.equals(\"an\")) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.equals(\"a\") || word.equals(\"an\"\
    )) {\n                result.add(word);\n            } else if (length == 3 &&\
    \ word.equals(\"the\") || word.equals(\"a\") || word.equals(\"an\")) {\n     \
    \           result.add(word);\n            } else if (length == 2 && word.equals(\"\
    a\") || word.equals(\"an\")) {\n                result.add(word);\n          \
    \  } else if (length == 3 && word.equals(\"the\") || word.equals(\"a\") || word.equals(\"\
    an\")) {\n                result.add(word);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt7bcwyi6.java:69: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   }\n            else if (length == 2 && word.startsWith(\"a\") && word.endsWith(\"\
    a\")) {\n                result.add(word);\n            }\n            else if\
    \ (length == 2 && word.startsWith(\"a\") && word.endsWith(\"e\")) {\n        \
    \        result.add(word);\n            }\n            else if (length == 2 &&\
    \ word.startsWith(\"e\") && word.endsWith(\"a\")) {\n                result.add(word);\n\
    \            }\n            else if (length == 2 && word.startsWith(\"e\") &&\
    \ word.endsWith(\"e\")) {\n                result.add(word);\n            }\n\
    \            else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"i\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            }\n            else if (length == 3 && word.startsWith(\"e\") &&\
    \ word.endsWith(\"i\") && word.startsWith(\"a\") && word.endsWith(\"a\")) {\n\
    \                result.add(word);\n            }\n            else if (length\
    \ == 3 && word.startsWith(\"i\") && word.endsWith(\"a\") && word.startsWith(\"\
    e\") && word.endsWith(\"e\")) {\n                result.add(word);\n         \
    \   }\n            else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"i\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            }\n            else if (length == 3 && word.startsWith(\"e\") &&\
    \ word.endsWith(\"i\") && word.startsWith(\"a\") && word.endsWith(\"a\")) {\n\
    \                result.add(word);\n            }\n            else if (length\
    \ == 3 && word.startsWith(\"i\") && word.endsWith(\"a\") && word.startsWith(\"\
    e\") && word.endsWith(\"e\")) {\n                result.add(word);\n         \
    \   }\n            else if (length == 3 && word.startsWith(\"a\") && word.endsWith(\"\
    e\") && word.startsWith(\"i\") && word.endsWith(\"i\")) {\n                result.add(word);\n\
    \            }\n            else if (length == 3 && word.startsWith(\"e\") &&\
    \ word.endsWith(\"i\") && word.startsWith(\"a\") && word.endsWith(\"a\")) {\n\
    \                result.add(word);\n            }\n            else if (length\
    \ == 3 && word.startsWith(\"i\") && word.endsWith(\"a\") && word.startsWith(\"\
    e\") && word.endsWith(\"e\")) {\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n\
    \    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf2gd2xxm.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\
    \ else if (len == 2 && Character.isLetter(word.charAt(0))) {\n               \
    \ result.add(word);\n            } else if (len == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (len == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (len == 3 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (len == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (len == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (len == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (len == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (len == 9 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7))) {\n                result.add(word);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4jgbv56n.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                result.add(word);\n            }\
    \ else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n   \
    \             result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\") && word.endsWith(\"z\")) {\n                result.add(word);\n         \
    \   } else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"z\")) {\n\
    \                result.add(word);\n            } else if (len == 2 && word.startsWith(\"\
    a\") && word.endsWith(\"\n    }\n    public static void main(String[] args) {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8i46dopb.java:68: error: unclosed string literal\n            }\
    \ else if (len == 2 && word.startsWith(\"a\") && word.endsWith(\"\n          \
    \                                                               ^\n/tmp/tmp8i46dopb.java:70:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(len); i++)\
    \ {\n                    if (len % i == 0) {\n                        result.add(word);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt7n8y6gf.java:42)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int len = word.length();\n\
    \            if (len == 1) {\n                continue;\n            }\n     \
    \       boolean isPrime = true;\n            for (int i = 2; i <= Math.sqrt(len);\
    \ i++) {\n                if (len % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                result.add(word);\n            }\n        }\n \
    \       return result.stream().collect(Collectors.joining(\" \"));\n    }\n  \
    \  public static void main(String[] args) {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793852
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int len\
    \ = word.length();\n            if (len == 1) {\n                result.add(word);\n\
    \            } else if (len == 2 && Character.isLetter(word.charAt(0))) {\n  \
    \              result.add(word);\n            } else if (len == 2 && Character.isLetter(word.charAt(1)))\
    \ {\n                result.add(word);\n            } else if (len == 3 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1))) {\n                result.add(word);\n\
    \            } else if (len == 3 && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3)))\
    \ {\n                result.add(word);\n            } else if (len == 4 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2)))\
    \ {\n                result.add(word);\n            } else if (len == 5 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3))) {\n                result.add(word);\n\
    \            } else if (len == 6 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4))) {\n                result.add(word);\n\
    \            } else if (len == 7 && Character.isLetter(word.charAt(0)) && Character.isLetter(word.charAt(1))\
    \ && Character.isLetter(word.charAt(2)) && Character.isLetter(word.charAt(3))\
    \ && Character.isLetter(word.charAt(4)) && Character.isLetter(word.charAt(5)))\
    \ {\n                result.add(word);\n            } else if (len == 8 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6)))\
    \ {\n                result.add(word);\n            } else if (len == 9 && Character.isLetter(word.charAt(0))\
    \ && Character.isLetter(word.charAt(1)) && Character.isLetter(word.charAt(2))\
    \ && Character.isLetter(word.charAt(3)) && Character.isLetter(word.charAt(4))\
    \ && Character.isLetter(word.charAt(5)) && Character.isLetter(word.charAt(6))\
    \ && Character.isLetter(word.charAt(7))) {\n                result.add(word);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyt8e6f1h.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpyt8e6f1h.java:52: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpyt8e6f1h.java:52: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpyt8e6f1h.java:52: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpyt8e6f1h.java:52: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpyt8e6f1h.java:62:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            if (isPrime(word.length()))\
    \ {\n                result.add(word);\n            }\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef390ets.java:27: error: cannot find symbol\n            if (isPrime(word.length()))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else if (length == 2 && word.contains(\"e\")) {\n             \
    \   result.add(word);\n            } else if (length == 2 && word.contains(\"\
    s\")) {\n                result.add(word);\n            } else if (length == 2\
    \ && word.contains(\"t\")) {\n                result.add(word);\n            }\
    \ else if (length == 3 && word.contains(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 3 && word.contains(\"s\")) {\n             \
    \   result.add(word);\n            } else if (length == 3 && word.contains(\"\
    t\")) {\n                result.add(word);\n            } else if (length == 4\
    \ && word.contains(\"e\")) {\n                result.add(word);\n            }\
    \ else if (length == 4 && word.contains(\"s\")) {\n                result.add(word);\n\
    \            } else if (length == 4 && word.contains(\"t\")) {\n             \
    \   result.add(word);\n            } else if (length == 5 && word.contains(\"\
    e\")) {\n                result.add(word);\n            } else if (length == 5\
    \ && word.contains(\"s\")) {\n                result.add(word);\n            }\
    \ else if (length == 5 && word.contains(\"t\")) {\n                result.add(word);\n\
    \            } else if (length == 6 && word.contains(\"e\")) {\n             \
    \   result.add(word);\n            } else if (length == 6 && word.contains(\"\
    s\")) {\n                result.add(word);\n            } else if (length == 6\
    \ && word.contains(\"t\")) {\n                result.add(word);\n            }\
    \ else if (length == 7 && word.contains(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 7 && word.contains(\"s\")) {\n             \
    \   result.add(word);\n            } else if (length == 7 && word.contains(\"\
    t\")) {\n                result.add(word);\n            } else if (length == 8\
    \ && word.contains(\"e\")) {\n                result.add(word);\n            }\
    \ else if (length == 8 && word.contains(\"s\")) {\n                result.add(word);\n\
    \            } else if (length == 8 && word.contains(\"t\")) {\n             \
    \   result.add(word);\n            } else if (length == 9 && word.contains(\"\
    e\")) {\n                result.add(word);\n            } else if (length == 9\
    \ && word.contains(\"s\")) {\n                result.add(word);\n            }\
    \ else if (length == 9 && word.contains(\"t\")) {\n                result.add(word);\n\
    \            } else if (length == 10 && word.contains(\"e\")) {\n            \
    \    result.add(word);\n            } else if (length == 10 && word.contains(\"\
    s\")) {\n                result.add(word);\n            } else if (length == 10\
    \ && word.contains(\"t\")) {\n                result.add(word);\n            }\
    \ else if (length == 11 && word.contains(\"e\")) {\n                result.add(word);\n\
    \            } else if (length == 11 && word.contains(\"s\")) {\n            \
    \    result.add(word);\n            } else if (length == 11 && word.contains(\"\
    \n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrk8kvkr.java:88: error: unclosed string literal\n            }\
    \ else if (length == 11 && word.contains(\"\n                                \
    \                     ^\n/tmp/tmpcrk8kvkr.java:90: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        List<String> result = new ArrayList<>();\n        String[] words = sentence.split(\"\
    \ \");\n        for (String word : words) {\n            int length = word.length();\n\
    \            if (length == 1) {\n                result.add(word);\n         \
    \   } else {\n                boolean isPrime = true;\n                for (int\
    \ i = 2; i <= Math.sqrt(length); i++) {\n                    if (length % i ==\
    \ 0) {\n                        isPrime = false;\n                        break;\n\
    \                    }\n                }\n                if (isPrime) {\n  \
    \                  result.add(word);\n                }\n            }\n     \
    \   }\n        return result.stream().collect(Collectors.joining(\" \"));\n  \
    \  }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpikydmgya.java:46)\n"
  stdout: ''
  timestamp: 1659793853
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        Arrays.sort(words);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (String word : words)\
    \ {\n            int length = word.length();\n            if (length == 1) {\n\
    \                sb.append(word);\n            } else {\n                for (int\
    \ i = 2; i <= Math.sqrt(length); i++) {\n                    if (length % i ==\
    \ 0) {\n                        sb.append(word);\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4l3icnim.java:43)\n"
  stdout: ''
  timestamp: 1659793804
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static String wordsInSentence(String sentence) {\n\
    \        String[] words = sentence.split(\" \");\n        List<String> result\
    \ = new ArrayList<>();\n        for (String word : words) {\n            int length\
    \ = word.length();\n            if (length == 1) {\n                result.add(word);\n\
    \            } else {\n                for (int i = 2; i <= Math.sqrt(length);\
    \ i++) {\n                    if (length % i == 0) {\n                       \
    \ result.add(word);\n                        break;\n                    }\n \
    \               }\n            }\n        }\n        return result.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp2zbeqv.java:42)\n"
  stdout: ''
