language: java
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = true;\n        if\
    \ (date == null || date.trim().isEmpty()) {\n            valid = false;\n    \
    \    } else {\n            String[] dateParts = date.split(\"-\");\n         \
    \   if (dateParts.length != 3) {\n                valid = false;\n           \
    \ } else {\n                try {\n                    int month = Integer.parseInt(dateParts[0]);\n\
    \                    int day = Integer.parseInt(dateParts[1]);\n             \
    \       int year = Integer.parseInt(dateParts[2]);\n                    if (month\
    \ < 1 || month > 12) {\n                        valid = false;\n             \
    \       } else if (day < 1 || day > 31) {\n                        valid = false;\n\
    \                    } else if (month == 2 && day > 30) {\n                  \
    \      valid = false;\n                    } else if (month == 2 && day > 29)\
    \ {\n                        valid = false;\n                    } else if (month\
    \ == 2 && day > 28) {\n                        valid = false;\n              \
    \      } else if (month == 2 && day > 27) {\n                        valid = false;\n\
    \                    } else if (month == 2 && day > 26) {\n                  \
    \      valid = false;\n                    } else if (month == 2 && day > 25)\
    \ {\n                        valid = false;\n                    } else if (month\
    \ == 2 && day > 24) {\n                        valid = false;\n              \
    \      } else if (month == 2 && day > 23) {\n                        valid = false;\n\
    \                    } else if (month == 2 && day > 22) {\n                  \
    \      valid = false;\n                    } else if (month == 2 && day > 21)\
    \ {\n                        valid = false;\n                    } else if (month\
    \ == 2 && day > 20) {\n                        valid = false;\n              \
    \      } else if (month == 2 && day > 19) {\n                        valid = false;\n\
    \                    } else if (month == 2 && day > 18) {\n                  \
    \      valid = false;\n                    } else if (month == 2 && day > 17)\
    \ {\n                        valid = false;\n                    } else if (month\
    \ == 2 && day > 16) {\n                        valid = false;\n              \
    \      } else if (month == 2 && day > 15) {\n                        valid = false;\n\
    \                    } else if (month == 2 && day > 14) {\n                  \
    \      valid = false;\n                    } else if (month == 2 && day > 13)\
    \ {\n                        valid = false;\n                    } else if (month\
    \ == 2 && day > 12) {\n                        valid = false;\n              \
    \      } else if (month == 2 && day > 11) {\n                        valid = false;\n\
    \                    } else if (month == 2 && day > 10) {\n                  \
    \      valid = false;\n                    } else if (month == 2 && day > 9) {\n\
    \                        valid = false;\n                    } else if (month\
    \ == 2 && day > 8) {\n                        valid = false;\n               \
    \     } else if (month == 2 && day > 7) {\n                        valid = false;\n\
    \                    } else if (month == 2 && day > 6) {\n                   \
    \     valid = false;\n                    } else if (month == 2 && day > 5) {\n\
    \                        valid = false;\n                    } else if (month\
    \ == 2 && day > 4) {\n                        valid = false;\n               \
    \     } else if (month == 2 && day > 3) {\n                        valid = false;\n\
    \                    } else if (month == 2 && day > 2) {\n                   \
    \     valid = false;\n                    } else if (month == 2 && \n    }\n \
    \   public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplojly7l8.java:102: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmplojly7l8.java:103: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmplojly7l8.java:103: error:\
    \ ';' expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmplojly7l8.java:103:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmplojly7l8.java:103: error: ';' expected\n   \
    \ public static void main(String[] args) {\n                           ^\n/tmp/tmplojly7l8.java:103:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmplojly7l8.java:35: error: 'try' without\
    \ 'catch', 'finally' or resource declarations\n                try {\n       \
    \         ^\n/tmp/tmplojly7l8.java:122: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmplojly7l8.java:123: error: reached end of file while parsing\n9\
    \ errors\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        int month1 = Integer.parseInt(dateParts[0]);\n        int day1\
    \ = Integer.parseInt(dateParts[1]);\n        int year1 = Integer.parseInt(dateParts[2]);\n\
    \        int month2 = Integer.parseInt(dateParts[0]);\n        int day2 = Integer.parseInt(dateParts[1]);\n\
    \        int year2 = Integer.parseInt(dateParts[2]);\n        if (month1 < 1 ||\
    \ month1 > 12) {\n            return false;\n        }\n        if (month2 < 1\
    \ || month2 > 12) {\n            return false;\n        }\n        if (day1 <\
    \ 1 || day1 > 31) {\n            return false;\n        }\n        if (day2 <\
    \ 1 || day2 > 30) {\n            return false;\n        }\n        if (month1\
    \ != month2) {\n            return false;\n        }\n        if (year1 != year2)\
    \ {\n            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        LocalDate date1 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date2 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date3 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date4 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date5 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date6 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date7 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date8 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date9 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date10 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date11 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date12 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date13 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date14 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date15 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date16 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date17 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpobotv26r.java:51: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpobotv26r.java:51: error: ')' expected\n    }\n     ^\n/tmp/tmpobotv26r.java:52:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \  ^\n/tmp/tmpobotv26r.java:52: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n                  ^\n/tmp/tmpobotv26r.java:52:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                   ^\n/tmp/tmpobotv26r.java:52: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                                        \
    \ ^\n/tmp/tmpobotv26r.java:71: error: reached end of file while parsing\n}\n ^\n\
    7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        Date date1 = null;\n  \
    \      try {\n            date1 = sdf.parse(date);\n        } catch (ParseException\
    \ e) {\n            e.printStackTrace();\n        }\n        Calendar cal = Calendar.getInstance();\n\
    \        cal.setTime(date1);\n        int month = cal.get(Calendar.MONTH);\n \
    \       int day = cal.get(Calendar.DAY_OF_MONTH);\n        int year = cal.get(Calendar.YEAR);\n\
    \        boolean valid = false;\n        if (date.length() > 0) {\n          \
    \  if (day < 1 || day > 31 && month < 1 || month > 12) {\n                valid\
    \ = false;\n            } else if (day < 1 || day > 30 && month < 4 || month >\
    \ 6) {\n                valid = false;\n            } else if (day < 1 || day\
    \ > 29 && month < 2) {\n                valid = false;\n            } else {\n\
    \                valid = true;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2xyrlgpp.java:28: error: cannot find symbol\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmp2xyrlgpp.java:28: error: cannot find symbol\n\
    \        SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n      \
    \                             ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n/tmp/tmp2xyrlgpp.java:32: error: cannot find symbol\n       \
    \ } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       System.out.println(\"Invalid date\");\n            return valid;\n   \
    \     }\n        int month = Integer.parseInt(dateParts[0]);\n        int day\
    \ = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            System.out.println(\"Invalid\
    \ month\");\n            return valid;\n        }\n        if (day < 1 || day\
    \ > 31) {\n            System.out.println(\"Invalid day\");\n            return\
    \ valid;\n        }\n        if (month == 2 && day > 30) {\n            System.out.println(\"\
    Invalid day\");\n            return valid;\n        }\n        if (month == 2\
    \ && day > 29) {\n            System.out.println(\"Invalid day\");\n         \
    \   return valid;\n        }\n        if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n           \
    \ if (day < 1 || day > 31) {\n                System.out.println(\"Invalid day\"\
    );\n                return valid;\n            }\n        }\n        if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1\
    \ || day > 30) {\n                System.out.println(\"Invalid day\");\n     \
    \           return valid;\n            }\n        }\n        if (month == 2) {\n\
    \            if (day < 1 || day > 29) {\n                System.out.println(\"\
    Invalid day\");\n                return valid;\n            }\n        }\n   \
    \     valid = true;\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: 'Invalid month

    Invalid day

    Invalid day

    Invalid date

    Invalid day

    Invalid month

    Invalid date

    Invalid date

    Invalid date

    Invalid month

    Invalid date

    '
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            int daysInMonth[] = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int days[] = date.split(\"\
    -\")[0].split(\"-\");\n            int months[] = date.split(\"-\")[1].split(\"\
    -\");\n            int years[] = date.split(\"-\")[2].split(\"-\");\n        \
    \    int day1 = Integer.parseInt(days[0]);\n            int day2 = Integer.parseInt(days[1]);\n\
    \            int day3 = Integer.parseInt(days[2]);\n            int month1 = Integer.parseInt(months[0]);\n\
    \            int month2 = Integer.parseInt(months[1]);\n            int month3\
    \ = Integer.parseInt(months[2]);\n            int year1 = Integer.parseInt(years[0]);\n\
    \            int year2 = Integer.parseInt(years[1]);\n            int year3 =\
    \ Integer.parseInt(years[2]);\n            int daysInMonth1 = daysInMonth[month1\
    \ - 1];\n            int daysInMonth2 = daysInMonth[month2 - 1];\n           \
    \ int daysInMonth3 = daysInMonth[month3 - 1];\n            int daysInMonth4 =\
    \ daysInMonth[month4 - 1];\n            int daysInMonth5 = daysInMonth[month5\
    \ - 1];\n            int daysInMonth6 = daysInMonth[month6 - 1];\n           \
    \ int daysInMonth7 = daysInMonth[month7 - 1];\n            int daysInMonth8 =\
    \ daysInMonth[month8 - 1];\n            int daysInMonth9 = daysInMonth[month9\
    \ - 1];\n            int daysInMonth10 = daysInMonth[month10 - 1];\n         \
    \   int daysInMonth11 = daysInMonth[month11 - 1];\n            int daysInMonth12\
    \ = daysInMonth[month12 - 1];\n            int daysInMonth13 = daysInMonth[month13\
    \ - 1];\n            int daysInMonth14 = daysInMonth[month14 - 1];\n         \
    \   int daysInMonth15 = daysInMonth[month15 - 1];\n            int daysInMonth16\
    \ = daysInMonth[month16 - 1];\n            int daysInMonth17 = daysInMonth[month17\
    \ - 1];\n            int daysInMonth18 = daysInMonth[month18 - 1];\n         \
    \   int daysInMonth19 = daysInMonth[month19 - 1];\n            int daysInMonth20\
    \ = daysInMonth[month20 - 1];\n            int daysInMonth21 = daysInMonth[month21\
    \ - 1];\n            int daysInMonth22 = daysInMonth[month22 - 1];\n         \
    \   int daysInMonth23 = daysInMonth[month23 - 1];\n            int daysInMonth24\
    \ = daysInMonth[month24 - 1];\n            int daysInMonth25 = daysInMonth[month25\
    \ - 1];\n            int daysInMonth26 = daysInMonth[month26 - 1];\n         \
    \   \n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpee65o9tw.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpee65o9tw.java:70: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpee65o9tw.java:70: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpee65o9tw.java:70: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpee65o9tw.java:70: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpee65o9tw.java:89:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 30) {\n            return false;\n        }\n \
    \       if (month == 2 && day > 29) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 28) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 27) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 26) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 25) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 24) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 23) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 22) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 21) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 20) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 19) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 18) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 17) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 16) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 15) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 14) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 13) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 12) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 11) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 10) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 9) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 8) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 7) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 6) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 5) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 4) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 3) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 2) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 1) {\n            return false;\n        }\n\
    \        if (month == 1) {\n            if (day > 31) {\n                return\
    \ false;\n\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvvncpi6c.java:136: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpvvncpi6c.java:136: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpvvncpi6c.java:136: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpvvncpi6c.java:136: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpvvncpi6c.java:136: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpvvncpi6c.java:155: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        boolean valid = false;\n        if (date.length() > 0) {\n          \
    \  if (month >= 1 && month <= 12) {\n                if (day >= 1 && day <= 31)\
    \ {\n                    if (month != 2 && month != 4 && month != 6 && month !=\
    \ 9 && month != 11) {\n                        if (day >= 1 && day <= 30) {\n\
    \                            if (month != 1 && month != 3 && month != 5 && month\
    \ != 7 && month != 8 && month != 10 && month != 12) {\n                      \
    \          valid = true;\n                            }\n                    \
    \    }\n                    }\n                }\n            }\n        }\n \
    \       return valid;\n    }\n    public static void main(String[] args) {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdfn9n4eb.java:49)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        int month;\n        int day;\n        int year;\n        try {\n\
    \            month = Integer.parseInt(dateParts[0]);\n            day = Integer.parseInt(dateParts[1]);\n\
    \            year = Integer.parseInt(dateParts[2]);\n        } catch (NumberFormatException\
    \ nfe) {\n            return false;\n        }\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (day < 1 || day >\
    \ 31) {\n            return false;\n        }\n        if (month == 2 && day >\
    \ 30) {\n            return false;\n        }\n        if (month == 4 && day >\
    \ 29) {\n            return false;\n        }\n        if (month == 6 && day >\
    \ 28) {\n            return false;\n        }\n        if (month == 9 && day >\
    \ 28) {\n            return false;\n        }\n        if (month == 11 && day\
    \ > 29) {\n            return false;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            int daysInMonth[] = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int days[] = date.split(\"\
    -\")[0].split(\"-\");\n            int months[] = date.split(\"-\")[1].split(\"\
    -\");\n            int year = Integer.parseInt(date.split(\"-\")[2]);\n      \
    \      int day;\n            int month;\n            int yearDay;\n          \
    \  int daysInMonth;\n            int yearMonth;\n            int dayYear;\n  \
    \          int dayMonth;\n            int dayYearMonth;\n            int dayYearMonthDay;\n\
    \            int dayYearMonthDayYear;\n            int dayYearMonthDayYearMonth;\n\
    \            int dayYearMonthDayYearMonthDay;\n            int dayYearMonthDayYearMonthDayYear;\n\
    \            int dayYearMonthDayYearMonthDayYearMonth;\n            int dayYearMonthDayYearMonthDayYearMonthDay;\n\
    \            int dayYearMonthDayYearMonthDayYearMonthDayYear;\n            int\
    \ dayYearMonthDayYearMonthDayYearMonthDayYearMonth;\n            int dayYearMonthDayYearMonthDayYearMonthDayYearMonthDay;\n\
    \            int dayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear;\n  \
    \          int dayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth;\n\
    \            int dayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDay;\n\
    \            int dayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear;\n\
    \            int dayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth;\n\
    \            int dayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDay;\n\
    \            int dayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth;\n\
    \            int dayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDay;\n\
    \            int dayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth;\n\
    \            int dayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth;\n\
    \            int dayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth;\n\
    \            int dayYearMonthDayYear\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwzq_zhh.java:62: error: ';' expected\n            int dayYearMonthDayYear\n\
    \                                   ^\n/tmp/tmpqwzq_zhh.java:64: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n/tmp/tmpqwzq_zhh.java:64:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpqwzq_zhh.java:64: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpqwzq_zhh.java:64: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpqwzq_zhh.java:64: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpqwzq_zhh.java:83: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = true;\n        if\
    \ (date == null || date.trim().isEmpty()) {\n            valid = false;\n    \
    \    }\n        if (valid == false) {\n            return valid;\n        }\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            valid = false;\n        }\n        if (dateParts[0].length()\
    \ < 1 || dateParts[0].length() > 12) {\n            valid = false;\n        }\n\
    \        if (dateParts[1].length() < 1 || dateParts[1].length() > 12) {\n    \
    \        valid = false;\n        }\n        if (dateParts[2].length() < 1 || dateParts[2].length()\
    \ > 12) {\n            valid = false;\n        }\n        if (dateParts[0].length()\
    \ < 1 || dateParts[0].length() > 12) {\n            valid = false;\n        }\n\
    \        if (dateParts[1].length() < 1 || dateParts[1].length() > 12) {\n    \
    \        valid = false;\n        }\n        if (dateParts[2].length() < 1 || dateParts[2].length()\
    \ > 12) {\n            valid = false;\n        }\n        return valid;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpapb2__c2.java:60)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[0]);\n\
    \        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n\
    \        boolean valid = false;\n        if (date.length() > 0) {\n          \
    \  if (month < 1 || month > 12) {\n                valid = false;\n          \
    \  }\n            if (day < 1 || day > 31) {\n                valid = false;\n\
    \            }\n            if (month == 2 && day > 29) {\n                valid\
    \ = false;\n            }\n            if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n           \
    \     if (day < 1 || day > 30) {\n                    valid = false;\n       \
    \         }\n            }\n            if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n                if (day < 1 || day > 29) {\n       \
    \             valid = false;\n                }\n            }\n        }\n  \
    \      return valid;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr9fc66lb.java:57)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateParts = date.split(\"-\");\n        boolean valid = true;\n        if (dateParts.length\
    \ != 3) {\n            valid = false;\n        }\n        if (dateParts[0].length()\
    \ < 1 || dateParts[0].length() > 2) {\n            valid = false;\n        }\n\
    \        if (dateParts[1].length() < 1 || dateParts[1].length() > 2) {\n     \
    \       valid = false;\n        }\n        if (dateParts[2].length() < 1 || dateParts[2].length()\
    \ > 10) {\n            valid = false;\n        }\n        if (dateParts[0].length()\
    \ == 2 && dateParts[1].length() == 2 && dateParts[2].length() == 10) {\n     \
    \       int month = Integer.parseInt(dateParts[0]);\n            int day = Integer.parseInt(dateParts[1]);\n\
    \            int year = Integer.parseInt(dateParts[2]);\n            if (month\
    \ < 1 || month > 12) {\n                valid = false;\n            }\n      \
    \      if (day < 1 || day > 31) {\n                valid = false;\n          \
    \  }\n            if (month == 2) {\n                if (day < 1 || day > 29)\
    \ {\n                    valid = false;\n                }\n            }\n  \
    \      }\n        return valid;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmrymn9e.java:62)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            int day = Integer.parseInt(date.substring(0,\
    \ 2));\n            int month = Integer.parseInt(date.substring(3, 5));\n    \
    \        int year = Integer.parseInt(date.substring(6, 10));\n            if (day\
    \ > 0 && day <= 31 && (month > 0 && month <= 12)) {\n                if (month\
    \ == 2) {\n                    if (day > 29) {\n                        valid\
    \ = false;\n                    } else {\n                        valid = true;\n\
    \                    }\n                } else {\n                    if (day\
    \ > 30) {\n                        valid = false;\n                    } else\
    \ {\n                        valid = true;\n                    }\n          \
    \      }\n            } else {\n                valid = false;\n            }\n\
    \        } else {\n            valid = false;\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi_o4tkb5.java:56)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        int month = Integer.parseInt(dateParts[0]);\n        int day =\
    \ Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 30) {\n            return false;\n        }\n \
    \       if (month == 4 && day > 29) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 28) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31\n                            && day <= 30) {\n\
    \                        if (month == 2) {\n                            if (day\
    \ > 29) {\n                                valid = false;\n                  \
    \          }\n                        } else {\n                            if\
    \ (day > 31) {\n                                valid = false;\n             \
    \               }\n                        }\n                    }\n        \
    \        } catch (NumberFormatException e) {\n                    valid = false;\n\
    \                }\n            }\n        }\n        return valid;\n    }\n \
    \   public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqed9ivte.java:55)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 30) {\n            return false;\n        }\n \
    \       if (month == 4 && day > 29) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 28) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 31) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 30) {\n            return \n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy4fzrmly.java:133: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmpy4fzrmly.java:134: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpy4fzrmly.java:134: error:\
    \ ';' expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpy4fzrmly.java:134:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpy4fzrmly.java:134: error: ';' expected\n   \
    \ public static void main(String[] args) {\n                           ^\n/tmp/tmpy4fzrmly.java:134:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpy4fzrmly.java:153: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            int month = Integer.parseInt(dateParts[0]);\n            int\
    \ day = Integer.parseInt(dateParts[1]);\n            int year = Integer.parseInt(dateParts[2]);\n\
    \            if (month >= 1 && month <= 12 && day >= 1 && day <= 31) {\n     \
    \           if (month != 2 && month != 4 && month != 6 && month != 9 && month\
    \ != 11 && month != 12) {\n                    if (day >= 1 && day <= 30) {\n\
    \                        if (month != 1 && month != 3 && month != 5 && month !=\
    \ 7 && month != 8 && month != 10 && month != 12) {\n                         \
    \   if (day >= 1 && day <= 29) {\n                                valid = true;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        return valid;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprrpfo7b7.java:48)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        int month = Integer.parseInt(dateParts[0]);\n        int day =\
    \ Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31 || (month == 2 && day > 29)) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 28) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 29) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 30) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 31) {\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9c3pwdne.java:132: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659800550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date.isEmpty()) {\n            System.out.println(\"Date is empty\");\n   \
    \         valid = false;\n        }\n        if (date.contains(\"-\")) {\n   \
    \         String[] dateParts = date.split(\"-\");\n            int month = Integer.parseInt(dateParts[0]);\n\
    \            int day = Integer.parseInt(dateParts[1]);\n            int year =\
    \ Integer.parseInt(dateParts[2]);\n            if (month < 1 || month > 12) {\n\
    \                System.out.println(\"Month is out of range\");\n            \
    \    valid = false;\n            }\n            if (day < 1 || day > 31) {\n \
    \               System.out.println(\"Day is out of range\");\n               \
    \ valid = false;\n            }\n            if (month == 2 && day > 29) {\n \
    \               System.out.println(\"Day is out of range\");\n               \
    \ valid = false;\n            }\n            if (month == 2 && day > 28) {\n \
    \               System.out.println(\"Day is out of range\");\n               \
    \ valid = false;\n            }\n            if (month == 2 && day > 31) {\n \
    \               System.out.println(\"Day is out of range\");\n               \
    \ valid = false;\n            }\n            if (month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        \
    \        if (day < 1 || day > 30) {\n                    System.out.println(\"\
    Day is out of range\");\n                    valid = false;\n                }\n\
    \            }\n            if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n                if (day < 1 || day > 29) {\n                    System.out.println(\"\
    Day is out of range\");\n                    valid = false;\n                }\n\
    \            }\n            if (month == 4 && day > 31) {\n                System.out.println(\"\
    Day is out of range\");\n                valid = false;\n            }\n     \
    \       if (month == 6 && day > 31) {\n                System.out.println(\"Day\
    \ is out of range\");\n                valid = false;\n            }\n       \
    \     if (month == 9 && day > 30) {\n                System.out.println(\"Day\
    \ is out of range\");\n                valid = false;\n            }\n       \
    \     if (month == 11 && day > 31) {\n                System.out.println(\"Day\
    \ is out of range\");\n                valid = false;\n            }\n       \
    \     if (month == 4 || month == 6 || month == 9 || month == 11) {\n         \
    \       if (day < 1 || day > 30) {\n                    System.out.println(\"\
    Day is out of range\");\n                    valid = false;\n                }\n\
    \            }\n            if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n                if (day\
    \ < 1 || day > 31) {\n                    System.out.println(\"Day is out of range\"\
    );\n                    valid = false;\n                }\n            }\n   \
    \         if (month == 4 || month == 6 || month == 9 || month == 11) {\n     \
    \           if (day < 1 || day > 30) {\n                    System.out.println(\"\
    Day is out of range\");\n                    valid = false;\n                }\n\
    \            }\n            if (month == 4 && day > 31) {\n                System.out.println(\"\
    Day is out of range\");\n                valid = false;\n            }\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr8cjqjya.java:108: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659800550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        String[]\
    \ dateArray = date.split(\"-\");\n        Calendar cal = Calendar.getInstance();\n\
    \        cal.set(Integer.parseInt(dateArray[0]), Integer.parseInt(dateArray[1]),\
    \ Integer.parseInt(dateArray[2]));\n        Date today = cal.getTime();\n    \
    \    Date future = cal.getTime();\n        long diff = today.getTime() - future.getTime();\n\
    \        long days = diff / (24 * 60 * 60 * 1000);\n        long months = diff\
    \ / (60 * 60 * 1000 * 24 * 30);\n        long years = diff / (60 * 60 * 1000 *\
    \ 24 * 30 * 12);\n        if (dateArray.length != 3 || days < 1 || days > 31 ||\
    \ months < 1 || months > 12 || years < 1 || years > 30) {\n            return\
    \ false;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjvzfbp_6.java:43)\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 29) {\n            return false;\n        }\n \
    \       if (month == 4 || month == 6 || month == 9 || month == 11 && day > 30)\
    \ {\n            return false;\n        }\n        if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 && day > 31) {\n\
    \            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjqcmn8pw.java:53)\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        if\
    \ (dateParts.length != 3) {\n            return false;\n        }\n        int\
    \ day = Integer.parseInt(dateParts[0]);\n        int month = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (day < 1 || day\
    \ > 31 || (month == 2 && day > 29)) {\n            return false;\n        }\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (month == 2 && day > 29) {\n            return false;\n        }\n\
    \        valid = true;\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj0yxlldg.java:50)\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 30) {\n            return false;\n        }\n \
    \       if (month == 4 && day > 29) {\n            return false;\n        }\n\
    \        if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n            if (day > 31) {\n          \
    \      return false;\n            }\n        }\n        if (month == 2) {\n  \
    \          if (day > 30) {\n                return false;\n            }\n   \
    \     }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \            if (day > 31) {\n                return false;\n            }\n \
    \       }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if(dateParts.length != 3){\n       \
    \     return false;\n        }\n        try{\n            int month = Integer.parseInt(dateParts[0]);\n\
    \            int day = Integer.parseInt(dateParts[1]);\n            int year =\
    \ Integer.parseInt(dateParts[2]);\n            Calendar cal = Calendar.getInstance();\n\
    \            cal.set(year, month, day);\n            int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);\n\
    \            int months = cal.getActualMaximum(Calendar.MONTH);\n            int\
    \ years = cal.getActualMaximum(Calendar.YEAR);\n            if(days > 31 || days\
    \ < 1 || months > 12 || months < 1 || years > 12 || years < 1){\n            \
    \    return false;\n            }\n            if(month == 2 && days > 29){\n\
    \                return false;\n            }\n            if(month == 2 && days\
    \ == 29){\n                return false;\n            }\n            if(month\
    \ == 1 && (days > 31 || days < 1)){\n                return false;\n         \
    \   }\n            if(month == 1 && (days == 31)){\n                return false;\n\
    \            }\n            if(month == 3 && days > 30){\n                return\
    \ false;\n            }\n            if(month == 3 && days == 30){\n         \
    \       return false;\n            }\n            if(month == 4 && days > 29){\n\
    \                return false;\n            }\n            if(month == 4 && days\
    \ == 29){\n                return false;\n            }\n            if(month\
    \ == 6 && days > 30){\n                return false;\n            }\n        \
    \    if(month == 6 && days == 30){\n                return false;\n          \
    \  }\n            if(month == 9 && days > 30){\n                return false;\n\
    \            }\n            if(month == 9 && days == 30){\n                return\
    \ false;\n            }\n            if(month == 11 && days > 30){\n         \
    \       return false;\n            }\n            if(month == 11 && days == 30){\n\
    \                return false;\n            }\n            return true;\n    \
    \    }catch(Exception e){\n            return false;\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_25f1kyh.java:92)\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        if\
    \ (dateParts.length != 3) {\n            return valid;\n        }\n        int\
    \ month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return valid;\n        }\n        if (day < 1 ||\
    \ day > 31) {\n            return valid;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return valid;\n        }\n        if (month == 4 &&\
    \ day > 29) {\n            return valid;\n        }\n        if (month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n            if (day > 31) {\n                return valid;\n     \
    \       }\n        }\n        if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day > 30) {\n                return valid;\n     \
    \       }\n        }\n        if (month == 2 && day > 28) {\n            return\
    \ valid;\n        }\n        valid = true;\n        return valid;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             e.printStackTrace();\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptwdg61gq.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmptwdg61gq.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmptwdg61gq.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return valid;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return valid;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return valid;\n        }\n  \
    \      if (month == 2 && day > 29) {\n            return valid;\n        }\n \
    \       if (month == 4 || month == 6 || month == 9 || month == 11) {\n       \
    \     if (day > 30) {\n                return valid;\n            }\n        }\n\
    \        if (month == 1) {\n            if (day > 31) {\n                return\
    \ valid;\n            }\n        }\n        valid = true;\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length != 3) {\n                return false;\n\
    \            }\n            int month1 = Integer.parseInt(dateParts[0]);\n   \
    \         int day1 = Integer.parseInt(dateParts[1]);\n            int year1 =\
    \ Integer.parseInt(dateParts[2]);\n            if (month1 < 1 || month1 > 12)\
    \ {\n                return false;\n            }\n            if (day1 < 1 ||\
    \ day1 > 31) {\n                return false;\n            }\n            if (month1\
    \ == 2 && day1 > 30) {\n                return false;\n            }\n       \
    \     if (month1 == 2 && day1 > 29) {\n                return false;\n       \
    \     }\n            if (month1 == 1 && day1 > 31) {\n                return false;\n\
    \            }\n            if (month1 == 1 && day1 > 30) {\n                return\
    \ false;\n            }\n            valid = true;\n        }\n        return\
    \ valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv64imvdw.java:66)\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = true;\n        if\
    \ (date == null || date.isEmpty()) {\n            valid = false;\n        }\n\
    \        if (date.contains(\"-\") && date.contains(\"-\") && date.contains(\"\
    -\")) {\n            String[] dateParts = date.split(\"-\");\n            int\
    \ month = Integer.parseInt(dateParts[0]);\n            int day = Integer.parseInt(dateParts[1]);\n\
    \            int year = Integer.parseInt(dateParts[2]);\n            if (month\
    \ < 1 || month > 12 || day < 1 || day > 31 || (month == 2 && day > 30) || (month\
    \ == 4 && day > 29)) {\n                valid = false;\n            }\n      \
    \  }\n        return valid;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4fq72lbn.java:54)\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31 && (month != 2 && month != 4 && month != 6 &&\
    \ month != 9 && month != 11 && month != 12)) {\n                        if (day\
    \ > 0 && day <= 29) {\n                            valid = true;\n           \
    \             }\n                    }\n                } catch (NumberFormatException\
    \ nfe) {\n                    valid = false;\n                }\n            }\n\
    \        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjpveqkwc.java:51)\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        if\
    \ (dateParts.length != 3) {\n            return false;\n        }\n        Integer\
    \ month = null;\n        Integer day = null;\n        Integer year = null;\n \
    \       try {\n            month = Integer.parseInt(dateParts[0]);\n         \
    \   day = Integer.parseInt(dateParts[1]);\n            year = Integer.parseInt(dateParts[2]);\n\
    \        } catch (NumberFormatException e) {\n            return false;\n    \
    \    }\n        if (month < 1 || month > 12) {\n            return false;\n  \
    \      }\n        if (day < 1 || day > 31) {\n            return false;\n    \
    \    }\n        if (month == 2 && day > 29) {\n            return false;\n   \
    \     }\n        if (month == 4 || month == 6 || month == 9 || month == 11 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 && day >\
    \ 31) {\n            return false;\n        }\n        if (month == 2) {\n   \
    \         if (year % 4 != 0) {\n                return false;\n            }\n\
    \            if (year % 100 == 0) {\n                return false;\n         \
    \   }\n            if (year % 400 == 0) {\n                return false;\n   \
    \         }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyusrffgq.java:72)\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return valid;\n        }\n        int month = 0;\n        int day = 0;\n\
    \        try {\n            month = Integer.parseInt(dateParts[0]);\n        \
    \    day = Integer.parseInt(dateParts[1]);\n        } catch (NumberFormatException\
    \ e) {\n            return valid;\n        }\n        if (month < 1 || month >\
    \ 12) {\n            return valid;\n        }\n        if (day < 1 || day > 31)\
    \ {\n            return valid;\n        }\n        if (month == 2 && day > 30)\
    \ {\n            return valid;\n        }\n        if (month == 4 && day > 29)\
    \ {\n            return valid;\n        }\n        return valid;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdtc8y2vk.java:55)\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = true;\n        if\
    \ (date == null || date.isEmpty()) {\n            valid = false;\n        }\n\
    \        int daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth2 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth3 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth4 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth5 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth6 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth7 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth8 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth9 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth10 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth11 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth12 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth13 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth14 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth15 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth16 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth17 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth18 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth19 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth20 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth21 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth22 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth23 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth24 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth25 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth26 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth27 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth28 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth29 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth30 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int daysInMonth31 = {31, 28, 31, 30, 31, 30, \n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp85tfvcra.java:62: error: ';' expected\n    }\n     ^\n/tmp/tmp85tfvcra.java:63:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31\n                            && year >= 1 &&\
    \ year <= Integer.MAX_VALUE) {\n                        if (month == 3 || month\
    \ == 5 || month == 7 || month == 8\n                                || month ==\
    \ 10 || month == 12) {\n                            if (day >= 1 && day <= 30)\
    \ {\n                                if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n                                    if (day >= 1 && day\
    \ <= 29) {\n                                        valid = true;\n          \
    \                          }\n                                }\n            \
    \                }\n                        }\n                    }\n       \
    \         } catch (NumberFormatException e) {\n                    valid = false;\n\
    \                }\n            }\n        }\n        return valid;\n    }\n \
    \   public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgx56_8f7.java:56)\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            int month = Integer.parseInt(dateParts[0]);\n            int\
    \ day = Integer.parseInt(dateParts[1]);\n            int year = Integer.parseInt(dateParts[2]);\n\
    \            valid = checkDate(month, day, year);\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbfc6399i.java:33: error: cannot find symbol\n            valid\
    \ = checkDate(month, day, year);\n                    ^\n  symbol:   method checkDate(int,int,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        boolean valid = true;\n        if (dateParts.length\
    \ != 3) {\n            valid = false;\n        }\n        if (dateParts[0].length()\
    \ < 1 || dateParts[0].length() > 12) {\n            valid = false;\n        }\n\
    \        if (dateParts[1].length() < 1 || dateParts[1].length() > 31) {\n    \
    \        valid = false;\n        }\n        if (dateParts[2].length() < 1 || dateParts[2].length()\
    \ > 30) {\n            valid = false;\n        }\n        if (dateParts[0].length()\
    \ < 1 || dateParts[0].length() > 12) {\n            valid = false;\n        }\n\
    \        if (dateParts[1].length() < 1 || dateParts[1].length() > 31) {\n    \
    \        valid = false;\n        }\n        if (dateParts[2].length() < 1 || dateParts[2].length()\
    \ > 29) {\n            valid = false;\n        }\n        return valid;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe7i6za81.java:55)\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            int day = Integer.parseInt(date.substring(0,\
    \ 2));\n            int month = Integer.parseInt(date.substring(3, 5));\n    \
    \        int year = Integer.parseInt(date.substring(6, 10));\n            valid\
    \ = checkDate(day, month, year);\n        }\n        return valid;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsigfgett.java:32: error: cannot find symbol\n            valid\
    \ = checkDate(day, month, year);\n                    ^\n  symbol:   method checkDate(int,int,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31\n                            && day <= 30) {\n\
    \                        if (month == 2) {\n                            if (day\
    \ > 29) {\n                                valid = false;\n                  \
    \          }\n                        } else {\n                            if\
    \ (day > 31) {\n                                valid = false;\n             \
    \               }\n                        }\n                    } else {\n \
    \                       valid = false;\n                    }\n              \
    \  } catch (NumberFormatException nfe) {\n                    valid = false;\n\
    \                }\n            } else {\n                valid = false;\n   \
    \         }\n        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj1pnpsia.java:59)\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            int daysInMonth[] = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInYear[] = {365,\
    \ 366, 365, 366};\n            int daysInMonth[] = {0, 31, 59, 90, 120, 151, 181,\
    \ 212, 243, 273, 304, 334};\n            int daysInYearMonth[] = {0, 31, 59, 90,\
    \ 120, 151, 181, 212, 243, 273, 304, 334, 365};\n            int month[] = {0,\
    \ 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n            int monthDays[] = {31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 30};\n            int year[]\
    \ = {2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,\
    \ 2013, 2014, 2015, 2016, 2017, 2018, 2019};\n            int yearMonth[] = {0,\
    \ 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365, 366};\n           \
    \ int yearMonthDays[] = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334,\
    \ 365, 366, 366};\n            int yearMonthDaysLeap[] = {0, 31, 60, 91, 121,\
    \ 152, 182, 213, 244, 274, 305, 335, 366, 366};\n            int yearMonthDaysLeap2[]\
    \ = {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366, 366, 366};\n\
    \            int yearMonthDaysLeap3[] = {0, 31, 60, 91, 121, 152, 182, 213, 244,\
    \ 274, 305, 335, 366, 366, 366, 366};\n            int yearMonthDaysLeap4[] =\
    \ {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366, 366, 366, 366,\
    \ 366};\n            int yearMonthDaysLeap5[] = {0, 31, 60, 91, 121, 152, 182,\
    \ 213, 244, 274, 305, 335, 366, 366, 366, 366, 366, 366};\n            int yearMonthDaysLeap6[]\
    \ = {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366, 366, 366, 366,\
    \ 366, 366, 366, 366};\n            int yearMonthDaysLeap7[] = {0, 31, 60, 91,\
    \ 121, 152, 182, \n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpksn04ltg.java:45: error: ';' expected\n    }\n     ^\n/tmp/tmpksn04ltg.java:46:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateArray = date.split(\"-\");\n        boolean valid = false;\n        if (dateArray.length\
    \ == 3) {\n            int month = Integer.parseInt(dateArray[0]);\n         \
    \   int day = Integer.parseInt(dateArray[1]);\n            int year = Integer.parseInt(dateArray[2]);\n\
    \            if (month >= 1 && month <= 12 && day >= 1 && day <= 31) {\n     \
    \           if (month == 2) {\n                    if (day > 29) {\n         \
    \               valid = false;\n                    }\n                } else\
    \ {\n                    if (day > 30) {\n                        valid = false;\n\
    \                    }\n                }\n            } else {\n            \
    \    valid = false;\n            }\n        } else {\n            valid = false;\n\
    \        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xwi7ech.java:53)\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.trim().isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        int month = Integer.parseInt(dateParts[0]);\n        int day =\
    \ Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 30) {\n            return false;\n        }\n \
    \       if (month == 4 && day > 29) {\n            return false;\n        }\n\
    \        if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n            if (day > 31) {\n          \
    \      return false;\n            }\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateArray = date.split(\"-\");\n        if(dateArray.length != 3){\n       \
    \     return false;\n        }\n        int daysInMonth[] = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int days[] = {0, 31, 59, 90, 120, 151,\
    \ 181, 212, 243, 273, 304, 334};\n        int months[] = {0, 11, 12, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10};\n        for(int i = 0; i < dateArray.length; i++){\n\
    \            int day = Integer.parseInt(dateArray[i]);\n            if(day < 1\
    \ || day > daysInMonth[months[i]]) {\n                return false;\n        \
    \    }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 12 out of bounds for length 12\n\tat Problem.validDate(tmpbjma16te.java:37)\n\
    \tat Problem.main(tmpbjma16te.java:44)\n"
  stdout: ''
  timestamp: 1659800552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                int month = Integer.parseInt(dateParts[0]);\n\
    \                int day = Integer.parseInt(dateParts[1]);\n                int\
    \ year = Integer.parseInt(dateParts[2]);\n                if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31\n                        && day > 0 && day <\
    \ 31) {\n                    if (month >= 4 && month <= 6 && day >= 1 && day <=\
    \ 30\n                            && day > 0 && day < 30) {\n                \
    \        if (month >= 2 && month <= 12 && day >= 1 && day <= 29\n            \
    \                    && day > 0 && day < 29) {\n                            valid\
    \ = true;\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return valid;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpji_l1srq.java:49)\n"
  stdout: ''
  timestamp: 1659800553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        LocalDate date = LocalDate.parse(dateParts[0] + \"-\" + dateParts[1]\
    \ + \"-\" + dateParts[2]);\n        LocalDate today = LocalDate.now();\n     \
    \   LocalDate futureDate = date.plusDays(1);\n        LocalDate pastDate = date.minusDays(1);\n\
    \        LocalDate futureToday = today.plusDays(1);\n        LocalDate pastToday\
    \ = today.minusDays(1);\n        LocalDate futureFuture = futureDate.plusDays(1);\n\
    \        LocalDate pastFuture = futureDate.minusDays(1);\n        LocalDate futurePast\
    \ = pastDate.plusDays(1);\n        LocalDate pastPast = pastDate.minusDays(1);\n\
    \        LocalDate futureFutureToday = futureToday.plusDays(1);\n        LocalDate\
    \ pastFutureToday = futureToday.minusDays(1);\n        LocalDate futurePastToday\
    \ = pastToday.plusDays(1);\n        LocalDate pastPastToday = pastToday.minusDays(1);\n\
    \        LocalDate futureFutureFuture = futureFuture.plusDays(1);\n        LocalDate\
    \ pastFutureFuture = futureFuture.minusDays(1);\n        LocalDate pastPastFuture\
    \ = pastFuture.plusDays(1);\n        LocalDate pastPastFutureToday = pastFutureToday.plusDays(1);\n\
    \        LocalDate futurePastPast = pastPast.plusDays(1);\n        LocalDate pastPastPastToday\
    \ = pastPast.minusDays(1);\n        LocalDate futurePastPastFuture = futurePast.plusDays(1);\n\
    \        LocalDate pastPastPastFutureToday = futurePast.minusDays(1);\n      \
    \  LocalDate futurePastPastPast = pastPast.plusDays(1);\n        LocalDate futurePastPastPastToday\
    \ = pastPast.minusDays(1);\n        LocalDate futurePastPastPastFuture = futurePastFuture.plusDays(1);\n\
    \        LocalDate pastPastPastPastFutureToday = futurePastFuture.minusDays(1);\n\
    \        LocalDate futurePastPastPastPast = pastPastFuture.plusDays(1);\n    \
    \    LocalDate futurePastPastPastToday = pastPastFuture.minusDays(1);\n      \
    \  LocalDate futurePastPastPastFuture = futurePastFutureFuture.plusDays(1);\n\
    \        LocalDate pastPastPastPastFutureToday = futurePastFutureFuture.minusDays(\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpquvcewpk.java:64: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        int month;\n        int day;\n        try {\n            month\
    \ = Integer.parseInt(dateParts[0]);\n            day = Integer.parseInt(dateParts[1]);\n\
    \        } catch (NumberFormatException e) {\n            return false;\n    \
    \    }\n        if (month < 1 || month > 12) {\n            return false;\n  \
    \      }\n        if (day < 1 || day > 31) {\n            return false;\n    \
    \    }\n        if (month == 2 && day > 30) {\n            return false;\n   \
    \     }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbkq3yh5r.java:61)\n"
  stdout: ''
  timestamp: 1659800553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            int month = Integer.parseInt(dateParts[0]);\n            int\
    \ day = Integer.parseInt(dateParts[1]);\n            int year = Integer.parseInt(dateParts[2]);\n\
    \            if (month < 1 || month > 12 || day < 1 || day > 31 || (month == 2\
    \ && day > 29)) {\n                valid = false;\n            } else {\n    \
    \            valid = true;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeg0llqo3.java:49)\n"
  stdout: ''
  timestamp: 1659800553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        if\
    \ (dateParts.length != 3) {\n            return valid;\n        }\n        LocalDate\
    \ date1 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date2 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date3 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date4 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date5 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date6 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date7 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date8 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date9 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date10 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date11 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date12 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date13 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date14 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date15 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date16 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date17 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(datePart\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplh5ymfgk.java:49: error: ')' expected\n        LocalDate date17\
    \ = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(datePart\n                                                \
    \                                                                            \
    \     ^\n1 error\n"
  stdout: ''
  timestamp: 1659800552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return valid;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return valid;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return valid;\n        }\n  \
    \      if (month == 2 && day > 29) {\n            return valid;\n        }\n \
    \       if (month == 4 || month == 6 || month == 9 || month == 11 && day > 30)\
    \ {\n            return valid;\n        }\n        if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 && day > 31) {\n\
    \            return valid;\n        }\n        if (month == 2) {\n           \
    \ if (day > 28) {\n                return valid;\n            }\n        }\n \
    \       valid = true;\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphq8sk26l.java:59)\n"
  stdout: ''
  timestamp: 1659800553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int day = Integer.parseInt(dateParts[0]);\n\
    \        int month = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2) {\n            if (day > 29) {\n                return\
    \ false;\n            }\n        }\n        if (month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        \
    \    if (day > 30) {\n                return false;\n            }\n        }\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeu4_9jpw.java:55)\n"
  stdout: ''
  timestamp: 1659800553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31\n                            && year >= 1 &&\
    \ year <= Integer.MAX_VALUE) {\n                        valid = true;\n      \
    \              }\n                    else if (month >= 4 && month <= 11 && day\
    \ >= 1 && day <= 30\n                            && year >= 1 && year <= Integer.MAX_VALUE)\
    \ {\n                        valid = true;\n                    }\n          \
    \          else if (month == 2 && day >= 1 && day <= 29) {\n                 \
    \       valid = true;\n                    }\n                    else {\n   \
    \                     valid = false;\n                    }\n                }\n\
    \                catch (NumberFormatException e) {\n                    valid\
    \ = false;\n                }\n            }\n            else {\n           \
    \     valid = false;\n            }\n        }\n        return valid;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzf1v4t_v.java:68)\n"
  stdout: ''
  timestamp: 1659800553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        LocalDate date = LocalDate.parse(date);\n\
    \        LocalDate today = LocalDate.now();\n        LocalDate validDate = date.plusDays(1).minusDays(1);\n\
    \        LocalDate validToday = today.plusDays(1).minusDays(1);\n        LocalDate\
    \ validMonth = validDate.plusMonths(1).minusMonths(1);\n        LocalDate validYear\
    \ = validMonth.plusYears(1).minusYears(1);\n        if (dateParts[0].length()\
    \ != 2) {\n            return false;\n        }\n        if (dateParts[1].length()\
    \ != 2) {\n            return false;\n        }\n        if (dateParts[2].length()\
    \ != 4) {\n            return false;\n        }\n        if (dateParts[0] < 1\
    \ || dateParts[0] > 12) {\n            return false;\n        }\n        if (dateParts[1]\
    \ < 1 || dateParts[1] > 12) {\n            return false;\n        }\n        if\
    \ (dateParts[2] < 1 || dateParts[2] > 31) {\n            return false;\n     \
    \   }\n        if (dateParts[3] < 1 || dateParts[3] > 30) {\n            return\
    \ false;\n        }\n        if (dateParts[2] < 1 || dateParts[2] > 29) {\n  \
    \          return false;\n        }\n        if (dateParts[3] < 1 || dateParts[3]\
    \ > 12) {\n            return false;\n        }\n        if (dateParts[0] > dateParts[1])\
    \ {\n            return false;\n        }\n        if (dateParts[1] > dateParts[2])\
    \ {\n            return false;\n        }\n        if (dateParts[0] > dateParts[3])\
    \ {\n            return false;\n        }\n        if (dateParts[1] > dateParts[3])\
    \ {\n            return false;\n        }\n        if (dateParts[0] > dateParts[2])\
    \ {\n            return false;\n        }\n        if (dateParts[1] > dateParts[2])\
    \ {\n            return false;\n        }\n        if (dateParts[0] > dateParts[3])\
    \ {\n            return false;\n        }\n        if (dateParts[1] > dateParts[3])\
    \ {\n            return false;\n        }\n        if (dateParts[0] > dateParts[2])\
    \ {\n            return false;\n        }\n        if (dateParts[1] > dateParts[2])\
    \ {\n            return false;\n        }\n        if (dateParts[0] > dateParts[3])\
    \ {\n            return false;\n        }\n        if (dateParts[1] > dateParts[3])\
    \ {\n            return false;\n        }\n        if (dateParts[0] > dateParts[2])\
    \ {\n            return false;\n        }\n        if (dateParts[1] > dateParts[2])\
    \ {\n            return false;\n        }\n        if (dateParts[0] > dateParts[3])\
    \ {\n            return false;\n        }\n        if (dateParts[1] > dateParts[3])\
    \ {\n            return false;\n        }\n        if (dateParts[0] > dateParts[2])\
    \ {\n            return false;\n        }\n        if (datePart\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcfusrdl4.java:116: error: ')' expected\n        if (datePart\n\
    \                    ^\n/tmp/tmpcfusrdl4.java:117: error: illegal start of statement\n\
    \    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = true;\n        if\
    \ (date == null || date.trim().isEmpty()) {\n            valid = false;\n    \
    \    }\n        if (date.contains(\"-\") && date.contains(\"/\") && date.contains(\"\
    -\")) {\n            String[] dateParts = date.split(\"-\");\n            int\
    \ month1 = Integer.parseInt(dateParts[0]);\n            int day1 = Integer.parseInt(dateParts[1]);\n\
    \            int year1 = Integer.parseInt(dateParts[2]);\n            int month2\
    \ = Integer.parseInt(dateParts[3]);\n            int day2 = Integer.parseInt(dateParts[4]);\n\
    \            int year2 = Integer.parseInt(dateParts[5]);\n            if (month1\
    \ < 1 || month1 > 12 || month2 < 1 || month2 > 12) {\n                valid =\
    \ false;\n            }\n            if (day1 < 1 || day1 > 31 || day2 < 1 ||\
    \ day2 > 31) {\n                valid = false;\n            }\n            if\
    \ (month1 == 2 && day1 == 29) {\n                valid = false;\n            }\n\
    \            if (month2 == 2 && day2 == 29) {\n                valid = false;\n\
    \            }\n            if (year1 < 1 || year1 > 9999 || year2 < 1 || year2\
    \ > 9999) {\n                valid = false;\n            }\n        }\n      \
    \  return valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn3w2boi9.java:59)\n"
  stdout: ''
  timestamp: 1659800553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return valid;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return valid;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return valid;\n        }\n  \
    \      if (month == 2 && day > 29) {\n            return valid;\n        }\n \
    \       if (month == 4 || month == 6 || month == 9 || month == 11) {\n       \
    \     if (day > 30) {\n                return valid;\n            }\n        }\n\
    \        if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n            if (day > 31) {\n          \
    \      return valid;\n            }\n        }\n        valid = true;\n      \
    \  return valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateArray = date.split(\"-\");\n        if (dateArray.length != 3) {\n     \
    \       return false;\n        }\n        int month = Integer.parseInt(dateArray[0]);\n\
    \        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 30) {\n            return false;\n        }\n \
    \       if (month == 4 && day > 29) {\n            return false;\n        }\n\
    \        if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11\
    \ && day > 30) {\n            return false;\n        }\n        if (month == 2\
    \ && day > 29) {\n            return false;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpygf0iwz4.java:59)\n"
  stdout: ''
  timestamp: 1659800553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if(dateParts.length != 3){\n       \
    \     return false;\n        }\n        try{\n            int month = Integer.parseInt(dateParts[0]);\n\
    \            int day = Integer.parseInt(dateParts[1]);\n            int year =\
    \ Integer.parseInt(dateParts[2]);\n            if(month < 1 || month > 12){\n\
    \                return false;\n            }\n            if(day < 1 || day >\
    \ 31){\n                return false;\n            }\n            if(month ==\
    \ 2 && day > 30){\n                return false;\n            }\n            if(month\
    \ == 2 && day < 29){\n                return false;\n            }\n         \
    \   if(month == 1 && day > 30){\n                return false;\n            }\n\
    \            if(month == 1 && day < 29){\n                return false;\n    \
    \        }\n        }catch(NumberFormatException e){\n            return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz7a5xmo8.java:64)\n"
  stdout: ''
  timestamp: 1659800553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        if(dateParts.length\
    \ != 3){\n            return false;\n        }\n        try{\n            int\
    \ month = Integer.parseInt(dateParts[0]);\n            int day = Integer.parseInt(dateParts[1]);\n\
    \            int year = Integer.parseInt(dateParts[2]);\n            int daysInMonth\
    \ = Calendar.getInstance().get(Calendar.DAY_OF_MONTH);\n            if(month <\
    \ 1 || month > 12){\n                return false;\n            }\n          \
    \  if(day < 1 || day > daysInMonth){\n                return false;\n        \
    \    }\n            if(month == 2 && day > daysInMonth){\n                return\
    \ false;\n            }\n            if(month == 2 && day < 1){\n            \
    \    return false;\n            }\n            if(month == 2 && day > 30){\n \
    \               return false;\n            }\n            if(month == 2 && day\
    \ < 30){\n                return false;\n            }\n            if(month ==\
    \ 2 && day > 29){\n                return false;\n            }\n            if(month\
    \ == 2 && day < 29){\n                return false;\n            }\n         \
    \   if(month == 1 && (year % 4 == 0 && year % 100 != 0 || year % 400 == 0)){\n\
    \                return false;\n            }\n            valid = true;\n   \
    \     }catch(Exception e){\n            e.printStackTrace();\n        }\n    \
    \    return valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy_opof1x.java:72)\n"
  stdout: ''
  timestamp: 1659800554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) {\n          \
    \  return false;\n        }\n        int daysInMonth[] = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth2 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth3 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth4 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth5 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth6 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth7 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth8 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth9 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth10 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth11 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth12 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth13 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth14 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth15 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth16 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth17 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth18 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth19 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth20 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth21 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth22 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth23 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth24 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth25 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth26 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth27 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth28 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth29 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth30 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth31 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7wxbbfip.java:61: error: ';' expected\n        int daysInMonth\n\
    \                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659800552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsehr0h5l.java:28: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659800553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length != 3) {\n                return false;\n\
    \            }\n            int month = Integer.parseInt(dateParts[0]);\n    \
    \        int day = Integer.parseInt(dateParts[1]);\n            int year = Integer.parseInt(dateParts[2]);\n\
    \            if (month < 1 || month > 12) {\n                return false;\n \
    \           }\n            if (day < 1 || day > 31) {\n                return\
    \ false;\n            }\n            if (month == 2 && day > 29) {\n         \
    \       return false;\n            }\n            if (month == 2 && day > 28)\
    \ {\n                return false;\n            }\n            if (month == 2\
    \ && day > 31) {\n                return false;\n            }\n            if\
    \ (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12) {\n                if (day > 31) {\n                 \
    \   return false;\n                }\n            }\n            if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11) {\n                if (day > 30)\
    \ {\n                    return false;\n                }\n            }\n   \
    \         valid = true;\n        }\n        return valid;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        String[]\
    \ dateArray = date.split(\"-\");\n        boolean valid = false;\n        if (dateArray.length\
    \ == 3) {\n            int month = Integer.parseInt(dateArray[0]);\n         \
    \   int day = Integer.parseInt(dateArray[1]);\n            int year = Integer.parseInt(dateArray[2]);\n\
    \            if (month < 1 || month > 12) {\n                valid = false;\n\
    \            } else if (day < 1 || day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 29) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 28) {\n                valid = false;\n\
    \            } else if (month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n                if (day < 1 ||\
    \ day > 30) {\n                    valid = false;\n                }\n       \
    \     }\n        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3wd7o4v.java:51)\n"
  stdout: ''
  timestamp: 1659800553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.trim().isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        int month1 = Integer.parseInt(dateParts[0]);\n        int day1\
    \ = Integer.parseInt(dateParts[1]);\n        int year1 = Integer.parseInt(dateParts[2]);\n\
    \        if (month1 < 1 || month1 > 12) {\n            return false;\n       \
    \ }\n        if (day1 < 1 || day1 > 31) {\n            return false;\n       \
    \ }\n        if (month1 == 2 && day1 > 29) {\n            return false;\n    \
    \    }\n        if (month1 == 4 || month1 == 6 || month1 == 9 || month1 == 11)\
    \ {\n            return false;\n        }\n        if (month1 == 2) {\n      \
    \      if (day1 > 28) {\n                return false;\n            }\n      \
    \  }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7bb4n_7s.java:60)\n"
  stdout: ''
  timestamp: 1659800553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return valid;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return valid;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return valid;\n        }\n  \
    \      if (month == 2 && day > 29) {\n            return valid;\n        }\n \
    \       if (month == 4 || month == 6 || month == 9 || month == 11 && day > 30)\
    \ {\n            return valid;\n        }\n        if (month == 1 && day > 31)\
    \ {\n            return valid;\n        }\n        if (month == 3 && day > 31)\
    \ {\n            return valid;\n        }\n        if (month == 5 && day > 31)\
    \ {\n            return valid;\n        }\n        if (month == 7 && day > 31)\
    \ {\n            return valid;\n        }\n        if (month == 8 && day > 31)\
    \ {\n            return valid;\n        }\n        if (month == 10 && day > 31)\
    \ {\n            return valid;\n        }\n        if (month == 12 && day > 31)\
    \ {\n            return valid;\n        }\n        valid = true;\n        return\
    \ valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgi2kjmfe.java:75)\n"
  stdout: ''
  timestamp: 1659800554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ valid = false;\n        if (date != null && !date.isEmpty()) {\n           \
    \ String[] dateParts = date.split(\"-\");\n            int month = Integer.parseInt(dateParts[0]);\n\
    \            int day = Integer.parseInt(dateParts[1]);\n            int year =\
    \ Integer.parseInt(dateParts[2]);\n            if (month >= 1 && month <= 12 &&\
    \ day >= 1 && day <= 31) {\n                if (month == 2 && day > 29) {\n  \
    \                  valid = false;\n                } else {\n                \
    \    valid = true;\n                }\n            } else if (month >= 4 && month\
    \ <= 11 && day >= 1 && day <= 30) {\n                valid = true;\n         \
    \   } else {\n                valid = false;\n            }\n        }\n     \
    \   return valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4p97mr17.java:56)\n"
  stdout: ''
  timestamp: 1659800553
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ valid = false;\n        if (date != null && !date.isEmpty()) {\n           \
    \ String[] dateParts = date.split(\"-\");\n            if (dateParts.length !=\
    \ 3) {\n                return false;\n            }\n            int month =\
    \ Integer.parseInt(dateParts[0]);\n            int day = Integer.parseInt(dateParts[1]);\n\
    \            int year = Integer.parseInt(dateParts[2]);\n            if (month\
    \ < 1 || month > 12) {\n                return false;\n            }\n       \
    \     if (day < 1 || day > 31) {\n                return false;\n            }\n\
    \            if (month == 2 && day > 30) {\n                return false;\n  \
    \          }\n            if (month == 2 && day > 29) {\n                return\
    \ false;\n            }\n            if (month == 1 || month == 3 || month ==\
    \ 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n           \
    \     if (day > 31) {\n                    return false;\n                }\n\
    \            }\n            if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n                if (day > 30) {\n                    return false;\n\
    \                }\n            }\n            if (month == 2) {\n           \
    \     if (day > 29) {\n                    return false;\n                }\n\
    \            }\n            valid = true;\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int monthInt = Integer.parseInt(dateParts[0]);\n             \
    \       int dayInt = Integer.parseInt(dateParts[1]);\n                    int\
    \ yearInt = Integer.parseInt(dateParts[2]);\n                    if (monthInt\
    \ >= 1 && monthInt <= 12 && dayInt >= 1 && dayInt <= 31 && yearInt >= 1 && yearInt\
    \ <= 9999) {\n                        if (monthInt == 2 && dayInt >= 1 && dayInt\
    \ <= 29) {\n                            valid = true;\n                      \
    \  }\n                        else if (monthInt == 4 || monthInt == 6 || monthInt\
    \ == 9 || monthInt == 11) {\n                            valid = true;\n     \
    \                   }\n                        else {\n                      \
    \      valid = false;\n                        }\n                    }\n    \
    \                else {\n                        valid = false;\n            \
    \        }\n                }\n                catch (NumberFormatException nfe)\
    \ {\n                    valid = false;\n                }\n            }\n  \
    \          else {\n                valid = false;\n            }\n        }\n\
    \        return valid;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp88bjyihr.java:61)\n"
  stdout: ''
  timestamp: 1659800555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             e.printStackTrace();\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptwdg61gq.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmptwdg61gq.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmptwdg61gq.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31 && year >= 1 && year <= 2040) {\n           \
    \             valid = true;\n                    }\n                } catch (NumberFormatException\
    \ nfe) {\n                    valid = false;\n                }\n            }\n\
    \        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            int daysInMonth[] = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInYear[] = {365,\
    \ 366, 365, 366};\n            int months[] = {0, 2, 4, 6, 9, 11};\n         \
    \   int year = Integer.parseInt(date.substring(0, 4));\n            int month\
    \ = Integer.parseInt(date.substring(4, 6));\n            int day = Integer.parseInt(date.substring(6,\
    \ 8));\n            int daysInYearMonth = daysInYear[month - 1] + daysInMonth[month\
    \ - 1];\n            if (day > daysInYearMonth) {\n                valid = false;\n\
    \            } else {\n                valid = true;\n            }\n        }\n\
    \        return valid;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"03-1\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmpqmtivjk8.java:32)\n\tat Problem.main(tmpqmtivjk8.java:45)\n"
  stdout: ''
  timestamp: 1659800555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31 && year >= 1 && year <= 9999) {\n           \
    \             valid = true;\n                    }\n                    else if\
    \ (month >= 4 && month <= 11 && day >= 1 && day <= 29 && year >= 1 && year <=\
    \ 9999) {\n                        valid = true;\n                    }\n    \
    \                else if (month == 2 && day >= 1 && day <= 29 && year >= 1 &&\
    \ year <= 9999) {\n                        valid = true;\n                   \
    \ }\n                    else {\n                        valid = false;\n    \
    \                }\n                }\n                catch (NumberFormatException\
    \ e) {\n                    valid = false;\n                }\n            }\n\
    \            else {\n                valid = false;\n            }\n        }\n\
    \        return valid;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp60vior5t.java:66)\n"
  stdout: ''
  timestamp: 1659800555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        if\
    \ (dateParts.length != 3) {\n            return valid;\n        }\n        int\
    \ month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return valid;\n        }\n        if (day < 1 ||\
    \ day > 31) {\n            return valid;\n        }\n        if (month == 2) {\n\
    \            if (day > 29) {\n                return valid;\n            }\n \
    \       }\n        if (month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n            if (day > 30) {\n \
    \               return valid;\n            }\n        }\n        if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 31) {\n\
    \                return valid;\n            }\n        }\n        valid = true;\n\
    \        return valid;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpti0njpty.java:68)\n"
  stdout: ''
  timestamp: 1659800555
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int month1 = Integer.parseInt(dateParts[0]);\n\
    \        int day1 = Integer.parseInt(dateParts[1]);\n        int year1 = Integer.parseInt(dateParts[2]);\n\
    \        if (month1 < 1 || month1 > 12) {\n            return false;\n       \
    \ }\n        if (day1 < 1 || day1 > 31) {\n            return false;\n       \
    \ }\n        if (month1 == 2 && day1 > 29) {\n            return false;\n    \
    \    }\n        if (month1 == 2 && day1 < 1 || day1 > 30) {\n            return\
    \ false;\n        }\n        if (month1 == 3 && day1 > 31) {\n            return\
    \ false;\n        }\n        if (month1 == 3 && day1 < 1 || day1 > 30) {\n   \
    \         return false;\n        }\n        if (month1 == 4 && day1 > 31) {\n\
    \            return false;\n        }\n        if (month1 == 4 && day1 < 1 ||\
    \ day1 > 30) {\n            return false;\n        }\n        if (month1 == 6\
    \ && day1 > 31) {\n            return false;\n        }\n        if (month1 ==\
    \ 6 && day1 < 1 || day1 > 30) {\n            return false;\n        }\n      \
    \  if (month1 == 9 && day1 > 31) {\n            return false;\n        }\n   \
    \     if (month1 == 9 && day1 < 1 || day1 > 30) {\n            return false;\n\
    \        }\n        if (month1 == 11 && day1 > 31) {\n            return false;\n\
    \        }\n        if (month1 == 11 && day1 < 1 || day1 > 30) {\n           \
    \ return false;\n        }\n        if (month1 == 12 && day1 > 31) {\n       \
    \     return false;\n        }\n        if (month1 == 12 && day1 < 1 || day1 >\
    \ 30) {\n            return false;\n        }\n        valid = true;\n       \
    \ return valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int daysInMonth[] = {31, 28, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonth1 = daysInMonth[Integer.parseInt(dateParts[0])-1];\n\
    \        int daysInMonth2 = daysInMonth[Integer.parseInt(dateParts[1])-1];\n \
    \       int daysInMonth3 = daysInMonth[Integer.parseInt(dateParts[2])-1];\n  \
    \      if (Integer.parseInt(dateParts[0]) > 12 || Integer.parseInt(dateParts[0])\
    \ < 1) {\n            return false;\n        }\n        if (Integer.parseInt(dateParts[1])\
    \ > 12 || Integer.parseInt(dateParts[1]) < 1) {\n            return false;\n \
    \       }\n        if (Integer.parseInt(dateParts[2]) > daysInMonth1 || Integer.parseInt(dateParts[2])\
    \ > daysInMonth2 || Integer.parseInt(dateParts[2]) > daysInMonth3) {\n       \
    \     return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1999 out of bounds for length 12\n\tat Problem.validDate(tmpmmvep8gs.java:35)\n\
    \tat Problem.main(tmpmmvep8gs.java:48)\n"
  stdout: ''
  timestamp: 1659800555
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int month1 = Integer.parseInt(dateParts[0]);\n\
    \        int day1 = Integer.parseInt(dateParts[1]);\n        int year1 = Integer.parseInt(dateParts[2]);\n\
    \        int month2 = Integer.parseInt(dateParts[0]);\n        int day2 = Integer.parseInt(dateParts[1]);\n\
    \        int year2 = Integer.parseInt(dateParts[2]);\n        if (month1 < 1 ||\
    \ month1 > 12) {\n            return false;\n        }\n        if (month2 < 1\
    \ || month2 > 12) {\n            return false;\n        }\n        if (day1 <\
    \ 1 || day1 > 31) {\n            return false;\n        }\n        if (day2 <\
    \ 1 || day2 > 30) {\n            return false;\n        }\n        if (year1 <\
    \ 1 || year1 > 9999) {\n            return false;\n        }\n        if (year2\
    \ < 1 || year2 > 9999) {\n            return false;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800555
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.trim().isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        int month = Integer.parseInt(dateParts[0]);\n        int day =\
    \ Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 30) {\n            return false;\n        }\n \
    \       if (month == 2 && day > 29) {\n            return false;\n        }\n\
    \        if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n\
    \                return false;\n            }\n        }\n        if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 ||\
    \ day > 30) {\n                return false;\n            }\n        }\n     \
    \   return true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800555
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31\n                            && year >= 1 &&\
    \ year <= Integer.MAX_VALUE) {\n                        if (month == 2 && day\
    \ > 29) {\n                            valid = false;\n                      \
    \  } else if (month == 2 && day < 29) {\n                            valid = true;\n\
    \                        } else if (month == 1 || month == 3 || month == 5 ||\
    \ month == 7 || month == 8 || month == 10 || month == 12) {\n                \
    \            if (day > 30) {\n                                valid = false;\n\
    \                            } else if (day < 30) {\n                        \
    \        valid = true;\n                            }\n                      \
    \  } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n     \
    \                       if (day > 31) {\n                                valid\
    \ = false;\n                            } else if (day < 31) {\n             \
    \                   valid = true;\n                            }\n           \
    \             }\n                    }\n                } catch (NumberFormatException\
    \ e) {\n                    valid = false;\n                }\n            }\n\
    \        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31\n                            && day > 0 && day\
    \ < 31) {\n                        if (month == 1 && day == 1) {\n           \
    \                 valid = true;\n                        } else if (month == 2\
    \ && day == 1) {\n                            valid = true;\n                \
    \        } else if (month == 2 && day == 31 && year % 4 == 0) {\n            \
    \                valid = true;\n                        } else if (month == 2\
    \ && day == 31 && year % 100 != 0) {\n                            valid = true;\n\
    \                        } else if (month == 2 && day == 31 && year % 400 == 0)\
    \ {\n                            valid = true;\n                        } else\
    \ if (month == 3 && day == 1) {\n                            valid = true;\n \
    \                       } else if (month == 3 && day == 31 && year % 4 == 0) {\n\
    \                            valid = true;\n                        } else if\
    \ (month == 3 && day == 31 && year % 100 != 0) {\n                           \
    \ valid = true;\n                        } else if (month == 3 && day == 31 &&\
    \ year % 400 == 0) {\n                            valid = true;\n            \
    \            } else if (month == 4 && day == 1) {\n                          \
    \  valid = true;\n                        } else if (month == 4 && day == 31 &&\
    \ year % 4 == 0) {\n                            valid = true;\n              \
    \          } else if (month == 4 && day == 31 && year % 100 != 0) {\n        \
    \                    valid = true;\n                        } else if (month ==\
    \ 4 && day == 31 && year % 400 == 0) {\n                            valid = true;\n\
    \                        } else if (month == 5 && day == 1) {\n              \
    \              valid = true;\n                        } else if (month == 5 &&\
    \ day == 31 && year % 4 == 0) {\n                            valid = true;\n \
    \                       } else if (month == 5 && day == 31 && year % 100 != 0)\
    \ {\n                            valid = true;\n                        } else\
    \ if (month == 5 && day == 31 && year % 400 == 0) {\n                        \
    \    valid = true;\n                        } else if (month == 7 && day == 1)\
    \ {\n                            valid = true;\n                        } else\
    \ if (month == 7 && day == 31 && year % 4 == 0) {\n                          \
    \  valid = true;\n                        } else if (month == 7 && day == 31 &&\
    \ year % 100 != 0) {\n                            valid = true;\n            \
    \            } else if (month == 7 && day == 31 && year % 400 == 0) {\n      \
    \                      valid = true;\n                        } else if (month\
    \ == 8 && day == 1) {\n                            valid = true;\n           \
    \             } else if (month == 8 && day == 31 && year % 4 == 0) {\n       \
    \                     valid = true;\n                        } else if (month\
    \ == 8 && day == 31 && year % 100 != 0) {\n                            valid =\
    \ true;\n                        } else if (month == 8 && day == 31 && year %\
    \ 400 == 0) {\n                            valid = true;\n                   \
    \     } else if (month == 10 && day == 1) {\n                            valid\
    \ = true;\n                        } else if (month == 10 && day == 31 && year\
    \ % 4 == 0) {\n                            valid = true;\n                   \
    \     } else if (month == 10 && day == 31 && year % 100 != 0) {\n            \
    \                valid = true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphest7ukl.java:94: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmphest7ukl.java:31: error: 'try'\
    \ without 'catch', 'finally' or resource declarations\n                try {\n\
    \                ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateParts = date.split(\"-\");\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        boolean valid = false;\n        if (date.length() > 0) {\n          \
    \  if (month < 1 || month > 12) {\n                valid = false;\n          \
    \  } else if (day < 1 || day > 31) {\n                valid = false;\n       \
    \     } else if (month == 2 && day > 29) {\n                valid = false;\n \
    \           } else if (month == 2 && day > 28) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && \n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4wabf2gj.java:105: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmp4wabf2gj.java:106: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) {\n          \
    \  return false;\n        }\n        int daysInMonth[] = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int daysInYear[] = {365, 366, 365, 366};\n\
    \        int daysInLeapYear[] = {365, 366};\n        String[] dateParts = date.split(\"\
    -\");\n        int month = Integer.parseInt(dateParts[0]);\n        int day =\
    \ Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > daysInMonth[month - 1]) {\n            return false;\n\
    \        }\n        if (month == 2 && day > daysInMonth[year]) {\n           \
    \ return false;\n        }\n        if (month == 2 && day > daysInLeapYear[year])\
    \ {\n            return false;\n        }\n        if (month == 2 && day > daysInYear[year])\
    \ {\n            return false;\n        }\n        if (month == 2 && day > 31)\
    \ {\n            return false;\n        }\n        if (month == 2 && day > 30)\
    \ {\n            return false;\n        }\n        if (month == 2 && day > 29)\
    \ {\n            return false;\n        }\n        if (month == 2 && day > 28)\
    \ {\n            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.validDate(tmpcuto_c87.java:35)\n\
    \tat Problem.main(tmpcuto_c87.java:78)\n"
  stdout: ''
  timestamp: 1659800555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int day = Integer.parseInt(dateParts[0]);\n\
    \        int month = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (day < 1 || day > 31 || (month == 2 && day > 29)) {\n            return\
    \ false;\n        }\n        if (month < 1 || month > 12) {\n            return\
    \ false;\n        }\n        if (year < 1000 || year > 3000) {\n            return\
    \ false;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpquaxngvo.java:48)\n"
  stdout: ''
  timestamp: 1659800556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        LocalDate date1 = LocalDate.parse(dateParts[0]);\n        LocalDate\
    \ date2 = LocalDate.parse(dateParts[1]);\n        LocalDate date3 = LocalDate.parse(dateParts[2]);\n\
    \        LocalDate date4 = date1.plusDays(1);\n        LocalDate date5 = date1.plusDays(2);\n\
    \        LocalDate date6 = date1.plusDays(3);\n        LocalDate date7 = date1.plusDays(4);\n\
    \        LocalDate date8 = date1.plusDays(5);\n        LocalDate date9 = date1.plusDays(6);\n\
    \        LocalDate date10 = date1.plusDays(7);\n        LocalDate date11 = date1.plusDays(8);\n\
    \        LocalDate date12 = date1.plusDays(9);\n        LocalDate date13 = date1.plusDays(10);\n\
    \        LocalDate date14 = date1.plusDays(11);\n        LocalDate date15 = date1.plusDays(12);\n\
    \        LocalDate date16 = date2.plusDays(1);\n        LocalDate date17 = date2.plusDays(2);\n\
    \        LocalDate date18 = date2.plusDays(3);\n        LocalDate date19 = date2.plusDays(4);\n\
    \        LocalDate date20 = date2.plusDays(5);\n        LocalDate date21 = date2.plusDays(6);\n\
    \        LocalDate date22 = date2.plusDays(7);\n        LocalDate date23 = date2.plusDays(8);\n\
    \        LocalDate date24 = date2.plusDays(9);\n        LocalDate date25 = date2.plusDays(10);\n\
    \        LocalDate date26 = date2.plusDays(11);\n        LocalDate date27 = date2.plusDays(12);\n\
    \        LocalDate date28 = date3.plusDays(1);\n        LocalDate date29 = date3.plusDays(2);\n\
    \        LocalDate date30 = date3.plusDays(3);\n        LocalDate date31 = date3.plusDays(4);\n\
    \        LocalDate date32 = date3.plusDays(5);\n        LocalDate date33 = date3.plusDays(6);\n\
    \        LocalDate date34 = date3.plusDays(7);\n        LocalDate date35 = date3.plusDays(8);\n\
    \        LocalDate date36 = date3.plusDays(9);\n        LocalDate date37 = date3.plusDays(10);\n\
    \        LocalDate date38 = date3.plusDays(11);\n        LocalDate date39 = date3.plusDays(12);\n\
    \        LocalDate date40 = date4.plusDays(1);\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprku4j9w4.java:34: error: cannot find symbol\n        LocalDate\
    \ date1 = LocalDate.parse(dateParts[0]);\n        ^\n  symbol:   class LocalDate\n\
    \  location: class Problem\n/tmp/tmprku4j9w4.java:34: error: cannot find symbol\n\
    \        LocalDate date1 = LocalDate.parse(dateParts[0]);\n                  \
    \        ^\n  symbol:   variable LocalDate\n  location: class Problem\n/tmp/tmprku4j9w4.java:35:\
    \ error: cannot find symbol\n        LocalDate date2 = LocalDate.parse(dateParts[1]);\n\
    \        ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmprku4j9w4.java:35:\
    \ error: cannot find symbol\n        LocalDate date2 = LocalDate.parse(dateParts[1]);\n\
    \                          ^\n  symbol:   variable LocalDate\n  location: class\
    \ Problem\n/tmp/tmprku4j9w4.java:36: error: cannot find symbol\n        LocalDate\
    \ date3 = LocalDate.parse(dateParts[2]);\n        ^\n  symbol:   class LocalDate\n\
    \  location: class Problem\n/tmp/tmprku4j9w4.java:36: error: cannot find symbol\n\
    \        LocalDate date3 = LocalDate.parse(dateParts[2]);\n                  \
    \        ^\n  symbol:   variable LocalDate\n  location: class Problem\n/tmp/tmprku4j9w4.java:37:\
    \ error: cannot find symbol\n        LocalDate date4 = date1.plusDays(1);\n  \
    \      ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmprku4j9w4.java:38:\
    \ error: cannot find symbol\n        LocalDate date5 = date1.plusDays(2);\n  \
    \      ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmprku4j9w4.java:39:\
    \ error: cannot find symbol\n        LocalDate date6 = date1.plusDays(3);\n  \
    \      ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmprku4j9w4.java:40:\
    \ error: cannot find symbol\n        LocalDate date7 = date1.plusDays(4);\n  \
    \      ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmprku4j9w4.java:41:\
    \ error: cannot find symbol\n        LocalDate date8 = date1.plusDays(5);\n  \
    \      ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmprku4j9w4.java:42:\
    \ error: cannot find symbol\n        LocalDate date9 = date1.plusDays(6);\n  \
    \      ^\n  symbol:   class LocalDate\n  locat"
  stdout: ''
  timestamp: 1659800555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int month1 = Integer.parseInt(dateParts[0]);\n\
    \        int day1 = Integer.parseInt(dateParts[1]);\n        int year1 = Integer.parseInt(dateParts[2]);\n\
    \        int month2 = Integer.parseInt(dateParts[0]);\n        int day2 = Integer.parseInt(dateParts[1]);\n\
    \        int year2 = Integer.parseInt(dateParts[2]);\n        int dayDiff = day2\
    \ - day1;\n        int monthDiff = month2 - month1;\n        int yearDiff = year2\
    \ - year1;\n        if (monthDiff < 1 || monthDiff > 12 || dayDiff < 1 || dayDiff\
    \ > 31 || yearDiff < 1 || yearDiff > 30) {\n            return false;\n      \
    \  }\n        if (month1 == month2) {\n            return true;\n        }\n \
    \       return false;\n    }\n    public static void main(String[] args) {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplhz384ia.java:50)\n"
  stdout: ''
  timestamp: 1659800556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date.isEmpty()) {\n            System.out.println(\"The date string is not\
    \ empty.\");\n            valid = false;\n        }\n        else if (date.matches(\"\
    ^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\\d\\\\d$\")) {\n\
    \            System.out.println(\"The date string is in the correct format.\"\
    );\n            valid = true;\n        }\n        else if (date.matches(\"^(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\\d\\\\d$\")) {\n            System.out.println(\"\
    The date string is in the correct format.\");\n            valid = true;\n   \
    \     }\n        else if (date.matches(\"^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[-\
    \ /.](19|20)\\\\d\\\\d$\")) {\n            System.out.println(\"The date string\
    \ is in the correct format.\");\n            valid = true;\n        }\n      \
    \  else if (date.matches(\"^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\
    \\d\\\\d$\")) {\n            System.out.println(\"The date string is in the correct\
    \ format.\");\n            valid = true;\n        }\n        else if (date.matches(\"\
    ^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\\d\\\\d$\")) {\n\
    \            System.out.println(\"The date string is in the correct format.\"\
    );\n            valid = true;\n        }\n        else if (date.matches(\"^(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\\d\\\\d$\")) {\n            System.out.println(\"\
    The date string is in the correct format.\");\n            valid = true;\n   \
    \     }\n        else if (date.matches(\"^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[-\
    \ /.](19|20)\\\\d\\\\d$\")) {\n            System.out.println(\"The date string\
    \ is in the correct format.\");\n            valid = true;\n        }\n      \
    \  else if (date.matches(\"^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\
    \\d\\\\d$\")) {\n            System.out.println(\"The date string is in the correct\
    \ format.\");\n            valid = true;\n        }\n        else if (date.matches(\"\
    ^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\\d\\\\d$\")) {\n\
    \            System.out.println(\"The date string is in the correct format.\"\
    );\n            valid = true;\n        }\n        else if (date.matches(\"^(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\\d\\\\d$\")) {\n            System.out.println(\"\
    The date string is in the correct format.\");\n            valid\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04ymzqm1.java:70: error: not a statement\n            valid\n \
    \           ^\n/tmp/tmp04ymzqm1.java:70: error: ';' expected\n            valid\n\
    \                 ^\n/tmp/tmp04ymzqm1.java:72: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659800555
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        int month = Integer.parseInt(dateParts[0]);\n        int day =\
    \ Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 30) {\n            return false;\n        }\n \
    \       if (month == 4 && day > 29) {\n            return false;\n        }\n\
    \        if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n            if (day > 31) {\n          \
    \      return false;\n            }\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        Date date1 = null;\n  \
    \      try {\n            date1 = sdf.parse(date);\n        } catch (ParseException\
    \ e) {\n            e.printStackTrace();\n        }\n        Calendar cal = Calendar.getInstance();\n\
    \        cal.setTime(date1);\n        int days = cal.get(Calendar.DAY_OF_MONTH);\n\
    \        int months = cal.get(Calendar.MONTH);\n        int year = cal.get(Calendar.YEAR);\n\
    \        if (days > 31 || days < 1 || months > 12 || months < 1 || year > 2040)\
    \ {\n            return false;\n        }\n        if (months == 2 && days > 29)\
    \ {\n            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe37a8wf5.java:28: error: cannot find symbol\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpe37a8wf5.java:28: error: cannot find symbol\n\
    \        SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n      \
    \                             ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n/tmp/tmpe37a8wf5.java:32: error: cannot find symbol\n       \
    \ } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659800555
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31\n                            && day <= 29 &&\
    \ day <= 31) {\n                        valid = true;\n                    }\n\
    \                    else if (month >= 4 && month <= 11 && day >= 1 && day <=\
    \ 30\n                            && day <= 31) {\n                        valid\
    \ = true;\n                    }\n                    else if (month == 2 && day\
    \ >= 1 && day <= 29) {\n                        valid = true;\n              \
    \      }\n                    else {\n                        valid = false;\n\
    \                    }\n                }\n                catch (NumberFormatException\
    \ nfe) {\n                    valid = false;\n                }\n            }\n\
    \            else {\n                valid = false;\n            }\n        }\n\
    \        return valid;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 29) {\n            return false;\n        }\n \
    \       if (month == 4 || month == 6 || month == 9 || month == 11 && day > 30)\
    \ {\n            return false;\n        }\n        if (month == 1 && day > 31)\
    \ {\n            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjx_b0y_5.java:56)\n"
  stdout: ''
  timestamp: 1659800556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        int daysInMonth[] = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        String[] dateParts = date.split(\"\
    -\");\n        int month = Integer.parseInt(dateParts[0]);\n        int day =\
    \ Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > daysInMonth[month - 1]) {\n            return false;\n\
    \        }\n        if (month == 2 && day > 29) {\n            return false;\n\
    \        }\n        if (month == 2 && day < 1) {\n            return false;\n\
    \        }\n        if (month == 2 && day > 28) {\n            return false;\n\
    \        }\n        if (month == 2 && day > daysInMonth[month - 1]) {\n      \
    \      return false;\n        }\n        if (month == 2 && day > daysInMonth[month\
    \ - 1]) {\n            return false;\n        }\n        if (month == 2 && day\
    \ > daysInMonth[month - 1]) {\n            return false;\n        }\n        if\
    \ (month == 2 && day > daysInMonth[month - 1]) {\n            return false;\n\
    \        }\n        if (month == 2 && day > daysInMonth[month - 1]) {\n      \
    \      return false;\n        }\n        if (month == 2 && day > daysInMonth[month\
    \ - 1]) {\n            return false;\n        }\n        if (month == 2 && day\
    \ > daysInMonth[month - 1]) {\n            return false;\n        }\n        if\
    \ (month == 2 && day > daysInMonth[month - 1]) {\n            return false;\n\
    \        }\n        if (month == 2 && day > daysInMonth[month - 1]) {\n      \
    \      return false;\n        }\n        if (month == 2 && day > daysInMonth[month\
    \ - 1]) {\n            return false;\n        }\n        if (month == 2 && day\
    \ > daysInMonth[month - 1]) {\n            return false;\n        }\n        if\
    \ (month == 2 && day > daysInMonth[month - 1]) {\n            return false;\n\
    \        }\n        if (month == 2 && day > daysInMonth[month - 1]) {\n      \
    \      return false;\n        }\n        if (month == 2 && day > daysInMonth[month\
    \ - 1]) {\n            return false;\n        }\n        if (month == 2 && day\
    \ > daysInMonth[month - 1]) {\n            return false;\n        }\n        if\
    \ (month == 2 && day > daysInMonth[month - 1]) {\n            return false;\n\
    \        }\n        if (month == 2 && day > daysInMonth[month - 1]) {\n      \
    \      return false;\n        }\n        if (month == 2 && day > daysInMonth[month\
    \ - 1]) {\n            return false;\n        }\n        if (month == 2 && day\
    \ > daysInMonth[month - 1]) {\n            return false;\n        }\n        if\
    \ (month == 2 && day > daysInMonth[month - 1]) {\n            return false;\n\
    \        }\n        if (month == 2 && day > daysInMonth[month - 1]) {\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpssgh8f5w.java:113: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659800555
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31 && year >= 1 && year <= 2040) {\n           \
    \             valid = true;\n                    }\n                } catch (NumberFormatException\
    \ e) {\n                    valid = false;\n                }\n            }\n\
    \        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        LocalDate date = LocalDate.parse(dateParts[0],\
    \ DateTimeFormatter.ofPattern(\"MM-dd-yyyy\"));\n        LocalDate month = date.withDayOfMonth(1);\n\
    \        LocalDate day = date.withDayOfMonth(1);\n        LocalDate year = date.withYear(2000);\n\
    \        LocalDate firstDayOfMonth = month.withDayOfMonth(1);\n        LocalDate\
    \ lastDayOfMonth = month.withDayOfMonth(month.lengthOfMonth());\n        LocalDate\
    \ firstDayOfYear = year.withDayOfMonth(1);\n        LocalDate lastDayOfYear =\
    \ year.withDayOfMonth(month.lengthOfMonth());\n        LocalDate firstDayOfMonthYear\
    \ = firstDayOfMonth.withYear(2000);\n        LocalDate lastDayOfMonthYear = lastDayOfMonth.withYear(2000);\n\
    \        LocalDate firstDayOfYearYear = firstDayOfYear.withYear(2000);\n     \
    \   LocalDate lastDayOfYearYear = lastDayOfYear.withYear(2000);\n        if (dateParts[1].equals(\"\
    01\") && dateParts[2].equals(\"01\")) {\n            return true;\n        }\n\
    \        if (dateParts[1].equals(\"01\") && dateParts[2].equals(\"02\")) {\n \
    \           return true;\n        }\n        if (dateParts[1].equals(\"01\") &&\
    \ dateParts[2].equals(\"03\")) {\n            return true;\n        }\n      \
    \  if (dateParts[1].equals(\"01\") && dateParts[2].equals(\"04\")) {\n       \
    \     return true;\n        }\n        if (dateParts[1].equals(\"01\") && dateParts[2].equals(\"\
    05\")) {\n            return true;\n        }\n        if (dateParts[1].equals(\"\
    01\") && dateParts[2].equals(\"06\")) {\n            return true;\n        }\n\
    \        if (dateParts[1].equals(\"01\") && dateParts[2].equals(\"07\")) {\n \
    \           return true;\n        }\n        if (dateParts[1].equals(\"01\") &&\
    \ dateParts[2].equals(\"08\")) {\n            return true;\n        }\n      \
    \  if (dateParts[1].equals(\"01\") && dateParts[2].equals(\"09\")) {\n       \
    \     return true;\n        }\n        if (dateParts[1].equals(\"01\") && dateParts[2].equals(\"\
    10\")) {\n            return true;\n        }\n        if (dateParts[1].equals(\"\
    01\") && dateParts[2].equals(\"11\")) {\n            return true;\n        }\n\
    \        if (dateParts[1].equals(\"01\") && dateParts[2].equals(\"12\")) {\n \
    \           return true;\n        }\n        if (dateParts[1].equals(\"02\") &&\
    \ dateParts[2].equals(\"01\")) {\n            return true;\n        }\n      \
    \  if (dateParts[1].\n    }\n    public static void main(String[] args) {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb2y52lvj.java:83: error: <identifier> expected\n        if (dateParts[1].\n\
    \                         ^\n/tmp/tmpb2y52lvj.java:84: error: illegal start of\
    \ statement\n    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31\n                            && year >= 1 &&\
    \ year <= Integer.MAX_VALUE) {\n                        if (month == 2 && day\
    \ > 29) {\n                            valid = false;\n                      \
    \  } else if (month == 2 && day < 1) {\n                            valid = false;\n\
    \                        } else if (month == 1 || month == 3 || month == 5 ||\
    \ month == 7 || month == 8 || month == 10 || month == 12) {\n                \
    \            if (day > 31) {\n                                valid = false;\n\
    \                            } else if (day < 1) {\n                         \
    \       valid = false;\n                            }\n                      \
    \  } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n     \
    \                       if (day > 30) {\n                                valid\
    \ = false;\n                            } else if (day < 1) {\n              \
    \                  valid = false;\n                            }\n           \
    \             }\n                    }\n                } catch (NumberFormatException\
    \ e) {\n                    valid = false;\n                }\n            }\n\
    \        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprnxf97q2.java:63)\n"
  stdout: ''
  timestamp: 1659800557
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 30) {\n            return false;\n        }\n \
    \       if (month == 4 && day > 29) {\n            return false;\n        }\n\
    \        if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12 && day > 31) {\n            return false;\n\
    \        }\n        if (month == 4 || month == 6 || month == 9 || month == 11\
    \ && day > 30) {\n            return false;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoboydm1_.java:56)\n"
  stdout: ''
  timestamp: 1659800557
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        LocalDate date1 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date2 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date3 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date4 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date5 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date6 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date7 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date8 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date9 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date10 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date11 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date12 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date13 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date14 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date15 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date16 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date17 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ \n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57ewsp0w.java:49: error: not a statement\n        LocalDate \n\
    \        ^\n/tmp/tmp57ewsp0w.java:49: error: ';' expected\n        LocalDate \n\
    \                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800556
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31 && year >= 1 && year <= 2040) {\n           \
    \             valid = true;\n                    }\n                } catch (NumberFormatException\
    \ e) {\n                    valid = false;\n                }\n            }\n\
    \        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[0]);\n\
    \        int day = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[2]);\n\
    \        if (date.length() == 0) {\n            return false;\n        }\n   \
    \     if (month < 1 || month > 12) {\n            return false;\n        }\n \
    \       if (day < 1 || day > 31) {\n            return false;\n        }\n   \
    \     if (month == 2 && day > 30) {\n            return false;\n        }\n  \
    \      if (month == 4 && day > 29) {\n            return false;\n        }\n \
    \       if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8\
    \ || month == 10 || month == 12 && day > 31) {\n            return false;\n  \
    \      }\n        if (month == 4 || month == 6 || month == 9 || month == 11 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 29) {\n            return false;\n        }\n        return true;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps20gvd89.java:59)\n"
  stdout: ''
  timestamp: 1659800557
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        LocalDate date1 = LocalDate.parse(dateParts[0]);\n\
    \        LocalDate date2 = LocalDate.parse(dateParts[1]);\n        LocalDate date3\
    \ = LocalDate.parse(dateParts[2]);\n        LocalDate date4 = LocalDate.of(date1.getYear(),\
    \ date1.getMonthValue(), date1.getDayOfMonth());\n        LocalDate date5 = LocalDate.of(date2.getYear(),\
    \ date2.getMonthValue(), date2.getDayOfMonth());\n        LocalDate date6 = LocalDate.of(date3.getYear(),\
    \ date3.getMonthValue(), date3.getDayOfMonth());\n        LocalDate date7 = LocalDate.of(date4.getYear(),\
    \ date4.getMonthValue(), date4.getDayOfMonth());\n        LocalDate date8 = LocalDate.of(date5.getYear(),\
    \ date5.getMonthValue(), date5.getDayOfMonth());\n        LocalDate date9 = LocalDate.of(date6.getYear(),\
    \ date6.getMonthValue(), date6.getDayOfMonth());\n        LocalDate date10 = LocalDate.of(date7.getYear(),\
    \ date7.getMonthValue(), date7.getDayOfMonth());\n        LocalDate date11 = LocalDate.of(date8.getYear(),\
    \ date8.getMonthValue(), date8.getDayOfMonth());\n        LocalDate date12 = LocalDate.of(date9.getYear(),\
    \ date9.getMonthValue(), date9.getDayOfMonth());\n        LocalDate date13 = LocalDate.of(date10.getYear(),\
    \ date10.getMonthValue(), date10.getDayOfMonth());\n        LocalDate date14 =\
    \ LocalDate.of(date11.getYear(), date11.getMonthValue(), date11.getDayOfMonth());\n\
    \        LocalDate date15 = LocalDate.of(date12.getYear(), date12.getMonthValue(),\
    \ date12.getDayOfMonth());\n        LocalDate date16 = LocalDate.of(date13.getYear(),\
    \ date13.getMonthValue(), date13.getDayOfMonth());\n        LocalDate date17 =\
    \ LocalDate.of(date14.getYear(), date14.getMonthValue(), date14.getDayOfMonth());\n\
    \        LocalDate date18 = LocalDate.of(date15.getYear(), date15.getMonthValue(),\
    \ date15.getDayOfMonth());\n        LocalDate date19 = LocalDate.of(date16.getYear(),\
    \ date16.getMonthValue(), date16.getDayOfMonth());\n        LocalDate date20 =\
    \ LocalDate.of(date17.getYear(), date17.getMonthValue(), date17\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9folynon.java:51: error: ')' expected\n        LocalDate date20\
    \ = LocalDate.of(date17.getYear(), date17.getMonthValue(), date17\n          \
    \                                                                            \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1659800556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = true;\n        if\
    \ (date == null || date.trim().isEmpty()) {\n            valid = false;\n    \
    \    }\n        if (valid == false) {\n            return valid;\n        }\n\
    \        String[] dateParts = date.split(\"-\");\n        if (dateParts.length\
    \ != 3) {\n            valid = false;\n        }\n        String[] months = {\"\
    01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n        String[] daysOfMonths\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n        String[]\
    \ daysOfYears = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\"\
    , \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"\
    , \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\"\
    , \"29\", \"30\", \"31\"};\n        String[] monthsOfYears = {\"01\", \"02\",\
    \ \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\"\
    , \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n \
    \       String[] monthsOfYearsOfMonths = {\"01\", \"02\", \"03\", \"04\", \"05\"\
    , \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\"\
    , \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n        String[] monthsOfYearsOfMonthsOfYears\
    \ = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"\
    10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\
    \ \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\"};\n        String[] monthsOfYearsOfMonthsOfMonthsOfYears = {\"\
    01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"\
    , \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"\
    , \"31\"};\n        String[] monthsOfYearsOfMonthsOfMonthsOfMonthsOfYears = {\"\
    01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"\
    , \"21\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuw6on0w5.java:45: error: unclosed string literal\n        String[]\
    \ monthsOfYearsOfMonthsOfMonthsOfMonthsOfYears = {\"01\", \"02\", \"03\", \"04\"\
    , \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\n                     \
    \                                                                            \
    \                                                                            \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1659800556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length != 3) {\n                valid = false;\n\
    \            } else {\n                try {\n                    int month =\
    \ Integer.parseInt(dateParts[0]);\n                    int day = Integer.parseInt(dateParts[1]);\n\
    \                    int year = Integer.parseInt(dateParts[2]);\n            \
    \        if (month < 1 || month > 12) {\n                        valid = false;\n\
    \                    } else if (day < 1 || day > 31) {\n                     \
    \   valid = false;\n                    } else if (month == 2 && day > 29) {\n\
    \                        valid = false;\n                    } else if (month\
    \ == 2 && day > 28) {\n                        valid = false;\n              \
    \      } else if (month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12) {\n                        if (day > 31)\
    \ {\n                            valid = false;\n                        }\n \
    \                   } else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n                        if (day > 30) {\n                        \
    \    valid = false;\n                        }\n                    }\n      \
    \              valid = true;\n                } catch (NumberFormatException e)\
    \ {\n                    valid = false;\n                }\n            }\n  \
    \      }\n        return valid;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcvlgtbp7.java:64)\n"
  stdout: ''
  timestamp: 1659800557
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if(dateParts.length != 3)\n        \
    \    return false;\n        LocalDate date1 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date2 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date3 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date4 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date5 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date6 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date7 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date8 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date9 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date10 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date11 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date12 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date13 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date14 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date15 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date16 = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        LocalDate date17 = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ date18 = \n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2gmfbf9n.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659800556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31\n                            && day <= 30) {\n\
    \                        if (month == 2) {\n                            if (day\
    \ > 29) {\n                                valid = false;\n                  \
    \          }\n                        } else {\n                            if\
    \ (day > 31) {\n                                valid = false;\n             \
    \               }\n                        }\n                    } else {\n \
    \                       valid = false;\n                    }\n              \
    \  } catch (NumberFormatException e) {\n                    valid = false;\n \
    \               }\n            } else {\n                valid = false;\n    \
    \        }\n        } else {\n            valid = false;\n        }\n        return\
    \ valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwkf39fhv.java:61)\n"
  stdout: ''
  timestamp: 1659800558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date date1 = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpworfuhts.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpworfuhts.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpworfuhts.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659800557
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 29) {\n            return false;\n        }\n \
    \       if (month == 4 || month == 6 || month == 9 || month == 11 && day > 30)\
    \ {\n            return false;\n        }\n        if (month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 && day > 31) {\n\
    \            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8_hr7uid.java:53)\n"
  stdout: ''
  timestamp: 1659800558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if(dateParts.length != 3){\n       \
    \     return false;\n        }\n        for(int i = 0; i < dateParts.length; i++){\n\
    \            try{\n                Integer.parseInt(dateParts[i]);\n         \
    \   }catch(NumberFormatException e){\n                return false;\n        \
    \    }\n        }\n        for(int i = 0; i < dateParts.length; i++){\n      \
    \      try{\n                Integer.parseInt(dateParts[i]);\n            }catch(NumberFormatException\
    \ e){\n                return false;\n            }\n        }\n        for(int\
    \ i = 0; i < dateParts.length; i++){\n            try{\n                Integer.parseInt(dateParts[i]);\n\
    \            }catch(NumberFormatException e){\n                return false;\n\
    \            }\n        }\n        for(int i = 0; i < dateParts.length; i++){\n\
    \            try{\n                Integer.parseInt(dateParts[i]);\n         \
    \   }catch(NumberFormatException e){\n                return false;\n        \
    \    }\n        }\n        for(int i = 0; i < dateParts.length; i++){\n      \
    \      try{\n                Integer.parseInt(dateParts[i]);\n            }catch(NumberFormatException\
    \ e){\n                return false;\n            }\n        }\n        for(int\
    \ i = 0; i < dateParts.length; i++){\n            try{\n                Integer.parseInt(dateParts[i]);\n\
    \            }catch(NumberFormatException e){\n                return false;\n\
    \            }\n        }\n        for(int i = 0; i < dateParts.length; i++){\n\
    \            try{\n                Integer.parseInt(dateParts[i]);\n         \
    \   }catch(NumberFormatException e){\n                return false;\n        \
    \    }\n        }\n        for(int i = 0; i < dateParts.length; i++){\n      \
    \      try{\n                Integer.parseInt(dateParts[i]);\n            }catch(NumberFormatException\
    \ e){\n                return false;\n            }\n        }\n        for(int\
    \ i = 0; i < dateParts.length; i++){\n            try{\n                Integer.parseInt(dateParts[i]);\n\
    \            }catch(NumberFormatException e){\n                return false;\n\
    \            }\n        }\n        for(int i = 0; i < dateParts.length; i++){\n\
    \            try{\n                Integer.parseInt(dateParts[i]);\n         \
    \   }catch(NumberFormatException e){\n                return false;\n        \
    \    }\n        }\n        for(int i = 0; i < dateParts.length; i++){\n      \
    \      try{\n                Integer.parseInt(dateParts[i]);\n            }catch(NumberFormatException\
    \ e){\n                return false;\n            }\n        }\n        for(int\
    \ i = 0; i < dateParts.length; i++){\n            try{\n                Integer.parseInt(dateParts[i]);\n\
    \            }catch(NumberFormatException e){\n                return false;\n\
    \            }\n        }\n        for(int i = 0; i < dateParts.length; i++){\n\
    \            try{\n                Integer.parseInt(dateParts[i]);\n         \
    \   }catch(NumberFormatException e){\n                return false;\n        \
    \    }\n        }\n        for(int i = 0; i < dateParts.length; i++){\n      \
    \      try{\n                Integer.parseInt(dateParts[i]);\n            }catch(NumberFormatException\
    \ e){\n                return \n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg_ddk3z_.java:128: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmpg_ddk3z_.java:129: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800557
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsehr0h5l.java:28: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659800553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                int month = Integer.parseInt(dateParts[0]);\n\
    \                int day = Integer.parseInt(dateParts[1]);\n                int\
    \ year = Integer.parseInt(dateParts[2]);\n                if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31\n                        && day <= 30) {\n  \
    \                  if (month != 2 && month != 4 && month != 6 && month != 9\n\
    \                            && month != 11 && month != 12) {\n              \
    \          if (day >= 1 && day <= 29) {\n                            valid = true;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvr8bc_t3.java:51)\n"
  stdout: ''
  timestamp: 1659800558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length != 3) {\n                return false;\n\
    \            }\n            int month = Integer.parseInt(dateParts[0]);\n    \
    \        int day = Integer.parseInt(dateParts[1]);\n            int year = Integer.parseInt(dateParts[2]);\n\
    \            if (month < 1 || month > 12) {\n                return false;\n \
    \           }\n            if (day < 1 || day > 31) {\n                return\
    \ false;\n            }\n            if (month == 2 && day > 29) {\n         \
    \       return false;\n            }\n            if (month == 4 || month == 6\
    \ || month == 9 || month == 11 && day > 30) {\n                return false;\n\
    \            }\n            if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 && day > 31) {\n                return false;\n\
    \            }\n            valid = true;\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6lkuvtir.java:56)\n"
  stdout: ''
  timestamp: 1659800558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int monthInt = Integer.parseInt(dateParts[0]);\n             \
    \       int dayInt = Integer.parseInt(dateParts[1]);\n                    int\
    \ yearInt = Integer.parseInt(dateParts[2]);\n                    if (monthInt\
    \ >= 1 && monthInt <= 12 && dayInt >= 1 && dayInt <= 31 && yearInt >= 1 && yearInt\
    \ <= 9999) {\n                        valid = true;\n                    }\n \
    \                   else if (monthInt >= 4 && monthInt <= 11 && dayInt >= 1 &&\
    \ dayInt <= 29 && yearInt >= 1 && yearInt <= 9999) {\n                       \
    \ valid = true;\n                    }\n                    else if (monthInt\
    \ >= 2 && monthInt <= 12 && dayInt >= 1 && dayInt <= 29 && yearInt >= 1 && yearInt\
    \ <= 9999) {\n                        valid = true;\n                    }\n \
    \                   else {\n                        valid = false;\n         \
    \           }\n                }\n                catch (NumberFormatException\
    \ nfe) {\n                    valid = false;\n                }\n            }\n\
    \            else {\n                valid = false;\n            }\n        }\n\
    \        return valid;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppwmbv79m.java:66)\n"
  stdout: ''
  timestamp: 1659800558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        if(dateParts.length\
    \ != 3) {\n            valid = false;\n        }\n        for(int i = 0; i < dateParts.length;\
    \ i++) {\n            int day = Integer.parseInt(dateParts[i]);\n            int\
    \ month = Integer.parseInt(dateParts[i+1]);\n            int year = Integer.parseInt(dateParts[i+2]);\n\
    \            if((month < 1 || month > 12) || (day < 1 || day > 31) || (day > 29))\
    \ {\n                valid = false;\n            }\n            if((month < 4\
    \ || month > 12) || (day < 1 || day > 30)) {\n                valid = false;\n\
    \            }\n            if((month == 2 && day > 29)) {\n                valid\
    \ = false;\n            }\n        }\n        return valid;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 3 out of bounds for length 3\n\tat Problem.validDate(tmpp_rl56uq.java:36)\n\
    \tat Problem.main(tmpp_rl56uq.java:50)\n"
  stdout: ''
  timestamp: 1659800558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if(dateParts.length != 3){\n       \
    \     return false;\n        }\n        \n        for(int i = 1; i < dateParts.length;\
    \ i++){\n            int day = Integer.parseInt(dateParts[i]);\n            int\
    \ month = Integer.parseInt(dateParts[i - 1]);\n            int year = Integer.parseInt(dateParts[i\
    \ - 2]);\n            \n            if(day < 1 || day > 31 || (month == 2 && day\
    \ > 29)){\n                return false;\n            }\n            \n      \
    \      if(month < 1 || month > 12){\n                return false;\n         \
    \   }\n        }\n        \n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -1 out of bounds for length 3\n\tat Problem.validDate(tmpox14v3km.java:36)\n\
    \tat Problem.main(tmpox14v3km.java:50)\n"
  stdout: ''
  timestamp: 1659800558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateArray = date.split(\"-\");\n        if (dateArray.length != 3) {\n     \
    \       return false;\n        }\n        int daysInMonth[] = {31, 28, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31};\n        int month[] = {1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12};\n        int year = Integer.parseInt(dateArray[2]);\n   \
    \     for (int i = 0; i < dateArray.length; i++) {\n            if (dateArray[i].length()\
    \ != 2) {\n                return false;\n            }\n        }\n        for\
    \ (int i = 0; i < dateArray.length; i++) {\n            if (month[Integer.parseInt(dateArray[0])\
    \ - 1] < 1 || month[Integer.parseInt(dateArray[0]) - 1] > 12) {\n            \
    \    return false;\n            }\n            if (Integer.parseInt(dateArray[1])\
    \ < 1 || Integer.parseInt(dateArray[1]) > daysInMonth[month[Integer.parseInt(dateArray[0])\
    \ - 1]]) {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpon6gnv3k.java:51)\n"
  stdout: ''
  timestamp: 1659800558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        int daysInMonth[] = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int daysInYear[] = {365, 366,\
    \ 365, 366};\n        int daysInLeapMonth[] = {0, 31, 59, 90, 120, 151, 181, 212,\
    \ 243, 273, 304, 334};\n        int leapMonths[] = {0, 31, 59, 90, 120, 151, 181,\
    \ 212, 243, 273, 304, 334};\n        int months[] = {0, 11, 12, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11};\n        int monthsInLeap[] = {0, 31, 59, 90, 120, 151,\
    \ 181, 212, 243, 273, 304, 334};\n        int monthsInYear[] = {0, 12, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11};\n        int monthsInLeapYear[] = {0, 31, 59, 90,\
    \ 120, 151, 181, 212, 243, 273, 304, 334};\n        int years[] = {0, 31, 60,\
    \ 91, 121, 152, 182, 213, 244, 274, 305, 335};\n        int leapYears[] = {0,\
    \ 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335};\n        int daysInLeapMonthYear[]\
    \ = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};\n        int leapMonthYears[]\
    \ = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};\n        int monthYears[]\
    \ = {0, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n        int leapMonthYears[]\
    \ = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};\n        int monthYearsInLeap[]\
    \ = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};\n        int monthYearsInYear[]\
    \ = {0, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n        int monthYearsInLeapYear[]\
    \ = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};\n        int leapMonthYearsInLeap[]\
    \ = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};\n        int leapMonthYearsInYear[]\
    \ = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};\n        int leapMonthYearsInLeapYear[]\
    \ = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};\n        int leapMonthYearsInLeapYear[]\
    \ = {0, 31, \n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgf7t44l5.java:51: error: ';' expected\n    }\n     ^\n/tmp/tmpgf7t44l5.java:52:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800557
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            int month = Integer.parseInt(dateParts[0]);\n            int\
    \ day = Integer.parseInt(dateParts[1]);\n            int year = Integer.parseInt(dateParts[2]);\n\
    \            valid = checkMonth(month) && checkDay(day) && checkYear(year);\n\
    \        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7au0cbbc.java:33: error: cannot find symbol\n            valid\
    \ = checkMonth(month) && checkDay(day) && checkYear(year);\n                 \
    \   ^\n  symbol:   method checkMonth(int)\n  location: class Problem\n/tmp/tmp7au0cbbc.java:33:\
    \ error: cannot find symbol\n            valid = checkMonth(month) && checkDay(day)\
    \ && checkYear(year);\n                                         ^\n  symbol: \
    \  method checkDay(int)\n  location: class Problem\n/tmp/tmp7au0cbbc.java:33:\
    \ error: cannot find symbol\n            valid = checkMonth(month) && checkDay(day)\
    \ && checkYear(year);\n                                                      \
    \    ^\n  symbol:   method checkYear(int)\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659800558
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length != 3) {\n                return false;\n\
    \            }\n            int month = 0;\n            int day = 0;\n       \
    \     int year = 0;\n            try {\n                month = Integer.parseInt(dateParts[0]);\n\
    \                day = Integer.parseInt(dateParts[1]);\n                year =\
    \ Integer.parseInt(dateParts[2]);\n            } catch (NumberFormatException\
    \ e) {\n                return false;\n            }\n            if (month <\
    \ 1 || month > 12) {\n                return false;\n            }\n         \
    \   if (day < 1 || day > 31) {\n                return false;\n            }\n\
    \            if (month == 2 && day > 30) {\n                return false;\n  \
    \          }\n            if (month == 4 && day > 29) {\n                return\
    \ false;\n            }\n            if (month == 6 && day > 30) {\n         \
    \       return false;\n            }\n            if (month == 9 && day > 30)\
    \ {\n                return false;\n            }\n            if (month == 11\
    \ && day > 30) {\n                return false;\n            }\n            if\
    \ (month == 1 && day > 31) {\n                return false;\n            }\n \
    \           valid = true;\n        }\n        return valid;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date date1 =\
    \ format.parse(date);\n                valid = true;\n            } catch (ParseException\
    \ e) {\n                valid = false;\n            }\n        }\n        return\
    \ valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp26uyyfk0.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:\
    \   class SimpleDateFormat\n  location: class Problem\n/tmp/tmp26uyyfk0.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat format = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                              ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmp26uyyfk0.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659800558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31 && year % 4 == 0 && year % 100 != 0 || year %\
    \ 400 == 0) {\n                        valid = true;\n                    }\n\
    \                } catch (NumberFormatException e) {\n                    valid\
    \ = false;\n                }\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphwq8aavg.java:50)\n"
  stdout: ''
  timestamp: 1659800559
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31 && (month == 2 || month == 4 || month == 6 ||\
    \ month == 9 || month == 11) && day <= 30) {\n                        valid =\
    \ true;\n                    }\n                    else if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 29 && month != 2) {\n                        valid\
    \ = true;\n                    }\n                    else {\n               \
    \         valid = false;\n                    }\n                }\n         \
    \       catch (NumberFormatException e) {\n                    valid = false;\n\
    \                }\n            }\n            else {\n                valid =\
    \ false;\n            }\n        }\n        return valid;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        boolean valid = true;\n        if (dateParts.length\
    \ != 3) {\n            valid = false;\n        }\n        if (dateParts[0].length()\
    \ < 1 || dateParts[0].length() > 12) {\n            valid = false;\n        }\n\
    \        if (dateParts[1].length() < 1 || dateParts[1].length() > 31) {\n    \
    \        valid = false;\n        }\n        if (dateParts[2].length() < 1 || dateParts[2].length()\
    \ > 30) {\n            valid = false;\n        }\n        if (dateParts[0].length()\
    \ < 1 || dateParts[0].length() > 12) {\n            valid = false;\n        }\n\
    \        if (dateParts[1].length() < 1 || dateParts[1].length() > 31) {\n    \
    \        valid = false;\n        }\n        if (dateParts[2].length() < 1 || dateParts[2].length()\
    \ > 29) {\n            valid = false;\n        }\n        return valid;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe7i6za81.java:55)\n"
  stdout: ''
  timestamp: 1659800551
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateArray = date.split(\"-\");\n        boolean valid = false;\n        if(dateArray.length\
    \ == 3) {\n            int month = Integer.parseInt(dateArray[0]);\n         \
    \   int day = Integer.parseInt(dateArray[1]);\n            int year = Integer.parseInt(dateArray[2]);\n\
    \            if(month >= 1 && month <= 12 && day >= 1 && day <= 31 && year >=\
    \ 1 && year <= 2020) {\n                valid = true;\n            }\n       \
    \     else if(month >= 4 && month <= 12 && day >= 1 && day <= 30 && year >= 1\
    \ && year <= 2020) {\n                valid = true;\n            }\n         \
    \   else if(month == 2 && day >= 1 && day <= 29) {\n                valid = true;\n\
    \            }\n        }\n        return valid;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return valid;\n        }\n        String[] months = {\"01\", \"03\", \"\
    05\", \"07\", \"08\", \"10\", \"12\"};\n        String[] daysOfMonths = {\"01\"\
    , \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n        String[] daysOfYear\
    \ = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"\
    10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\
    \ \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\"};\n        String[] months = {\"01\", \"03\", \"05\", \"07\"\
    , \"08\", \"10\", \"12\"};\n        String[] daysOfMonths = {\"01\", \"03\", \"\
    05\", \"07\", \"08\", \"10\", \"12\"};\n        String[] daysOfYear = {\"01\"\
    , \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\"\
    , \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"\
    , \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    };\n        String[] months = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\"\
    , \"12\"};\n        String[] daysOfMonths = {\"01\", \"03\", \"05\", \"07\", \"\
    08\", \"10\", \"12\"};\n        String[] daysOfYear = {\"01\", \"02\", \"03\"\
    , \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\"\
    , \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\"\
    , \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n        String[]\
    \ months = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n       \
    \ String[] daysOfMonths = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"\
    12\"};\n        String[] daysOfYear = {\"01\", \"02\", \"03\", \"04\", \"05\"\
    , \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\"\
    , \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n        String[] months =\
    \ {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n        String[]\
    \ daysOfMonths = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n \
    \       String[] daysOfYear = {\"01\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9kojg3p2.java:46: error: unclosed string literal\n        String[]\
    \ daysOfYear = {\"01\n                               ^\n1 error\n"
  stdout: ''
  timestamp: 1659800558
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) {\n          \
    \  return false;\n        }\n        String[] dateParts = date.split(\"-\");\n\
    \        if (dateParts.length != 3) {\n            return false;\n        }\n\
    \        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 4 &&\
    \ day > 29) {\n            return false;\n        }\n        if (month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n            if (day > 31) {\n                return false;\n     \
    \       }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        int month = 0;\n        int day = 0;\n        try {\n         \
    \   month = Integer.parseInt(dateParts[0]);\n            day = Integer.parseInt(dateParts[1]);\n\
    \        } catch (NumberFormatException e) {\n            return false;\n    \
    \    }\n        switch (month) {\n            case 1:\n            case 3:\n \
    \           case 5:\n            case 7:\n            case 8:\n            case\
    \ 10:\n            case 12:\n                if (day < 1 || day > 31) {\n    \
    \                return false;\n                }\n                break;\n  \
    \          case 4:\n            case 6:\n            case 9:\n            case\
    \ 11:\n                if (day < 1 || day > 30) {\n                    return\
    \ false;\n                }\n                break;\n            case 2:\n   \
    \             if (day < 1 || day > 29) {\n                    return false;\n\
    \                }\n                break;\n            default:\n           \
    \     return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800559
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return valid;\n        }\n        int month = 0;\n        int day = 0;\n\
    \        int year = 0;\n        try {\n            month = Integer.parseInt(dateParts[0]);\n\
    \            day = Integer.parseInt(dateParts[1]);\n            year = Integer.parseInt(dateParts[2]);\n\
    \        } catch (NumberFormatException e) {\n            return valid;\n    \
    \    }\n        if (month < 1 || month > 12) {\n            return valid;\n  \
    \      }\n        if (day < 1 || day > 31) {\n            return valid;\n    \
    \    }\n        if (month == 2 && day > 30) {\n            return valid;\n   \
    \     }\n        if (month == 4 && day > 29) {\n            return valid;\n  \
    \      }\n        if (month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n            if (day > 31) {\n \
    \               return valid;\n            }\n        }\n        if (month ==\
    \ 2) {\n            if (day > 29) {\n                return valid;\n         \
    \   }\n        }\n        if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day > 30) {\n                return valid;\n     \
    \       }\n        }\n        if (month == 1) {\n            if (day > 31) {\n\
    \                return valid;\n            }\n        }\n        valid = true;\n\
    \        return valid;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if(dateParts.length != 3){\n       \
    \     return false;\n        }\n        try{\n            int month = Integer.parseInt(dateParts[0]);\n\
    \            int day = Integer.parseInt(dateParts[1]);\n            int year =\
    \ Integer.parseInt(dateParts[2]);\n            int monthDays[] = {0, 31, 28, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInMonth = monthDays[month];\n\
    \            if(month == 1 && day > daysInMonth){\n                return false;\n\
    \            }\n            if(month == 2 && day > daysInMonth){\n           \
    \     return false;\n            }\n            if(month == 3 && day > daysInMonth){\n\
    \                return false;\n            }\n            if(month == 4 && day\
    \ > daysInMonth){\n                return false;\n            }\n            if(month\
    \ == 5 && day > daysInMonth){\n                return false;\n            }\n\
    \            if(month == 6 && day > daysInMonth){\n                return false;\n\
    \            }\n            if(month == 7 && day > daysInMonth){\n           \
    \     return false;\n            }\n            if(month == 8 && day > daysInMonth){\n\
    \                return false;\n            }\n            if(month == 9 && day\
    \ > daysInMonth){\n                return false;\n            }\n            if(month\
    \ == 10 && day > daysInMonth){\n                return false;\n            }\n\
    \            if(month == 11 && day > daysInMonth){\n                return false;\n\
    \            }\n            return true;\n        }catch(Exception e){\n     \
    \       return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj_794wfp.java:79)\n"
  stdout: ''
  timestamp: 1659800559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        boolean valid = true;\n        if (dateParts.length\
    \ != 3) {\n            valid = false;\n        } else {\n            int days\
    \ = Integer.parseInt(dateParts[2]);\n            if (days < 1 || days > 31) {\n\
    \                valid = false;\n            }\n            if (days < 1 || days\
    \ > 30) {\n                valid = false;\n            }\n            if (days\
    \ < 1 || days > 29) {\n                valid = false;\n            }\n       \
    \ }\n        if (dateParts[0].length() < 1 || dateParts[0].length() > 12) {\n\
    \            valid = false;\n        }\n        return valid;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgmt7qp66.java:50)\n"
  stdout: ''
  timestamp: 1659800559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateArray = date.split(\"-\");\n        if (dateArray.length != 3) {\n     \
    \       return false;\n        }\n        LocalDate date1 = LocalDate.of(Integer.parseInt(dateArray[0]),\
    \ Integer.parseInt(dateArray[1]), Integer.parseInt(dateArray[2]));\n        LocalDate\
    \ date2 = LocalDate.of(Integer.parseInt(dateArray[0]), Integer.parseInt(dateArray[1]),\
    \ Integer.parseInt(dateArray[2]));\n        LocalDate date3 = LocalDate.of(Integer.parseInt(dateArray[0]),\
    \ Integer.parseInt(dateArray[1]), Integer.parseInt(dateArray[2]));\n        LocalDate\
    \ date4 = LocalDate.of(Integer.parseInt(dateArray[0]), Integer.parseInt(dateArray[1]),\
    \ Integer.parseInt(dateArray[2]));\n        LocalDate date5 = LocalDate.of(Integer.parseInt(dateArray[0]),\
    \ Integer.parseInt(dateArray[1]), Integer.parseInt(dateArray[2]));\n        LocalDate\
    \ date6 = LocalDate.of(Integer.parseInt(dateArray[0]), Integer.parseInt(dateArray[1]),\
    \ Integer.parseInt(dateArray[2]));\n        LocalDate date7 = LocalDate.of(Integer.parseInt(dateArray[0]),\
    \ Integer.parseInt(dateArray[1]), Integer.parseInt(dateArray[2]));\n        LocalDate\
    \ date8 = LocalDate.of(Integer.parseInt(dateArray[0]), Integer.parseInt(dateArray[1]),\
    \ Integer.parseInt(dateArray[2]));\n        LocalDate date9 = LocalDate.of(Integer.parseInt(dateArray[0]),\
    \ Integer.parseInt(dateArray[1]), Integer.parseInt(dateArray[2]));\n        LocalDate\
    \ date10 = LocalDate.of(Integer.parseInt(dateArray[0]), Integer.parseInt(dateArray[1]),\
    \ Integer.parseInt(dateArray[2]));\n        LocalDate date11 = LocalDate.of(Integer.parseInt(dateArray[0]),\
    \ Integer.parseInt(dateArray[1]), Integer.parseInt(dateArray[2]));\n        LocalDate\
    \ date12 = LocalDate.of(Integer.parseInt(dateArray[0]), Integer.parseInt(dateArray[1]),\
    \ Integer.parseInt(dateArray[2]));\n        LocalDate date13 = LocalDate.of(Integer.parseInt(dateArray[0]),\
    \ Integer.parseInt(dateArray[1]), Integer.parseInt(dateArray[2]));\n        LocalDate\
    \ date14 = LocalDate.of(Integer.parseInt(dateArray[0]), Integer.parseInt(dateArray[1]),\
    \ Integer.parseInt(dateArray[2]));\n        LocalDate date15 = LocalDate.of(Integer.parseInt(dateArray[0]),\
    \ Integer.parseInt(dateArray[1]), Integer.parseInt(dateArray[2]));\n        LocalDate\
    \ date16 = LocalDate.of(Integer.parseInt(dateArray[0]), Integer.parseInt(dateArray[1]),\
    \ Integer.parseInt(dateArray[2]));\n        LocalDate date17 = LocalDate.of(Integer.parseInt(dateArray[0]),\
    \ Integer.parseInt(dateArray[1]), Integer.parseInt(dateArray[2]));\n        LocalDate\
    \ date18 = LocalDate.of(Integer.parseInt(dateArray[0]), Integer.parseInt(dateArray[1]),\
    \ Integer.parseInt(dateArray[2]));\n        LocalDate date19 = LocalDate.of(Integer.parseInt(dateArray[0]),\
    \ Integer.parseInt(dateArray[1]), Integer.parseInt(dateArray[2]));\n        Local\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp120mz8se.java:51: error: not a statement\n        Local\n     \
    \   ^\n/tmp/tmp120mz8se.java:51: error: ';' expected\n        Local\n        \
    \     ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        \n\
    \        if (dateParts.length != 3) {\n            return false;\n        }\n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaf6ndn88.java:273: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659800559
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.trim().isEmpty())\
    \ {\n            return false;\n        }\n        int daysInMonth[] = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        int month = Integer.parseInt(dateParts[0]);\n        int day =\
    \ Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > daysInMonth[month - 1]) {\n            return false;\n\
    \        }\n        if (month == 2 && day > 29) {\n            return false;\n\
    \        }\n        if (month == 2 && day < 1) {\n            return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        if\
    \ (dateParts.length != 3) {\n            return false;\n        }\n        int\
    \ month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 29) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 28) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ \n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps2ojn8ea.java:133: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659800559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if(dateParts.length != 3){\n       \
    \     return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if(month < 1 || month > 12){\n            return false;\n        }\n\
    \        if(day < 1 || day > 31){\n            return false;\n        }\n    \
    \    if(month == 2 && day > 30){\n            return false;\n        }\n     \
    \   if(month == 2 && day < 29){\n            return false;\n        }\n      \
    \  if(month == 2 && day > 28){\n            return false;\n        }\n       \
    \ if(month == 2 && day < 28){\n            return false;\n        }\n        if(month\
    \ == 2 && day > 27){\n            return false;\n        }\n        if(month ==\
    \ 2 && day < 27){\n            return false;\n        }\n        if(month == 2\
    \ && day > 26){\n            return false;\n        }\n        if(month == 2 &&\
    \ day < 26){\n            return false;\n        }\n        if(month == 2 && day\
    \ > 25){\n            return false;\n        }\n        if(month == 2 && day <\
    \ 25){\n            return false;\n        }\n        if(month == 2 && day > 24){\n\
    \            return false;\n        }\n        if(month == 2 && day < 24){\n \
    \           return false;\n        }\n        if(month == 2 && day > 23){\n  \
    \          return false;\n        }\n        if(month == 2 && day < 23){\n   \
    \         return false;\n        }\n        if(month == 2 && day > 22){\n    \
    \        return false;\n        }\n        if(month == 2 && day < 22){\n     \
    \       return false;\n        }\n        if(month == 2 && day > 21){\n      \
    \      return false;\n        }\n        if(month == 2 && day < 21){\n       \
    \     return false;\n        }\n        if(month == 2 && day > 20){\n        \
    \    return false;\n        }\n        if(month == 2 && day < 20){\n         \
    \   return false;\n        }\n        if(month == 2 && day > 19){\n          \
    \  return false;\n        }\n        if(month == 2 && day < 19){\n           \
    \ return false;\n        }\n        if(month == 2 && day > 18){\n            return\
    \ false;\n        }\n        if(month == 2 && day < 18){\n            return false;\n\
    \        }\n        if(month == 2 && day > 17){\n            return false;\n \
    \       }\n        if(month == 2 && day < 17){\n            return false;\n  \
    \      }\n        if(month == 2 && day > 16){\n            return false;\n   \
    \     }\n        if(month == 2 && day < 16){\n            return false;\n    \
    \    }\n        if(month == 2 && day > 15){\n            return false;\n     \
    \   }\n        if(month == 2 && day < 15){\n            return false;\n      \
    \  }\n        if(month == 2 && day > 14){\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0cky0z2b.java:133: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659800559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        boolean valid = true;\n        if (dateParts.length\
    \ != 3) {\n            valid = false;\n        } else {\n            int daysInMonth[]\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInMonth1\
    \ = daysInMonth[Integer.parseInt(dateParts[0])-1];\n            int daysInMonth2\
    \ = daysInMonth[Integer.parseInt(dateParts[1])-1];\n            int daysInMonth3\
    \ = daysInMonth[Integer.parseInt(dateParts[2])-1];\n            if (daysInMonth1\
    \ < 1 || daysInMonth1 > 31 || daysInMonth2 < 1 || daysInMonth2 > 30 || daysInMonth3\
    \ < 1 || daysInMonth3 > 29) {\n                valid = false;\n            } else\
    \ {\n                valid = true;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1999 out of bounds for length 12\n\tat Problem.validDate(tmpuzzdaynq.java:36)\n\
    \tat Problem.main(tmpuzzdaynq.java:46)\n"
  stdout: ''
  timestamp: 1659800560
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int month = 0;\n        int day = 0;\n\
    \        try {\n            month = Integer.parseInt(dateParts[0]);\n        \
    \    day = Integer.parseInt(dateParts[1]);\n        } catch (NumberFormatException\
    \ e) {\n            return false;\n        }\n        if (month < 1 || month >\
    \ 12) {\n            return false;\n        }\n        if (day < 1 || day > 31)\
    \ {\n            return false;\n        }\n        if (month == 2 && day > 30)\
    \ {\n            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuyo7lbhd.java:59)\n"
  stdout: ''
  timestamp: 1659800560
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        if\
    \ (dateParts.length != 3) {\n            valid = false;\n        } else {\n  \
    \          int month = Integer.parseInt(dateParts[0]);\n            int day =\
    \ Integer.parseInt(dateParts[1]);\n            int year = Integer.parseInt(dateParts[2]);\n\
    \            if (month < 1 || month > 12) {\n                valid = false;\n\
    \            } else if (day < 1 || day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 29) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 28) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv32p43po.java:104: error: ')' expected\n            } else if (month\
    \ == 2 && day > 31\n                                             ^\n/tmp/tmpv32p43po.java:105:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpv32p43po.java:106:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659800559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        boolean\
    \ valid = false;\n        try{\n            SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n            Date d = sdf.parse(date);\n            valid = true;\n\
    \        }catch(Exception e){\n            valid = false;\n        }\n       \
    \ return valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphj62wvum.java:30: error: cannot find symbol\n            SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmphj62wvum.java:30: error:\
    \ cannot find symbol\n            SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                       ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659800560
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                int month = Integer.parseInt(dateParts[0]);\n\
    \                int day = Integer.parseInt(dateParts[1]);\n                int\
    \ year = Integer.parseInt(dateParts[2]);\n                if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31 && year >= 1 && year <= 2040) {\n           \
    \         valid = true;\n                }\n            }\n        }\n       \
    \ return valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800560
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        if\
    \ (dateParts.length != 3) {\n            valid = false;\n        } else {\n  \
    \          int month = Integer.parseInt(dateParts[0]);\n            int day =\
    \ Integer.parseInt(dateParts[1]);\n            int year = Integer.parseInt(dateParts[2]);\n\
    \            if (month < 1 || month > 12) {\n                valid = false;\n\
    \            } else if (day < 1 || day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 29) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 28) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 2 && day > 31\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv32p43po.java:104: error: ')' expected\n            } else if (month\
    \ == 2 && day > 31\n                                             ^\n/tmp/tmpv32p43po.java:105:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpv32p43po.java:106:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659800559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9vyy9wa8.java:278: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659800560
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 29) {\n            return false;\n        }\n \
    \       if (month == 4 || month == 6 || month == 9 || month == 11 && day > 30)\
    \ {\n            return false;\n        }\n        if (month == 1 && day > 31)\
    \ {\n            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjx_b0y_5.java:56)\n"
  stdout: ''
  timestamp: 1659800556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        Date date1 = sdf.parse(date);\n\
    \        Calendar cal = Calendar.getInstance();\n        cal.setTime(date1);\n\
    \        int month = cal.get(Calendar.MONTH);\n        int day = cal.get(Calendar.DAY_OF_MONTH);\n\
    \        int year = cal.get(Calendar.YEAR);\n        int daysInMonth = cal.getActualMaximum(Calendar.DAY_OF_MONTH);\n\
    \        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > daysInMonth) return false;\n        if (year < 1000 || year > 3000) return\
    \ false;\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo_cj66ek.java:28: error: cannot find symbol\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpo_cj66ek.java:28: error: cannot find symbol\n\
    \        SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n      \
    \                             ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659800560
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            int daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31};\n            int month[] = {0, 4, 6, 9, 11};\n            int yearParts[]\
    \ = dateParts[2].split(\"-\");\n            int year = Integer.parseInt(yearParts[0]);\n\
    \            int month = Integer.parseInt(dateParts[0]);\n            int day\
    \ = Integer.parseInt(dateParts[1]);\n            int daysInMonth = daysInMonth[month\
    \ - 1];\n            if (day > daysInMonth) {\n                return false;\n\
    \            }\n            if (month > 12) {\n                return false;\n\
    \            }\n            if (month < 1 || month > 12) {\n                return\
    \ false;\n            }\n            if (day < 1 || day > daysInMonth) {\n   \
    \             return false;\n            }\n            valid = true;\n      \
    \  }\n        return valid;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4rm87nz0.java:32: error: incompatible types: String[] cannot be\
    \ converted to int[]\n            int yearParts[] = dateParts[2].split(\"-\");\n\
    \                                                ^\n/tmp/tmp4rm87nz0.java:33:\
    \ error: incompatible types: int cannot be converted to String\n            int\
    \ year = Integer.parseInt(yearParts[0]);\n                                   \
    \              ^\n/tmp/tmp4rm87nz0.java:34: error: variable month is already defined\
    \ in method validDate(String)\n            int month = Integer.parseInt(dateParts[0]);\n\
    \                ^\n/tmp/tmp4rm87nz0.java:36: error: variable daysInMonth is already\
    \ defined in method validDate(String)\n            int daysInMonth = daysInMonth[month\
    \ - 1];\n                ^\n/tmp/tmp4rm87nz0.java:36: error: array required, but\
    \ int found\n            int daysInMonth = daysInMonth[month - 1];\n         \
    \                                ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n5 errors\n"
  stdout: ''
  timestamp: 1659800560
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length != 3) {\n                return false;\n\
    \            }\n            int month = Integer.parseInt(dateParts[0]);\n    \
    \        int day = Integer.parseInt(dateParts[1]);\n            int year = Integer.parseInt(dateParts[2]);\n\
    \            if (month < 1 || month > 12) {\n                return false;\n \
    \           }\n            if (day < 1 || day > 31) {\n                return\
    \ false;\n            }\n            if (month == 2 && day > 29) {\n         \
    \       return false;\n            }\n            if (month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\
    \                if (day > 30) {\n                    return false;\n        \
    \        }\n            }\n            if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n                if (day > 30) {\n                    return\
    \ false;\n                }\n            }\n            valid = true;\n      \
    \  }\n        return valid;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800560
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31\n                            && year >= 1 &&\
    \ year <= Integer.MAX_VALUE) {\n                        if (month == 3 || month\
    \ == 5 || month == 7 || month == 8\n                                || month ==\
    \ 10 || month == 12) {\n                            if (day >= 1 && day <= 30)\
    \ {\n                                valid = true;\n                         \
    \   }\n                        } else if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n                            if (day >= 1 && day <= 29)\
    \ {\n                                valid = true;\n                         \
    \   }\n                        }\n                    }\n                } catch\
    \ (NumberFormatException e) {\n                    valid = false;\n          \
    \      }\n            }\n        }\n        return valid;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdr4hg18y.java:60)\n"
  stdout: ''
  timestamp: 1659800561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if(dateParts.length != 3){\n       \
    \     return false;\n        }\n        for(int i = 1; i < dateParts.length; i++){\n\
    \            int day = Integer.parseInt(dateParts[i]);\n            if(day < 1\
    \ || day > 31){\n                return false;\n            }\n        }\n   \
    \     for(int i = 1; i < dateParts.length; i++){\n            int month = Integer.parseInt(dateParts[i]);\n\
    \            if(month < 1 || month > 12){\n                return false;\n   \
    \         }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpidxcta8x.java:47)\n"
  stdout: ''
  timestamp: 1659800561
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31 && year >= 1 && year <= 2020) {\n           \
    \             valid = true;\n                    }\n                    else if\
    \ (month >= 4 && month <= 12 && day >= 1 && day <= 30 && (year % 4 == 0 && year\
    \ % 100 != 0 || year % 400 == 0)) {\n                        valid = true;\n \
    \                   }\n                    else if (month == 2 && day >= 1 &&\
    \ day <= 29) {\n                        valid = true;\n                    }\n\
    \                    else {\n                        valid = false;\n        \
    \            }\n                }\n                catch (NumberFormatException\
    \ nfe) {\n                    valid = false;\n                }\n            }\n\
    \            else {\n                valid = false;\n            }\n        }\n\
    \        return valid;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if(dateParts.length != 3){\n       \
    \     return false;\n        }\n        LocalDate date = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n        LocalDate\
    \ today = LocalDate.now();\n        LocalDate maxDay = today.plusMonths(12);\n\
    \        LocalDate minDay = today.minusMonths(1);\n        LocalDate maxMonth\
    \ = today.plusMonths(12);\n        LocalDate minMonth = today.minusMonths(1);\n\
    \        LocalDate maxYear = today.plusYears(1);\n        LocalDate minYear =\
    \ today.minusYears(1);\n        if(date.isEmpty()){\n            return false;\n\
    \        }\n        if(date.getDayOfMonth() < 1 || date.getDayOfMonth() > 31){\n\
    \            return false;\n        }\n        if(date.getMonth() < 1 || date.getMonth()\
    \ > 12){\n            return false;\n        }\n        if(date.getYear() < minYear.getYear()\
    \ || date.getYear() > maxYear.getYear()){\n            return false;\n       \
    \ }\n        if(date.getMonth() < minMonth.getMonth() || date.getMonth() > maxMonth.getMonth()){\n\
    \            return false;\n        }\n        if(date.getDayOfMonth() < minDay.getDayOfMonth()\
    \ || date.getDayOfMonth() > maxDay.getDayOfMonth()){\n            return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3jlffura.java:32: error: cannot find symbol\n        LocalDate\
    \ date = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n        ^\n  symbol:   class LocalDate\n \
    \ location: class Problem\n/tmp/tmp3jlffura.java:32: error: variable date is already\
    \ defined in method validDate(String)\n        LocalDate date = LocalDate.of(Integer.parseInt(dateParts[0]),\
    \ Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[2]));\n         \
    \         ^\n/tmp/tmp3jlffura.java:32: error: cannot find symbol\n        LocalDate\
    \ date = LocalDate.of(Integer.parseInt(dateParts[0]), Integer.parseInt(dateParts[1]),\
    \ Integer.parseInt(dateParts[2]));\n                         ^\n  symbol:   variable\
    \ LocalDate\n  location: class Problem\n/tmp/tmp3jlffura.java:33: error: cannot\
    \ find symbol\n        LocalDate today = LocalDate.now();\n        ^\n  symbol:\
    \   class LocalDate\n  location: class Problem\n/tmp/tmp3jlffura.java:33: error:\
    \ cannot find symbol\n        LocalDate today = LocalDate.now();\n           \
    \               ^\n  symbol:   variable LocalDate\n  location: class Problem\n\
    /tmp/tmp3jlffura.java:34: error: cannot find symbol\n        LocalDate maxDay\
    \ = today.plusMonths(12);\n        ^\n  symbol:   class LocalDate\n  location:\
    \ class Problem\n/tmp/tmp3jlffura.java:35: error: cannot find symbol\n       \
    \ LocalDate minDay = today.minusMonths(1);\n        ^\n  symbol:   class LocalDate\n\
    \  location: class Problem\n/tmp/tmp3jlffura.java:36: error: cannot find symbol\n\
    \        LocalDate maxMonth = today.plusMonths(12);\n        ^\n  symbol:   class\
    \ LocalDate\n  location: class Problem\n/tmp/tmp3jlffura.java:37: error: cannot\
    \ find symbol\n        LocalDate minMonth = today.minusMonths(1);\n        ^\n\
    \  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmp3jlffura.java:38:\
    \ error: cannot find symbol\n        LocalDate maxYear = today.plusYears(1);\n\
    \        ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmp3jlffura.java:39:\
    \ error: cannot find symbol\n        LocalDate minYear = today.minusYears(1);\n\
    \        ^"
  stdout: ''
  timestamp: 1659800561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        if\
    \ (dateParts.length != 3) {\n            return false;\n        }\n        String[]\
    \ months = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n       \
    \ String[] days = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"\
    15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"01\",\
    \ \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n        String[] years = {\"\
    2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\",\
    \ \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\"\
    , \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\"\
    , \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"\
    , \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\"\
    , \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\", \"2046\", \"2047\"\
    , \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\", \"2054\", \"2055\"\
    , \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\", \"2062\", \"2063\"\
    , \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\", \"2070\", \"2071\"\
    , \"2072\", \"2073\", \"2074\", \"2075\", \"2076\", \"2077\", \"2078\", \"2079\"\
    , \"2080\", \"2081\", \"2082\", \"2083\", \"2084\", \"2085\", \"2086\", \"2087\"\
    , \"2088\", \"2089\", \"2090\", \"2091\", \"2092\", \"2093\", \"2094\", \"2095\"\
    , \"2096\", \"2097\", \"2098\", \"2099\", \"2100\", \"2101\", \"2102\", \"2103\"\
    , \"2104\", \"2105\", \"2106\", \"2107\", \"2108\", \"2109\", \"2110\", \"2111\"\
    , \"2112\", \"2113\", \"2114\", \"2115\", \"2116\", \"2117\", \"2118\", \"2119\"\
    , \"2120\", \"2121\", \"2122\", \"2123\", \"2124\", \"2125\", \"2126\", \"2127\"\
    , \"2128\", \"2129\", \"2130\", \"2131\", \"2132\", \"2133\", \"2134\", \"2135\"\
    , \"2136\", \"2137\", \"2138\", \"2139\", \"2140\", \"2141\", \"2142\", \"2143\"\
    , \"2144\", \"2145\", \"2146\", \"2147\", \"2148\", \"2149\", \"2150\", \"2151\"\
    , \"\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvsik2imn.java:35: error: unclosed string literal\n        String[]\
    \ years = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\"\
    , \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\"\
    , \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\"\
    , \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\"\
    , \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\"\
    , \"2039\", \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\", \"2046\"\
    , \"2047\", \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\", \"2054\"\
    , \"2055\", \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\", \"2062\"\
    , \"2063\", \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\", \"2070\"\
    , \"2071\", \"2072\", \"2073\", \"2074\", \"2075\", \"2076\", \"2077\", \"2078\"\
    , \"2079\", \"2080\", \"2081\", \"2082\", \"2083\", \"2084\", \"2085\", \"2086\"\
    , \"2087\", \"2088\", \"2089\", \"2090\", \"2091\", \"2092\", \"2093\", \"2094\"\
    , \"2095\", \"2096\", \"2097\", \"2098\", \"2099\", \"2100\", \"2101\", \"2102\"\
    , \"2103\", \"2104\", \"2105\", \"2106\", \"2107\", \"2108\", \"2109\", \"2110\"\
    , \"2111\", \"2112\", \"2113\", \"2114\", \"2115\", \"2116\", \"2117\", \"2118\"\
    , \"2119\", \"2120\", \"2121\", \"2122\", \"2123\", \"2124\", \"2125\", \"2126\"\
    , \"2127\", \"2128\", \"2129\", \"2130\", \"2131\", \"2132\", \"2133\", \"2134\"\
    , \"2135\", \"2136\", \"2137\", \"2138\", \"2139\", \"2140\", \"2141\", \"2142\"\
    , \"2143\", \"2144\", \"2145\", \"2146\", \"2147\", \"2148\", \"2149\", \"2150\"\
    , \"2151\", \"\n                                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \  "
  stdout: ''
  timestamp: 1659800560
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        boolean\
    \ valid = false;\n        String[] dateArray = date.split(\"-\");\n        if(dateArray.length\
    \ != 3){\n            return false;\n        }\n        for(int i = 0; i < dateArray.length;\
    \ i++){\n            try{\n                Integer.parseInt(dateArray[i]);\n \
    \           }catch(NumberFormatException e){\n                return false;\n\
    \            }\n        }\n        for(int i = 0; i < dateArray.length; i++){\n\
    \            try{\n                Integer.parseInt(dateArray[i]);\n         \
    \   }catch(NumberFormatException e){\n                return false;\n        \
    \    }\n        }\n        for(int i = 0; i < dateArray.length; i++){\n      \
    \      try{\n                Integer.parseInt(dateArray[i]);\n            }catch(NumberFormatException\
    \ e){\n                return false;\n            }\n        }\n        for(int\
    \ i = 0; i < dateArray.length; i++){\n            try{\n                Integer.parseInt(dateArray[i]);\n\
    \            }catch(NumberFormatException e){\n                return false;\n\
    \            }\n        }\n        for(int i = 0; i < dateArray.length; i++){\n\
    \            try{\n                Integer.parseInt(dateArray[i]);\n         \
    \   }catch(NumberFormatException e){\n                return false;\n        \
    \    }\n        }\n        for(int i = 0; i < dateArray.length; i++){\n      \
    \      try{\n                Integer.parseInt(dateArray[i]);\n            }catch(NumberFormatException\
    \ e){\n                return false;\n            }\n        }\n        for(int\
    \ i = 0; i < dateArray.length; i++){\n            try{\n                Integer.parseInt(dateArray[i]);\n\
    \            }catch(NumberFormatException e){\n                return false;\n\
    \            }\n        }\n        for(int i = 0; i < dateArray.length; i++){\n\
    \            try{\n                Integer.parseInt(dateArray[i]);\n         \
    \   }catch(NumberFormatException e){\n                return false;\n        \
    \    }\n        }\n        for(int i = 0; i < dateArray.length; i++){\n      \
    \      try{\n                Integer.parseInt(dateArray[i]);\n            }catch(NumberFormatException\
    \ e){\n                return false;\n            }\n        }\n        for(int\
    \ i = 0; i < dateArray.length; i++){\n            try{\n                Integer.parseInt(dateArray[i]);\n\
    \            }catch(NumberFormatException e){\n                return false;\n\
    \            }\n        }\n        for(int i = 0; i < dateArray.length; i++){\n\
    \            try{\n                Integer.parseInt(dateArray[i]);\n         \
    \   }catch(NumberFormatException e){\n                return false;\n        \
    \    }\n        }\n        for(int i = 0; i < dateArray.length; i++){\n      \
    \      try{\n                Integer.parseInt(dateArray[i]);\n            }catch(NumberFormatException\
    \ e){\n                return false;\n            }\n        }\n        for(int\
    \ i = 0; i < dateArray.length; i++){\n            try{\n                Integer.parseInt(dateArray[i]);\n\
    \            }catch(NumberFormatException e){\n                return false;\n\
    \            }\n        }\n        for(int i = 0; i < dateArray.length; i++){\n\
    \            try{\n                Integer.parseInt(dateArray[i]);\n         \
    \   }catch(NumberFormat\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6vsj3kzw.java:127: error: <identifier> expected\n            }catch(NumberFormat\n\
    \                               ^\n/tmp/tmp6vsj3kzw.java:129: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800560
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        if\
    \ (dateParts.length != 3) {\n            return false;\n        }\n        int\
    \ month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 29) {\n            return false;\n        }\n        if (month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n            if (day > 31) {\n                return false;\n     \
    \       }\n        }\n        if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n            if (day > 30) {\n                return false;\n     \
    \       }\n        }\n        if (month == 2) {\n            if (day > 29) {\n\
    \                return false;\n            }\n        }\n        valid = true;\n\
    \        return valid;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        LocalDate date = LocalDate.parse(date);\n        LocalDate today\
    \ = LocalDate.now();\n        int month1 = date.getMonthValue();\n        int\
    \ day1 = date.getDayOfMonth();\n        int year1 = date.getYear();\n        int\
    \ month2 = today.getMonthValue();\n        int day2 = today.getDayOfMonth();\n\
    \        int year2 = today.getYear();\n        if (month1 < 1 || month1 > 12)\
    \ {\n            return false;\n        }\n        if (month2 < 1 || month2 >\
    \ 12) {\n            return false;\n        }\n        if (day1 < 1 || day1 >\
    \ 31) {\n            return false;\n        }\n        if (day2 < 1 || day2 >\
    \ 30) {\n            return false;\n        }\n        if (year1 < 1 || year1\
    \ > year2) {\n            return false;\n        }\n        return true;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo2e2zu9c.java:34: error: cannot find symbol\n        LocalDate\
    \ date = LocalDate.parse(date);\n        ^\n  symbol:   class LocalDate\n  location:\
    \ class Problem\n/tmp/tmpo2e2zu9c.java:34: error: variable date is already defined\
    \ in method validDate(String)\n        LocalDate date = LocalDate.parse(date);\n\
    \                  ^\n/tmp/tmpo2e2zu9c.java:34: error: cannot find symbol\n  \
    \      LocalDate date = LocalDate.parse(date);\n                         ^\n \
    \ symbol:   variable LocalDate\n  location: class Problem\n/tmp/tmpo2e2zu9c.java:35:\
    \ error: cannot find symbol\n        LocalDate today = LocalDate.now();\n    \
    \    ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmpo2e2zu9c.java:35:\
    \ error: cannot find symbol\n        LocalDate today = LocalDate.now();\n    \
    \                      ^\n  symbol:   variable LocalDate\n  location: class Problem\n\
    5 errors\n"
  stdout: ''
  timestamp: 1659800561
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        int month = Integer.parseInt(dateParts[0]);\n        int day =\
    \ Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31 || (month == 2 && day > 30)) {\n            return\
    \ false;\n        }\n        if (month == 2 && day > 29) {\n            return\
    \ false;\n        }\n        if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12) {\n            if (day > 31)\
    \ {\n                return false;\n            }\n        }\n        if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30)\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if(dateParts.length != 3){\n       \
    \     return false;\n        }\n        try{\n            int month = Integer.parseInt(dateParts[0]);\n\
    \            int day = Integer.parseInt(dateParts[1]);\n            int year =\
    \ Integer.parseInt(dateParts[2]);\n            int months[] = {0,1,2,3,4,5,6,7,8,9,10,11,12};\n\
    \            int days[] = {0,31,28,31,30,31,30,31,30,31,30,31};\n            int\
    \ years[] = {2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n\
    \            if(month < 1 || month > 12){\n                return false;\n   \
    \         }\n            if(day < 1 || day > days[month]){\n                return\
    \ false;\n            }\n            if(month < 4 || month > 2){\n           \
    \     return false;\n            }\n            if(year < years[month] || year\
    \ > years[month + 1]){\n                return false;\n            }\n       \
    \     return true;\n        }catch(NumberFormatException e){\n            return\
    \ false;\n        }\n    }\n    public static void main(String[] args) {\n   \
    \ assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwkot9hjk.java:57)\n"
  stdout: ''
  timestamp: 1659800561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsehr0h5l.java:28: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659800553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ valid = false;\n        try{\n            SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n            Date d = sdf.parse(date);\n            valid = true;\n\
    \        }catch(Exception e){\n            valid = false;\n        }\n       \
    \ return valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu5kwm664.java:30: error: cannot find symbol\n            SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpu5kwm664.java:30: error:\
    \ cannot find symbol\n            SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                       ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659800561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        if\
    \ (dateParts.length != 3) {\n            return false;\n        }\n        int\
    \ month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 30) {\n            return false;\n        }\n        if (month == 2 &&\
    \ day > 29) {\n            return false;\n        }\n        if (month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n            if (day < 1 || day > 31) {\n                return false;\n\
    \            }\n        }\n        if (month == 4 || month == 6 || month == 9\
    \ || month == 11) {\n            if (day < 1 || day > 30) {\n                return\
    \ false;\n            }\n        }\n        if (month == 2) {\n            if\
    \ (day < 1 || day > 29) {\n                return false;\n            }\n    \
    \    }\n        valid = true;\n        return valid;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800562
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31\n                            && year >= 1 &&\
    \ year <= Integer.MAX_VALUE) {\n                        if (month == 2) {\n  \
    \                          if (day >= 1 && day <= 29) {\n                    \
    \            valid = true;\n                            }\n                  \
    \      } else {\n                            if (day >= 1 && day <= 30) {\n  \
    \                              valid = true;\n                            }\n\
    \                        }\n                    }\n                } catch (NumberFormatException\
    \ nfe) {\n                    valid = false;\n                }\n            }\n\
    \        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int month = 0;\n        int day = 0;\n\
    \        try {\n            month = Integer.parseInt(dateParts[0]);\n        \
    \    day = Integer.parseInt(dateParts[1]);\n        } catch (NumberFormatException\
    \ e) {\n            return false;\n        }\n        if (month < 1 || month >\
    \ 12) {\n            return false;\n        }\n        if (day < 1 || day > 31)\
    \ {\n            return false;\n        }\n        if (month == 2 && day > 30)\
    \ {\n            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpke7941_8.java:59)\n"
  stdout: ''
  timestamp: 1659800562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            int daysInMonth[] = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInYear[] = {365,\
    \ 366, 365, 366};\n            int daysInMonth[] = {0, 31, 59, 90, 120, 151, 181,\
    \ 212, 243, 273, 304, 334};\n            int months[] = { 0, 2, 4, 6, 8, 10, 12};\n\
    \            int year = Integer.parseInt(date.substring(0, 4));\n            int\
    \ month = Integer.parseInt(date.substring(5, 7));\n            int day = Integer.parseInt(date.substring(8,\
    \ 10));\n            int dayInYear = daysInYear[year];\n            int dayInMonth\
    \ = daysInMonth[month];\n            int dayInMonth2 = daysInMonth[month];\n \
    \           int dayInMonth3 = daysInMonth[month];\n            int dayInMonth4\
    \ = daysInMonth[month];\n            int dayInMonth5 = daysInMonth[month];\n \
    \           int dayInMonth6 = daysInMonth[month];\n            int dayInMonth7\
    \ = daysInMonth[month];\n            int dayInMonth8 = daysInMonth[month];\n \
    \           int dayInMonth9 = daysInMonth[month];\n            int dayInMonth10\
    \ = daysInMonth[month];\n            int dayInMonth11 = daysInMonth[month];\n\
    \            int dayInMonth12 = daysInMonth[month];\n            int dayInMonth13\
    \ = daysInMonth[month];\n            int dayInMonth14 = daysInMonth[month];\n\
    \            int dayInMonth15 = daysInMonth[month];\n            int dayInMonth16\
    \ = daysInMonth[month];\n            int dayInMonth17 = daysInMonth[month];\n\
    \            int dayInMonth18 = daysInMonth[month];\n            int dayInMonth19\
    \ = daysInMonth[month];\n            int dayInMonth20 = daysInMonth[month];\n\
    \            int dayInMonth21 = daysInMonth[month];\n            int dayInMonth22\
    \ = daysInMonth[month];\n            int dayInMonth23 = daysInMonth[month];\n\
    \            int dayInMonth24 = daysInMonth[month];\n            int dayInMonth25\
    \ = daysInMonth[month];\n            int dayInMonth26 = daysInMonth[month];\n\
    \            int dayInMonth27 = daysInMonth[month];\n            int dayInMonth28\
    \ = daysInMonth[month\n    }\n    public static void main(String[] args) {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7mw8xx0w.java:64: error: ']' expected\n            int dayInMonth28\
    \ = daysInMonth[month\n                                                ^\n/tmp/tmp7mw8xx0w.java:66:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length == 3) {\n                try {\n     \
    \               int month = Integer.parseInt(dateParts[0]);\n                \
    \    int day = Integer.parseInt(dateParts[1]);\n                    int year =\
    \ Integer.parseInt(dateParts[2]);\n                    if (month >= 1 && month\
    \ <= 12 && day >= 1 && day <= 31\n                            && day <= 30) {\n\
    \                        if (month == 2 && day <= 29) {\n                    \
    \        valid = true;\n                        }\n                        else\
    \ {\n                            valid = false;\n                        }\n \
    \                   }\n                    else {\n                        valid\
    \ = false;\n                    }\n                }\n                catch (NumberFormatException\
    \ nfe) {\n                    valid = false;\n                }\n            }\n\
    \            else {\n                valid = false;\n            }\n        }\n\
    \        return valid;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprbwrcf5u.java:59)\n"
  stdout: ''
  timestamp: 1659800562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return false;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 29) {\n            return false;\n        }\n \
    \       if (month == 4 || month == 6 || month == 9 || month == 11 && day > 30)\
    \ {\n            return false;\n        }\n        if (month == 1 && day > 31)\
    \ {\n            return false;\n        }\n        if (month == 3 && day > 31)\
    \ {\n            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1x0qck85.java:59)\n"
  stdout: ''
  timestamp: 1659800562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateParts = date.split(\"-\");\n        \n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        \n        boolean valid = false;\n        \n        if(date.length()>0){\n\
    \            valid = true;\n        }\n        \n        if(month<1 || month>12){\n\
    \            valid = false;\n        }\n        \n        if(day<1 || day>31){\n\
    \            valid = false;\n        }\n        \n        if(month<4 || month>12){\n\
    \            valid = false;\n        }\n        \n        if(day<1 || day>30){\n\
    \            valid = false;\n        }\n        \n        if(month<2 || month>12){\n\
    \            valid = false;\n        }\n        \n        if(!valid){\n      \
    \      valid = false;\n        }\n        \n        return valid;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkbnbsobr.java:67)\n"
  stdout: ''
  timestamp: 1659800562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = true;\n        if\
    \ (date == null || date.isEmpty()) {\n            valid = false;\n        }\n\
    \        if (date.contains(\"-\") && date.contains(\"-\") && date.contains(\"\
    -\")) {\n            String[] dateParts = date.split(\"-\");\n            if (dateParts.length\
    \ != 3) {\n                valid = false;\n            }\n            try {\n\
    \                int month = Integer.parseInt(dateParts[0]);\n               \
    \ int day = Integer.parseInt(dateParts[1]);\n                int year = Integer.parseInt(dateParts[2]);\n\
    \                if (month < 1 || month > 12 || day < 1 || day > 31 || (month\
    \ == 2 && day > 30) || (month == 4 && day > 29)) {\n                    valid\
    \ = false;\n                }\n                if (month == 2 && day > 29) {\n\
    \                    valid = false;\n                }\n                if (month\
    \ == 4 && day > 30) {\n                    valid = false;\n                }\n\
    \                if (month == 6 && day > 31) {\n                    valid = false;\n\
    \                }\n                if (month == 8 && day > 31) {\n          \
    \          valid = false;\n                }\n                if (month == 10\
    \ && day > 31) {\n                    valid = false;\n                }\n    \
    \            if (month == 12 && day > 31) {\n                    valid = false;\n\
    \                }\n                if (month == 1 && day > 31) {\n          \
    \          valid = false;\n                }\n                if (month == 3 &&\
    \ day > 31) {\n                    valid = false;\n                }\n       \
    \         if (month == 5 && day > 31) {\n                    valid = false;\n\
    \                }\n                if (month == 7 && day > 31) {\n          \
    \          valid = false;\n                }\n                if (month == 9 &&\
    \ day > 31) {\n                    valid = false;\n                }\n       \
    \         if (month == 11 && day > 31) {\n                    valid = false;\n\
    \                }\n                if (month == 1 && day > 31) {\n          \
    \          valid = false;\n                }\n                if (month == 3 &&\
    \ day > 31) {\n                    valid = false;\n                }\n       \
    \         if (month == 5 && day > 31) {\n                    valid = false;\n\
    \                }\n                if (month == 7 && day > 31) {\n          \
    \          valid = false;\n                }\n                if (month == 9 &&\
    \ day > 31) {\n                    valid = false;\n                }\n       \
    \         if (month == 11 && day > 31) {\n                    valid = false;\n\
    \                }\n                if (month == 1 && day > 31) {\n          \
    \          valid = false;\n                }\n                if (month == 3 &&\
    \ day > 31) {\n                    valid = false;\n                }\n       \
    \         if (month == 5 && day > 31) {\n                    valid = false;\n\
    \                }\n                if (month == 7 && day > 31) {\n          \
    \          valid = false;\n                }\n                if (month == 9 &&\
    \ day > 31) {\n                    valid = false;\n                }\n       \
    \         if (month == 11 && day > 31) {\n                    valid = false;\n\
    \                }\n                if (month == 1 && day > 31) {\n          \
    \          valid = false;\n                }\n                if (month == 3 &&\
    \ day > 31) {\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4pbs1imy.java:120: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp4pbs1imy.java:36: error: 'try'\
    \ without 'catch', 'finally' or resource declarations\n            try {\n   \
    \         ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800561
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return valid;\n        }\n        int month = Integer.parseInt(dateParts[0]);\n\
    \        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return valid;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return valid;\n        }\n  \
    \      if (month == 2 && day > 29) {\n            return valid;\n        }\n \
    \       if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8\
    \ || month == 10 || month == 12) {\n            if (day > 31) {\n            \
    \    return valid;\n            }\n        }\n        if (month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n        \
    \        return valid;\n            }\n        }\n        valid = true;\n    \
    \    return valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        String[]\
    \ dateParts = date.split(\"-\");\n        boolean valid = true;\n        if (dateParts.length\
    \ != 3) {\n            valid = false;\n        } else {\n            int month\
    \ = Integer.parseInt(dateParts[0]);\n            int day = Integer.parseInt(dateParts[1]);\n\
    \            int year = Integer.parseInt(dateParts[2]);\n            if (month\
    \ < 1 || month > 12) {\n                valid = false;\n            } else if\
    \ (day < 1 || day > 31) {\n                valid = false;\n            } else\
    \ if (month == 2 && day > 30) {\n                valid = false;\n            }\
    \ else if (month == 2 && day > 29) {\n                valid = false;\n       \
    \     }\n        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9dg8paqm.java:56)\n"
  stdout: ''
  timestamp: 1659800562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        String[]\
    \ months = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n       \
    \ String[] days = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n\
    \        String[] years = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"\
    2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\",\
    \ \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\"\
    , \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\"\
    , \"2037\", \"2038\", \"2039\", \"2040\", \"2041\", \"2042\", \"2043\", \"2044\"\
    , \"2045\", \"2046\", \"2047\", \"2048\", \"2049\", \"2050\", \"2051\", \"2052\"\
    , \"2053\", \"2054\", \"2055\", \"2056\", \"2057\", \"2058\", \"2059\", \"2060\"\
    , \"2061\", \"2062\", \"2063\", \"2064\", \"2065\", \"2066\", \"2067\", \"2068\"\
    , \"2069\", \"2070\", \"2071\", \"2072\", \"2073\", \"2074\", \"2075\", \"2076\"\
    , \"2077\", \"2078\", \"2079\", \"2080\", \"2081\", \"2082\", \"2083\", \"2084\"\
    , \"2085\", \"2086\", \"2087\", \"2088\", \"2089\", \"2090\", \"2091\", \"2092\"\
    , \"2093\", \"2094\", \"2095\", \"2096\", \"2097\", \"2098\", \"2099\", \"2100\"\
    , \"2101\", \"2102\", \"2103\", \"2104\", \"2105\", \"2106\", \"2107\", \"2108\"\
    , \"2109\", \"2110\", \"2111\", \"2112\", \"2113\", \"2114\", \"2115\", \"2116\"\
    , \"2117\", \"2118\", \"2119\", \"2120\", \"2121\", \"2122\", \"2123\", \"2124\"\
    , \"2125\", \"2126\", \"2127\", \"2128\", \"2129\", \"2130\", \"2131\", \"2132\"\
    , \"2133\", \"2134\", \"2135\", \"2136\", \"2137\", \"2138\", \"2139\", \"2140\"\
    , \"2141\", \"2142\", \"2143\", \"2144\", \"2145\", \"2146\", \"2147\", \"2148\"\
    , \"2149\", \"2150\", \"2151\", \"2152\", \"2153\", \"2154\", \"2155\", \"2156\"\
    , \"2157\", \"2158\", \"2159\", \"2160\", \"2161\", \"2162\", \"2163\", \"2164\"\
    , \"2165\", \"2166\", \"2167\", \"216\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo88_iz7r.java:32: error: unclosed string literal\n        String[]\
    \ years = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\"\
    , \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\"\
    , \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\"\
    , \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\"\
    , \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\"\
    , \"2039\", \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\", \"2046\"\
    , \"2047\", \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\", \"2054\"\
    , \"2055\", \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\", \"2062\"\
    , \"2063\", \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\", \"2070\"\
    , \"2071\", \"2072\", \"2073\", \"2074\", \"2075\", \"2076\", \"2077\", \"2078\"\
    , \"2079\", \"2080\", \"2081\", \"2082\", \"2083\", \"2084\", \"2085\", \"2086\"\
    , \"2087\", \"2088\", \"2089\", \"2090\", \"2091\", \"2092\", \"2093\", \"2094\"\
    , \"2095\", \"2096\", \"2097\", \"2098\", \"2099\", \"2100\", \"2101\", \"2102\"\
    , \"2103\", \"2104\", \"2105\", \"2106\", \"2107\", \"2108\", \"2109\", \"2110\"\
    , \"2111\", \"2112\", \"2113\", \"2114\", \"2115\", \"2116\", \"2117\", \"2118\"\
    , \"2119\", \"2120\", \"2121\", \"2122\", \"2123\", \"2124\", \"2125\", \"2126\"\
    , \"2127\", \"2128\", \"2129\", \"2130\", \"2131\", \"2132\", \"2133\", \"2134\"\
    , \"2135\", \"2136\", \"2137\", \"2138\", \"2139\", \"2140\", \"2141\", \"2142\"\
    , \"2143\", \"2144\", \"2145\", \"2146\", \"2147\", \"2148\", \"2149\", \"2150\"\
    , \"2151\", \"2152\", \"2153\", \"2154\", \"2155\", \"2156\", \"2157\", \"2158\"\
    , \"2159\", \"2160\", \"2161\", \"2162\", \"2163\", \"2164\", \"2165\", \"2166\"\
    , \"2167\", \"216\n                                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          "
  stdout: ''
  timestamp: 1659800561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date.isEmpty()) {\n            System.out.println(\"Date is empty\");\n   \
    \         valid = false;\n        }\n        if (date.matches(\"^(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\\d\\\\d$\")) {\n            System.out.println(\"\
    Date is valid\");\n            valid = true;\n        }\n        if (date.matches(\"\
    ^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\\d\\\\d$\")) {\n\
    \            System.out.println(\"Date is valid\");\n            valid = true;\n\
    \        }\n        if (date.matches(\"^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[-\
    \ /.](19|20)\\\\d\\\\d$\")) {\n            System.out.println(\"Date is valid\"\
    );\n            valid = true;\n        }\n        if (date.matches(\"^(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\\d\\\\d$\")) {\n            System.out.println(\"\
    Date is valid\");\n            valid = true;\n        }\n        if (date.matches(\"\
    ^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\\d\\\\d$\")) {\n\
    \            System.out.println(\"Date is valid\");\n            valid = true;\n\
    \        }\n        if (date.matches(\"^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[-\
    \ /.](19|20)\\\\d\\\\d$\")) {\n            System.out.println(\"Date is valid\"\
    );\n            valid = true;\n        }\n        if (date.matches(\"^(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\\d\\\\d$\")) {\n            System.out.println(\"\
    Date is valid\");\n            valid = true;\n        }\n        if (date.matches(\"\
    ^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\\d\\\\d$\")) {\n\
    \            System.out.println(\"Date is valid\");\n            valid = true;\n\
    \        }\n        if (date.matches(\"^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[-\
    \ /.](19|20)\\\\d\\\\d$\")) {\n            System.out.println(\"Date is valid\"\
    );\n            valid = true;\n        }\n        if (date.matches(\"^(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\\d\\\\d$\")) {\n            System.out.println(\"\
    Date is valid\");\n            valid = true;\n        }\n        if (date.matches(\"\
    ^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7z72gjre.java:72: error: unclosed string literal\n        if (date.matches(\"\
    ^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|\n                   \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659800561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ valid = false;\n        String[] dateParts = date.split(\"-\");\n        if\
    \ (dateParts.length != 3) {\n            return valid;\n        }\n        int\
    \ day = Integer.parseInt(dateParts[0]);\n        int month = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        if (day < 1 || day\
    \ > 31 || month < 1 || month > 12) {\n            return valid;\n        }\n \
    \       if (month == 2) {\n            if (day < 1 || day > 29) {\n          \
    \      return valid;\n            }\n        }\n        if (month == 1) {\n  \
    \          if (day < 1 || day > 31) {\n                return valid;\n       \
    \     }\n        }\n        if (month == 3) {\n            if (day < 1 || day\
    \ > 30) {\n                return valid;\n            }\n        }\n        if\
    \ (month == 5) {\n            if (day < 1 || day > 31) {\n                return\
    \ valid;\n            }\n        }\n        if (month == 7) {\n            if\
    \ (day < 1 || day > 31) {\n                return valid;\n            }\n    \
    \    }\n        if (month == 8) {\n            if (day < 1 || day > 31) {\n  \
    \              return valid;\n            }\n        }\n        if (month == 10)\
    \ {\n            if (day < 1 || day > 31) {\n                return valid;\n \
    \           }\n        }\n        if (month == 12) {\n            if (day < 1\
    \ || day > 31) {\n                return valid;\n            }\n        }\n  \
    \      valid = true;\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpidagvja_.java:84)\n"
  stdout: ''
  timestamp: 1659800562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            int daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31};\n            int daysInYear[] = {365, 366, 365, 366};\n           \
    \ int months[] = {0, 2, 4, 6, 9, 11};\n            int years[] = {2000, 2001,\
    \ 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,\
    \ 2015, 2016, 2017, 2018, 2019, 2020, 2021};\n            int monthIndex = Integer.parseInt(dateParts[0]);\n\
    \            int dayIndex = Integer.parseInt(dateParts[1]);\n            int yearIndex\
    \ = Integer.parseInt(dateParts[2]);\n            if (monthIndex < 1 || monthIndex\
    \ > 12) {\n                valid = false;\n            }\n            if (dayIndex\
    \ < 1 || dayIndex > daysInMonth[monthIndex]) {\n                valid = false;\n\
    \            }\n            if (yearIndex < 1 || yearIndex > years[monthIndex])\
    \ {\n                valid = false;\n            }\n            valid = true;\n\
    \        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 15 out of bounds for length 12\n\tat Problem.validDate(tmpn978yna_.java:40)\n\
    \tat Problem.main(tmpn978yna_.java:52)\n"
  stdout: ''
  timestamp: 1659800562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = true;\n        if\
    \ (date == null || date.isEmpty()) {\n            valid = false;\n        }\n\
    \        if (date.contains(\"-\") && date.contains(\"-\")) {\n            String[]\
    \ dateArray = date.split(\"-\");\n            int month1 = Integer.parseInt(dateArray[0]);\n\
    \            int day1 = Integer.parseInt(dateArray[1]);\n            int year1\
    \ = Integer.parseInt(dateArray[2]);\n            int month2 = Integer.parseInt(dateArray[3]);\n\
    \            int day2 = Integer.parseInt(dateArray[4]);\n            int year2\
    \ = Integer.parseInt(dateArray[5]);\n            if (month1 < 1 || month1 > 12\
    \ || month2 < 1 || month2 > 12) {\n                valid = false;\n          \
    \  }\n            if (day1 < 1 || day1 > 31 || (month1 == 2 && day1 < 1) || (month1\
    \ == 2 && day1 > 30) || (month1 == 3 && day1 < 1) || (month1 == 3 && day1 > 29)\
    \ || (month1 == 4 && day1 < 1) || (month1 == 4 && day1 > 30) || (month1 == 6 &&\
    \ day1 < 1) || (month1 == 6 && day1 > 30) || (month1 == 9 && day1 < 1) || (month1\
    \ == 9 && day1 > 30) || (month1 == 11 && day1 < 1) || (month1 == 11 && day1 >\
    \ 30)) {\n                valid = false;\n            }\n            if (day2\
    \ < 1 || day2 > 31 || (month2 == 2 && day2 < 1) || (month2 == 2 && day2 > 30)\
    \ || (month2 == 3 && day2 < 1) || (month2 == 3 && day2 > 29) || (month2 == 4 &&\
    \ day2 < 1) || (month2 == 4 && day2 > 30) || (month2 == 6 && day2 < 1) || (month2\
    \ == 6 && day2 > 30) || (month2 == 9 && day2 < 1) || (month2 == 9 && day2 > 30)\
    \ || (month2 == 11 && day2 < 1) || (month2 == 11 && day2 > 30)) {\n          \
    \      valid = false;\n            }\n            if (year1 < 1 || year1 > 9999\
    \ || year2 < 1 || year2 > 9999) {\n                valid = false;\n          \
    \  }\n        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 3 out of bounds for length 3\n\tat Problem.validDate(tmpohi9enhd.java:36)\n\
    \tat Problem.main(tmpohi9enhd.java:55)\n"
  stdout: ''
  timestamp: 1659800562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateArray = date.split(\"-\");\n        boolean valid = false;\n        if(dateArray.length\
    \ == 3) {\n            int month = Integer.parseInt(dateArray[0]);\n         \
    \   int day = Integer.parseInt(dateArray[1]);\n            int year = Integer.parseInt(dateArray[2]);\n\
    \            if(month >= 1 && month <= 12 && day >= 1 && day <= 31 && year >=\
    \ 1 && year <= 2020) {\n                valid = true;\n            }\n       \
    \     else if(month >= 4 && month <= 11 && day >= 1 && day <= 29 && year >= 1\
    \ && year <= 2020) {\n                valid = true;\n            }\n         \
    \   else if(month == 2 && day >= 1 && day <= 29) {\n                valid = true;\n\
    \            }\n        }\n        return valid;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date date1 = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             e.printStackTrace();\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1fl848xy.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmp1fl848xy.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmp1fl848xy.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659800562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            int month = Integer.parseInt(dateParts[0]);\n            int\
    \ day = Integer.parseInt(dateParts[1]);\n            int year = Integer.parseInt(dateParts[2]);\n\
    \            if (month >= 1 && month <= 12 && day >= 1 && day <= 31) {\n     \
    \           if (month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12) {\n                    if (day >= 1 && day <= 30) {\n\
    \                        if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n                            if (day >= 1 && day <= 29) {\n          \
    \                      valid = true;\n                            }\n        \
    \                }\n                    }\n                }\n            }\n\
    \        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpinhm2pzq.java:48)\n"
  stdout: ''
  timestamp: 1659800563
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ valid = false;\n        if (date != null && !date.isEmpty()) {\n           \
    \ int daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    \
    \        int daysInMonth2 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \            int daysInMonth3 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \            int daysInMonth4 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \            int daysInMonth5 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \            int daysInMonth6 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \            int daysInMonth7 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \            int daysInMonth8 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \            int daysInMonth9 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \            int daysInMonth10 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31};\n            int daysInMonth11 = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31};\n            int daysInMonth12 = {31, 28, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31};\n            int daysInMonth13 = {31, 28, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31};\n            int daysInMonth14 = {31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31};\n            int daysInMonth15 = {31, 28, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31};\n            int daysInMonth16 = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n            int daysInMonth17 = {31, 28, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInMonth18 = {31, 28, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInMonth19 = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInMonth20 = {31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInMonth21\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInMonth22\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInMonth23\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInMonth24\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInMonth25\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInMonth26\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInMonth27\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInMonth28\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n            int daysInMonth29\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplfgtezu3.java:59: error: ';' expected\n    }\n     ^\n/tmp/tmplfgtezu3.java:60:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date date1 = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpworfuhts.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpworfuhts.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpworfuhts.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659800557
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        if (dateParts.length != 3) {\n            return false;\n     \
    \   }\n        int month = Integer.parseInt(dateParts[0]);\n        int day =\
    \ Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month == 2 && day > 30) {\n            return false;\n        }\n \
    \       if (month == 4 && day > 29) {\n            return false;\n        }\n\
    \        if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n            if (day > 31) {\n          \
    \      return false;\n            }\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            String[] dateParts = date.split(\"\
    -\");\n            int month = Integer.parseInt(dateParts[0]);\n            int\
    \ day = Integer.parseInt(dateParts[1]);\n            int year = Integer.parseInt(dateParts[2]);\n\
    \            int daysInMonths[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31};\n            if (month < 1 || month > 12) {\n                valid = false;\n\
    \            } else if (day < 1 || day > daysInMonths[month - 1]) {\n        \
    \        valid = false;\n            } else if (month == 2 && day > 29) {\n  \
    \              valid = false;\n            } else if (month == 2 && day < 1) {\n\
    \                valid = false;\n            } else if (month == 2 && day > 28)\
    \ {\n                valid = false;\n            } else if (month == 1 && (year\
    \ % 400 == 0 || (year % 4 == 0 && year % 100 != 0))) {\n                valid\
    \ = false;\n            } else if (month == 1 && (year % 100 == 0 || (year % 4\
    \ == 0 && year % 100 != 0))) {\n                valid = false;\n            }\
    \ else if (month == 1 && (year % 4 == 0)) {\n                valid = false;\n\
    \            } else if (month == 1 && (year % 100 != 0)) {\n                valid\
    \ = false;\n            } else if (month == 1 && (year % 4 != 0)) {\n        \
    \        valid = false;\n            } else if (month == 3 && day > 29) {\n  \
    \              valid = false;\n            } else if (month == 3 && day < 1) {\n\
    \                valid = false;\n            } else if (month == 3 && day > 28)\
    \ {\n                valid = false;\n            } else if (month == 5 && day\
    \ > 29) {\n                valid = false;\n            } else if (month == 5 &&\
    \ day < 1) {\n                valid = false;\n            } else if (month ==\
    \ 5 && day > 28) {\n                valid = false;\n            } else if (month\
    \ == 7 && day > 29) {\n                valid = false;\n            } else if (month\
    \ == 7 && day < 1) {\n                valid = false;\n            } else if (month\
    \ == 7 && day > 28) {\n                valid = false;\n            } else if (month\
    \ == 8 && day > 29) {\n                valid = false;\n            } else if (month\
    \ == 8 && day < 1) {\n                valid = false;\n            } else if (month\
    \ == 8 && day > 28) {\n                valid = false;\n            } else if (month\
    \ == 10 && day > 29) {\n                valid = false;\n            } else if\
    \ (month == 10 && day < 1) {\n                valid = false;\n            } else\
    \ if (month == 10 && day > 28) {\n                valid = false;\n           \
    \ } else if (month == 12 && day > 29) {\n                valid = false;\n    \
    \        } else if (month == 12 && day < 1) {\n                valid = false;\n\
    \            } else if (month == 12 && day > 28) {\n                valid = false;\n\
    \            } else if (month == 1 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 1 && day < 1) {\n                valid = false;\n\
    \            } else if (month == 1 && day > 30) {\n                valid = false;\n\
    \            } else if (month == 3 && day > 31) {\n                valid = false;\n\
    \            } else if (month == 3 && day < 1) {\n                \n    }\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpft_63k0h.java:101: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659800562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date != null && !date.isEmpty()) {\n            try {\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                Date d = sdf.parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0p_s97d.java:30: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:30:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpo0p_s97d.java:33: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns True if the date is valid otherwise False.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        String[]\
    \ dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n     \
    \       return valid;\n        }\n        int month1 = Integer.parseInt(dateParts[0]);\n\
    \        int day1 = Integer.parseInt(dateParts[1]);\n        int year1 = Integer.parseInt(dateParts[2]);\n\
    \        int month2 = month1;\n        int day2 = day1;\n        int year2 = year1;\n\
    \        if (month1 < 1 || month1 > 12) {\n            return valid;\n       \
    \ }\n        if (day1 < 1 || day1 > 31) {\n            return valid;\n       \
    \ }\n        if (month2 < 1 || month2 > 12) {\n            return valid;\n   \
    \     }\n        if (day2 < 1 || day2 > 30) {\n            return valid;\n   \
    \     }\n        if (month1 == month2) {\n            if (day1 == day2) {\n  \
    \              if (year1 == year2) {\n                    valid = true;\n    \
    \            }\n            }\n        }\n        return valid;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800563
