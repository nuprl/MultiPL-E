name: HumanEval_26_remove_duplicates
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // From a list of integers, remove all elements that occur\
  \ more than once.\n    // Keep order of elements left the same as in the input.\n\
  \    // >>> removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)3l, (long)2l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)3l, (long)4l)))\n    public static ArrayList<Long> removeDuplicates(ArrayList<Long>\
  \ numbers) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(removeDuplicates((new\
  \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
  \ (long)3l, (long)4l)))));\n    assert(removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)2l, (long)4l, (long)3l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)4l, (long)5l)))));\n    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (!set.add(number)) {\n                result.add(number);\n            }\n \
    \       }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Set<Long> set = new HashSet<Long>();\n        for (Long number : numbers)\
    \ {\n            if (!set.add(number)) {\n                result.add(number);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        Set<Long> set = new HashSet<Long>();\n   \
    \     for (Long number : numbers) {\n            if (set.add(number)) {\n    \
    \            result.add(number);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>();\n       \
    \ Set<Long> seen = new HashSet<Long>();\n        for (Long number : numbers) {\n\
    \            if (!seen.add(number)) {\n                result.add(number);\n \
    \           }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        Set<Long> set = new HashSet<>();\n        for\
    \ (Long number : numbers) {\n            if (!set.add(number)) {\n           \
    \     result.add(number);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ seen = new HashSet<>();\n        for (Long number : numbers) {\n           \
    \ if (seen.contains(number)) {\n                continue;\n            }\n   \
    \         seen.add(number);\n            result.add(number);\n        }\n    \
    \    return result;", "        ArrayList<Long> result = new ArrayList<>();\n \
    \       Set<Long> seen = new HashSet<>();\n        for (Long number : numbers)\
    \ {\n            if (!seen.contains(number)) {\n                result.add(number);\n\
    \                seen.add(number);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        for (Long number : numbers) {\n            if (set.add(number))\
    \ {\n                result.add(number);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        Set<Long>\
    \ set = new HashSet<>();\n        for (Long number : numbers) {\n            if\
    \ (set.add(number)) {\n                result.add(number);\n            }\n  \
    \      }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashMap<Long, Long> map = new HashMap<Long, Long>();\n        for (Long\
    \ number : numbers) {\n            if (map.containsKey(number)) {\n          \
    \      map.put(number, map.get(number) + 1);\n            } else {\n         \
    \       map.put(number, 1l);\n            }\n        }\n        for (Long number\
    \ : map.keySet()) {\n            if (map.get(number) > 1) {\n                result.add(number);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        Set<Long> set = new HashSet<Long>();\n   \
    \     for (Long number : numbers) {\n            if (!set.contains(number)) {\n\
    \                set.add(number);\n                result.add(number);\n     \
    \       }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        Set<Long> set = new HashSet<Long>();\n   \
    \     for (Long number : numbers) {\n            if (!set.contains(number)) {\n\
    \                set.add(number);\n                result.add(number);\n     \
    \       }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        Set<Long> set = new HashSet<Long>();\n   \
    \     for (Long number : numbers) {\n            if (set.add(number)) {\n    \
    \            result.add(number);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long> set\
    \ = new HashSet<Long>();\n        for (Long number : numbers) {\n            if\
    \ (set.add(number)) {\n                result.add(number);\n            }\n  \
    \      }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        HashMap<Long, Long> map = new HashMap<Long, Long>();\n        for (Long\
    \ number : numbers) {\n            if (map.containsKey(number)) {\n          \
    \      map.put(number, map.get(number) + 1);\n            } else {\n         \
    \       map.put(number, 1l);\n            }\n        }\n        for (Long number\
    \ : map.keySet()) {\n            if (map.get(number) > 1) {\n                result.add(number);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        Set<Long> set = new HashSet<Long>();\n   \
    \     for (Long number : numbers) {\n            if (!set.add(number)) {\n   \
    \             result.add(number);\n            }\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        Set<Long> set\
    \ = new HashSet<Long>();\n        for (Long number : numbers) {\n            if\
    \ (set.add(number)) {\n                result.add(number);\n            }\n  \
    \      }\n        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        HashMap<Long, Long> map = new HashMap<>();\n        for (Long number\
    \ : numbers) {\n            if (map.containsKey(number)) {\n                map.put(number,\
    \ map.get(number) + 1);\n            } else {\n                map.put(number,\
    \ 1l);\n            }\n        }\n        for (Long number : map.keySet()) {\n\
    \            if (map.get(number) > 1) {\n                result.add(number);\n\
    \            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
