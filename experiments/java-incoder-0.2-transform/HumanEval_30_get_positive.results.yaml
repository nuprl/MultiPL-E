language: java
name: HumanEval_30_get_positive
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(x\
    \ -> x > 0).collect(Collectors.toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxobrjh28.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n\
    \                                                    ^\n    equality constraints:\
    \ List<Long>\n    upper bounds: ArrayList<Long>,Object\n  where R,A,T are type-variables:\n\
    \    R extends Object declared in method <R,A>collect(Collector<? super T,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T,A,R>)\n\
    \    T extends Object declared in interface Stream\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(l\
    \ -> l > 0).collect(Collectors.toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe9bp4rj2.java:15: error: variable l is already defined in method\
    \ getPositive(ArrayList<Long>)\n        return l.stream().filter(l -> l > 0).collect(Collectors.toList());\n\
    \                                 ^\n/tmp/tmpe9bp4rj2.java:15: error: incompatible\
    \ types: inference variable R has incompatible bounds\n        return l.stream().filter(l\
    \ -> l > 0).collect(Collectors.toList());\n                                  \
    \                  ^\n    equality constraints: List<Long>\n    upper bounds:\
    \ ArrayList<Long>,Object\n  where R,A,T are type-variables:\n    R extends Object\
    \ declared in method <R,A>collect(Collector<? super T,A,R>)\n    A extends Object\
    \ declared in method <R,A>collect(Collector<? super T,A,R>)\n    T extends Object\
    \ declared in interface Stream\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        l.stream().filter(x -> x >= 0l).forEach(x\
    \ -> result.add(x));\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_43hysbb.java:21)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(n\
    \ -> n >= 0l).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpei_amniz.java:19)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for (Long i : l) {\n            if (i >=\
    \ 0l) result.add(i);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0qq7sh1c.java:23)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(l\
    \ -> l > 0).collect(Collectors.toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe9bp4rj2.java:15: error: variable l is already defined in method\
    \ getPositive(ArrayList<Long>)\n        return l.stream().filter(l -> l > 0).collect(Collectors.toList());\n\
    \                                 ^\n/tmp/tmpe9bp4rj2.java:15: error: incompatible\
    \ types: inference variable R has incompatible bounds\n        return l.stream().filter(l\
    \ -> l > 0).collect(Collectors.toList());\n                                  \
    \                  ^\n    equality constraints: List<Long>\n    upper bounds:\
    \ ArrayList<Long>,Object\n  where R,A,T are type-variables:\n    R extends Object\
    \ declared in method <R,A>collect(Collector<? super T,A,R>)\n    A extends Object\
    \ declared in method <R,A>collect(Collector<? super T,A,R>)\n    T extends Object\
    \ declared in interface Stream\n2 errors\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        l.stream().filter(x -> x > 0).forEach(x\
    \ -> result.add(x));\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(i\
    \ -> i >= 0l).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7j17z2f3.java:19)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for (long i : l) {\n            if (i >=\
    \ 0) {\n                result.add(i);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0l692khi.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for (long i : l) {\n            if (i >=\
    \ 0l) result.add(i);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeetmzxj9.java:23)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for (Long i : l) {\n            if (i >=\
    \ 0l) {\n                result.add(i);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzya8p94.java:25)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for (Long i : l) {\n            if (i >=\
    \ 0l)\n                result.add(i);\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqvphdpd8.java:24)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for (Long i : l) {\n            if (i >=\
    \ 0l) result.add(i);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0qq7sh1c.java:23)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for(Long i : l) {\n            if(i>0)\
    \ {\n                result.add(i);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        l.stream().filter(x -> x >= 0l).forEach(x\
    \ -> result.add(x));\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_43hysbb.java:21)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(l\
    \ -> l > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp31w4m875.java:15: error: variable l is already defined in method\
    \ getPositive(ArrayList<Long>)\n        return l.stream().filter(l -> l > 0).collect(Collectors.toCollection(ArrayList::new));\n\
    \                                 ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(l\
    \ -> l > 0).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp31w4m875.java:15: error: variable l is already defined in method\
    \ getPositive(ArrayList<Long>)\n        return l.stream().filter(l -> l > 0).collect(Collectors.toCollection(ArrayList::new));\n\
    \                                 ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        return l.stream().filter(i\
    \ -> i >= 0l).collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7j17z2f3.java:19)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        l.stream().filter(i -> i >= 0l).forEach(i\
    \ -> result.add(i));\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)5l, (long)6l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)3l, (long)9l, (long)123l, (long)1l)))));\n\
    \    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_jcw5tsa.java:21)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return only positive numbers in the list.\n    // >>>\
    \ getPositive((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-4l,\
    \ (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)6l)))\n    // >>> getPositive((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l,\
    \ (long)1l, (long)-10l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)3l, (long)2l, (long)3l, (long)9l, (long)123l, (long)1l)))\n    public\
    \ static ArrayList<Long> getPositive(ArrayList<Long> l) {\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for (Long i : l) {\n            if (i >=\
    \ 0l)\n                result.add(i);\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)4l, (long)5l, (long)6l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)3l, (long)3l,\
    \ (long)9l, (long)123l, (long)1l)))));\n    assert(getPositive((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n    assert(getPositive((new\
    \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqvphdpd8.java:24)\n"
  stdout: ''
