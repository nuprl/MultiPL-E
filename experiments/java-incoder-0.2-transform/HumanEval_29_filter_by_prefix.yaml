name: HumanEval_29_filter_by_prefix
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Filter an input list of strings only for ones that start\
  \ with a given prefix.\n    // >>> filterByPrefix((new ArrayList<String>(Arrays.asList())),\
  \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterByPrefix((new\
  \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bcd\", (String)\"cde\"\
  , (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
  abc\", (String)\"array\")))\n    public static ArrayList<String> filterByPrefix(ArrayList<String>\
  \ strings, String prefix) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(filterByPrefix((new\
  \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(filterByPrefix((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
  , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"\
  xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
  , (String)\"xxxAAA\", (String)\"xxx\")))));\n    }\n\n}\n"
completions: ['        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> filtered = new ArrayList<>();\n        for (String string\
    \ : strings) {\n            if (string.startsWith(prefix)) {\n               \
    \ filtered.add(string);\n            }\n        }\n        return filtered;",
  '        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> result = new ArrayList<>();\n        for (String string\
    \ : strings) {\n            if (string.startsWith(prefix)) {\n               \
    \ result.add(string);\n            }\n        }\n        return result;", '        return
    strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.startsWith(prefix)) {\n        \
    \        filtered.add(string);\n            }\n        }\n        return filtered;",
  '        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  "        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n\
    \                .collect(Collectors.toCollection(ArrayList::new));", '        return
    strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> result = new ArrayList<>();\n        for(String string\
    \ : strings) {\n            if(string.startsWith(prefix)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", '        return strings.stream().filter(s
    -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));', '        return
    strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> result = new ArrayList<>();\n        for(String string\
    \ : strings) {\n            if(string.startsWith(prefix)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
