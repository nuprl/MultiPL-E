name: HumanEval_49_modp
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>>\
  \ modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n\
  \    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    //\
  \ (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    public static long modp(long\
  \ n, long p) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(modp((3l),\
  \ (5l)) == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l),\
  \ (101l)) == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l),\
  \ (101l)) == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l),\
  \ (5l)) == (3l));\n    }\n\n}\n"
completions: ["        long r = 1;\n        while (n>0) {\n            long m = n%p;\n\
    \            n /= p;\n            r = r*p + m;\n        }\n        return r;",
  "        if (n == 0l && p == 0l) {\n            return 0l;\n        }\n        if\
    \ (n == 0l && p != 0l) {\n            return 1l;\n        }\n        if (n !=\
    \ 0l && p == 0l) {\n            return -1l;\n        }\n        if (n < 0l ||\
    \ p < 0l) {\n            throw new IllegalArgumentException();\n        }\n  \
    \      if (p > 1l) {\n            throw new IllegalArgumentException();\n    \
    \    }\n        if (p > n + 1l) {\n            throw new IllegalArgumentException();\n\
    \        }\n        if (p > 1l) {\n            throw new IllegalArgumentException();\n\
    \        }\n        if (p == 1l) {\n            return 1l;\n        }\n      \
    \  if (p == n + 1l) {\n            return 1l;\n        }\n        if (p == n +\
    \ 1l) {\n            return 1l;\n        }\n        if (p == n + 1l) {\n     \
    \       return 1l;\n        }\n        if (p == n + 1l) {\n            return\
    \ 1l;\n        }\n        if (p == n + 1l) {\n            return 1l;\n       \
    \ }\n        if (p == n + 1l) {\n            return 1l;\n        }\n        if\
    \ (p == n + 1l) {\n            return 1l;\n        }\n        if (p == n + 1l)\
    \ {\n            return 1l;\n        }\n        if (p == n + 1l) {\n         \
    \   return 1l;\n        }\n        if (p == n + 1l) {\n            return 1l;\n\
    \        }\n        if (p == n + 1l) {\n            return 1l;\n        }\n  \
    \      if (p == n + 1l) {\n            return 1l;\n        }\n        if (p ==\
    \ n + 1l) {\n            return 1l;\n        }\n        if (p == n + 1l) {\n \
    \           return 1l;\n        }\n        if (p == n + 1l) {\n            return\
    \ 1l;\n        }\n        if (p == n + 1l) {\n            return 1l;\n       \
    \ }\n        if (p == n + 1l) {\n            return 1l;\n        }\n        if\
    \ (p == n + 1l) {\n            return 1l;\n        }\n        if (p == n + 1l)\
    \ {\n            return 1l;\n        }\n        if (p == n + 1l) {\n         \
    \   return 1l;\n        }\n        if (p == n + 1l) {\n            return 1l;\n\
    \        }\n        if (p == n + 1l) {\n            return 1l;\n        }\n  \
    \      if (p == n + 1l) {\n            return 1l;\n        }\n        if (p ==\
    \ n + 1l) {\n            return 1l;\n        }\n        if (p == n + 1l) {\n \
    \           return 1l;\n        }\n        if (p == n + 1l) {\n            return\
    \ 1l;\n        }\n        if (p == n + 1l) {\n            return 1l;\n       \
    \ }\n        if (p == n + 1l) {\n            return 1l;\n        }\n        if\
    \ (p == n + 1l) {\n            return 1l;\n        }\n        if (p == n + 1l)\
    \ {\n            return ", "        long r = 1;\n        while (n>0) {\n     \
    \       long t = n%p;\n            n = p;\n            p = t;\n            r =\
    \ (r*p)%p;\n        }\n        return r;", "        long r = 1l;\n        while\
    \ (n > 0) {\n            long t = r * n;\n            if (t < p)\n           \
    \     t += p;\n            r ^= t;\n            n -= t;\n        }\n        return\
    \ r;", "        long result = 1l;\n        while (n > 0) {\n            long r\
    \ = n % p;\n            n /= p;\n            result = r * result + p;\n      \
    \  }\n        return result;", "        long res = 1l;\n        while (n > 0)\
    \ {\n            long t = n;\n            n -= (t & -p);\n            res *= t;\n\
    \        }\n        return res;", "        long r = 1;\n        while (n > 0)\
    \ {\n            long t = r * n % p;\n            r = t;\n            n = n /\
    \ p;\n        }\n        return r;", "        long r = 1l;\n        while ((n\
    \ & 1l) != 0l) {\n            n >>>= 1l;\n            r <<= 1l;\n        }\n \
    \       r %= p;\n        if ((n & 1l) != 0l) {\n            r ^= p;\n        }\n\
    \        return r;", "        long res = 1l;\n        while (n > 0) {\n      \
    \      res = (res * n) % p;\n            n--;\n        }\n        return res;",
  "        long r = 1;\n        while (n>0) {\n            long t = n%p;\n       \
    \     r = (r*t) + (r%p);\n            n = n/p;\n        }\n        return r;",
  "        long r = 1;\n        while (n>0) {\n            r = r*p;\n            n\
    \ = n>>1;\n        }\n        return r;", "        if (n == 0l) {\n          \
    \  return 1l;\n        }\n        if (p == 0l) {\n            return n;\n    \
    \    }\n        if (p == 1l) {\n            return n;\n        }\n        if (p\
    \ == 2l) {\n            return n;\n        }\n        if (p == 3l) {\n       \
    \     return n;\n        }\n        if (p == 4l) {\n            return n;\n  \
    \      }\n        if (p == 5l) {\n            return n;\n        }\n        if\
    \ (p == 6l) {\n            return n;\n        }\n        if (p == 7l) {\n    \
    \        return n;\n        }\n        if (p == 8l) {\n            return n;\n\
    \        }\n        if (p == 9l) {\n            return n;\n        }\n       \
    \ if (p == 10l) {\n            return n;\n        }\n        if (p == 11l) {\n\
    \            return n;\n        }\n        if (p == 12l) {\n            return\
    \ n;\n        }\n        if (p == 13l) {\n            return n;\n        }\n \
    \       if (p == 14l) {\n            return n;\n        }\n        if (p == 15l)\
    \ {\n            return n;\n        }\n        if (p == 16l) {\n            return\
    \ n;\n        }\n        if (p == 17l) {\n            return n;\n        }\n \
    \       if (p == 18l) {\n            return n;\n        }\n        if (p == 19l)\
    \ {\n            return n;\n        }\n        if (p == 20l) {\n            return\
    \ n;\n        }\n        if (p == 21l) {\n            return n;\n        }\n \
    \       if (p == 22l) {\n            return n;\n        }\n        if (p == 23l)\
    \ {\n            return n;\n        }\n        if (p == 24l) {\n            return\
    \ n;\n        }\n        if (p == 25l) {\n            return n;\n        }\n \
    \       if (p == 26l) {\n            return n;\n        }\n        if (p == 27l)\
    \ {\n            return n;\n        }\n        if (p == 28l) {\n            return\
    \ n;\n        }\n        if (p == 29l) {\n            return n;\n        }\n \
    \       if (p == 30l) {\n            return n;\n        }\n        if (p == 31l)\
    \ {\n            return n;\n        }\n        if (p == 32l) {\n            return\
    \ n;\n        }\n        if (p == 33l) {\n            return n;\n        }\n \
    \       if (p == 34l) {\n            return n;\n        }\n        if (p == 35l)\
    \ {\n            return n;\n        }\n        if (p == 36l) {\n            return\
    \ n;\n        }\n        if (p == 37l) {\n            return n;\n        }\n \
    \       if (p == 38l) {\n            return n;\n        }\n        if (p == 39l)\
    \ {\n            return n;\n        }\n        if (p == 40l) {\n            return\
    \ n;\n        }\n        if (p == 41l) {\n            return n;\n        }\n \
    \       if (p == 42l) {\n            return n;\n        }\n        if (p == 43l)\
    \ {\n            return n;\n        }\n        if (p == 44l) {\n            return\
    \ n;\n        }\n        if (p == 45l) {\n            return n;\n        }\n \
    \       if (p == 46l) {\n            return n;\n        }\n        if (p", " \
    \       long result = 1l;\n        while (n > 0) {\n            long r = n % p;\n\
    \            n /= p;\n            result *= r;\n        }\n        return result;",
  "        long res = 1l;\n        while (n>0) {\n            long r = n%p;\n    \
    \        res = (res * r) % p;\n            n = n/p;\n        }\n        return\
    \ res;", "        long r = 1l;\n        while (n-- > 0) {\n            r = (r\
    \ * p) % p;\n        }\n        return r;", "        long r = 1;\n        while\
    \ (p > 0) {\n            long q = p / n;\n            long t = r * q;\n      \
    \      r = t;\n            p -= q * n;\n        }\n        return r;", "     \
    \   long r = 1;\n        while (n > 0) {\n            long t = n & -p;\n     \
    \       n = n ^ p;\n            r = r * t % p;\n        }\n        return r;",
  "        if (n == 0l) return 1l;\n        if (p == 0l) return 0l;\n        if (n\
    \ == 1l) return p;\n        if (p == 1l) return n;\n        if (n % 2 == 0l) return\
    \ modp(n / 2l, p * p) % p;\n        if (n % 3 == 0l) return modp(n / 3l, p * p)\
    \ % p;\n        if (n % 5 == 0l) return modp(n / 5l, p * p) % p;\n        return\
    \ modp(n / 2l, p * p) % p;", "        long res = 1l;\n        while (n > 0) {\n\
    \            long tmp = res;\n            res = (res * (long) p) % n;\n      \
    \      n = tmp;\n        }\n        return res;", "        long r = 1;\n     \
    \   while (r < n) {\n            r *= p;\n        }\n        return r % p;"]
stop_tokens:
- "\n    }\n"
