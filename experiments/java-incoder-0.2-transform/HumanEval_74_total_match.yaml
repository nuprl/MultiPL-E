name: HumanEval_74_total_match
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that accepts two lists of strings and returns\
  \ the list that has \n    // total number of chars in the all strings of the list\
  \ less than the other list.\n    // if the two lists have the same number of chars,\
  \ return the first list.\n    // Examples\n    // >>> totalMatch((new ArrayList<String>(Arrays.asList())),\
  \ (new ArrayList<String>(Arrays.asList())))\n    // (new ArrayList<String>(Arrays.asList()))\n\
  \    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
  admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\"\
  ))))\n    // (new ArrayList<String>(Arrays.asList((String)\"hI\", (String)\"Hi\"\
  )))\n    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"hi\",\
  \ (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\", (String)\"\
  hi\", (String)\"admin\", (String)\"project\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
  hi\", (String)\"admin\")))\n    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
  hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
  , (String)\"hi\", (String)\"hi\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
  hI\", (String)\"hi\", (String)\"hi\")))\n    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
  4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
  3\", (String)\"4\", (String)\"5\"))))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
  4\")))\n    public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String>\
  \ lst2) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(totalMatch((new\
  \ ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList()))).equals((new\
  \ ArrayList<String>(Arrays.asList()))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
  hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
  , (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hi\"\
  , (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
  hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hi\"\
  , (String)\"hi\", (String)\"admin\", (String)\"project\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
  hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
  4\"))), (new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"2\", (String)\"\
  3\", (String)\"4\", (String)\"5\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
  4\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
  hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
  , (String)\"Hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"hI\"\
  , (String)\"Hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
  hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
  , (String)\"hi\", (String)\"hi\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
  hI\", (String)\"hi\", (String)\"hi\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"\
  hi\", (String)\"admin\"))), (new ArrayList<String>(Arrays.asList((String)\"hI\"\
  , (String)\"hi\", (String)\"hii\")))).equals((new ArrayList<String>(Arrays.asList((String)\"\
  hi\", (String)\"admin\")))));\n    assert(totalMatch((new ArrayList<String>(Arrays.asList())),\
  \ (new ArrayList<String>(Arrays.asList((String)\"this\")))).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(totalMatch((new ArrayList<String>(Arrays.asList((String)\"this\"))),\
  \ (new ArrayList<String>(Arrays.asList()))).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<String> result = new ArrayList<String>();\n     \
    \   if (lst1.size() == lst2.size()) {\n            for (int i = 0; i < lst1.size();\
    \ i++) {\n                if (lst1.get(i).length() > lst2.get(i).length()) {\n\
    \                    result.add(lst1.get(i));\n                } else {\n    \
    \                result.add(lst2.get(i));\n                }\n            }\n\
    \        } else {\n            return lst1;\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<String>();\n        int maxLen\
    \ = Math.max(lst1.size(), lst2.size());\n        for (int i = 0; i < maxLen; i++)\
    \ {\n            if (lst1.get(i).length() >= lst2.get(i).length()) {\n       \
    \         result.add(lst1.get(i));\n            } else if (lst2.get(i).length()\
    \ >= lst1.get(i).length()) {\n                result.add(lst2.get(i));\n     \
    \       } else {\n                result.add(lst1.get(i));\n                result.add(lst2.get(i));\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (lst1.size() != lst2.size()) {\n\
    \            return result;\n        }\n        Set<String> set1 = new HashSet<String>(lst1);\n\
    \        Set<String> set2 = new HashSet<String>(lst2);\n        set1.removeAll(set2);\n\
    \        set2.removeAll(set1);\n        result.addAll(set1);\n        result.addAll(set2);\n\
    \        return result;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for(String str : lst1) {\n            int count = 0;\n            for(String\
    \ str2 : lst2) {\n                if(str.equals(str2)) {\n                   \
    \ count++;\n                }\n            }\n            if(count < lst2.size())\
    \ {\n                result.add(str);\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> result = new ArrayList<String>();\n   \
    \     int len1 = lst1.size();\n        int len2 = lst2.size();\n        if (len1\
    \ == len2) {\n            for (int i = 0; i < len1; i++) {\n                String\
    \ s1 = lst1.get(i);\n                String s2 = lst2.get(i);\n              \
    \  if (s1.length() < s2.length()) {\n                    result.add(s1);\n   \
    \             } else {\n                    result.add(s2);\n                }\n\
    \            }\n        } else {\n            for (int i = 0; i < len1; i++) {\n\
    \                String s1 = lst1.get(i);\n                String s2 = lst2.get(i);\n\
    \                if (s1.length() < s2.length()) {\n                    result.add(s1);\n\
    \                } else {\n                    result.add(s2);\n             \
    \   }\n            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        int count = 0;\n        for(String\
    \ str : lst1) {\n            count += str.length();\n        }\n        for(String\
    \ str : lst2) {\n            count += str.length();\n        }\n        if(count\
    \ == lst1.size()) {\n            return lst1;\n        }\n        if(count ==\
    \ lst2.size()) {\n            return lst2;\n        }\n        for(int i = 0;\
    \ i < lst1.size(); i++) {\n            for(int j = 0; j < lst2.size(); j++) {\n\
    \                if(lst1.get(i).length() < lst2.get(j).length()) {\n         \
    \           result.add(lst1.get(i));\n                    break;\n           \
    \     }\n                if(lst2.get(j).length() < lst1.get(i).length()) {\n \
    \                   result.add(lst2.get(j));\n                    break;\n   \
    \             }\n                if(lst1.get(i).length() == lst2.get(j).length())\
    \ {\n                    if(lst1.get(i).compareTo(lst2.get(j)) == 0) {\n     \
    \                   result.add(lst1.get(i));\n                        break;\n\
    \                    }\n                    if(lst1.get(i).compareTo(lst2.get(j))\
    \ == -1) {\n                        result.add(lst2.get(j));\n               \
    \         break;\n                    }\n                    if(lst1.get(i).compareTo(lst2.get(j))\
    \ == 1) {\n                        result.add(lst1.get(j));\n                \
    \        break;\n                    }\n                }\n            }\n   \
    \     }\n        return result;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        int maxLen = lst1.size() > lst2.size() ? lst1.size() : lst2.size();\n\
    \        for (int i = 0; i < maxLen; i++) {\n            if (lst1.get(i).length()\
    \ > lst2.get(i).length()) {\n                result.add(lst1.get(i));\n      \
    \      } else if (lst1.get(i).length() < lst2.get(i).length()) {\n           \
    \     result.add(lst2.get(i));\n            } else {\n                result.add(lst1.get(i));\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        int maxLen = lst1.size() > lst2.size()\
    \ ? lst1.size() : lst2.size();\n        for (int i = 0; i < maxLen; i++) {\n \
    \           String s1 = lst1.get(i);\n            String s2 = lst2.get(i);\n \
    \           if (s1.length() > s2.length()) {\n                result.add(s1);\n\
    \            } else if (s2.length() > s1.length()) {\n                result.add(s2);\n\
    \            } else {\n                result.add(s1);\n                result.add(s2);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        int maxLen = Math.max(lst1.size(),\
    \ lst2.size());\n        for (int i = 0; i < maxLen; i++) {\n            if (lst1.get(i).length()\
    \ >= lst2.get(i).length()) {\n                result.add(lst1.get(i));\n     \
    \       } else {\n                result.add(lst2.get(i));\n            }\n  \
    \      }\n        return result;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        int maxLength = Math.max(lst1.size(), lst2.size());\n        for (int\
    \ i = 0; i < maxLength; i++) {\n            if (lst1.get(i).length() > lst2.get(i).length())\
    \ {\n                result.add(lst1.get(i));\n            } else if (lst2.get(i).length()\
    \ > lst1.get(i).length()) {\n                result.add(lst2.get(i));\n      \
    \      } else {\n                result.add(lst1.get(i));\n                result.add(lst2.get(i));\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for(int i = 0; i < lst1.size(); i++)\
    \ {\n            for(int j = 0; j < lst2.size(); j++) {\n                if(lst1.get(i).length()\
    \ < lst2.get(j).length()) {\n                    result.add(lst1.get(i));\n  \
    \                  break;\n                }\n                if(lst1.get(i).length()\
    \ == lst2.get(j).length()) {\n                    if(lst1.get(i).equals(lst2.get(j)))\
    \ {\n                        result.add(lst1.get(i));\n                      \
    \  break;\n                    }\n                }\n            }\n        }\n\
    \        return result;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        int maxLen = lst1.size() > lst2.size() ? lst1.size() : lst2.size();\n\
    \        for (int i = 0; i < maxLen; i++) {\n            if (lst1.get(i).length()\
    \ > lst2.get(i).length()) {\n                result.add(lst1.get(i));\n      \
    \      } else if (lst1.get(i).length() < lst2.get(i).length()) {\n           \
    \     result.add(lst2.get(i));\n            } else {\n                result.add(lst1.get(i));\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for(int i = 0; i < lst1.size(); i++)\
    \ {\n            for(int j = 0; j < lst2.size(); j++) {\n                if(lst1.get(i).length()\
    \ < lst2.get(j).length()) {\n                    result.add(lst1.get(i));\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   return result;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for(int i = 0; i < lst1.size(); i++) {\n            for(int j = 0; j\
    \ < lst2.size(); j++) {\n                if(lst1.get(i).length() < lst2.get(j).length())\
    \ {\n                    result.add(lst1.get(i));\n                    break;\n\
    \                }\n            }\n        }\n        if(result.size() == lst1.size())\
    \ {\n            return result;\n        }\n        for(int i = 0; i < lst1.size();\
    \ i++) {\n            for(int j = 0; j < lst2.size(); j++) {\n               \
    \ if(lst1.get(i).length() == lst2.get(j).length()) {\n                    result.add(lst1.get(i));\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if\
    \ (len1 == len2) {\n            for (int i = 0; i < len1; i++) {\n           \
    \     String s1 = lst1.get(i);\n                String s2 = lst2.get(i);\n   \
    \             if (s1.length() < s2.length()) {\n                    result.add(s1);\n\
    \                } else {\n                    result.add(s2);\n             \
    \   }\n            }\n            return result;\n        }\n        if (len1\
    \ > len2) {\n            int len = len1;\n            while (len > len2) {\n \
    \               len--;\n                String s1 = lst1.get(len);\n         \
    \       String s2 = lst2.get(len);\n                if (s1.length() < s2.length())\
    \ {\n                    result.add(s1);\n                } else {\n         \
    \           result.add(s2);\n                }\n            }\n            return\
    \ result;\n        }\n        if (len1 < len2) {\n            int len = len2;\n\
    \            while (len > len1) {\n                len--;\n                String\
    \ s1 = lst1.get(len);\n                String s2 = lst2.get(len);\n          \
    \      if (s1.length() < s2.length()) {\n                    result.add(s1);\n\
    \                } else {\n                    result.add(s2);\n             \
    \   }\n            }\n            return result;\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<>();\n        int max = 0;\n \
    \       for (String str : lst1) {\n            max = Math.max(max, str.length());\n\
    \        }\n        for (String str : lst2) {\n            max = Math.max(max,\
    \ str.length());\n        }\n        for (int i = 0; i < max; i++) {\n       \
    \     String str = \"\";\n            for (int j = 0; j < max; j++) {\n      \
    \          str += lst1.get(i).charAt(j);\n            }\n            if (lst2.contains(str))\
    \ {\n                result.add(lst1.get(i));\n            }\n        }\n    \
    \    return result;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        int maxLen = Math.max(lst1.size(), lst2.size());\n        for (int i\
    \ = 0; i < maxLen; i++) {\n            String s1 = lst1.get(i);\n            String\
    \ s2 = lst2.get(i);\n            if (s1.length() < s2.length()) {\n          \
    \      result.add(s1);\n            } else {\n                result.add(s2);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        int len1 = lst1.size();\n       \
    \ int len2 = lst2.size();\n        if (len1 == len2) {\n            for (int i\
    \ = 0; i < len1; i++) {\n                String s1 = lst1.get(i);\n          \
    \      String s2 = lst2.get(i);\n                if (s1.length() < s2.length())\
    \ {\n                    result.add(s1);\n                } else {\n         \
    \           result.add(s2);\n                }\n            }\n            return\
    \ result;\n        } else if (len1 > len2) {\n            for (int i = 0; i <\
    \ len1; i++) {\n                String s1 = lst1.get(i);\n                String\
    \ s2 = lst2.get(i);\n                if (s1.length() < s2.length()) {\n      \
    \              result.add(s1);\n                } else {\n                   \
    \ result.add(s2);\n                }\n            }\n            return result;\n\
    \        } else {\n            for (int i = 0; i < len2; i++) {\n            \
    \    String s1 = lst1.get(i);\n                String s2 = lst2.get(i);\n    \
    \            if (s1.length() < s2.length()) {\n                    result.add(s2);\n\
    \                } else {\n                    result.add(s1);\n             \
    \   }\n            }\n            return result;\n        }", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (lst1.size() == lst2.size()) {\n\
    \            for (int i = 0; i < lst1.size(); i++) {\n                if (lst1.get(i).length()\
    \ > lst2.get(i).length()) {\n                    result.add(lst1.get(i));\n  \
    \              }\n            }\n            return result;\n        }\n     \
    \   return lst1;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        int maxLen = lst1.size() > lst2.size() ? lst1.size() : lst2.size();\n\
    \        for (int i = 0; i < maxLen; i++) {\n            String s1 = lst1.get(i);\n\
    \            String s2 = lst2.get(i);\n            if (s1.length() > s2.length())\
    \ {\n                result.add(s1);\n            } else if (s2.length() > s1.length())\
    \ {\n                result.add(s2);\n            } else {\n                result.add(s1);\n\
    \                result.add(s2);\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
