language: java
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(1l);\n\
    \        third.add(1l);\n        if (n % 2 == 0) {\n            third.add(1l);\n\
    \        }\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpniasqacc.java:102: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           return result;\n        }\n        if (n == 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4));\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp18ri2x_n.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp18ri2x_n.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n                                  ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 3) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \        } else {\n            long tri1 = tri(n - 1l);\n            long tri2\
    \ = tri(n - 2l);\n            long tri3 = tri(n + 1l);\n            result.add(tri1);\n\
    \            result.add(tri2);\n            result.add(tri3);\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ydea0av.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long tri1 = tri(n - 1l);\n               \
    \            ^\n/tmp/tmp4ydea0av.java:34: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri2 = tri(n - 2l);\n        \
    \                   ^\n/tmp/tmp4ydea0av.java:35: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri3 = tri(n + 1l);\n        \
    \                   ^\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 2) {\n            result.add(1l);\n \
    \           result.add(2l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.add(tri1.get(0) + tri2.get(0) + tri3.get(0));\n\
    \        result.add(tri1.get(1) + tri2.get(1) + tri3.get(1));\n        result.add(tri1.get(2)\
    \ + tri2.get(2) + tri3.get(2));\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 2, Size: 2\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpxch12y43.java:37)\n\tat Problem.main(tmpxch12y43.java:41)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           result.add(1l);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        } else {\n            result.add(tri(n - 1) + tri(n - 2));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp07hb0ayp.java:33: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp07hb0ayp.java:35: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = (long)3;\n        long tri2 = tri1\
    \ + tri1;\n        long tri3 = tri2 + tri2;\n        long tri4 = tri3 + tri3;\n\
    \        long tri5 = tri4 + tri4;\n        long tri6 = tri5 + tri5;\n        long\
    \ tri7 = tri6 + tri6;\n        long tri8 = tri7 + tri7;\n        long tri9 = tri8\
    \ + tri8;\n        long tri10 = tri9 + tri9;\n        long tri11 = tri10 + tri10;\n\
    \        long tri12 = tri11 + tri11;\n        long tri13 = tri12 + tri12;\n  \
    \      long tri14 = tri13 + tri13;\n        long tri15 = tri14 + tri14;\n    \
    \    long tri16 = tri15 + tri15;\n        long tri17 = tri16 + tri16;\n      \
    \  long tri18 = tri17 + tri17;\n        long tri19 = tri18 + tri18;\n        long\
    \ tri20 = tri19 + tri19;\n        long tri21 = tri20 + tri20;\n        long tri22\
    \ = tri21 + tri21;\n        long tri23 = tri22 + tri22;\n        long tri24 =\
    \ tri23 + tri23;\n        long tri25 = tri24 + tri24;\n        long tri26 = tri25\
    \ + tri25;\n        long tri27 = tri26 + tri26;\n        long tri28 = tri27 +\
    \ tri27;\n        long tri29 = tri28 + tri28;\n        long tri30 = tri29 + tri29;\n\
    \        long tri31 = tri30 + tri30;\n        long tri32 = tri31 + tri31;\n  \
    \      long tri33 = tri32 + tri32;\n        long tri34 = tri33 + tri33;\n    \
    \    long tri35 = tri34 + tri34;\n        long tri36 = tri35 + tri35;\n      \
    \  long tri37 = tri36 + tri36;\n        long tri38 = tri37 + tri37;\n        long\
    \ tri39 = tri38 + tri38;\n        long tri40 = tri39 + tri39;\n        long tri41\
    \ = tri40 + tri40;\n        long tri42 = tri41 + tri41;\n        long tri43 =\
    \ tri42 + tri42;\n        long tri44 = tri43 + tri43;\n        long tri45 = tri44\
    \ + tri44;\n        \n    }\n    public static void main(String[] args) {\n  \
    \  assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvckuzv4x.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           result.add(n + 1l);\n            return result;\n        }\n     \
    \   ArrayList<Long> tri1 = tri(n - 1l);\n        ArrayList<Long> tri2 = tri(n\
    \ - 2l);\n        ArrayList<Long> tri3 = tri(n - 3l);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyt_1vod5.java:41)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 1) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long tri1 = tri(n - 1);\n            long tri2 = tri(n - 2);\n            result.add(tri1);\n\
    \            result.add(tri1 + tri2);\n            result.add(tri1 + tri2 + tri1);\n\
    \            return result;\n        } else {\n            long tri1 = tri(n -\
    \ 1);\n            long tri2 = tri(n - 2);\n            result.add(tri1);\n  \
    \          result.add(tri1 + tri2);\n            result.add(tri1 + tri2 + tri1);\n\
    \            result.add(tri1 + tri2 + tri1 + tri2);\n            return result;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz17o100p.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long tri1 = tri(n - 1);\n                \
    \           ^\n/tmp/tmpz17o100p.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri2 = tri(n - 2);\n         \
    \                  ^\n/tmp/tmpz17o100p.java:42: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri1 = tri(n - 1);\n         \
    \                  ^\n/tmp/tmpz17o100p.java:43: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri2 = tri(n - 2);\n         \
    \                  ^\n4 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 3) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        long tri1 = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1);\n        long tri2 = tri(n - 3) + tri(n - 2) + tri(n - 1);\n\
    \        result.add(tri1);\n        result.add(tri2);\n        result.add(tri1\
    \ + tri2);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgr6ex2oy.java:34: error: bad operand types for binary operator\
    \ '+'\n        long tri1 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n           \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpgr6ex2oy.java:35: error: bad operand types for binary operator '+'\n \
    \       long tri2 = tri(n - 3) + tri(n - 2) + tri(n - 1);\n                  \
    \             ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(2l);\n\
    \        third.add(3l);\n        if (n % 2 == 0) {\n            third.add(1l);\n\
    \        }\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \ third.removeAll(first);\n        third.removeAll(second);\n        third.removeAll(third);\n\
    \        result.addAll(first);\n        result.addAll(second);\n        result.addAll(third);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnukw1mmx.java:40: error: bad operand types for binary operator\
    \ '+'\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            \
    \                 ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(n);\n        third.add(n);\n        third.add(1l);\n     \
    \   third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpntaysb3e.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n <= 1) {\n            result.add(1l);\n\
    \            result.add(n + 1l);\n            return result;\n        }\n    \
    \    ArrayList<Long> tri1 = tri(n - 1l);\n        ArrayList<Long> tri2 = tri(n\
    \ - 2l);\n        ArrayList<Long> tri3 = tri(n - 3l);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbcx_79_4.java:41)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 1l) return\
    \ new ArrayList<Long>(Arrays.asList((long)1l));\n        if (n == 2l) return new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l));\n        if (n % 2 == 0l)\
    \ return tri(n - 1l).stream().flatMap(x -> tri(n - 2l).stream().map(y -> x + y)).collect(Collectors.toList());\n\
    \        else return tri(n - 1l).stream().flatMap(x -> tri(n - 2l).stream().flatMap(y\
    \ -> tri(n - 3l).stream().map(z -> x + y + z)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7m9t27u9.java:29: error: ')' expected\n        else return tri(n\
    \ - 1l).stream().flatMap(x -> tri(n - 2l).stream().flatMap(y -> tri(n - 3l).stream().map(z\
    \ -> x + y + z)).collect(Collectors.toList());\n                             \
    \                                                                            \
    \                                                     ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(1l);\n\
    \        third.add(1l);\n        long firstSum = first.get(0l);\n        long\
    \ secondSum = second.get(0l);\n        long thirdSum = third.get(0l);\n      \
    \  long sum;\n        if (n % 2 == 0) {\n            sum = firstSum + secondSum\
    \ + thirdSum;\n            third.add(sum);\n            secondSum = sum;\n   \
    \         thirdSum = sum;\n            firstSum = sum;\n        }\n        else\
    \ {\n            sum = firstSum + secondSum + thirdSum;\n            third.add(sum);\n\
    \            secondSum = sum;\n            thirdSum = sum;\n            firstSum\
    \ = sum;\n        }\n        third.add(sum);\n        secondSum = sum;\n     \
    \   thirdSum = sum;\n        firstSum = sum;\n        third.add(sum);\n      \
    \  secondSum = sum;\n        thirdSum = sum;\n        firstSum = sum;\n      \
    \  third.add(sum);\n        secondSum = sum;\n        thirdSum = sum;\n      \
    \  firstSum = sum;\n        third.add(sum);\n        secondSum = sum;\n      \
    \  thirdSum = sum;\n        firstSum = sum;\n        third.add(sum);\n       \
    \ secondSum = sum;\n        thirdSum = sum;\n        firstSum = sum;\n       \
    \ third.add(sum);\n        secondSum = sum;\n        thirdSum = sum;\n       \
    \ firstSum = sum;\n        third.add(sum);\n        secondSum = sum;\n       \
    \ thirdSum = sum;\n        firstSum = sum;\n        third.add(sum);\n        secondSum\
    \ = sum;\n        thirdSum = sum;\n        firstSum = sum;\n        third.add(sum);\n\
    \        secondSum = sum;\n        thirdSum = sum;\n        firstSum = sum;\n\
    \        third.add(sum);\n        secondSum = sum;\n        thirdSum = sum;\n\
    \        firstSum = sum;\n        third.add(sum);\n        secondSum = sum;\n\
    \        thirdSum = sum\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplywrg5h0.java:97: error: ';' expected\n        thirdSum = sum\n\
    \                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           return result;\n        }\n        if (n == 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpytk3e0p3.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpytk3e0p3.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n <= 1l) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1l));\n            result.add(tri(n - 2l));\n          \
    \  result.add(tri(n + 1l));\n            return result;\n        }\n        result.add(tri(n\
    \ - 1l));\n        result.add(tri(n - 2l));\n        result.add(tri(n + 1l));\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkl4r36q5.java:32: error: no suitable method found for add(ArrayList<Long>)\n\
    \            result.add(tri(n - 1l));\n                  ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\n    method ArrayList.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n/tmp/tmpkl4r36q5.java:33: error: no suitable method found for add(ArrayList<Long>)\n\
    \            result.add(tri(n - 2l));\n                  ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\n    method ArrayList.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n/tmp/tmpkl4r36q5.java:34: error: no suitable method found for add(ArrayList<Long>)\n\
    \            result.add(tri(n + 1l));\n                  ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applic"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 0) return new\
    \ ArrayList<Long>(Arrays.asList((long)1l));\n        if (n == 1) return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        if (n == 2) return new ArrayList<Long>(Arrays.asList((long)2l, (long)8l));\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        tri1.add(tri2.get(tri2.size() - 1) + tri3.get(tri3.size()\
    \ - 1));\n        result.addAll(tri1);\n        result.addAll(tri2);\n       \
    \ result.addAll(tri3);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl9nnzgtt.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0l);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7i9j0l36.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp7i9j0l36.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           result.add(1l);\n            return result;\n        }\n        if\
    \ (n > 0) {\n            ArrayList<Long> first = new ArrayList<>();\n        \
    \    ArrayList<Long> second = new ArrayList<>();\n            ArrayList<Long>\
    \ third = new ArrayList<>();\n            first.add(0l);\n            second.add(1l);\n\
    \            third.add(2l);\n            ArrayList<Long> fourth = new ArrayList<>();\n\
    \            fourth.add(3l);\n            ArrayList<Long> fifth = new ArrayList<>();\n\
    \            fifth.add(4l);\n            ArrayList<Long> sixth = new ArrayList<>();\n\
    \            sixth.add(5l);\n            ArrayList<Long> seventh = new ArrayList<>();\n\
    \            seventh.add(6l);\n            ArrayList<Long> eighth = new ArrayList<>();\n\
    \            eighth.add(7l);\n            ArrayList<Long> ninth = new ArrayList<>();\n\
    \            ninth.add(8l);\n            ArrayList<Long> tenth = new ArrayList<>();\n\
    \            tenth.add(9l);\n            ArrayList<Long> eleventh = new ArrayList<>();\n\
    \            eleventh.add(10l);\n            ArrayList<Long> twelfth = new ArrayList<>();\n\
    \            twelfth.add(11l);\n            ArrayList<Long> thirteenth = new ArrayList<>();\n\
    \            thirteenth.add(12l);\n            ArrayList<Long> fourteenth = new\
    \ ArrayList<>();\n            fourteenth.add(13l);\n            ArrayList<Long>\
    \ fifteenth = new ArrayList<>();\n            fifteenth.add(14l);\n          \
    \  ArrayList<Long> sixteenth = new ArrayList<>();\n            sixteenth.add(15l);\n\
    \            ArrayList<Long> seventeenth = new ArrayList<>();\n            seventeenth.add(16l);\n\
    \            ArrayList<Long> eighteenth = new ArrayList<>();\n            eighteenth.add(17l);\n\
    \            ArrayList<Long> nineteenth = new ArrayList<>();\n            nineteenth.add(18l);\n\
    \            ArrayList<Long> twentieth = new ArrayList<>();\n            twentieth.add(19l);\n\
    \            ArrayList<Long> twentyfirst = new ArrayList<>();\n            twentyfirst.add(20l);\n\
    \            ArrayList<Long> twentysecond = new ArrayList<>();\n            twentysecond.add(21l);\n\
    \            ArrayList<Long> twentythird = new ArrayList<>();\n            twentythird.add(22l);\n\
    \            ArrayList<Long> twentyfourth = new ArrayList<>();\n            twentyfourth.add(23l);\n\
    \            ArrayList<Long> twentyfifth = new ArrayList<>();\n            twentyfifth.add(24l);\n\
    \            ArrayList<Long\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwepqqci.java:84: error: > expected\n    }\n    ^\n/tmp/tmpkwepqqci.java:83:\
    \ error: not a statement\n            ArrayList<Long\n                     ^\n\
    /tmp/tmpkwepqqci.java:85: error: illegal start of expression\n    public static\
    \ void main(String[] args) {\n    ^\n/tmp/tmpkwepqqci.java:85: error: ';' expected\n\
    \    public static void main(String[] args) {\n          ^\n/tmp/tmpkwepqqci.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpkwepqqci.java:85: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpkwepqqci.java:85:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpkwepqqci.java:98: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyrtnjz5p.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyrtnjz5p.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = (long)3;\n        long tri2 = (long)1;\n\
    \        long tri3 = (long)2;\n        long tri4 = (long)3;\n        long tri5\
    \ = (long)1;\n        long tri6 = (long)2;\n        long tri7 = (long)3;\n   \
    \     long tri8 = (long)1;\n        long tri9 = (long)2;\n        long tri10 =\
    \ (long)3;\n        long tri11 = (long)1;\n        long tri12 = (long)2;\n   \
    \     long tri13 = (long)3;\n        long tri14 = (long)1;\n        long tri15\
    \ = (long)2;\n        long tri16 = (long)3;\n        long tri17 = (long)1;\n \
    \       long tri18 = (long)2;\n        long tri19 = (long)3;\n        long tri20\
    \ = (long)1;\n        long tri21 = (long)2;\n        long tri22 = (long)3;\n \
    \       long tri23 = (long)1;\n        long tri24 = (long)2;\n        long tri25\
    \ = (long)3;\n        long tri26 = (long)1;\n        long tri27 = (long)2;\n \
    \       long tri28 = (long)3;\n        long tri29 = (long)1;\n        long tri30\
    \ = (long)2;\n        long tri31 = (long)3;\n        long tri32 = (long)1;\n \
    \       long tri33 = (long)2;\n        long tri34 = (long)3;\n        long tri35\
    \ = (long)1;\n        long tri36 = (long)2;\n        long tri37 = (long)3;\n \
    \       long tri38 = (long)1;\n        long tri39 = (long)2;\n        long tri40\
    \ = (long)3;\n        long tri41 = (long)1;\n        long tri42 = (long)2;\n \
    \       long tri43 = (long)3;\n        long tri44 = (long)1;\n        long tri45\
    \ = (long)2;\n        long tri46 = (long)3;\n        long tri47 = (long)1;\n \
    \       long tri48 = (long)2;\n        long tri49 = (long)3;\n        long tri50\
    \ = (long)1;\n        long tri51 = (long)2;\n        long tri52 = (long)3;\n \
    \       long tri53 = (long)1;\n        long tri54 = (long)2;\n        long tri55\
    \ = (long)3;\n        long tri56 = (long)1;\n        long tri57 = (long)2;\n \
    \       long tri58 = (long)3;\n        long tri59 = (long)1;\n        long tri60\
    \ = (long)2;\n        long tri61 = (long)3;\n        long tri62 = (long)1;\n \
    \       long tri\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8ocwgxw.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        if (n % 2 == 0) {\n           \
    \ result.add(tri(n / 2));\n            result.add(tri(n / 2 + 1));\n        }\
    \ else {\n            result.add(tri(n / 2 + 1));\n            result.add(tri(n\
    \ / 2));\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw1ddh9rb.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            result.add(tri(n / 2));\n                \
    \          ^\n/tmp/tmpw1ddh9rb.java:33: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n / 2 + 1));\n     \
    \                     ^\n/tmp/tmpw1ddh9rb.java:35: error: incompatible types:\
    \ ArrayList<Long> cannot be converted to Long\n            result.add(tri(n /\
    \ 2 + 1));\n                          ^\n/tmp/tmpw1ddh9rb.java:36: error: incompatible\
    \ types: ArrayList<Long> cannot be converted to Long\n            result.add(tri(n\
    \ / 2));\n                          ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n <= 1) {\n            result.add(1l);\n\
    \            result.add(1l);\n            result.add(1l);\n            return\
    \ result;\n        }\n        ArrayList<Long> tri1 = tri(n - 1);\n        ArrayList<Long>\
    \ tri2 = tri(n - 2);\n        ArrayList<Long> tri3 = tri(n - 3);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppvqblsog.java:42)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1l) {\n            result.add(1l);\n\
    \            result.add(1l);\n            return result;\n        }\n        long\
    \ tri1 = tri(n - 1l);\n        long tri2 = tri(n - 2l);\n        long tri3 = tri(n\
    \ - 3l);\n        result.add(tri1);\n        result.add(tri2);\n        result.add(tri3);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn_fotkvu.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmpn_fotkvu.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmpn_fotkvu.java:34: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwchzi92p.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        ArrayList<Long> fourth\
    \ = new ArrayList<>();\n        ArrayList<Long> fifth = new ArrayList<>();\n \
    \       ArrayList<Long> sixth = new ArrayList<>();\n        ArrayList<Long> seventh\
    \ = new ArrayList<>();\n        ArrayList<Long> eighth = new ArrayList<>();\n\
    \        ArrayList<Long> ninth = new ArrayList<>();\n        ArrayList<Long> tenth\
    \ = new ArrayList<>();\n        ArrayList<Long> eleventh = new ArrayList<>();\n\
    \        ArrayList<Long> twelfth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirteenth = new ArrayList<>();\n        ArrayList<Long> fourteenth = new ArrayList<>();\n\
    \        ArrayList<Long> fifteenth = new ArrayList<>();\n        ArrayList<Long>\
    \ sixteenth = new ArrayList<>();\n        ArrayList<Long> seventeenth = new ArrayList<>();\n\
    \        ArrayList<Long> eighteenth = new ArrayList<>();\n        ArrayList<Long>\
    \ nineteenth = new ArrayList<>();\n        ArrayList<Long> twentieth = new ArrayList<>();\n\
    \        ArrayList<Long> twentyfirst = new ArrayList<>();\n        ArrayList<Long>\
    \ twentysecond = new ArrayList<>();\n        ArrayList<Long> twentythird = new\
    \ ArrayList<>();\n        ArrayList<Long> twentyfourth = new ArrayList<>();\n\
    \        ArrayList<Long> twentyfifth = new ArrayList<>();\n        ArrayList<Long>\
    \ twentysixth = new ArrayList<>();\n        ArrayList<Long> twentyseventh = new\
    \ ArrayList<>();\n        ArrayList<Long> twentyeighth = new ArrayList<>();\n\
    \        ArrayList<Long> twentyninth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtieth = new ArrayList<>();\n        ArrayList<Long> thirtyfirst = new ArrayList<>();\n\
    \        ArrayList<Long> thirtysecond = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtythird = new ArrayList<>();\n        ArrayList<Long> thirtyfourth = new\
    \ ArrayList<>();\n        ArrayList<Long> thirtyfifth = new ArrayList<>();\n \
    \       ArrayList<Long> thirtysixth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtyseventh = new ArrayList<>();\n        ArrayList<Long> thirtyeighth = new\
    \ ArrayList<>();\n        ArrayList<Long> thirtyninth = new ArrayList<>();\n \
    \       ArrayList<Long> fortieth = new ArrayList<>();\n        ArrayList<Long>\
    \ fortyfirst = new ArrayList<>();\n        ArrayList<Long> fortysecond = new ArrayList<>();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp54jb6rao.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1l);\n        ArrayList<Long> tri2 = tri(n - 2l);\n        ArrayList<Long> tri3\
    \ = tri(n - 3l);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcxj2asbh.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           result.add(1l);\n            result.add(1l);\n            return result;\n\
    \        }\n        ArrayList<Long> tri1 = tri(n - 1);\n        ArrayList<Long>\
    \ tri2 = tri(n - 2);\n        ArrayList<Long> tri3 = tri(n - 3);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps4tzs8ms.java:42)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwchzi92p.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = (long)3;\n        long tri2 = (long)1;\n\
    \        long tri3 = (long)2;\n        long tri4 = (long)3;\n        long tri5\
    \ = (long)1;\n        long tri6 = (long)2;\n        long tri7 = (long)3;\n   \
    \     long tri8 = (long)1;\n        long tri9 = (long)2;\n        long tri10 =\
    \ (long)3;\n        long tri11 = (long)1;\n        long tri12 = (long)2;\n   \
    \     long tri13 = (long)3;\n        long tri14 = (long)1;\n        long tri15\
    \ = (long)2;\n        long tri16 = (long)3;\n        long tri17 = (long)1;\n \
    \       long tri18 = (long)2;\n        long tri19 = (long)3;\n        long tri20\
    \ = (long)1;\n        long tri21 = (long)2;\n        long tri22 = (long)3;\n \
    \       long tri23 = (long)1;\n        long tri24 = (long)2;\n        long tri25\
    \ = (long)3;\n        long tri26 = (long)1;\n        long tri27 = (long)2;\n \
    \       long tri28 = (long)3;\n        long tri29 = (long)1;\n        long tri30\
    \ = (long)2;\n        long tri31 = (long)3;\n        long tri32 = (long)1;\n \
    \       long tri33 = (long)2;\n        long tri34 = (long)3;\n        long tri35\
    \ = (long)1;\n        long tri36 = (long)2;\n        long tri37 = (long)3;\n \
    \       long tri38 = (long)1;\n        long tri39 = (long)2;\n        long tri40\
    \ = (long)3;\n        long tri41 = (long)1;\n        long tri42 = (long)2;\n \
    \       long tri43 = (long)3;\n        long tri44 = (long)1;\n        long tri45\
    \ = (long)2;\n        long tri46 = (long)3;\n        long tri47 = (long)1;\n \
    \       long tri48 = (long)2;\n        long tri49 = (long)3;\n        long tri50\
    \ = (long)1;\n        long tri51 = (long)2;\n        long tri52 = (long)3;\n \
    \       long tri53 = (long)1;\n        long tri54 = (long)2;\n        long tri55\
    \ = (long)3;\n        long tri56 = (long)1;\n        long tri57 = (long)2;\n \
    \       long tri58 = (long)3;\n        long tri59 = (long)1;\n        long tri60\
    \ = (long)2;\n        long tri61 = (long)3;\n        long tri62 = (long)1;\n \
    \       long tri\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8ocwgxw.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(1l);\n\
    \        third.add(1l);\n        if (n % 2 == 0) {\n            third.add(1l);\n\
    \            third.add(1l);\n            third.add(1l);\n        }\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpor2g7z_c.java:102: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwchzi92p.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1l) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1l));\n            result.add(tri(n - 2l));\n          \
    \  result.add(tri(n + 1l));\n        } else {\n            result.add(tri(n -\
    \ 1l));\n            result.add(tri(n - 2l));\n            result.add(tri(n +\
    \ 1l));\n            result.add(tri(n - 1l));\n            result.add(tri(n -\
    \ 2l));\n            result.add(tri(n + 1l));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyfyxfdyk.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            result.add(tri(n - 1l));\n               \
    \           ^\n/tmp/tmpyfyxfdyk.java:33: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmpyfyxfdyk.java:34: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\n/tmp/tmpyfyxfdyk.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 1l));\n        \
    \                  ^\n/tmp/tmpyfyxfdyk.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmpyfyxfdyk.java:38: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\n/tmp/tmpyfyxfdyk.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 1l));\n        \
    \                  ^\n/tmp/tmpyfyxfdyk.java:40: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmpyfyxfdyk.java:41: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n9 errors\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n <= 1l) {\n            result.add(1l);\n\
    \            result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1l);\n        ArrayList<Long> tri2 = tri(n - 2l);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3l);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp60z5lblt.java:41)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n        long\
    \ c = 3;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n    \
    \    long g = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n\
    \        long k = 1;\n        long l = 1;\n        long m = 1;\n        long n\
    \ = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n      \
    \  long r = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n\
    \        long v = 1;\n        long w = 1;\n        long x = 1;\n        long y\
    \ = 1;\n        long z = 1;\n        long a = 1;\n        long b = 2;\n      \
    \  long c = 3;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n\
    \        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j\
    \ = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n      \
    \  long n = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n\
    \        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u\
    \ = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n      \
    \  long y = 1;\n        long z = 1;\n        long a = 1;\n        long b = 2;\n\
    \        long c = 3;\n        long d = 1;\n        long e = 1;\n        long f\
    \ = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n      \
    \  long j = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n\
    \        long n = 1;\n        long o = 1;\n        long p = 1;\n        long q\
    \ = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n      \
    \  long u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n\
    \        long y = 1;\n        long z = 1;\n        long a = 1;\n        long b\
    \ = 2;\n        long c = 3;\n        long d = 1;\n        long e = 1;\n      \
    \  long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m\
    \ = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n\
    \        long u = 1;\n        long v = 1;\n        long w\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphq4j7svy.java:127: error: ';' expected\n        long w\n      \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1659794568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n        long\
    \ c = 1;\n        long d = 1;\n        long temp;\n        long temp2;\n     \
    \   long temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n\
    \        long temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n\
    \        long temp11;\n        long temp12;\n        long temp13;\n        long\
    \ temp14;\n        long temp15;\n        long temp16;\n        long temp17;\n\
    \        long temp18;\n        long temp19;\n        long temp20;\n        long\
    \ temp21;\n        long temp22;\n        long temp23;\n        long temp24;\n\
    \        long temp25;\n        long temp26;\n        long temp27;\n        long\
    \ temp28;\n        long temp29;\n        long temp30;\n        long temp31;\n\
    \        long temp32;\n        long temp33;\n        long temp34;\n        long\
    \ temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n\
    \        long temp39;\n        long temp40;\n        long temp41;\n        long\
    \ temp42;\n        long temp43;\n        long temp44;\n        long temp45;\n\
    \        long temp46;\n        long temp47;\n        long temp48;\n        long\
    \ temp49;\n        long temp50;\n        long temp51;\n        long temp52;\n\
    \        long temp53;\n        long temp54;\n        long temp55;\n        long\
    \ temp56;\n        long temp57;\n        long temp58;\n        long temp59;\n\
    \        long temp60;\n        long temp61;\n        long temp62;\n        long\
    \ temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n\
    \        long temp67;\n        long temp68;\n        long temp69;\n        long\
    \ temp70;\n        long temp71;\n        long temp72;\n        long temp73;\n\
    \        long temp74;\n        long temp75;\n        long temp76;\n        long\
    \ temp77;\n        long temp78;\n        long temp79;\n        long temp80;\n\
    \        long temp81;\n        long temp82;\n        long temp83;\n        long\
    \ temp84;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppmfknovm.java:115: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 0) {\n    \
    \        return new ArrayList<Long>(Arrays.asList((long)0l));\n        }\n   \
    \     if (n == 1) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.java:33)\n\tat Problem.tri(tmpyg_d6h2i.java:33)\n\
    \tat Problem.tri(tmpyg_d6h2i.jav"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 3) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        long tri1 = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1);\n        long tri2 = tri(n - 3) + tri(n - 2) + tri(n - 1);\n\
    \        result.add(tri1);\n        result.add(tri2);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt5x2nsiz.java:34: error: bad operand types for binary operator\
    \ '+'\n        long tri1 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n           \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpt5x2nsiz.java:35: error: bad operand types for binary operator '+'\n \
    \       long tri2 = tri(n - 3) + tri(n - 2) + tri(n - 1);\n                  \
    \             ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwchzi92p.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           result.add(n + 1l);\n            return result;\n        }\n     \
    \   ArrayList<Long> first = new ArrayList<>();\n        ArrayList<Long> second\
    \ = new ArrayList<>();\n        ArrayList<Long> third = new ArrayList<>();\n \
    \       first.add(1l);\n        second.add(1l);\n        third.add(1l);\n    \
    \    if (n % 2 == 0) {\n            third.add(n / 2l);\n        }\n        else\
    \ {\n            third.add(n - 1l);\n            third.add(n + 2l);\n        }\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzv0phnq0.java:103: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwchzi92p.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           result.add(1l);\n            result.add(0l);\n            return result;\n\
    \        }\n        if (n > 0) {\n            result.add(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp26ettjkv.java:34: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n1 error\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           result.add(1l);\n            return result;\n        }\n        if\
    \ (n <= 3) {\n            result.add(0l);\n            result.add(1l);\n     \
    \       result.add(2l);\n            return result;\n        }\n        long a\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result.add(a);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4yrwgxw_.java:38: error: bad operand types for binary operator\
    \ '+'\n        long a = tri(n - 1) + tri(n - 2) + tri(n + 1);\n              \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = (long)3;\n        long tri2 = (long)1;\n\
    \        long tri3 = (long)2;\n        long tri4 = (long)3;\n        long tri5\
    \ = (long)4;\n        long tri6 = (long)5;\n        long tri7 = (long)6;\n   \
    \     long tri8 = (long)7;\n        long tri9 = (long)8;\n        long tri10 =\
    \ (long)9;\n        long tri11 = (long)10;\n        long tri12 = (long)11;\n \
    \       long tri13 = (long)12;\n        long tri14 = (long)13;\n        long tri15\
    \ = (long)14;\n        long tri16 = (long)15;\n        long tri17 = (long)16;\n\
    \        long tri18 = (long)17;\n        long tri19 = (long)18;\n        long\
    \ tri20 = (long)19;\n        long tri21 = (long)20;\n        long tri22 = (long)21;\n\
    \        long tri23 = (long)22;\n        long tri24 = (long)23;\n        long\
    \ tri25 = (long)24;\n        long tri26 = (long)25;\n        long tri27 = (long)26;\n\
    \        long tri28 = (long)27;\n        long tri29 = (long)28;\n        long\
    \ tri30 = (long)29;\n        long tri31 = (long)30;\n        long tri32 = (long)31;\n\
    \        long tri33 = (long)32;\n        long tri34 = (long)33;\n        long\
    \ tri35 = (long)34;\n        long tri36 = (long)35;\n        long tri37 = (long)36;\n\
    \        long tri38 = (long)37;\n        long tri39 = (long)38;\n        long\
    \ tri40 = (long)39;\n        long tri41 = (long)40;\n        long tri42 = (long)41;\n\
    \        long tri43 = (long)42;\n        long tri44 = (long)43;\n        long\
    \ tri45 = (long)44;\n        long tri46 = (long)45;\n        long tri47 = (long)46;\n\
    \        long tri48 = (long)47;\n        long tri49 = (long)48;\n        long\
    \ tri50 = (long)49;\n        long tri51 = (long)50;\n        long tri52 = (long)51;\n\
    \        long tri53 = (long)52;\n        long tri54 = (long)53;\n        long\
    \ tri55 = (long)54;\n        long tri56 = (long)55;\n        long tri57 = (long)56;\n\
    \        long tri58 = (long)57\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptsckzgjc.java:84: error: ';' expected\n        long tri58 = (long)57\n\
    \                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659794568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n <= 3) {\n            result.add(1l);\n\
    \            result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        long tri1 = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1);\n        if (n % 2 == 0) {\n            result.add(tri1);\n\
    \        } else {\n            result.add(tri1 + tri(n - 1));\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_d3hh3d.java:34: error: bad operand types for binary operator\
    \ '+'\n        long tri1 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n           \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpa_d3hh3d.java:38: error: bad operand types for binary operator '+'\n \
    \           result.add(tri1 + tri(n - 1));\n                            ^\n  first\
    \ type:  long\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n <= 1l) return\
    \ new ArrayList<Long>(Arrays.asList((long)1l));\n        if (n <= 3l) return new\
    \ ArrayList<Long>(Arrays.asList((long)3l));\n        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        long tri1 = tri(n - 1l);\n        long tri2\
    \ = tri(n - 2l);\n        long tri3 = tri(n - 3l);\n        result.add(tri1);\n\
    \        result.add(tri2);\n        result.add(tri3);\n        result.add(tri1\
    \ + tri2 + tri3);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnz_kbckl.java:29: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmpnz_kbckl.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmpnz_kbckl.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 1l) {\n            result.add(1l);\n\
    \            result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1l));\n            result.add(tri(n - 2l));\n          \
    \  result.add(tri(n + 1l));\n        } else {\n            result.add(tri(n -\
    \ 1l));\n            result.add(tri(n - 2l));\n            result.add(tri(n +\
    \ 1l));\n            result.add(tri(n - 1l));\n            result.add(tri(n -\
    \ 2l));\n            result.add(tri(n + 1l));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_o_1xxg.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            result.add(tri(n - 1l));\n               \
    \           ^\n/tmp/tmph_o_1xxg.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmph_o_1xxg.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\n/tmp/tmph_o_1xxg.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 1l));\n        \
    \                  ^\n/tmp/tmph_o_1xxg.java:40: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmph_o_1xxg.java:41: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\n/tmp/tmph_o_1xxg.java:42: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 1l));\n        \
    \                  ^\n/tmp/tmph_o_1xxg.java:43: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmph_o_1xxg.java:44: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n9 errors\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 1) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \        } else {\n            long tri1 = tri(n - 1);\n            long tri2\
    \ = tri(n - 2);\n            long tri3 = tri(n - 3);\n            result.add(tri1);\n\
    \            result.add(tri2);\n            result.add(tri3);\n            result.add(tri1\
    \ + tri2 + tri3);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjsd0z5ws.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long tri1 = tri(n - 1);\n                \
    \           ^\n/tmp/tmpjsd0z5ws.java:34: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri2 = tri(n - 2);\n         \
    \                  ^\n/tmp/tmpjsd0z5ws.java:35: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri3 = tri(n - 3);\n         \
    \                  ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        if (n % 2 == 0) {\n           \
    \ result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n      \
    \      result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4));\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkr9g48dz.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpkr9g48dz.java:34: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n                                  ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwchzi92p.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n  \
    \          return result;\n        }\n        ArrayList<Long> tri1 = tri(n - 1);\n\
    \        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3 = tri(n\
    \ - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n        result.addAll(tri3);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7vcmyt8g.java:40)\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwchzi92p.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = (long)3;\n        long tri2 = (long)1;\n\
    \        long tri3 = (long)2;\n        long tri4 = (long)3;\n        long tri5\
    \ = (long)1;\n        long tri6 = (long)2;\n        long tri7 = (long)3;\n   \
    \     long tri8 = (long)1;\n        long tri9 = (long)2;\n        long tri10 =\
    \ (long)3;\n        long tri11 = (long)1;\n        long tri12 = (long)2;\n   \
    \     long tri13 = (long)3;\n        long tri14 = (long)1;\n        long tri15\
    \ = (long)2;\n        long tri16 = (long)3;\n        long tri17 = (long)1;\n \
    \       long tri18 = (long)2;\n        long tri19 = (long)3;\n        long tri20\
    \ = (long)1;\n        long tri21 = (long)2;\n        long tri22 = (long)3;\n \
    \       long tri23 = (long)1;\n        long tri24 = (long)2;\n        long tri25\
    \ = (long)3;\n        long tri26 = (long)1;\n        long tri27 = (long)2;\n \
    \       long tri28 = (long)3;\n        long tri29 = (long)1;\n        long tri30\
    \ = (long)2;\n        long tri31 = (long)3;\n        long tri32 = (long)1;\n \
    \       long tri33 = (long)2;\n        long tri34 = (long)3;\n        long tri35\
    \ = (long)1;\n        long tri36 = (long)2;\n        long tri37 = (long)3;\n \
    \       long tri38 = (long)1;\n        long tri39 = (long)2;\n        long tri40\
    \ = (long)3;\n        long tri41 = (long)1;\n        long tri42 = (long)2;\n \
    \       long tri43 = (long)3;\n        long tri44 = (long)1;\n        long tri45\
    \ = (long)2;\n        long tri46 = (long)3;\n        long tri47 = (long)1;\n \
    \       long tri48 = (long)2;\n        long tri49 = (long)3;\n        long tri50\
    \ = (long)1;\n        long tri51 = (long)2;\n        long tri52 = (long)3;\n \
    \       long tri53 = (long)1;\n        long tri54 = (long)2;\n        long tri55\
    \ = (long)3;\n        long tri56 = (long)1;\n        long tri57 = (long)2;\n \
    \       long tri58 = (long)3;\n        long tri59 = (long)1;\n        long tri60\
    \ = (long)2;\n        long tri61 = (long)3;\n        long tri62 = (long)1;\n \
    \       long tri\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8ocwgxw.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n        long\
    \ c = 1;\n        long d = 1;\n        long temp;\n        for(int i = 1; i <=\
    \ n; i++) {\n            temp = a + b + c + d;\n            a = b;\n         \
    \   b = c;\n            c = d;\n            d = temp;\n            result.add(temp);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps_jd9_4p.java:43)\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1l) {\n            result.add(1l);\n\
    \            result.add(1l);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.add(tri(n - 1l));\n            result.add(tri(n\
    \ - 2l));\n            result.add(tri(n + 1l));\n        } else {\n          \
    \  result.add(tri(n - 1l));\n            result.add(tri(n - 2l));\n          \
    \  result.add(tri(n + 1l));\n            result.add(tri(n - 1l));\n          \
    \  result.add(tri(n - 2l));\n            result.add(tri(n + 1l));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptjym2alp.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            result.add(tri(n - 1l));\n               \
    \           ^\n/tmp/tmptjym2alp.java:34: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmptjym2alp.java:35: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\n/tmp/tmptjym2alp.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 1l));\n        \
    \                  ^\n/tmp/tmptjym2alp.java:38: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmptjym2alp.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\n/tmp/tmptjym2alp.java:40: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 1l));\n        \
    \                  ^\n/tmp/tmptjym2alp.java:41: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmptjym2alp.java:42: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n9 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n <= 1l) {\n   \
    \         return new ArrayList<Long>(Arrays.asList((long)1l));\n        }\n  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        long tri1 = tri(n\
    \ - 1l);\n        long tri2 = tri(n - 2l);\n        long tri3 = tri(n - 3l);\n\
    \        result.add((long) tri1);\n        result.add((long) tri2);\n        result.add((long)\
    \ tri3);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ud7k1f6.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmp0ud7k1f6.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmp0ud7k1f6.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n        long\
    \ c = 3;\n        long d = 4;\n        long e = 5;\n        long f = 1;\n    \
    \    long g = 2;\n        long h = 3;\n        long i = 1;\n        long j = 2;\n\
    \        long k = 3;\n        long l = 1;\n        long m = 2;\n        long n\
    \ = 1;\n        long o = 2;\n        long p = 1;\n        long q = 3;\n      \
    \  long r = 1;\n        long s = 2;\n        long t = 1;\n        long u = 2;\n\
    \        long v = 3;\n        long w = 1;\n        long x = 2;\n        long y\
    \ = 1;\n        long z = 3;\n        long a = 1;\n        long b = 2;\n      \
    \  long c = 3;\n        long d = 4;\n        long e = 5;\n        long f = 1;\n\
    \        long g = 2;\n        long h = 3;\n        long i = 1;\n        long j\
    \ = 2;\n        long k = 3;\n        long l = 1;\n        long m = 2;\n      \
    \  long n = 1;\n        long o = 2;\n        long p = 1;\n        long q = 3;\n\
    \        long r = 1;\n        long s = 2;\n        long t = 1;\n        long u\
    \ = 2;\n        long v = 3;\n        long w = 1;\n        long x = 2;\n      \
    \  long y = 1;\n        long z = 3;\n        long a = 1;\n        long b = 2;\n\
    \        long c = 3;\n        long d = 4;\n        long e = 5;\n        long f\
    \ = 1;\n        long g = 2;\n        long h = 3;\n        long i = 1;\n      \
    \  long j = 2;\n        long k = 3;\n        long l = 1;\n        long m = 2;\n\
    \        long n = 1;\n        long o = 2;\n        long p = 1;\n        long q\
    \ = 3;\n        long r = 1;\n        long s = 2;\n        long t = 1;\n      \
    \  long u = 2;\n        long v = 3;\n        long w = 1;\n        long x = 2;\n\
    \        long y = 1;\n        long z = 3;\n        long a = 1;\n        long b\
    \ = 2;\n        long c = 3;\n        long d = 4;\n        long e = 5;\n      \
    \  long f = 1;\n        long g = 2;\n        long h = 3;\n        long i = 1;\n\
    \        long j = 2;\n        long k = 3;\n        long l = 1;\n        long m\
    \ = 2;\n        long n = 1;\n        long o = 2;\n        long p = 1;\n      \
    \  long q = 3;\n        long r = 1;\n        long s = 2;\n        long t = 1;\n\
    \        long u = 2;\n        long v = 3;\n        long w\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxgcgcdkx.java:127: error: ';' expected\n        long w\n      \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           return result;\n        }\n        if (n == 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long a = tri(n - 1l);\n            long b = tri(n - 2l);\n            result.add(a);\n\
    \            result.add(b);\n            result.add(a + b);\n        } else {\n\
    \            long a = tri(n - 1l);\n            long b = tri(n - 2l);\n      \
    \      result.add(a);\n            result.add(b);\n            result.add(a +\
    \ b);\n            result.add(b + a);\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbz0rtvgu.java:36: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long a = tri(n - 1l);\n                  \
    \      ^\n/tmp/tmpbz0rtvgu.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long b = tri(n - 2l);\n           \
    \             ^\n/tmp/tmpbz0rtvgu.java:42: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long a = tri(n - 1l);\n           \
    \             ^\n/tmp/tmpbz0rtvgu.java:43: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long b = tri(n - 2l);\n           \
    \             ^\n4 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           result.add(1l);\n            return result;\n        }\n        if\
    \ (n > 0) {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmyg4skgo.java:33: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n1 error\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n  \
    \          return result;\n        }\n        ArrayList<Long> tri1 = tri(n - 1);\n\
    \        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3 = tri(n\
    \ - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n        result.addAll(tri3);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7vcmyt8g.java:40)\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 3) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        long tri1 = tri(n - 1);\n    \
    \    long tri2 = tri(n - 2);\n        long tri3 = tri(n + 1);\n        result.add(tri1);\n\
    \        result.add(tri2);\n        result.add(tri3);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphbzyhl6v.java:34: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1);\n                    \
    \   ^\n/tmp/tmphbzyhl6v.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2);\n                    \
    \   ^\n/tmp/tmphbzyhl6v.java:36: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n + 1);\n                    \
    \   ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 1l) {\n            result.add(1l);\n\
    \            result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1l));\n            result.add(tri(n - 2l));\n          \
    \  result.add(tri(n + 1l));\n        } else {\n            result.add(tri(n -\
    \ 1l));\n            result.add(tri(n - 2l));\n            result.add(tri(n +\
    \ 1l));\n            result.add(tri(n - 1l));\n            result.add(tri(n -\
    \ 2l));\n            result.add(tri(n + 1l));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_o_1xxg.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            result.add(tri(n - 1l));\n               \
    \           ^\n/tmp/tmph_o_1xxg.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmph_o_1xxg.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\n/tmp/tmph_o_1xxg.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 1l));\n        \
    \                  ^\n/tmp/tmph_o_1xxg.java:40: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmph_o_1xxg.java:41: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\n/tmp/tmph_o_1xxg.java:42: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 1l));\n        \
    \                  ^\n/tmp/tmph_o_1xxg.java:43: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmph_o_1xxg.java:44: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n9 errors\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(2l);\n\
    \        third.add(3l);\n        if (n % 2 == 0) {\n            third.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n            third.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4));\n        }\n    \
    \    result.addAll(first);\n        result.addAll(second);\n        result.addAll(third);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3zywltul.java:38: error: bad operand types for binary operator\
    \ '+'\n            third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        \
    \                         ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp3zywltul.java:40: error: bad operand types for binary operator '+'\n \
    \           third.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4));\n                                 ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n <= 1l) {\n   \
    \         return new ArrayList<Long>(Arrays.asList((long)1l));\n        }\n  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        long tri1 = tri(n\
    \ - 1l);\n        long tri2 = tri(n - 2l);\n        long tri3 = tri(n - 3l);\n\
    \        result.add(tri1);\n        result.add(tri2);\n        result.add(tri3);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfe6zvrvl.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmpfe6zvrvl.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmpfe6zvrvl.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 0) return new\
    \ ArrayList<Long>(Arrays.asList((long)1l));\n        if (n == 1) return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n      \
    \  else return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4);\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzbl7m4_h.java:28: error: bad operand types for binary operator\
    \ '+'\n        if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \                                          ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpzbl7m4_h.java:29: error: bad operand\
    \ types for binary operator '+'\n        else return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n - 3) + tri(n - 4);\n                               ^\n  first\
    \ type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 3) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \        } else {\n            long tri1 = tri(n - 1);\n            long tri2\
    \ = tri(n - 2);\n            long tri3 = tri(n + 1);\n            result.add(tri1);\n\
    \            result.add(tri2);\n            result.add(tri3);\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp7gdesm7.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long tri1 = tri(n - 1);\n                \
    \           ^\n/tmp/tmpp7gdesm7.java:34: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri2 = tri(n - 2);\n         \
    \                  ^\n/tmp/tmpp7gdesm7.java:35: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri3 = tri(n + 1);\n         \
    \                  ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(1l);\n\
    \        third.add(1l);\n        if (n % 2 == 0) {\n            third.add(1l);\n\
    \            third.add(1l);\n        }\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf__kv3ht.java:102: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1l) {\n            result.add(1l);\n\
    \            result.add(n + 1l);\n            return result;\n        }\n    \
    \    ArrayList<Long> first = new ArrayList<>();\n        ArrayList<Long> second\
    \ = new ArrayList<>();\n        ArrayList<Long> third = new ArrayList<>();\n \
    \       first.add(1l);\n        second.add(1l);\n        third.add(1l);\n    \
    \    if (n % 2 == 0) {\n            third.add(n / 2l);\n        }\n        third.add(n\
    \ / 2l);\n        third.add(n / 2l);\n        third.add(n / 2l);\n        third.add(n\
    \ / 2l);\n        third.add(n / 2l);\n        third.add(n / 2l);\n        third.add(n\
    \ / 2l);\n        third.add(n / 2l);\n        third.add(n / 2l);\n        third.add(n\
    \ / 2l);\n        third.add(n / 2l);\n        third.add(n / 2l);\n        third.add(n\
    \ / 2l);\n        third.add(n / 2l);\n        third.add(n / 2l);\n        third.add(n\
    \ / 2l);\n        third.add(n / 2l);\n        third.add(n / 2l);\n        third.add(n\
    \ / 2l);\n        third.add(n / 2l);\n        third.add(n / 2l);\n        third.add(n\
    \ / 2l);\n        third.add(n / 2l);\n        third.add(n / 2l);\n        third.add(n\
    \ / 2l);\n        third.add(n / 2l);\n        third.add(n / 2l);\n        third.add(n\
    \ / 2l);\n        third.add(n / 2l);\n        third.add(n / 2l);\n        third.add(n\
    \ / 2l);\n        third.add(n / 2l);\n        third.add(n / 2l);\n        third.add(n\
    \ / 2l);\n        third.add(n / 2l);\n        third.add(n / 2l);\n        third.add(n\
    \ / 2l);\n        third.add(n / 2l);\n        third.add(n / 2l);\n        third.add(n\
    \ / 2l);\n        third.add(n / 2l);\n        third.add(n / 2l);\n        third.add(n\
    \ / 2l);\n        third.add(n / 2l);\n        third.add(n / 2l);\n        third.add(n\
    \ / 2l);\n        third.add(\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0mbx9xdf.java:88: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 3) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(3l);\n\
    \        third.add(2l);\n        third.add(8l);\n        ArrayList<Long> fourth\
    \ = new ArrayList<>();\n        fourth.add(first);\n        fourth.add(second);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        ArrayList<Long>\
    \ fifth = new ArrayList<>();\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fif\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpecpkh99c.java:93: error: not a statement\n        fif\n       \
    \ ^\n/tmp/tmpecpkh99c.java:93: error: ';' expected\n        fif\n           ^\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 0) return new\
    \ ArrayList<Long>(Arrays.asList((long)1l));\n        if (n == 1) return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n      \
    \  else return tri(n - 1) + tri(n - 2) + tri(n + 1);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi0p7yut8.java:28: error: bad operand types for binary operator\
    \ '+'\n        if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n\
    \                                          ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpi0p7yut8.java:29: error: bad operand\
    \ types for binary operator '+'\n        else return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1);\n                               ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 3) {\n            result.add(n);\n  \
    \          return result;\n        }\n        long tri1 = tri(n - 1);\n      \
    \  long tri2 = tri(n - 2);\n        long tri3 = tri(n - 3);\n        result.add(tri1);\n\
    \        result.add(tri2);\n        result.add(tri3);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzzc4z6qj.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1);\n                    \
    \   ^\n/tmp/tmpzzc4z6qj.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2);\n                    \
    \   ^\n/tmp/tmpzzc4z6qj.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3);\n                    \
    \   ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n <= 1l) {\n   \
    \         return new ArrayList<Long>(Arrays.asList((long)1l));\n        }\n  \
    \      if (n % 2l == 0l) {\n            return tri(n - 1l).stream().map(x -> x\
    \ + n).collect(Collectors.toList());\n        } else {\n            return tri(n\
    \ - 1l).stream().map(x -> x + n).collect(Collectors.toList()).stream().map(x ->\
    \ x + n).collect(Collectors.toList());\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiqz3u640.java:30: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            return tri(n - 1l).stream().map(x ->\
    \ x + n).collect(Collectors.toList());\n                                     \
    \                          ^\n    equality constraints: List<T#2>\n    lower bounds:\
    \ ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n    R extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1\
    \ extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n/tmp/tmpiqz3u640.java:32: error: incompatible types:\
    \ inference variable R has incompatible bounds\n            return tri(n - 1l).stream().map(x\
    \ -> x + n).collect(Collectors.toList()).stream().map(x -> x + n).collect(Collectors.toList());\n\
    \                                                                            \
    \                                         ^\n    equality constraints: List<T#2>\n\
    \    lower bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n\
    \    R extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n2 errors\n"
  stdout: ''
  timestamp: 1659794571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1l) {\n            result.add(1l);\n\
    \            result.add(n + 1l);\n            return result;\n        }\n    \
    \    ArrayList<Long> tri1 = tri(n - 1l);\n        ArrayList<Long> tri2 = tri(n\
    \ - 2l);\n        ArrayList<Long> tri3 = tri(n - 3l);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphmvej4ke.java:41)\n"
  stdout: ''
  timestamp: 1659794571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long tri1 = (long)3;\n        long tri2 =\
    \ (long)1;\n        long tri3 = (long)2;\n        long tri4 = (long)3;\n     \
    \   long tri5 = (long)1;\n        long tri6 = (long)2;\n        long tri7 = (long)3;\n\
    \        long tri8 = (long)1;\n        long tri9 = (long)2;\n        long tri10\
    \ = (long)3;\n        long tri11 = (long)1;\n        long tri12 = (long)2;\n \
    \       long tri13 = (long)3;\n        long tri14 = (long)1;\n        long tri15\
    \ = (long)2;\n        long tri16 = (long)3;\n        long tri17 = (long)1;\n \
    \       long tri18 = (long)2;\n        long tri19 = (long)3;\n        long tri20\
    \ = (long)1;\n        long tri21 = (long)2;\n        long tri22 = (long)3;\n \
    \       long tri23 = (long)1;\n        long tri24 = (long)2;\n        long tri25\
    \ = (long)3;\n        long tri26 = (long)1;\n        long tri27 = (long)2;\n \
    \       long tri28 = (long)3;\n        long tri29 = (long)1;\n        long tri30\
    \ = (long)2;\n        long tri31 = (long)3;\n        long tri32 = (long)1;\n \
    \       long tri33 = (long)2;\n        long tri34 = (long)3;\n        long tri35\
    \ = (long)1;\n        long tri36 = (long)2;\n        long tri37 = (long)3;\n \
    \       long tri38 = (long)1;\n        long tri39 = (long)2;\n        long tri40\
    \ = (long)3;\n        long tri41 = (long)1;\n        long tri42 = (long)2;\n \
    \       long tri43 = (long)3;\n        long tri44 = (long)1;\n        long tri45\
    \ = (long)2;\n        long tri46 = (long)3;\n        long tri47 = (long)1;\n \
    \       long tri48 = (long)2;\n        long tri49 = (long)3;\n        long tri50\
    \ = (long)1;\n        long tri51 = (long)2;\n        long tri52 = (long)3;\n \
    \       long tri53 = (long)1;\n        long tri54 = (long)2;\n        long tri55\
    \ = (long)3;\n        long tri56 = (long)1;\n        long tri57 = (long)2;\n \
    \       long tri58 = (long)3;\n        long tri59 = (long)1;\n        long tri60\
    \ = (long)2;\n        long tri61 = (long)3;\n        long tri62 = (long)1;\n \
    \       long \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpviz5uw70.java:89: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpviz5uw70.java:89: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwchzi92p.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n <= 1l) {\n   \
    \         return new ArrayList<Long>(Arrays.asList((long)1l));\n        }\n  \
    \      if (n % 2l == 0l) {\n            return new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1l), (long)tri(n - 2l), (long)tri(n + 1l)));\n        }\n        return new\
    \ ArrayList<Long>(Arrays.asList((long)tri(n - 1l), (long)tri(n - 2l), (long)tri(n\
    \ + 1l), (long)tri(n - 3l)));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3st2_0rz.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            return new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1l), (long)tri(n - 2l), (long)tri(n + 1l)));\n                           \
    \                                   ^\n/tmp/tmp3st2_0rz.java:30: error: incompatible\
    \ types: ArrayList<Long> cannot be converted to long\n            return new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1l), (long)tri(n - 2l), (long)tri(n + 1l)));\n                           \
    \                                                      ^\n/tmp/tmp3st2_0rz.java:30:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         return new ArrayList<Long>(Arrays.asList((long)tri(n - 1l), (long)tri(n\
    \ - 2l), (long)tri(n + 1l)));\n                                              \
    \                                                      ^\n/tmp/tmp3st2_0rz.java:32:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \     return new ArrayList<Long>(Arrays.asList((long)tri(n - 1l), (long)tri(n\
    \ - 2l), (long)tri(n + 1l), (long)tri(n - 3l)));\n                           \
    \                               ^\n/tmp/tmp3st2_0rz.java:32: error: incompatible\
    \ types: ArrayList<Long> cannot be converted to long\n        return new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1l), (long)tri(n - 2l), (long)tri(n + 1l), (long)tri(n - 3l)));\n        \
    \                                                                     ^\n/tmp/tmp3st2_0rz.java:32:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \     return new ArrayList<Long>(Arrays.asList((long)tri(n - 1l), (long)tri(n\
    \ - 2l), (long)tri(n + 1l), (long)tri(n - 3l)));\n                           \
    \                                                                     ^\n/tmp/tmp3st2_0rz.java:32:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \     return new ArrayList<Long>(Arrays.asList((long)tri(n - 1l), (long)tri(n\
    \ - 2l), (long)tri(n + 1l), (long)tri(n - 3l)));\n                           \
    \            "
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n <= 3) {\n    \
    \        return new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l,\
    \ (long)n));\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long tri1 = tri(n - 1);\n        long tri2 = tri(n - 2);\n        long\
    \ tri3 = tri(n - 3);\n        result.add(tri1);\n        result.add(tri2);\n \
    \       result.add(tri3);\n        result.add(tri1 + tri2 + tri3);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcoxoeqb.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1);\n                    \
    \   ^\n/tmp/tmphcoxoeqb.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2);\n                    \
    \   ^\n/tmp/tmphcoxoeqb.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3);\n                    \
    \   ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        ArrayList<Long> tri4 = tri(n - 4);\n        ArrayList<Long>\
    \ tri5 = tri(n - 5);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        result.addAll(tri4);\n        result.addAll(tri5);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd71videq.java:44)\n"
  stdout: ''
  timestamp: 1659794571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           return result;\n        }\n        if (n == 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        ArrayList<Long> fourth = new ArrayList<>();\n\
    \        ArrayList<Long> fifth = new ArrayList<>();\n        ArrayList<Long> sixth\
    \ = new ArrayList<>();\n        ArrayList<Long> seventh = new ArrayList<>();\n\
    \        ArrayList<Long> eighth = new ArrayList<>();\n        ArrayList<Long>\
    \ ninth = new ArrayList<>();\n        ArrayList<Long> tenth = new ArrayList<>();\n\
    \        ArrayList<Long> eleventh = new ArrayList<>();\n        ArrayList<Long>\
    \ twelfth = new ArrayList<>();\n        ArrayList<Long> thirteenth = new ArrayList<>();\n\
    \        ArrayList<Long> fourteenth = new ArrayList<>();\n        ArrayList<Long>\
    \ fifteenth = new ArrayList<>();\n        ArrayList<Long> sixteenth = new ArrayList<>();\n\
    \        ArrayList<Long> seventeenth = new ArrayList<>();\n        ArrayList<Long>\
    \ eighteenth = new ArrayList<>();\n        ArrayList<Long> nineteenth = new ArrayList<>();\n\
    \        ArrayList<Long> twentieth = new ArrayList<>();\n        ArrayList<Long>\
    \ twentyfirst = new ArrayList<>();\n        ArrayList<Long> twentysecond = new\
    \ ArrayList<>();\n        ArrayList<Long> twentythird = new ArrayList<>();\n \
    \       ArrayList<Long> twentyfourth = new ArrayList<>();\n        ArrayList<Long>\
    \ twentyfifth = new ArrayList<>();\n        ArrayList<Long> twentysixth = new\
    \ ArrayList<>();\n        ArrayList<Long> twentyseventh = new ArrayList<>();\n\
    \        ArrayList<Long> twentyeighth = new ArrayList<>();\n        ArrayList<Long>\
    \ twentyninth = new ArrayList<>();\n        ArrayList<Long> thirtieth = new ArrayList<>();\n\
    \        ArrayList<Long> thirtyfirst = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtysecond = new ArrayList<>();\n        ArrayList<Long> thirtythird = new\
    \ ArrayList<>();\n        ArrayList<Long> thirtyfourth = new ArrayList<>();\n\
    \        ArrayList<Long> thirtyfifth = new ArrayList<>();\n        ArrayList<Long>\
    \ thirtysixth = new ArrayList<>();\n        ArrayList<Long> thirtyseventh = new\
    \ ArrayList<>();\n        ArrayList<Long> thirtyeighth = new ArrayList<>();\n\
    \        ArrayList<Long> thirtyninth = new ArrayList<>();\n        ArrayList<Long>\
    \ fortieth = new ArrayList<>();\n        ArrayList<Long> fortyfirst = new ArrayList<>();\n\
    \        ArrayList<\n    }\n    public static void main(String[] args) {\n   \
    \ assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fc621kf.java:77: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp7fc621kf.java:76: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           result.add(1l);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0l);\n            return result;\n      \
    \  }\n        if (n % 2 == 0) {\n            long tri1 = tri(n - 1);\n       \
    \     long tri2 = tri(n - 2);\n            long tri3 = tri(n + 1);\n         \
    \   result.add(tri1);\n            result.add(tri2);\n            result.add(tri3);\n\
    \            return result;\n        }\n        long tri1 = tri(n - 1);\n    \
    \    long tri2 = tri(n - 2);\n        result.add(tri1);\n        result.add(tri2);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph6sbqfr2.java:37: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long tri1 = tri(n - 1);\n                \
    \           ^\n/tmp/tmph6sbqfr2.java:38: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri2 = tri(n - 2);\n         \
    \                  ^\n/tmp/tmph6sbqfr2.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri3 = tri(n + 1);\n         \
    \                  ^\n/tmp/tmph6sbqfr2.java:45: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n        long tri1 = tri(n - 1);\n             \
    \          ^\n/tmp/tmph6sbqfr2.java:46: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n        long tri2 = tri(n - 2);\n             \
    \          ^\n5 errors\n"
  stdout: ''
  timestamp: 1659794571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwchzi92p.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwchzi92p.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n        long\
    \ c = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n    \
    \    long g = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n\
    \        long k = 1;\n        long l = 1;\n        long m = 1;\n        long n\
    \ = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n      \
    \  long r = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n\
    \        long v = 1;\n        long w = 1;\n        long x = 1;\n        long y\
    \ = 1;\n        long z = 1;\n        long a = 1;\n        long b = 2;\n      \
    \  long c = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n\
    \        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j\
    \ = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n      \
    \  long n = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n\
    \        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u\
    \ = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n      \
    \  long y = 1;\n        long z = 1;\n        long a = 1;\n        long b = 2;\n\
    \        long c = 1;\n        long d = 1;\n        long e = 1;\n        long f\
    \ = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n      \
    \  long j = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n\
    \        long n = 1;\n        long o = 1;\n        long p = 1;\n        long q\
    \ = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n      \
    \  long u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n\
    \        long y = 1;\n        long z = 1;\n        long a = 1;\n        long b\
    \ = 2;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n      \
    \  long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m\
    \ = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n\
    \        long u = 1;\n        long v = 1;\n        long w\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvf2fnesk.java:127: error: ';' expected\n        long w\n      \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1659794571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        long tri1 = (long)3;\n        long tri2 =\
    \ (long)1;\n        long tri3 = (long)2;\n        long tri4 = (long)3;\n     \
    \   long tri5 = (long)1;\n        long tri6 = (long)2;\n        long tri7 = (long)3;\n\
    \        long tri8 = (long)1;\n        long tri9 = (long)2;\n        long tri10\
    \ = (long)3;\n        long tri11 = (long)1;\n        long tri12 = (long)2;\n \
    \       long tri13 = (long)3;\n        long tri14 = (long)1;\n        long tri15\
    \ = (long)2;\n        long tri16 = (long)3;\n        long tri17 = (long)1;\n \
    \       long tri18 = (long)2;\n        long tri19 = (long)3;\n        long tri20\
    \ = (long)1;\n        long tri21 = (long)2;\n        long tri22 = (long)3;\n \
    \       long tri23 = (long)1;\n        long tri24 = (long)2;\n        long tri25\
    \ = (long)3;\n        long tri26 = (long)1;\n        long tri27 = (long)2;\n \
    \       long tri28 = (long)3;\n        long tri29 = (long)1;\n        long tri30\
    \ = (long)2;\n        long tri31 = (long)3;\n        long tri32 = (long)1;\n \
    \       long tri33 = (long)2;\n        long tri34 = (long)3;\n        long tri35\
    \ = (long)1;\n        long tri36 = (long)2;\n        long tri37 = (long)3;\n \
    \       long tri38 = (long)1;\n        long tri39 = (long)2;\n        long tri40\
    \ = (long)3;\n        long tri41 = (long)1;\n        long tri42 = (long)2;\n \
    \       long tri43 = (long)3;\n        long tri44 = (long)1;\n        long tri45\
    \ = (long)2;\n        long tri46 = (long)3;\n        long tri47 = (long)1;\n \
    \       long tri48 = (long)2;\n        long tri49 = (long)3;\n        long tri50\
    \ = (long)1;\n        long tri51 = (long)2;\n        long tri52 = (long)3;\n \
    \       long tri53 = (long)1;\n        long tri54 = (long)2;\n        long tri55\
    \ = (long)3;\n        long tri56 = (long)1;\n        long tri57 = (long)2;\n \
    \       long tri58 = (long)3;\n        long tri59 = (long)1;\n        long tri60\
    \ = (long)2;\n        long tri61 = (long)3;\n        long tri62 = (long)1;\n \
    \       long \n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpviz5uw70.java:89: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpviz5uw70.java:89: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           result.add(n + 1l);\n            return result;\n        }\n     \
    \   ArrayList<Long> left = new ArrayList<>();\n        ArrayList<Long> right =\
    \ new ArrayList<>();\n        left.add(1l);\n        right.add(1l);\n        right.add(n\
    \ + 1l);\n        ArrayList<Long> result = new ArrayList<>();\n        long sum\
    \ = 0;\n        while (left.size() < n + 1) {\n            sum = (left.get(left.size()\
    \ - 1) + right.get(left.size() - 2)) + right.get(left.size() - 1);\n         \
    \   result.add(sum);\n            left.add(sum);\n            right.add(sum);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpegga1g6d.java:37: error: variable result is already defined in\
    \ method tri(long)\n        ArrayList<Long> result = new ArrayList<>();\n    \
    \                    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1l) result.add(1l);\n        else if\
    \ (n % 2 == 0l) result.add(tri(n - 1l) + tri(n - 2l));\n        else result.add(tri(n\
    \ - 1l) + tri(n - 2l) + tri(n - 3l));\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptna8scz5.java:28: error: bad operand types for binary operator\
    \ '+'\n        else if (n % 2 == 0l) result.add(tri(n - 1l) + tri(n - 2l));\n\
    \                                                     ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmptna8scz5.java:29: error: bad operand\
    \ types for binary operator '+'\n        else result.add(tri(n - 1l) + tri(n -\
    \ 2l) + tri(n - 3l));\n                                    ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 1l) return\
    \ new ArrayList<Long>(Arrays.asList((long)1l));\n        if (n == 2l) return new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l));\n        if (n % 2l == 0l)\
    \ return tri(n - 1l).stream().map(t -> t + t + n).collect(Collectors.toList());\n\
    \        else return tri(n - 1l).stream().map(t -> t + t + n).collect(Collectors.toList()).stream().map(t\
    \ -> t + t + n).collect(Collectors.toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy9oz7v7w.java:28: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        if (n % 2l == 0l) return tri(n - 1l).stream().map(t\
    \ -> t + t + n).collect(Collectors.toList());\n                              \
    \                                                   ^\n    equality constraints:\
    \ List<T#2>\n    lower bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2 are\
    \ type-variables:\n    R extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    A extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    T#1 extends Object declared in interface Stream\n    T#2\
    \ extends Object declared in method <T#2>toList()\n/tmp/tmpy9oz7v7w.java:29: error:\
    \ incompatible types: inference variable R has incompatible bounds\n        else\
    \ return tri(n - 1l).stream().map(t -> t + t + n).collect(Collectors.toList()).stream().map(t\
    \ -> t + t + n).collect(Collectors.toList());\n                              \
    \                                                                            \
    \                    ^\n    equality constraints: List<T#2>\n    lower bounds:\
    \ ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n    R extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1\
    \ extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n2 errors\n"
  stdout: ''
  timestamp: 1659794572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n <= 1l) {\n   \
    \         return new ArrayList<Long>(Arrays.asList((long)1l));\n        }\n  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        long tri1 = tri(n\
    \ - 1l);\n        long tri2 = tri(n - 2l);\n        long tri3 = tri(n - 3l);\n\
    \        result.add((long) tri1);\n        result.add((long) tri2);\n        result.add((long)\
    \ tri3);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ud7k1f6.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmp0ud7k1f6.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmp0ud7k1f6.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(1l);\n\
    \        third.add(1l);\n        long a = 1;\n        long b = 2;\n        long\
    \ c = 1;\n        long d = 2;\n        long e = 1;\n        long f = 1;\n    \
    \    long g = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n\
    \        long k = 1;\n        long l = 1;\n        long m = 1;\n        long n\
    \ = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n      \
    \  long r = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n\
    \        long v = 1;\n        long w = 1;\n        long x = 1;\n        long y\
    \ = 1;\n        long z = 1;\n        long a = 1;\n        long b = 2;\n      \
    \  long c = 1;\n        long d = 2;\n        long e = 1;\n        long f = 1;\n\
    \        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j\
    \ = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n      \
    \  long n = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n\
    \        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u\
    \ = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n      \
    \  long y = 1;\n        long z = 1;\n        long a = 1;\n        long b = 2;\n\
    \        long c = 1;\n        long d = 2;\n        long e = 1;\n        long f\
    \ = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n      \
    \  long j = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n\
    \        long n = 1;\n        long o = 1;\n        long p = 1;\n        long q\
    \ = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n      \
    \  long u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n\
    \        long y = 1;\n        long z = 1;\n        long a = 1;\n        long b\
    \ = 2;\n        long c = 1;\n        long d = 2;\n        long e = 1;\n      \
    \  long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        \n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe6yn3jq2.java:50: error: variable n is already defined in method\
    \ tri(long)\n        long n = 1;\n             ^\n/tmp/tmpe6yn3jq2.java:63: error:\
    \ variable a is already defined in method tri(long)\n        long a = 1;\n   \
    \          ^\n/tmp/tmpe6yn3jq2.java:64: error: variable b is already defined in\
    \ method tri(long)\n        long b = 2;\n             ^\n/tmp/tmpe6yn3jq2.java:65:\
    \ error: variable c is already defined in method tri(long)\n        long c = 1;\n\
    \             ^\n/tmp/tmpe6yn3jq2.java:66: error: variable d is already defined\
    \ in method tri(long)\n        long d = 2;\n             ^\n/tmp/tmpe6yn3jq2.java:67:\
    \ error: variable e is already defined in method tri(long)\n        long e = 1;\n\
    \             ^\n/tmp/tmpe6yn3jq2.java:68: error: variable f is already defined\
    \ in method tri(long)\n        long f = 1;\n             ^\n/tmp/tmpe6yn3jq2.java:69:\
    \ error: variable g is already defined in method tri(long)\n        long g = 1;\n\
    \             ^\n/tmp/tmpe6yn3jq2.java:70: error: variable h is already defined\
    \ in method tri(long)\n        long h = 1;\n             ^\n/tmp/tmpe6yn3jq2.java:71:\
    \ error: variable i is already defined in method tri(long)\n        long i = 1;\n\
    \             ^\n/tmp/tmpe6yn3jq2.java:72: error: variable j is already defined\
    \ in method tri(long)\n        long j = 1;\n             ^\n/tmp/tmpe6yn3jq2.java:73:\
    \ error: variable k is already defined in method tri(long)\n        long k = 1;\n\
    \             ^\n/tmp/tmpe6yn3jq2.java:74: error: variable l is already defined\
    \ in method tri(long)\n        long l = 1;\n             ^\n/tmp/tmpe6yn3jq2.java:75:\
    \ error: variable m is already defined in method tri(long)\n        long m = 1;\n\
    \             ^\n/tmp/tmpe6yn3jq2.java:76: error: variable n is already defined\
    \ in method tri(long)\n        long n = 1;\n             ^\n/tmp/tmpe6yn3jq2.java:77:\
    \ error: variable o is already defined in method tri(long)\n        long o = 1;\n\
    \             ^\n/tmp/tmpe6yn3jq2.java:78: error: variable p is already defined\
    \ in method tri(long)\n        long p = 1;\n             ^\n/tmp/tmpe6yn3jq2.java:79:\
    \ error: variable "
  stdout: ''
  timestamp: 1659794571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1l) {\n            result.add(1l);\n\
    \            result.add(n + 1l);\n        } else {\n            tri(n - 1l, result);\n\
    \            tri(n - 2l, result);\n            tri(n - 3l, result);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnpb80t9h.java:31: error: method tri in class Problem cannot be\
    \ applied to given types;\n            tri(n - 1l, result);\n            ^\n \
    \ required: long\n  found:    long,ArrayList<Long>\n  reason: actual and formal\
    \ argument lists differ in length\n/tmp/tmpnpb80t9h.java:32: error: method tri\
    \ in class Problem cannot be applied to given types;\n            tri(n - 2l,\
    \ result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmpnpb80t9h.java:33:\
    \ error: method tri in class Problem cannot be applied to given types;\n     \
    \       tri(n - 3l, result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n3 errors\n"
  stdout: ''
  timestamp: 1659794572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 0) {\n    \
    \        return new ArrayList<Long>(Arrays.asList((long)1l));\n        } else\
    \ if (n == 1) {\n            return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        } else if (n % 2 == 0) {\n            return tri(n / 2).stream().map(t\
    \ -> t + t).collect(Collectors.toList());\n        } else {\n            return\
    \ tri(n / 2).stream().map(t -> t + t + t).collect(Collectors.toList());\n    \
    \    }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgirac_bh.java:31: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            return tri(n / 2).stream().map(t -> t\
    \ + t).collect(Collectors.toList());\n                                       \
    \                       ^\n    equality constraints: List<T#2>\n    lower bounds:\
    \ ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n    R extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1\
    \ extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n/tmp/tmpgirac_bh.java:33: error: incompatible types:\
    \ inference variable R has incompatible bounds\n            return tri(n / 2).stream().map(t\
    \ -> t + t + t).collect(Collectors.toList());\n                              \
    \                                    ^\n    equality constraints: List<T#2>\n\
    \    lower bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n\
    \    R extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n2 errors\n"
  stdout: ''
  timestamp: 1659794572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 0) {\n    \
    \        return new ArrayList<Long>(Arrays.asList((long)1l));\n        }\n   \
    \     if (n == 1) {\n            return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        }\n        if (n == 2) {\n            return new ArrayList<Long>(Arrays.asList((long)2l));\n\
    \        }\n        if (n % 2 == 0) {\n            return tri(n - 1) + tri(n -\
    \ 2) + tri(n - 1);\n        } else {\n            return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1);\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpomek1ycl.java:36: error: bad operand types for binary operator\
    \ '+'\n            return tri(n - 1) + tri(n - 2) + tri(n - 1);\n            \
    \                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpomek1ycl.java:38: error: bad operand types for binary operator '+'\n \
    \           return tri(n - 1) + tri(n - 2) + tri(n + 1);\n                   \
    \           ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           return result;\n        }\n        if (n == 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1k6sf_zj.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp1k6sf_zj.java:38: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n              \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long a = 1;\n        long b = 1;\n        long\
    \ c = 1;\n        long d = 1;\n        long temp;\n        long sum;\n       \
    \ long temp2;\n        long temp3;\n        long temp4;\n        long temp5;\n\
    \        long temp6;\n        long temp7;\n        long temp8;\n        long temp9;\n\
    \        long temp10;\n        long temp11;\n        long temp12;\n        long\
    \ temp13;\n        long temp14;\n        long temp15;\n        long temp16;\n\
    \        long temp17;\n        long temp18;\n        long temp19;\n        long\
    \ temp20;\n        long temp21;\n        long temp22;\n        long temp23;\n\
    \        long temp24;\n        long temp25;\n        long temp26;\n        long\
    \ temp27;\n        long temp28;\n        long temp29;\n        long temp30;\n\
    \        long temp31;\n        long temp32;\n        long temp33;\n        long\
    \ temp34;\n        long temp35;\n        long temp36;\n        long temp37;\n\
    \        long temp38;\n        long temp39;\n        long temp40;\n        long\
    \ temp41;\n        long temp42;\n        long temp43;\n        long temp44;\n\
    \        long temp45;\n        long temp46;\n        long temp47;\n        long\
    \ temp48;\n        long temp49;\n        long temp50;\n        long temp51;\n\
    \        long temp52;\n        long temp53;\n        long temp54;\n        long\
    \ temp55;\n        long temp56;\n        long temp57;\n        long temp58;\n\
    \        long temp59;\n        long temp60;\n        long temp61;\n        long\
    \ temp62;\n        long temp63;\n        long temp64;\n        long temp65;\n\
    \        long temp66;\n        long temp67;\n        long temp68;\n        long\
    \ temp69;\n        long temp70;\n        long temp71;\n        long temp72;\n\
    \        long temp73;\n        long temp74;\n        long temp75;\n        long\
    \ temp76;\n        long temp77;\n        long temp78;\n        long temp79;\n\
    \        long temp80;\n        long temp81;\n        long temp82;\n        long\
    \ temp83;\n\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwk3xtgpw.java:116: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n        long\
    \ c = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n    \
    \    long g = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n\
    \        long k = 1;\n        long l = 1;\n        long m = 1;\n        long n\
    \ = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n      \
    \  long r = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n\
    \        long v = 1;\n        long w = 1;\n        long x = 1;\n        long y\
    \ = 1;\n        long z = 1;\n        long a = 1;\n        long b = 2;\n      \
    \  long c = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n\
    \        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j\
    \ = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n      \
    \  long n = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n\
    \        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u\
    \ = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n      \
    \  long y = 1;\n        long z = 1;\n        long a = 1;\n        long b = 2;\n\
    \        long c = 1;\n        long d = 1;\n        long e = 1;\n        long f\
    \ = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n      \
    \  long j = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n\
    \        long n = 1;\n        long o = 1;\n        long p = 1;\n        long q\
    \ = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n      \
    \  long u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n\
    \        long y = 1;\n        long z = 1;\n        long a = 1;\n        long b\
    \ = 2;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n      \
    \  long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m\
    \ = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n\
    \        long u = 1;\n        long v = 1;\n        long w\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvf2fnesk.java:127: error: ';' expected\n        long w\n      \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1659794571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwchzi92p.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiq_xkkma.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpiq_xkkma.java:34: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n              \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = (long)3;\n        long tri2 = (long)1;\n\
    \        long tri3 = (long)2;\n        long tri4 = (long)3;\n        long tri5\
    \ = (long)4;\n        long tri6 = (long)5;\n        long tri7 = (long)6;\n   \
    \     long tri8 = (long)7;\n        long tri9 = (long)8;\n        long tri10 =\
    \ (long)9;\n        long tri11 = (long)10;\n        long tri12 = (long)11;\n \
    \       long tri13 = (long)12;\n        long tri14 = (long)13;\n        long tri15\
    \ = (long)14;\n        long tri16 = (long)15;\n        long tri17 = (long)16;\n\
    \        long tri18 = (long)17;\n        long tri19 = (long)18;\n        long\
    \ tri20 = (long)19;\n        long tri21 = (long)20;\n        long tri22 = (long)21;\n\
    \        long tri23 = (long)22;\n        long tri24 = (long)23;\n        long\
    \ tri25 = (long)24;\n        long tri26 = (long)25;\n        long tri27 = (long)26;\n\
    \        long tri28 = (long)27;\n        long tri29 = (long)28;\n        long\
    \ tri30 = (long)29;\n        long tri31 = (long)30;\n        long tri32 = (long)31;\n\
    \        long tri33 = (long)32;\n        long tri34 = (long)33;\n        long\
    \ tri35 = (long)34;\n        long tri36 = (long)35;\n        long tri37 = (long)36;\n\
    \        long tri38 = (long)37;\n        long tri39 = (long)38;\n        long\
    \ tri40 = (long)39;\n        long tri41 = (long)40;\n        long tri42 = (long)41;\n\
    \        long tri43 = (long)42;\n        long tri44 = (long)43;\n        long\
    \ tri45 = (long)44;\n        long tri46 = (long)45;\n        long tri47 = (long)46;\n\
    \        long tri48 = (long)47;\n        long tri49 = (long)48;\n        long\
    \ tri50 = (long)49;\n        long tri51 = (long)50;\n        long tri52 = (long)51;\n\
    \        long tri53 = (long)52;\n        long tri54 = (long)53;\n        long\
    \ tri55 = (long)54;\n        long tri56 = (long)55;\n        long tri57 = (long)56;\n\
    \        long tri58 = (long)57\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptsckzgjc.java:84: error: ';' expected\n        long tri58 = (long)57\n\
    \                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659794568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 1l) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0l) {\n         \
    \   result.add(tri(n - 1l) + tri(n - 2l));\n        } else {\n            result.add(tri(n\
    \ - 1l) + tri(n - 1l) + tri(n - 2l));\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvij02lox.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1l) + tri(n - 2l));\n                  \
    \                 ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpvij02lox.java:34: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1l) + tri(n - 1l) + tri(n - 2l));\n           \
    \                        ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(2l);\n\
    \        third.add(3l);\n        if (n % 2 == 0) {\n            third.add(1l);\n\
    \        }\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \ third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n \
    \       third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        third.add(1l);\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        thir\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpboy9u7lg.java:75: error: not a statement\n        thir\n      \
    \  ^\n/tmp/tmpboy9u7lg.java:75: error: ';' expected\n        thir\n          \
    \  ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 3) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(3l);\n\
    \        third.add(2l);\n        third.add(8l);\n        ArrayList<Long> fourth\
    \ = new ArrayList<>();\n        fourth.add(first);\n        fourth.add(second);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        fourth.add(third);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        four\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnn__r_86.java:100: error: not a statement\n        four\n     \
    \   ^\n/tmp/tmpnn__r_86.java:100: error: ';' expected\n        four\n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n        long\
    \ c = 1;\n        long d = 1;\n        long temp;\n        long temp2;\n     \
    \   long temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n\
    \        long temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n\
    \        long temp11;\n        long temp12;\n        long temp13;\n        long\
    \ temp14;\n        long temp15;\n        long temp16;\n        long temp17;\n\
    \        long temp18;\n        long temp19;\n        long temp20;\n        long\
    \ temp21;\n        long temp22;\n        long temp23;\n        long temp24;\n\
    \        long temp25;\n        long temp26;\n        long temp27;\n        long\
    \ temp28;\n        long temp29;\n        long temp30;\n        long temp31;\n\
    \        long temp32;\n        long temp33;\n        long temp34;\n        long\
    \ temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n\
    \        long temp39;\n        long temp40;\n        long temp41;\n        long\
    \ temp42;\n        long temp43;\n        long temp44;\n        long temp45;\n\
    \        long temp46;\n        long temp47;\n        long temp48;\n        long\
    \ temp49;\n        long temp50;\n        long temp51;\n        long temp52;\n\
    \        long temp53;\n        long temp54;\n        long temp55;\n        long\
    \ temp56;\n        long temp57;\n        long temp58;\n        long temp59;\n\
    \        long temp60;\n        long temp61;\n        long temp62;\n        long\
    \ temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n\
    \        long temp67;\n        long temp68;\n        long temp69;\n        long\
    \ temp70;\n        long temp71;\n        long temp72;\n        long temp73;\n\
    \        long temp74;\n        long temp75;\n        long temp76;\n        long\
    \ temp77;\n        long temp78;\n        long temp79;\n        long temp80;\n\
    \        long temp81;\n        long temp82;\n        long temp83;\n        long\
    \ temp84;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppmfknovm.java:115: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1l) {\n            result.add(1l);\n\
    \            result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1l);\n        ArrayList<Long> tri2 = tri(n - 2l);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3l);\n        ArrayList<Long> tri4 = tri(n - 4l);\n        ArrayList<Long>\
    \ tri5 = tri(n - 5l);\n        ArrayList<Long> tri6 = tri(n - 6l);\n        ArrayList<Long>\
    \ tri7 = tri(n - 7l);\n        ArrayList<Long> tri8 = tri(n - 8l);\n        ArrayList<Long>\
    \ tri9 = tri(n - 9l);\n        ArrayList<Long> tri10 = tri(n - 10l);\n       \
    \ ArrayList<Long> tri11 = tri(n - 11l);\n        ArrayList<Long> tri12 = tri(n\
    \ - 12l);\n        ArrayList<Long> tri13 = tri(n - 13l);\n        ArrayList<Long>\
    \ tri14 = tri(n - 14l);\n        ArrayList<Long> tri15 = tri(n - 15l);\n     \
    \   ArrayList<Long> tri16 = tri(n - 16l);\n        ArrayList<Long> tri17 = tri(n\
    \ - 17l);\n        ArrayList<Long> tri18 = tri(n - 18l);\n        ArrayList<Long>\
    \ tri19 = tri(n - 19l);\n        ArrayList<Long> tri20 = tri(n - 20l);\n     \
    \   ArrayList<Long> tri21 = tri(n - 21l);\n        ArrayList<Long> tri22 = tri(n\
    \ - 22l);\n        ArrayList<Long> tri23 = tri(n - 23l);\n        ArrayList<Long>\
    \ tri24 = tri(n - 24l);\n        ArrayList<Long> tri25 = tri(n - 25l);\n     \
    \   ArrayList<Long> tri26 = tri(n - 26l);\n        ArrayList<Long> tri27 = tri(n\
    \ - 27l);\n        ArrayList<Long> tri28 = tri(n - 28l);\n        ArrayList<Long>\
    \ tri29 = tri(n - 29l);\n        ArrayList<Long> tri30 = tri(n - 30l);\n     \
    \   ArrayList<Long> tri31 = tri(n - 31l);\n        ArrayList<Long> tri32 = tri(n\
    \ - 32l);\n        ArrayList<Long> tri33 = tri(n - 33l);\n        ArrayList<Long>\
    \ tri34 = tri(n - 34l);\n        ArrayList<Long> tri35 = tri(n - 35l);\n     \
    \   ArrayList<Long> tri36 = tri(n - 36l);\n        ArrayList<Long> tri37 = tri(n\
    \ - 37l);\n        ArrayList<Long> tri38 = tri(n - 38l);\n        \n    }\n  \
    \  public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp714taslk.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 0) result.add(0l);\n        if (n\
    \ == 1) result.add(1l);\n        if (n == 2) result.add(2l);\n        if (n %\
    \ 2 == 0) {\n            long a = tri(n - 1);\n            long b = tri(n - 2);\n\
    \            long c = tri(n + 1);\n            for (long i : (a, b, c)) {\n  \
    \              result.add(i);\n            }\n        } else {\n            long\
    \ a = tri(n - 1);\n            long b = tri(n - 2);\n            long c = tri(n\
    \ + 1);\n            for (long i : (a, b, c)) {\n                result.add(i);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpax82czxr.java:34: error: -> expected\n            for (long i :\
    \ (a, b, c)) {\n                                   ^\n/tmp/tmpax82czxr.java:41:\
    \ error: -> expected\n            for (long i : (a, b, c)) {\n               \
    \                    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = (long)3;\n        long tri2 = (long)1;\n\
    \        long tri3 = (long)2;\n        long tri4 = (long)3;\n        long tri5\
    \ = (long)1;\n        long tri6 = (long)2;\n        long tri7 = (long)3;\n   \
    \     long tri8 = (long)1;\n        long tri9 = (long)2;\n        long tri10 =\
    \ (long)3;\n        long tri11 = (long)1;\n        long tri12 = (long)2;\n   \
    \     long tri13 = (long)3;\n        long tri14 = (long)1;\n        long tri15\
    \ = (long)2;\n        long tri16 = (long)3;\n        long tri17 = (long)1;\n \
    \       long tri18 = (long)2;\n        long tri19 = (long)3;\n        long tri20\
    \ = (long)1;\n        long tri21 = (long)2;\n        long tri22 = (long)3;\n \
    \       long tri23 = (long)1;\n        long tri24 = (long)2;\n        long tri25\
    \ = (long)3;\n        long tri26 = (long)1;\n        long tri27 = (long)2;\n \
    \       long tri28 = (long)3;\n        long tri29 = (long)1;\n        long tri30\
    \ = (long)2;\n        long tri31 = (long)3;\n        long tri32 = (long)1;\n \
    \       long tri33 = (long)2;\n        long tri34 = (long)3;\n        long tri35\
    \ = (long)1;\n        long tri36 = (long)2;\n        long tri37 = (long)3;\n \
    \       long tri38 = (long)1;\n        long tri39 = (long)2;\n        long tri40\
    \ = (long)3;\n        long tri41 = (long)1;\n        long tri42 = (long)2;\n \
    \       long tri43 = (long)3;\n        long tri44 = (long)1;\n        long tri45\
    \ = (long)2;\n        long tri46 = (long)3;\n        long tri47 = (long)1;\n \
    \       long tri48 = (long)2;\n        long tri49 = (long)3;\n        long tri50\
    \ = (long)1;\n        long tri51 = (long)2;\n        long tri52 = (long)3;\n \
    \       long tri53 = (long)1;\n        long tri54 = (long)2;\n        long tri55\
    \ = (long)3;\n        long tri56 = (long)1;\n        long tri57 = (long)2;\n \
    \       long tri58 = (long)3;\n        long tri59 = (long)1;\n        long tri60\
    \ = (long)2;\n        long tri61 = (long)3;\n        long tri62 = (long)1;\n \
    \       long tri\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8ocwgxw.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) result.add(0l);\n        if (n ==\
    \ 1) result.add(1l);\n        if (n == 2) result.add(2l);\n        if (n % 2 ==\
    \ 0) {\n            long tri1 = tri(n - 1);\n            long tri2 = tri(n - 2);\n\
    \            long tri3 = tri(n - 3);\n            result.add(tri1 + tri2 + tri3);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb5r4r3pn.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long tri1 = tri(n - 1);\n                \
    \           ^\n/tmp/tmpb5r4r3pn.java:32: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri2 = tri(n - 2);\n         \
    \                  ^\n/tmp/tmpb5r4r3pn.java:33: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri3 = tri(n - 3);\n         \
    \                  ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n        long\
    \ c = 1;\n        long d = 1;\n        long sum = 0;\n        long temp;\n   \
    \     \n        while(n > 0) {\n            temp = a + b + c + d;\n          \
    \  sum = sum + temp;\n            a = b;\n            b = c;\n            c =\
    \ d;\n            d = temp;\n            \n            result.add(sum);\n    \
    \        n = n - 1;\n        }\n        \n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqrbk5got.java:49)\n"
  stdout: ''
  timestamp: 1659794572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwchzi92p.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n        long\
    \ c = 1;\n        long d = 1;\n        long temp;\n        long tri = 0;\n   \
    \     long tri1 = 0;\n        long tri2 = 0;\n        long tri3 = 0;\n       \
    \ long tri4 = 0;\n        long tri5 = 0;\n        long tri6 = 0;\n        long\
    \ tri7 = 0;\n        long tri8 = 0;\n        long tri9 = 0;\n        long tri10\
    \ = 0;\n        long tri11 = 0;\n        long tri12 = 0;\n        long tri13 =\
    \ 0;\n        long tri14 = 0;\n        long tri15 = 0;\n        long tri16 = 0;\n\
    \        long tri17 = 0;\n        long tri18 = 0;\n        long tri19 = 0;\n \
    \       long tri20 = 0;\n        long tri21 = 0;\n        long tri22 = 0;\n  \
    \      long tri23 = 0;\n        long tri24 = 0;\n        long tri25 = 0;\n   \
    \     long tri26 = 0;\n        long tri27 = 0;\n        long tri28 = 0;\n    \
    \    long tri29 = 0;\n        long tri30 = 0;\n        long tri31 = 0;\n     \
    \   long tri32 = 0;\n        long tri33 = 0;\n        long tri34 = 0;\n      \
    \  long tri35 = 0;\n        long tri36 = 0;\n        long tri37 = 0;\n       \
    \ long tri38 = 0;\n        long tri39 = 0;\n        long tri40 = 0;\n        long\
    \ tri41 = 0;\n        long tri42 = 0;\n        long tri43 = 0;\n        long tri44\
    \ = 0;\n        long tri45 = 0;\n        long tri46 = 0;\n        long tri47 =\
    \ 0;\n        long tri48 = 0;\n        long tri49 = 0;\n        long tri50 = 0;\n\
    \        long tri51 = 0;\n        long tri52 = 0;\n        long tri53 = 0;\n \
    \       long tri54 = 0;\n        long tri55 = 0;\n        long tri56 = 0;\n  \
    \      long tri57 = 0;\n        long tri58 = 0;\n        long tri59 = 0;\n   \
    \     long tri60 = 0;\n        long tri61 = 0;\n        long tri62 = 0;\n    \
    \    long tri63 = 0;\n        long tri64 = 0;\n        long tri65 = 0;\n     \
    \   long tri66 = 0;\n        long tri67 = 0;\n        long tri68 = 0;\n      \
    \  long tri69 = 0;\n        long tri70 = 0;\n        long tri71 = 0;\n       \
    \ long tri72 = 0;\n        long tri73 = 0;\n        long tri74 = 0;\n        long\
    \ tri75 = 0;\n        long tri76 = 0;\n        long tri77 = 0;\n        long tri78\
    \ = 0;\n        long tri79 = 0;\n        long tri80\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk3_y3dco.java:112: error: ';' expected\n        long tri80\n  \
    \                ^\n1 error\n"
  stdout: ''
  timestamp: 1659794571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1l) {\n            result.add(1l);\n\
    \            result.add(n);\n            return result;\n        }\n        long\
    \ tri1 = tri(n - 1l);\n        long tri2 = tri(n - 2l);\n        long tri3 = tri(n\
    \ - 3l);\n        result.add(tri1);\n        result.add(tri2);\n        result.add(tri3);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsqryk9m4.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmpsqryk9m4.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmpsqryk9m4.java:34: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n <= 3) {\n    \
    \        return new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l));\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        long\
    \ tri1 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result.add(tri1);\n  \
    \      long tri2 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result.add(tri2);\n\
    \        long tri3 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result.add(tri3);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp86jmrw8n.java:30: error: bad operand types for binary operator\
    \ '+'\n        long tri1 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n           \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp86jmrw8n.java:32: error: bad operand types for binary operator '+'\n \
    \       long tri2 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n                  \
    \             ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp86jmrw8n.java:34: error: bad operand types for binary operator '+'\n \
    \       long tri3 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n                  \
    \             ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    3 errors\n"
  stdout: ''
  timestamp: 1659794572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwchzi92p.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0l);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqo6agg6o.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpqo6agg6o.java:38: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n              \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 1) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  tri(n - 1, result);\n            result.add(1l);\n            tri(n - 2, result);\n\
    \            result.add(3l);\n            tri(n - 1, result);\n        } else\
    \ {\n            tri(n - 1, result);\n            result.add(1l);\n          \
    \  tri(n - 2, result);\n            result.add(3l);\n            tri(n - 1, result);\n\
    \            tri(n - 2, result);\n            result.add(8l);\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1x8s7yz6.java:35: error: method tri in class Problem cannot be\
    \ applied to given types;\n            tri(n - 1, result);\n            ^\n  required:\
    \ long\n  found:    long,ArrayList<Long>\n  reason: actual and formal argument\
    \ lists differ in length\n/tmp/tmp1x8s7yz6.java:37: error: method tri in class\
    \ Problem cannot be applied to given types;\n            tri(n - 2, result);\n\
    \            ^\n  required: long\n  found:    long,ArrayList<Long>\n  reason:\
    \ actual and formal argument lists differ in length\n/tmp/tmp1x8s7yz6.java:39:\
    \ error: method tri in class Problem cannot be applied to given types;\n     \
    \       tri(n - 1, result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmp1x8s7yz6.java:41:\
    \ error: method tri in class Problem cannot be applied to given types;\n     \
    \       tri(n - 1, result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmp1x8s7yz6.java:43:\
    \ error: method tri in class Problem cannot be applied to given types;\n     \
    \       tri(n - 2, result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmp1x8s7yz6.java:45:\
    \ error: method tri in class Problem cannot be applied to given types;\n     \
    \       tri(n - 1, result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmp1x8s7yz6.java:46:\
    \ error: method tri in class Problem cannot be applied to given types;\n     \
    \       tri(n - 2, result);\n            ^\n  required: long\n  found:    long,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n7 errors\n"
  stdout: ''
  timestamp: 1659794572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 3) {\n            result.add(n);\n  \
    \          return result;\n        }\n        long a = tri(n - 1);\n        long\
    \ b = tri(n - 2);\n        long c = tri(n + 1);\n        result.add(a);\n    \
    \    result.add(b);\n        result.add(c);\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ktv27fk.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long a = tri(n - 1);\n                    ^\n\
    /tmp/tmp6ktv27fk.java:32: error: incompatible types: ArrayList<Long> cannot be\
    \ converted to long\n        long b = tri(n - 2);\n                    ^\n/tmp/tmp6ktv27fk.java:33:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \     long c = tri(n + 1);\n                    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n  \
    \          return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(3);\n        second.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        third.add(1);\n        third.add(1);\n\
    \        third.add(1);\n        third.add(1);\n        third.add(1);\n       \
    \ third.add(1);\n        third.add(1);\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_biownbk.java:34: error: incompatible types: int cannot be converted\
    \ to Long\n        first.add(3);\n                  ^\n/tmp/tmp_biownbk.java:35:\
    \ error: incompatible types: int cannot be converted to Long\n        second.add(1);\n\
    \                   ^\n/tmp/tmp_biownbk.java:36: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmp_biownbk.java:37:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_biownbk.java:38: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp_biownbk.java:39:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_biownbk.java:40: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp_biownbk.java:41:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_biownbk.java:42: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp_biownbk.java:43:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_biownbk.java:44: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp_biownbk.java:45:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_biownbk.java:46: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp_biownbk.java:47:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_biownbk.java:48: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(1);\n                  ^\n/tmp/tmp_biownbk.java:49:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmp_biown"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           result.add(1l);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0l);\n            result.add(1l);\n     \
    \       return result;\n        }\n        if (n == 2) {\n            result.add(0l);\n\
    \            result.add(1l);\n            result.add(2l);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            long tri1 = tri(n\
    \ - 1);\n            long tri2 = tri(n - 2);\n            long tri3 = tri(n +\
    \ 1);\n            result.add(tri1);\n            result.add(tri2);\n        \
    \    result.add(tri3);\n        } else {\n            long tri1 = tri(n - 1);\n\
    \            long tri2 = tri(n - 2);\n            long tri3 = tri(n + 1);\n  \
    \          result.add(tri1);\n            result.add(tri2);\n            result.add(tri3);\n\
    \            result.add(tri(n - 3));\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsux_bu3i.java:44: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long tri1 = tri(n - 1);\n                \
    \           ^\n/tmp/tmpsux_bu3i.java:45: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri2 = tri(n - 2);\n         \
    \                  ^\n/tmp/tmpsux_bu3i.java:46: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri3 = tri(n + 1);\n         \
    \                  ^\n/tmp/tmpsux_bu3i.java:51: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri1 = tri(n - 1);\n         \
    \                  ^\n/tmp/tmpsux_bu3i.java:52: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri2 = tri(n - 2);\n         \
    \                  ^\n/tmp/tmpsux_bu3i.java:53: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri3 = tri(n + 1);\n         \
    \                  ^\n/tmp/tmpsux_bu3i.java:57: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 3));\n         \
    \                 ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n7 errors\n"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(2l);\n\
    \        third.add(3l);\n        if (n % 2 == 0) {\n            third.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n            third.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2));\n        }\n        result.addAll(first);\n\
    \        result.addAll(second);\n        result.addAll(third);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiomhnhnv.java:38: error: bad operand types for binary operator\
    \ '+'\n            third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        \
    \                         ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpiomhnhnv.java:40: error: bad operand types for binary operator '+'\n \
    \           third.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2));\n  \
    \                               ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 0) return new\
    \ ArrayList<Long>(Arrays.asList((long)1l));\n        if (n == 1) return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n      \
    \  else return tri(n - 1) + tri(n - 2) + tri(n - 1);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0e9anh4c.java:28: error: bad operand types for binary operator\
    \ '+'\n        if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \                                          ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmp0e9anh4c.java:29: error: bad operand\
    \ types for binary operator '+'\n        else return tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1);\n                               ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 1l) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n / 2l));\n            result.add(tri(n / 2l));\n          \
    \  result.add(tri(n / 2l));\n        } else {\n            result.add(tri(n /\
    \ 2l));\n            result.add(tri(n / 2l));\n            result.add(tri(n /\
    \ 2l));\n            result.add(tri(n / 2l));\n            result.add(tri(n /\
    \ 2l));\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo2632ess.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            result.add(tri(n / 2l));\n               \
    \           ^\n/tmp/tmpo2632ess.java:33: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n / 2l));\n        \
    \                  ^\n/tmp/tmpo2632ess.java:34: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n / 2l));\n        \
    \                  ^\n/tmp/tmpo2632ess.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n / 2l));\n        \
    \                  ^\n/tmp/tmpo2632ess.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n / 2l));\n        \
    \                  ^\n/tmp/tmpo2632ess.java:38: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n / 2l));\n        \
    \                  ^\n/tmp/tmpo2632ess.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n / 2l));\n        \
    \                  ^\n/tmp/tmpo2632ess.java:40: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n / 2l));\n        \
    \                  ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n8 errors\n"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 3) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(3l);\n\
    \        third.add(2l);\n        third.add(8l);\n        ArrayList<Long> fourth\
    \ = new ArrayList<>();\n        fourth.add(first);\n        fourth.add(second);\n\
    \        fourth.add(third);\n        fourth.add(third);\n        ArrayList<Long>\
    \ fifth = new ArrayList<>();\n        fifth.add(first);\n        fifth.add(second);\n\
    \        fifth.add(third);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(fourth);\n\
    \        fifth.add(fourth);\n        fifth.add(fourth);\n        fifth.add(four\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5dow7mc0.java:93: error: ')' expected\n        fifth.add(four\n\
    \                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659794572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 3) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        long tri1 = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1);\n        if (n % 2 == 0) {\n            result.add(tri1);\n\
    \            result.add(tri1 + tri1);\n        } else {\n            result.add(tri1);\n\
    \            result.add(tri1 + tri1 + tri1);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwrzcbvt0.java:34: error: bad operand types for binary operator\
    \ '+'\n        long tri1 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n           \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 0) {\n    \
    \        return new ArrayList<Long>(Arrays.asList((long)0l));\n        }\n   \
    \     if (n == 1) {\n            return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        }\n        if (n % 2 == 0) {\n            return tri(n - 1) + tri(n -\
    \ 2) + tri(n - 1);\n        } else {\n            return tri(n - 1) + tri(n -\
    \ 2) + tri(n - 1) + tri(n - 2);\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3dz0zzp2.java:33: error: bad operand types for binary operator\
    \ '+'\n            return tri(n - 1) + tri(n - 2) + tri(n - 1);\n            \
    \                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp3dz0zzp2.java:35: error: bad operand types for binary operator '+'\n \
    \           return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n      \
    \                        ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 1l) {\n   \
    \         return new ArrayList<Long>(Arrays.asList((long)1l));\n        }\n  \
    \      if (n == 2l) {\n            return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        }\n        if (n % 2 == 0) {\n            return new ArrayList<Long>(Arrays.asList(tri(n\
    \ - 1l), tri(n - 2l), tri(n + 1l)));\n        }\n        return new ArrayList<Long>(Arrays.asList(tri(n\
    \ - 1l), tri(n - 2l)));\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1m61zrad.java:33: error: no suitable constructor found for ArrayList(List<ArrayList<Long>>)\n\
    \            return new ArrayList<Long>(Arrays.asList(tri(n - 1l), tri(n - 2l),\
    \ tri(n + 1l)));\n                   ^\n    constructor ArrayList.ArrayList(int)\
    \ is not applicable\n      (argument mismatch; no instance(s) of type variable(s)\
    \ T exist so that List<T> conforms to int)\n    constructor ArrayList.ArrayList(Collection<?\
    \ extends Long>) is not applicable\n      (argument mismatch; inference variable\
    \ T has incompatible bounds\n          lower bounds: Long,Object\n          lower\
    \ bounds: ArrayList<Long>)\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>asList(T...)\n/tmp/tmp1m61zrad.java:35: error: no suitable\
    \ constructor found for ArrayList(List<ArrayList<Long>>)\n        return new ArrayList<Long>(Arrays.asList(tri(n\
    \ - 1l), tri(n - 2l)));\n               ^\n    constructor ArrayList.ArrayList(int)\
    \ is not applicable\n      (argument mismatch; no instance(s) of type variable(s)\
    \ T exist so that List<T> conforms to int)\n    constructor ArrayList.ArrayList(Collection<?\
    \ extends Long>) is not applicable\n      (argument mismatch; inference variable\
    \ T has incompatible bounds\n          lower bounds: Long,Object\n          lower\
    \ bounds: ArrayList<Long>)\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>asList(T...)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = (long)3;\n        long tri2 = (long)1;\n\
    \        long tri3 = (long)2;\n        long tri4 = (long)3;\n        long tri5\
    \ = (long)1;\n        long tri6 = (long)2;\n        long tri7 = (long)3;\n   \
    \     long tri8 = (long)1;\n        long tri9 = (long)2;\n        long tri10 =\
    \ (long)3;\n        long tri11 = (long)1;\n        long tri12 = (long)2;\n   \
    \     long tri13 = (long)3;\n        long tri14 = (long)1;\n        long tri15\
    \ = (long)2;\n        long tri16 = (long)3;\n        long tri17 = (long)1;\n \
    \       long tri18 = (long)2;\n        long tri19 = (long)3;\n        long tri20\
    \ = (long)1;\n        long tri21 = (long)2;\n        long tri22 = (long)3;\n \
    \       long tri23 = (long)1;\n        long tri24 = (long)2;\n        long tri25\
    \ = (long)3;\n        long tri26 = (long)1;\n        long tri27 = (long)2;\n \
    \       long tri28 = (long)3;\n        long tri29 = (long)1;\n        long tri30\
    \ = (long)2;\n        long tri31 = (long)3;\n        long tri32 = (long)1;\n \
    \       long tri33 = (long)2;\n        long tri34 = (long)3;\n        long tri35\
    \ = (long)1;\n        long tri36 = (long)2;\n        long tri37 = (long)3;\n \
    \       long tri38 = (long)1;\n        long tri39 = (long)2;\n        long tri40\
    \ = (long)3;\n        long tri41 = (long)1;\n        long tri42 = (long)2;\n \
    \       long tri43 = (long)3;\n        long tri44 = (long)1;\n        long tri45\
    \ = (long)2;\n        long tri46 = (long)3;\n        long tri47 = (long)1;\n \
    \       long tri48 = (long)2;\n        long tri49 = (long)3;\n        long tri50\
    \ = (long)1;\n        long tri51 = (long)2;\n        long tri52 = (long)3;\n \
    \       long tri53 = (long)1;\n        long tri54 = (long)2;\n        long tri55\
    \ = (long)3;\n        long tri56 = (long)1;\n        long tri57 = (long)2;\n \
    \       long tri58 = (long)3;\n        long tri59 = (long)1;\n        long tri60\
    \ = (long)2;\n        long tri61 = (long)3;\n        long tri62 = (long)1;\n \
    \       long tri\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8ocwgxw.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n <= 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1l);\n        ArrayList<Long> tri2 = tri(n - 2l);\n        ArrayList<Long> tri3\
    \ = tri(n - 3l);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0nd9xel9.java:40)\n"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) result.add(0l);\n        if (n ==\
    \ 1) result.add(1l);\n        if (n % 2 == 0) result.add(tri(n - 1) + tri(n -\
    \ 2) + tri(n - 3));\n        else result.add(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 2));\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqworynhk.java:29: error: bad operand types for binary operator\
    \ '+'\n        if (n % 2 == 0) result.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n\
    \                                              ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpqworynhk.java:30: error: bad operand\
    \ types for binary operator '+'\n        else result.add(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 2));\n                                   ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0l);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            return result;\n\
    \        }\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n      \
    \  result.add(tri(n - 2) + tri(n + 1));\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy3bm_ru6.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpy3bm_ru6.java:39: error: bad operand types for binary\
    \ operator '+'\n        result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \                            ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpy3bm_ru6.java:40: error: bad operand types for binary\
    \ operator '+'\n        result.add(tri(n - 2) + tri(n + 1));\n               \
    \               ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    3 errors\n"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0l);\n\
    \            result.add(1l);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0l);\n            result.add(1l);\n     \
    \       return result;\n        }\n        if (n % 2 == 0) {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0tjo7lsi.java:38: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp0tjo7lsi.java:40: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 0) {\n    \
    \        return new ArrayList<Long>(Arrays.asList((long)1l));\n        }\n   \
    \     if (n == 1) {\n            return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        }\n        if (n % 2 == 0) {\n            return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1);\n        }\n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4e6c6fgp.java:33: error: bad operand types for binary operator\
    \ '+'\n            return tri(n - 1) + tri(n - 2) + tri(n + 1);\n            \
    \                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp4e6c6fgp.java:35: error: bad operand types for binary operator '+'\n \
    \       return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4);\n\
    \                          ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n  \
    \          return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(3);\n        second.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        third.add(1);\n        third.add(2);\n\
    \        third.add(1);\n        third.add(2);\n        third.add(1);\n       \
    \ third.add(2);\n        third.add(1);\n        third.add(2);\n        third.add(1);\n\
    \        third.add(2);\n        third.add(1);\n        third.add(2);\n       \
    \ third.add(1);\n        third.add(2);\n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphi8hg8vi.java:34: error: incompatible types: int cannot be converted\
    \ to Long\n        first.add(3);\n                  ^\n/tmp/tmphi8hg8vi.java:35:\
    \ error: incompatible types: int cannot be converted to Long\n        second.add(1);\n\
    \                   ^\n/tmp/tmphi8hg8vi.java:36: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmphi8hg8vi.java:37:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmphi8hg8vi.java:38: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmphi8hg8vi.java:39:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmphi8hg8vi.java:40: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmphi8hg8vi.java:41:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmphi8hg8vi.java:42: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmphi8hg8vi.java:43:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmphi8hg8vi.java:44: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmphi8hg8vi.java:45:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmphi8hg8vi.java:46: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmphi8hg8vi.java:47:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmphi8hg8vi.java:48: error: incompatible types: int\
    \ cannot be converted to Long\n        third.add(2);\n                  ^\n/tmp/tmphi8hg8vi.java:49:\
    \ error: incompatible types: int cannot be converted to Long\n        third.add(1);\n\
    \                  ^\n/tmp/tmphi8hg8"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(n);\n        third.add(n);\n        third.add(1l);\n     \
    \   third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(1l);\n     \
    \   third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(1l);\n     \
    \   third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(1l);\n     \
    \   third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(1l);\n     \
    \   third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(1l);\n        third.\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp39ow749g.java:105: error: <identifier> expected\n        third.\n\
    \              ^\n/tmp/tmp39ow749g.java:105: error: not a statement\n        third.\n\
    \             ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           return result;\n        }\n        if (n == 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe_44v53i.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpe_44v53i.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 0) return new\
    \ ArrayList<Long>();\n        if (n == 1) return new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n      \
    \  else return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1);\n    }\n   \
    \ public static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeodzpxtj.java:28: error: bad operand types for binary operator\
    \ '+'\n        if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \                                          ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpeodzpxtj.java:29: error: bad operand\
    \ types for binary operator '+'\n        else return tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3) + tri(n + 1);\n                               ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           return result;\n        }\n        if (n == 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpytk3e0p3.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpytk3e0p3.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = (long)3;\n        long tri2 = (long)1;\n\
    \        long tri3 = (long)2;\n        long tri4 = (long)3;\n        long tri5\
    \ = (long)1;\n        long tri6 = (long)2;\n        long tri7 = (long)3;\n   \
    \     long tri8 = (long)1;\n        long tri9 = (long)2;\n        long tri10 =\
    \ (long)3;\n        long tri11 = (long)1;\n        long tri12 = (long)2;\n   \
    \     long tri13 = (long)3;\n        long tri14 = (long)1;\n        long tri15\
    \ = (long)2;\n        long tri16 = (long)3;\n        long tri17 = (long)1;\n \
    \       long tri18 = (long)2;\n        long tri19 = (long)3;\n        long tri20\
    \ = (long)1;\n        long tri21 = (long)2;\n        long tri22 = (long)3;\n \
    \       long tri23 = (long)1;\n        long tri24 = (long)2;\n        long tri25\
    \ = (long)3;\n        long tri26 = (long)1;\n        long tri27 = (long)2;\n \
    \       long tri28 = (long)3;\n        long tri29 = (long)1;\n        long tri30\
    \ = (long)2;\n        long tri31 = (long)3;\n        long tri32 = (long)1;\n \
    \       long tri33 = (long)2;\n        long tri34 = (long)3;\n        long tri35\
    \ = (long)1;\n        long tri36 = (long)2;\n        long tri37 = (long)3;\n \
    \       long tri38 = (long)1;\n        long tri39 = (long)2;\n        long tri40\
    \ = (long)3;\n        long tri41 = (long)1;\n        long tri42 = (long)2;\n \
    \       long tri43 = (long)3;\n        long tri44 = (long)1;\n        long tri45\
    \ = (long)2;\n        long tri46 = (long)3;\n        long tri47 = (long)1;\n \
    \       long tri48 = (long)2;\n        long tri49 = (long)3;\n        long tri50\
    \ = (long)1;\n        long tri51 = (long)2;\n        long tri52 = (long)3;\n \
    \       long tri53 = (long)1;\n        long tri54 = (long)2;\n        long tri55\
    \ = (long)3;\n        long tri56 = (long)1;\n        long tri57 = (long)2;\n \
    \       long tri58 = (long)3;\n        long tri59 = (long)1;\n        long tri60\
    \ = (long)2;\n        long tri61 = (long)3;\n        long tri62 = (long)1;\n \
    \       long tri\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8ocwgxw.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 0) {\n    \
    \        return new ArrayList<Long>(Arrays.asList((long)1l));\n        } else\
    \ if (n == 1) {\n            return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        } else if (n % 2 == 0) {\n            return new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)));\n        } else {\n            return new\
    \ ArrayList<Long>(Arrays.asList((long)tri(n - 1) + tri(n - 2) + tri(n - 3)));\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6_uyn4_h.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            return new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)));\n                                        \
    \                      ^\n/tmp/tmp6_uyn4_h.java:33: error: incompatible types:\
    \ ArrayList<Long> cannot be converted to long\n            return new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3)));\n                                        \
    \                      ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           result.add(1l);\n            return result;\n        }\n        if\
    \ (n < 0) {\n            throw new IllegalArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (n % 2 == 0) {\n            result.add(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1));\n        } else {\n            result.add(tri(n -\
    \ 1) + tri(n - 2));\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzu78jjgl.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpzu78jjgl.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = (long)3;\n        long tri2 = (long)1;\n\
    \        long tri3 = (long)2;\n        long tri4 = (long)3;\n        if (n % 2\
    \ == 0) {\n            tri1 = tri1 + tri2;\n            tri2 = tri3;\n       \
    \     tri3 = tri4;\n            tri4 = tri1 + tri2;\n        }\n        result.add(tri1);\n\
    \        result.add(tri2);\n        result.add(tri3);\n        result.add(tri4);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe0oqwlmg.java:44)\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwchzi92p.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           result.add(1l);\n            result.add(1l);\n            return result;\n\
    \        }\n        long tri1 = tri(n - 1l);\n        long tri2 = tri(n - 2l);\n\
    \        long tri3 = tri(n - 3l);\n        result.add(tri1);\n        result.add(tri2);\n\
    \        result.add(tri3);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe3ivljya.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmpe3ivljya.java:34: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmpe3ivljya.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(1l);\n\
    \        third.add(1l);\n        if (n % 2 == 0) {\n            third.add(1l);\n\
    \        }\n        for (int i = 3; i <= n; i++) {\n            third.add(first.get(0l)\
    \ + second.get(0l) + third.get(0l));\n            second.add(first.get(0l) + second.get(0l));\n\
    \            first.add(third.get(0l));\n        }\n        result.addAll(first);\n\
    \        result.addAll(third);\n        result.addAll(second);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_s2a8rn9.java:41: error: incompatible types: possible lossy conversion\
    \ from long to int\n            third.add(first.get(0l) + second.get(0l) + third.get(0l));\n\
    \                                ^\n/tmp/tmp_s2a8rn9.java:41: error: incompatible\
    \ types: possible lossy conversion from long to int\n            third.add(first.get(0l)\
    \ + second.get(0l) + third.get(0l));\n                                       \
    \          ^\n/tmp/tmp_s2a8rn9.java:41: error: incompatible types: possible lossy\
    \ conversion from long to int\n            third.add(first.get(0l) + second.get(0l)\
    \ + third.get(0l));\n                                                        \
    \         ^\n/tmp/tmp_s2a8rn9.java:42: error: incompatible types: possible lossy\
    \ conversion from long to int\n            second.add(first.get(0l) + second.get(0l));\n\
    \                                 ^\n/tmp/tmp_s2a8rn9.java:42: error: incompatible\
    \ types: possible lossy conversion from long to int\n            second.add(first.get(0l)\
    \ + second.get(0l));\n                                                  ^\n/tmp/tmp_s2a8rn9.java:43:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        first.add(third.get(0l));\n                                ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    6 errors\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n <= 1l) {\n   \
    \         return new ArrayList<Long>(Arrays.asList((long)1l));\n        }\n  \
    \      ArrayList<Long> result = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        long tri1 = tri(n - 1l);\n        long tri2 = tri(n - 2l);\n        long\
    \ tri3 = tri(n - 3l);\n        result.addAll(Arrays.asList(tri1, tri2, tri3));\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprfgl9jkv.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmprfgl9jkv.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmprfgl9jkv.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        if (n % 2 == 0) {\n           \
    \ result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n      \
    \      result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2smevc2l.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp2smevc2l.java:34: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n <= 1l) {\n   \
    \         return new ArrayList<Long>(Arrays.asList((long)1l));\n        }\n  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        long tri1 = tri(n\
    \ - 1l);\n        long tri2 = tri(n - 2l);\n        long tri3 = tri(n - 3l);\n\
    \        result.add((long) tri1);\n        result.add((long) tri2);\n        result.add((long)\
    \ tri3);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ud7k1f6.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmp0ud7k1f6.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmp0ud7k1f6.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwchzi92p.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(n);\n  \
    \          return result;\n        }\n        ArrayList<Long> tri1 = tri(n - 1);\n\
    \        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3 = tri(n\
    \ - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n        result.addAll(tri3);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7vcmyt8g.java:40)\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = (long)3;\n        long tri2 = (long)1;\n\
    \        long tri3 = (long)2;\n        long tri4 = (long)3;\n        if (n <=\
    \ 1) {\n            result.add(tri1);\n            result.add(tri2);\n       \
    \     result.add(tri3);\n            result.add(tri4);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            tri1 = tri1 + tri2;\n     \
    \       tri2 = tri3;\n            tri3 = tri4;\n            tri4 = tri1 + tri2;\n\
    \        }\n        tri1 = tri1 + tri3;\n        tri2 = tri2 + tri4;\n       \
    \ tri3 = tri1 + tri2;\n        tri4 = tri3 + tri4;\n        result.add(tri1);\n\
    \        result.add(tri2);\n        result.add(tri3);\n        result.add(tri4);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt9amqskz.java:55)\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           result.add(1l);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0l);\n            result.add(1l);\n     \
    \       return result;\n        }\n        if (n % 2 == 0) {\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc1j6_1pa.java:38: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpc1j6_1pa.java:40: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n              \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 1l) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1l));\n            result.add(tri(n - 2l));\n          \
    \  result.add(tri(n + 1l));\n            return result;\n        }\n        result.add(tri(n\
    \ - 1l));\n        result.add(tri(n - 2l));\n        result.add(tri(n + 1l));\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmi22m613.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            result.add(tri(n - 1l));\n               \
    \           ^\n/tmp/tmpmi22m613.java:33: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmpmi22m613.java:34: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\n/tmp/tmpmi22m613.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n        result.add(tri(n - 1l));\n            \
    \          ^\n/tmp/tmpmi22m613.java:38: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n        result.add(tri(n - 2l));\n            \
    \          ^\n/tmp/tmpmi22m613.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n        result.add(tri(n + 1l));\n            \
    \          ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 1l) result.add(1l);\n        else if\
    \ (n % 2 == 0l) result.add(tri(n - 1l) + tri(n - 2l));\n        else result.add(tri(n\
    \ - 1l) + tri(n - 2l) + tri(n + 1l));\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx2km0m23.java:28: error: bad operand types for binary operator\
    \ '+'\n        else if (n % 2 == 0l) result.add(tri(n - 1l) + tri(n - 2l));\n\
    \                                                     ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpx2km0m23.java:29: error: bad operand\
    \ types for binary operator '+'\n        else result.add(tri(n - 1l) + tri(n -\
    \ 2l) + tri(n + 1l));\n                                    ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n <= 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        ArrayList<Long> first = new ArrayList<Long>();\n\
    \        ArrayList<Long> second = new ArrayList<Long>();\n        ArrayList<Long>\
    \ third = new ArrayList<Long>();\n        first.add(1l);\n        second.add(1l);\n\
    \        third.add(1l);\n        long tri_n = 1;\n        long tri_n_plus_1 =\
    \ 2;\n        long tri_n_plus_2 = 1;\n        long tri_n_plus_3 = 2;\n       \
    \ long tri_n_plus_4 = 1;\n        long tri_n_plus_5 = 2;\n        long tri_n_plus_6\
    \ = 1;\n        long tri_n_plus_7 = 2;\n        long tri_n_plus_8 = 1;\n     \
    \   long tri_n_plus_9 = 2;\n        long tri_n_plus_10 = 1;\n        long tri_n_plus_11\
    \ = 2;\n        long tri_n_plus_12 = 1;\n        long tri_n_plus_13 = 2;\n   \
    \     long tri_n_plus_14 = 1;\n        long tri_n_plus_15 = 2;\n        long tri_n_plus_16\
    \ = 1;\n        long tri_n_plus_17 = 2;\n        long tri_n_plus_18 = 1;\n   \
    \     long tri_n_plus_19 = 2;\n        long tri_n_plus_20 = 1;\n        long tri_n_plus_21\
    \ = 1;\n        long tri_n_plus_22 = 2;\n        long tri_n_plus_23 = 1;\n   \
    \     long tri_n_plus_24 = 2;\n        long tri_n_plus_25 = 1;\n        long tri_n_plus_26\
    \ = 2;\n        long tri_n_plus_27 = 1;\n        long tri_n_plus_28 = 2;\n   \
    \     long tri_n_plus_29 = 1;\n        long tri_n_plus_30 = 2;\n        long tri_n_plus_31\
    \ = 1;\n        long tri_n_plus_32 = 2;\n        long tri_n_plus_33 = 1;\n   \
    \     long tri_n_plus_34 = 2;\n        long tri_n_plus_35 = 1;\n        long tri_n_plus_36\
    \ = 2;\n        long tri_n_plus_37 = 1;\n        long tri_n_plus_38 = 2;\n   \
    \     long tri_n_plus_39 = 1;\n        long tri_n_plus_40 = 2;\n        long tri_n_plus_41\
    \ = 1;\n        long tri_n_plus_42 = 2;\n        long tri_n_plus_43 = 1;\n   \
    \     long tri_n_plus_44 = 1;\n        long tri_n_plus_45 = 2;\n        long tri_n_plus_46\
    \ = 1;\n        long tri_n_plus_47 = 2;\n        long tri_n_\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph640s10m.java:85: error: ';' expected\n        long tri_n_\n  \
    \                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           result.add(1l);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0l);\n            return result;\n      \
    \  }\n        if (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n        } else {\n            result.add(tri(n - 1) + tri(n\
    \ - 2));\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzm5nepw_.java:37: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpzm5nepw_.java:39: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 0) result.add(0l);\n        else\
    \ if (n == 1) result.add(1l);\n        else if (n % 2 == 0) result.add(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1));\n        else result.add(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n - 3) + tri(n - 4));\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnm86xhqo.java:29: error: bad operand types for binary operator\
    \ '+'\n        else if (n % 2 == 0) result.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n                                                   ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n/tmp/tmpnm86xhqo.java:30:\
    \ error: bad operand types for binary operator '+'\n        else result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4));\n               \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 0) {\n    \
    \        return new ArrayList<Long>();\n        }\n        if (n == 1) {\n   \
    \         return new ArrayList<Long>(Arrays.asList((long)3l));\n        }\n  \
    \      if (n % 2 == 0) {\n            return tri(n - 1) + tri(n - 2) + tri(n -\
    \ 1);\n        } else {\n            return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1);\n        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqp7p30a5.java:33: error: bad operand types for binary operator\
    \ '+'\n            return tri(n - 1) + tri(n - 2) + tri(n - 1);\n            \
    \                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpqp7p30a5.java:35: error: bad operand types for binary operator '+'\n \
    \           return tri(n - 1) + tri(n - 2) + tri(n + 1);\n                   \
    \           ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 0) {\n    \
    \        return new ArrayList<Long>(Arrays.asList((long)1l));\n        }\n   \
    \     if (n == 1) {\n            return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        }\n        if (n % 2 == 0) {\n            return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1);\n        } else {\n            return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n + 2);\n        }\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx_7sq1u4.java:33: error: bad operand types for binary operator\
    \ '+'\n            return tri(n - 1) + tri(n - 2) + tri(n + 1);\n            \
    \                  ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpx_7sq1u4.java:35: error: bad operand types for binary operator '+'\n \
    \           return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4) + tri(n + 2);\n                              ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) result.add(0l);\n        if (n ==\
    \ 1) result.add(1l);\n        if (n == 2) result.add(2l);\n        if (n % 2 ==\
    \ 0) result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        else result.add(tri(n\
    \ - 1) + tri(n - 2));\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv_k_kjgm.java:30: error: bad operand types for binary operator\
    \ '+'\n        if (n % 2 == 0) result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                                              ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpv_k_kjgm.java:31: error: bad operand\
    \ types for binary operator '+'\n        else result.add(tri(n - 1) + tri(n -\
    \ 2));\n                                   ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1l);\n        ArrayList<Long> tri2 = tri(n - 2l);\n        ArrayList<Long> tri3\
    \ = tri(n - 3l);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcxj2asbh.java:40)\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           result.add(1l);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.add(0l);\n            result.add(1l);\n     \
    \       return result;\n        }\n        if (n % 2 == 0) {\n            result.add(tri(n\
    \ - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc1j6_1pa.java:38: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpc1j6_1pa.java:40: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n              \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n <= 1l) {\n   \
    \         return new ArrayList<Long>(Arrays.asList((long)1l));\n        }\n  \
    \      ArrayList<Long> result = new ArrayList<Long>(Arrays.asList((long)1l));\n\
    \        long tri1 = tri(n - 1l);\n        long tri2 = tri(n - 2l);\n        long\
    \ tri3 = tri(n - 3l);\n        result.addAll(Arrays.asList(tri1, tri2, tri3));\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprfgl9jkv.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmprfgl9jkv.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmprfgl9jkv.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n <= 1) {\n    \
    \        return new ArrayList<Long>();\n        }\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        result.add(3);\n        if (n % 2 == 0) {\n\
    \            result.add(1 + n / 2);\n        } else {\n            ArrayList<Long>\
    \ sub = tri(n - 1);\n            sub.add(0, 1);\n            result.addAll(sub);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnaxrm9w2.java:30: error: incompatible types: int cannot be converted\
    \ to Long\n        result.add(3);\n                   ^\n/tmp/tmpnaxrm9w2.java:35:\
    \ error: incompatible types: int cannot be converted to Long\n            sub.add(0,\
    \ 1);\n                       ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           return result;\n        }\n        if (n == 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpytk3e0p3.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpytk3e0p3.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           result.add(1l);\n            result.add(1l);\n            return result;\n\
    \        }\n        ArrayList<Long> first = new ArrayList<>();\n        ArrayList<Long>\
    \ second = new ArrayList<>();\n        ArrayList<Long> third = new ArrayList<>();\n\
    \        first.add(1l);\n        second.add(1l);\n        third.add(1l);\n   \
    \     if (n % 2 == 0) {\n            third.add(1l);\n        }\n        for (int\
    \ i = 3; i <= n; i++) {\n            third.add(first.get(0).longValue() + second.get(0).longValue()\
    \ + third.get(0).longValue());\n            first.add(second);\n            second.add(third);\n\
    \            third.add(1l);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0cofi3oc.java:44: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            first.add(second);\n                     \
    \ ^\n/tmp/tmp0cofi3oc.java:45: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            second.add(third);\n                     \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(1l);\n\
    \        third.add(1l);\n        long sum = 0;\n        for (int i = 1; i <= n;\
    \ i++) {\n            sum = first.get(i - 1) + second.get(i) + third.get(i);\n\
    \            third.add(sum);\n            second.add(sum);\n            first.add(sum);\n\
    \        }\n        result.addAll(first);\n        result.addAll(third);\n   \
    \     result.addAll(second);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmp8h0fpofc.java:39)\n\tat Problem.main(tmp8h0fpofc.java:50)\n"
  stdout: ''
  timestamp: 1659794575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(n);\n        third.add(n);\n        third.add(1l);\n     \
    \   ArrayList<Long> fourth = new ArrayList<>();\n        fourth.add(1l);\n   \
    \     fourth.add(n);\n        fourth.add(n);\n        fourth.add(1l);\n      \
    \  ArrayList<Long> fifth = new ArrayList<>();\n        fifth.add(1l);\n      \
    \  fifth.add(n);\n        fifth.add(n);\n        fifth.add(1l);\n        ArrayList<Long>\
    \ sixth = new ArrayList<>();\n        sixth.add(1l);\n        sixth.add(n);\n\
    \        sixth.add(n);\n        sixth.add(1l);\n        ArrayList<Long> seventh\
    \ = new ArrayList<>();\n        seventh.add(1l);\n        seventh.add(n);\n  \
    \      seventh.add(n);\n        seventh.add(1l);\n        ArrayList<Long> eighth\
    \ = new ArrayList<>();\n        eighth.add(1l);\n        eighth.add(n);\n    \
    \    eighth.add(n);\n        eighth.add(1l);\n        ArrayList<Long> ninth =\
    \ new ArrayList<>();\n        ninth.add(1l);\n        ninth.add(n);\n        ninth.add(n);\n\
    \        ninth.add(1l);\n        ArrayList<Long> tenth = new ArrayList<>();\n\
    \        tenth.add(1l);\n        tenth.add(n);\n        tenth.add(n);\n      \
    \  tenth.add(1l);\n        ArrayList<Long> eleventh = new ArrayList<>();\n   \
    \     eleventh.add(1l);\n        eleventh.add(n);\n        eleventh.add(n);\n\
    \        eleventh.add(1l);\n        ArrayList<Long> twelfth = new ArrayList<>();\n\
    \        twelfth.add(1l);\n        twelfth.add(n);\n        twelfth.add(n);\n\
    \        twelfth.add(1l);\n        ArrayList<Long> thirteenth = new ArrayList<>();\n\
    \        thirteenth.add(1l);\n        thirteenth.add(n);\n        thirteenth.add(n);\n\
    \        thirteenth.add(1l);\n        ArrayList<Long> fourteenth = new ArrayList<>();\n\
    \        fourteenth.add(1l);\n        fourteenth.add(n);\n        fourteenth.add(n);\n\
    \        fourteenth.add(1l);\n        ArrayList<Long> \n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv0l7qw_o.java:94: error: not a statement\n        ArrayList<Long>\
    \ \n                 ^\n/tmp/tmpv0l7qw_o.java:94: error: ';' expected\n      \
    \  ArrayList<Long> \n                       ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 0) return new\
    \ ArrayList<Long>(Arrays.asList((long)1l));\n        if (n == 1) return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n      \
    \  else return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\
    \ + tri(n + 2);\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuwztt_qw.java:28: error: bad operand types for binary operator\
    \ '+'\n        if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \                                          ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpuwztt_qw.java:29: error: bad operand\
    \ types for binary operator '+'\n        else return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n + 2);\n                       \
    \        ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2\
    \ errors\n"
  stdout: ''
  timestamp: 1659794575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 1l) {\n   \
    \         return new ArrayList<Long>(Arrays.asList((long)1l));\n        }\n  \
    \      if (n == 2l) {\n            return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        }\n        if (n % 2 == 0) {\n            return tri(n - 1l) + tri(n\
    \ - 2l) + tri(n + 1l);\n        } else {\n            return tri(n - 1l) + tri(n\
    \ - 2l) + tri(n + 1l) + tri(n - 3l);\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3w7x9n4u.java:33: error: bad operand types for binary operator\
    \ '+'\n            return tri(n - 1l) + tri(n - 2l) + tri(n + 1l);\n         \
    \                      ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmp3w7x9n4u.java:35: error: bad operand types for binary operator '+'\n \
    \           return tri(n - 1l) + tri(n - 2l) + tri(n + 1l) + tri(n - 3l);\n  \
    \                             ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n <= 1l) {\n   \
    \         return new ArrayList<Long>(Arrays.asList((long)1l));\n        }\n  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        long tri1 = tri(n\
    \ - 1l);\n        long tri2 = tri(n - 2l);\n        long tri3 = tri(n - 3l);\n\
    \        result.add((long) tri1);\n        result.add((long) tri2);\n        result.add((long)\
    \ tri3);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ud7k1f6.java:30: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri1 = tri(n - 1l);\n                   \
    \    ^\n/tmp/tmp0ud7k1f6.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri2 = tri(n - 2l);\n                   \
    \    ^\n/tmp/tmp0ud7k1f6.java:32: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long tri3 = tri(n - 3l);\n                   \
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1l) {\n            result.add(1l);\n\
    \            result.add(1l);\n            result.add(1l);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.add(tri(n\
    \ - 1l));\n            result.add(tri(n - 2l));\n            result.add(tri(n\
    \ - 3l));\n        } else {\n            result.add(tri(n - 1l));\n          \
    \  result.add(tri(n - 2l));\n            result.add(tri(n - 3l));\n          \
    \  result.add(tri(n - 4l));\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3bp1gybv.java:34: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            result.add(tri(n - 1l));\n               \
    \           ^\n/tmp/tmp3bp1gybv.java:35: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmp3bp1gybv.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 3l));\n        \
    \                  ^\n/tmp/tmp3bp1gybv.java:38: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 1l));\n        \
    \                  ^\n/tmp/tmp3bp1gybv.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmp3bp1gybv.java:40: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 3l));\n        \
    \                  ^\n/tmp/tmp3bp1gybv.java:41: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 4l));\n        \
    \                  ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n7 errors\n"
  stdout: ''
  timestamp: 1659794575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n <= 1) {\n            result.add(1l);\n\
    \            result.add(1l);\n            result.add(1l);\n        } else {\n\
    \            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp19rzyl7u.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n1 error\n"
  stdout: ''
  timestamp: 1659794575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n <= 2) {\n            result.add(1l);\n\
    \            result.add(2l);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<Long>();\n        ArrayList<Long> second = new ArrayList<Long>();\n\
    \        ArrayList<Long> third = new ArrayList<Long>();\n        first.add(1l);\n\
    \        second.add(2l);\n        third.add(3l);\n        if (n % 2 == 0) {\n\
    \            third.add(1l);\n        }\n        third.add(2l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7z725zws.java:100: error: ')' expected\n        third.add(1\n \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659794575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 3) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        long a = tri(n - 1) + tri(n -\
    \ 2) + tri(n - 3);\n        long b = tri(n - 2) + tri(n - 1) + tri(n - 3);\n \
    \       result.add(a);\n        result.add(b);\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxmwdu6g.java:34: error: bad operand types for binary operator\
    \ '+'\n        long a = tri(n - 1) + tri(n - 2) + tri(n - 3);\n              \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmplxmwdu6g.java:35: error: bad operand types for binary operator '+'\n \
    \       long b = tri(n - 2) + tri(n - 1) + tri(n - 3);\n                     \
    \       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1l) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2l == 0l) {\n        \
    \    result.add(tri(n - 1l) + tri(n - 2l));\n        } else {\n            result.add(tri(n\
    \ - 1l) + tri(n - 1l) + tri(n - 2l));\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwa0_tw9b.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1l) + tri(n - 2l));\n                  \
    \                 ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpwa0_tw9b.java:34: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1l) + tri(n - 1l) + tri(n - 2l));\n           \
    \                        ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 0) {\n    \
    \        return new ArrayList<Long>(Arrays.asList((long)1l));\n        }\n   \
    \     if (n == 1) {\n            return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        }\n        if (n % 2 == 0) {\n            ArrayList<Long> result = new\
    \ ArrayList<Long>(Arrays.asList((long)tri(n - 1l), (long)tri(n - 2l), (long)tri(n\
    \ + 1l)));\n            return result;\n        }\n        ArrayList<Long> result\
    \ = new ArrayList<Long>(Arrays.asList((long)tri(n - 1l), (long)tri(n - 2l)));\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb28ko1rv.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            ArrayList<Long> result = new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1l), (long)tri(n - 2l), (long)tri(n + 1l)));\n                           \
    \                                                     ^\n/tmp/tmpb28ko1rv.java:33:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         ArrayList<Long> result = new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1l), (long)tri(n - 2l), (long)tri(n + 1l)));\n                           \
    \                                                                        ^\n/tmp/tmpb28ko1rv.java:33:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \         ArrayList<Long> result = new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1l), (long)tri(n - 2l), (long)tri(n + 1l)));\n                           \
    \                                                                            \
    \               ^\n/tmp/tmpb28ko1rv.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n        ArrayList<Long> result = new ArrayList<Long>(Arrays.asList((long)tri(n\
    \ - 1l), (long)tri(n - 2l)));\n                                              \
    \                              ^\n/tmp/tmpb28ko1rv.java:36: error: incompatible\
    \ types: ArrayList<Long> cannot be converted to long\n        ArrayList<Long>\
    \ result = new ArrayList<Long>(Arrays.asList((long)tri(n - 1l), (long)tri(n -\
    \ 2l)));\n                                                                   \
    \                            ^\n5 errors\n"
  stdout: ''
  timestamp: 1659794575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n        long\
    \ c = 1;\n        long d = 1;\n        long temp;\n        long temp2;\n     \
    \   long temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n\
    \        long temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n\
    \        long temp11;\n        long temp12;\n        long temp13;\n        long\
    \ temp14;\n        long temp15;\n        long temp16;\n        long temp17;\n\
    \        long temp18;\n        long temp19;\n        long temp20;\n        long\
    \ temp21;\n        long temp22;\n        long temp23;\n        long temp24;\n\
    \        long temp25;\n        long temp26;\n        long temp27;\n        long\
    \ temp28;\n        long temp29;\n        long temp30;\n        long temp31;\n\
    \        long temp32;\n        long temp33;\n        long temp34;\n        long\
    \ temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n\
    \        long temp39;\n        long temp40;\n        long temp41;\n        long\
    \ temp42;\n        long temp43;\n        long temp44;\n        long temp45;\n\
    \        long temp46;\n        long temp47;\n        long temp48;\n        long\
    \ temp49;\n        long temp50;\n        long temp51;\n        long temp52;\n\
    \        long temp53;\n        long temp54;\n        long temp55;\n        long\
    \ temp56;\n        long temp57;\n        long temp58;\n        long temp59;\n\
    \        long temp60;\n        long temp61;\n        long temp62;\n        long\
    \ temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n\
    \        long temp67;\n        long temp68;\n        long temp69;\n        long\
    \ temp70;\n        long temp71;\n        long temp72;\n        long temp73;\n\
    \        long temp74;\n        long temp75;\n        long temp76;\n        long\
    \ temp77;\n        long temp78;\n        long temp79;\n        long temp80;\n\
    \        long temp81;\n        long temp82;\n        long temp83;\n        long\
    \ temp84;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppmfknovm.java:115: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = (long)3;\n        long tri2 = (long)1;\n\
    \        long tri3 = (long)2;\n        long tri4 = (long)3;\n        long tri5\
    \ = (long)1;\n        long tri6 = (long)2;\n        long tri7 = (long)3;\n   \
    \     long tri8 = (long)1;\n        long tri9 = (long)2;\n        long tri10 =\
    \ (long)3;\n        long tri11 = (long)1;\n        long tri12 = (long)2;\n   \
    \     long tri13 = (long)3;\n        long tri14 = (long)1;\n        long tri15\
    \ = (long)2;\n        long tri16 = (long)3;\n        long tri17 = (long)1;\n \
    \       long tri18 = (long)2;\n        long tri19 = (long)3;\n        long tri20\
    \ = (long)1;\n        long tri21 = (long)2;\n        long tri22 = (long)3;\n \
    \       long tri23 = (long)1;\n        long tri24 = (long)2;\n        long tri25\
    \ = (long)3;\n        long tri26 = (long)1;\n        long tri27 = (long)2;\n \
    \       long tri28 = (long)3;\n        long tri29 = (long)1;\n        long tri30\
    \ = (long)2;\n        long tri31 = (long)3;\n        long tri32 = (long)1;\n \
    \       long tri33 = (long)2;\n        long tri34 = (long)3;\n        long tri35\
    \ = (long)1;\n        long tri36 = (long)2;\n        long tri37 = (long)3;\n \
    \       long tri38 = (long)1;\n        long tri39 = (long)2;\n        long tri40\
    \ = (long)3;\n        long tri41 = (long)1;\n        long tri42 = (long)2;\n \
    \       long tri43 = (long)3;\n        long tri44 = (long)1;\n        long tri45\
    \ = (long)2;\n        long tri46 = (long)3;\n        long tri47 = (long)1;\n \
    \       long tri48 = (long)2;\n        long tri49 = (long)3;\n        long tri50\
    \ = (long)1;\n        long tri51 = (long)2;\n        long tri52 = (long)3;\n \
    \       long tri53 = (long)1;\n        long tri54 = (long)2;\n        long tri55\
    \ = (long)3;\n        long tri56 = (long)1;\n        long tri57 = (long)2;\n \
    \       long tri58 = (long)3;\n        long tri59 = (long)1;\n        long tri60\
    \ = (long)2;\n        long tri61 = (long)3;\n        long tri62 = (long)1;\n \
    \       long tri\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8ocwgxw.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) result.add(0l);\n        else if (n\
    \ == 1) result.add(1l);\n        else result.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp53sib64w.java:29: error: bad operand types for binary operator\
    \ '+'\n        else result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n      \
    \                             ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n1 error\n"
  stdout: ''
  timestamp: 1659794575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           result.add(1l);\n            return result;\n        }\n        if\
    \ (n > 0) {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmyg4skgo.java:33: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n1 error\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           result.add(1l);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        } else {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2e7b1vtp.java:33: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp2e7b1vtp.java:35: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 3));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n <= 1l) {\n   \
    \         return new ArrayList<Long>(Arrays.asList((long)1l));\n        }\n  \
    \      if (n % 2 == 0) {\n            return tri(n - 1l) + tri(n - 2l) + tri(n\
    \ - 3l);\n        } else {\n            return tri(n - 1l) + tri(n - 2l) + tri(n\
    \ - 3l) + tri(n - 4l);\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzqunylsl.java:30: error: bad operand types for binary operator\
    \ '+'\n            return tri(n - 1l) + tri(n - 2l) + tri(n - 3l);\n         \
    \                      ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpzqunylsl.java:32: error: bad operand types for binary operator '+'\n \
    \           return tri(n - 1l) + tri(n - 2l) + tri(n - 3l) + tri(n - 4l);\n  \
    \                             ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n <= 1l) {\n            result.add(1l);\n\
    \            result.add(n + 1l);\n            return result;\n        }\n    \
    \    if (n % 2 == 0) {\n            result.add(tri(n - 1l));\n            result.add(tri(n\
    \ - 2l));\n            result.add(tri(n + 1l));\n        } else {\n          \
    \  result.add(tri(n - 1l));\n            result.add(tri(n - 2l));\n          \
    \  result.add(tri(n + 1l));\n            result.add(tri(n - 1l));\n          \
    \  result.add(tri(n - 2l));\n            result.add(tri(n + 1l));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwwrbtkvc.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to Long\n            result.add(tri(n - 1l));\n               \
    \           ^\n/tmp/tmpwwrbtkvc.java:34: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmpwwrbtkvc.java:35: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\n/tmp/tmpwwrbtkvc.java:37: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 1l));\n        \
    \                  ^\n/tmp/tmpwwrbtkvc.java:38: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmpwwrbtkvc.java:39: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\n/tmp/tmpwwrbtkvc.java:40: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 1l));\n        \
    \                  ^\n/tmp/tmpwwrbtkvc.java:41: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n - 2l));\n        \
    \                  ^\n/tmp/tmpwwrbtkvc.java:42: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            result.add(tri(n + 1l));\n        \
    \                  ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n9 errors\n"
  stdout: ''
  timestamp: 1659794576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           result.add(1l);\n            result.add(1l);\n            return result;\n\
    \        }\n        ArrayList<Long> first = new ArrayList<>();\n        ArrayList<Long>\
    \ second = new ArrayList<>();\n        ArrayList<Long> third = new ArrayList<>();\n\
    \        first.add(1l);\n        second.add(1l);\n        third.add(1l);\n   \
    \     if (n % 2 == 0) {\n            third.add(1l);\n            third.add(1l);\n\
    \            third.add(1l);\n        }\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp70hu3c3v.java:102: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        long a = tri(n - 1l);\n       \
    \ long b = tri(n - 2l);\n        long c = tri(n - 3l);\n        result.add(a);\n\
    \        result.add(b);\n        result.add(c);\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0mx2ng4c.java:31: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long a = tri(n - 1l);\n                    ^\n\
    /tmp/tmp0mx2ng4c.java:32: error: incompatible types: ArrayList<Long> cannot be\
    \ converted to long\n        long b = tri(n - 2l);\n                    ^\n/tmp/tmp0mx2ng4c.java:33:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \     long c = tri(n - 3l);\n                    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = (long)3;\n        long tri2 = (long)1;\n\
    \        long tri3 = (long)2;\n        long tri4 = (long)3;\n        long tri5\
    \ = (long)1;\n        long tri6 = (long)2;\n        long tri7 = (long)3;\n   \
    \     long tri8 = (long)1;\n        long tri9 = (long)2;\n        long tri10 =\
    \ (long)3;\n        long tri11 = (long)1;\n        long tri12 = (long)2;\n   \
    \     long tri13 = (long)3;\n        long tri14 = (long)1;\n        long tri15\
    \ = (long)2;\n        long tri16 = (long)3;\n        long tri17 = (long)1;\n \
    \       long tri18 = (long)2;\n        long tri19 = (long)3;\n        long tri20\
    \ = (long)1;\n        long tri21 = (long)2;\n        long tri22 = (long)3;\n \
    \       long tri23 = (long)1;\n        long tri24 = (long)2;\n        long tri25\
    \ = (long)3;\n        long tri26 = (long)1;\n        long tri27 = (long)2;\n \
    \       long tri28 = (long)3;\n        long tri29 = (long)1;\n        long tri30\
    \ = (long)2;\n        long tri31 = (long)3;\n        long tri32 = (long)1;\n \
    \       long tri33 = (long)2;\n        long tri34 = (long)3;\n        long tri35\
    \ = (long)1;\n        long tri36 = (long)2;\n        long tri37 = (long)3;\n \
    \       long tri38 = (long)1;\n        long tri39 = (long)2;\n        long tri40\
    \ = (long)3;\n        long tri41 = (long)1;\n        long tri42 = (long)2;\n \
    \       long tri43 = (long)3;\n        long tri44 = (long)1;\n        long tri45\
    \ = (long)2;\n        long tri46 = (long)3;\n        long tri47 = (long)1;\n \
    \       long tri48 = (long)2;\n        long tri49 = (long)3;\n        long tri50\
    \ = (long)1;\n        long tri51 = (long)2;\n        long tri52 = (long)3;\n \
    \       long tri53 = (long)1;\n        long tri54 = (long)2;\n        long tri55\
    \ = (long)3;\n        long tri56 = (long)1;\n        long tri57 = (long)2;\n \
    \       long tri58 = (long)3;\n        long tri59 = (long)1;\n        long tri60\
    \ = (long)2;\n        long tri61 = (long)3;\n        long tri62 = (long)1;\n \
    \       long tri\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8ocwgxw.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(2l);\n\
    \        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n    \
    \    third.add(3l);\n        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n\
    \        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n    \
    \    third.add(1l);\n        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n\
    \        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n    \
    \    third.add(2l);\n        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n\
    \        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n    \
    \    third.add(3l);\n        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n\
    \        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n    \
    \    third.add(1l);\n        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n\
    \        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n    \
    \    third.add(2l);\n        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n\
    \        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n    \
    \    third.add(3l);\n        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n\
    \        third.add(1l);\n        third.add(2l);\n        third.add(3l);\n    \
    \    third.add(1l);\n        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n\
    \        third.add(2l);\n        third.add(3l);\n        third.add(1l);\n    \
    \    third.add(2l);\n        third.add(3l);\n        third.add(1l);\n        third.add(2l);\n\
    \        third.add(3l);\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_por3l1.java:101: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           return result;\n        }\n        if (n == 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n / 2) + tri(n - 1) + tri(n - 2));\n        } else {\n     \
    \       result.add(tri(n / 2) + tri(n - 1) + tri(n - 2) + tri(n / 2));\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbrlqy1mk.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n / 2) + tri(n - 1) + tri(n - 2));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpbrlqy1mk.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n / 2) + tri(n - 1) + tri(n - 2) +\
    \ tri(n / 2));\n                                  ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = tri(n - 1, result);\n        long\
    \ tri2 = tri(n - 2, result);\n        long tri3 = tri(n - 3, result);\n      \
    \  result.add(tri1);\n        result.add(tri2);\n        result.add(tri3);\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuoq7i4qz.java:27: error: method tri in class Problem cannot be\
    \ applied to given types;\n        long tri1 = tri(n - 1, result);\n         \
    \           ^\n  required: long\n  found:    long,ArrayList<Long>\n  reason: actual\
    \ and formal argument lists differ in length\n/tmp/tmpuoq7i4qz.java:28: error:\
    \ method tri in class Problem cannot be applied to given types;\n        long\
    \ tri2 = tri(n - 2, result);\n                    ^\n  required: long\n  found:\
    \    long,ArrayList<Long>\n  reason: actual and formal argument lists differ in\
    \ length\n/tmp/tmpuoq7i4qz.java:29: error: method tri in class Problem cannot\
    \ be applied to given types;\n        long tri3 = tri(n - 3, result);\n      \
    \              ^\n  required: long\n  found:    long,ArrayList<Long>\n  reason:\
    \ actual and formal argument lists differ in length\n3 errors\n"
  stdout: ''
  timestamp: 1659794576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        if (n % 2 == 0) {\n           \
    \ result.add(tri(n - 1) + tri(n - 2));\n        } else {\n            result.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprmwq_e5n.java:32: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2));\n                    \
    \              ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmprmwq_e5n.java:34: error: bad operand types for binary operator '+'\n \
    \           result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n              \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659794576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 3) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        long a = tri(n - 1l);\n      \
    \  long b = tri(n - 2l);\n        long c = tri(n - 3l);\n        result.add(a);\n\
    \        result.add(b);\n        result.add(c);\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1di0l7mx.java:34: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n        long a = tri(n - 1l);\n                    ^\n\
    /tmp/tmp1di0l7mx.java:35: error: incompatible types: ArrayList<Long> cannot be\
    \ converted to long\n        long b = tri(n - 2l);\n                    ^\n/tmp/tmp1di0l7mx.java:36:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to long\n   \
    \     long c = tri(n - 3l);\n                    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659794576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        ArrayList<Long> tri4 = tri(n - 4);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        result.addAll(tri4);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3ryf5mp.java:42)\n"
  stdout: ''
  timestamp: 1659794576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           result.add(1l);\n            return result;\n        }\n        if\
    \ (n > 0) {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmyg4skgo.java:33: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n1 error\n"
  stdout: ''
  timestamp: 1659794570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n <= 1) {\n            result.add(1l);\n\
    \            result.add(1l);\n            result.add(1l);\n            return\
    \ result;\n        }\n        ArrayList<Long> tri1 = tri(n - 1);\n        ArrayList<Long>\
    \ tri2 = tri(n - 2);\n        ArrayList<Long> tri3 = tri(n - 3);\n        ArrayList<Long>\
    \ tri4 = tri(n - 4);\n        ArrayList<Long> tri5 = tri(n - 5);\n        ArrayList<Long>\
    \ tri6 = tri(n - 6);\n        ArrayList<Long> tri7 = tri(n - 7);\n        ArrayList<Long>\
    \ tri8 = tri(n - 8);\n        ArrayList<Long> tri9 = tri(n - 9);\n        ArrayList<Long>\
    \ tri10 = tri(n - 10);\n        ArrayList<Long> tri11 = tri(n - 11);\n       \
    \ ArrayList<Long> tri12 = tri(n - 12);\n        ArrayList<Long> tri13 = tri(n\
    \ - 13);\n        ArrayList<Long> tri14 = tri(n - 14);\n        ArrayList<Long>\
    \ tri15 = tri(n - 15);\n        ArrayList<Long> tri16 = tri(n - 16);\n       \
    \ ArrayList<Long> tri17 = tri(n - 17);\n        ArrayList<Long> tri18 = tri(n\
    \ - 18);\n        ArrayList<Long> tri19 = tri(n - 19);\n        ArrayList<Long>\
    \ tri20 = tri(n - 20);\n        ArrayList<Long> tri21 = tri(n - 21);\n       \
    \ ArrayList<Long> tri22 = tri(n - 22);\n        ArrayList<Long> tri23 = tri(n\
    \ - 23);\n        ArrayList<Long> tri24 = tri(n - 24);\n        ArrayList<Long>\
    \ tri25 = tri(n - 25);\n        ArrayList<Long> tri26 = tri(n - 26);\n       \
    \ ArrayList<Long> tri27 = tri(n - 27);\n        ArrayList<Long> tri28 = tri(n\
    \ - 28);\n        ArrayList<Long> tri29 = tri(n - 29);\n        ArrayList<Long>\
    \ tri30 = tri(n - 30);\n        ArrayList<Long> tri31 = tri(n - 31);\n       \
    \ ArrayList<Long> tri32 = tri(n - 32);\n        ArrayList<Long> tri33 = tri(n\
    \ - 33);\n        ArrayList<Long> tri34 = tri(n - 34);\n        ArrayList<Long>\
    \ tri35 = tri(n - 35);\n        ArrayList<Long> tri36 = tri(n - 36);\n       \
    \ ArrayList<Long> tri37 = tri(n - 37);\n        ArrayList<Long> tri38 = tri(n\
    \ - 38);\n        ArrayList<Long> tri39 = tri(n - 39);\n        \n    }\n    public\
    \ static void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpspoxpvek.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 3) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        ArrayList<Long> a = tri(n - 1);\n\
    \        ArrayList<Long> b = tri(n - 2);\n        ArrayList<Long> c = tri(n -\
    \ 3);\n        ArrayList<Long> d = new ArrayList<>();\n        d.add(a.get(0));\n\
    \        d.add(b.get(0));\n        d.add(a.get(1));\n        d.add(b.get(1));\n\
    \        d.add(a.get(2));\n        d.add(b.get(2));\n        d.add(a.get(3));\n\
    \        d.add(b.get(3));\n        d.add(a.get(4));\n        d.add(b.get(4));\n\
    \        d.add(a.get(5));\n        d.add(b.get(5));\n        d.add(a.get(6));\n\
    \        d.add(b.get(6));\n        d.add(a.get(7));\n        d.add(b.get(7));\n\
    \        d.add(a.get(8));\n        d.add(b.get(8));\n        result.addAll(a);\n\
    \        result.addAll(b);\n        result.addAll(c);\n        result.addAll(d);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.tri(tmp1lenqegq.java:46)\n\tat Problem.main(tmp1lenqegq.java:64)\n"
  stdout: ''
  timestamp: 1659794576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(2l);\n\
    \        third.add(3l);\n        ArrayList<Long> fourth = new ArrayList<>();\n\
    \        fourth.add(4l);\n        ArrayList<Long> fifth = new ArrayList<>();\n\
    \        fifth.add(5l);\n        ArrayList<Long> sixth = new ArrayList<>();\n\
    \        sixth.add(6l);\n        ArrayList<Long> seventh = new ArrayList<>();\n\
    \        seventh.add(7l);\n        ArrayList<Long> eighth = new ArrayList<>();\n\
    \        eighth.add(8l);\n        ArrayList<Long> ninth = new ArrayList<>();\n\
    \        ninth.add(9l);\n        ArrayList<Long> tenth = new ArrayList<>();\n\
    \        tenth.add(10l);\n        ArrayList<Long> eleventh = new ArrayList<>();\n\
    \        eleventh.add(11l);\n        ArrayList<Long> twelfth = new ArrayList<>();\n\
    \        twelfth.add(12l);\n        ArrayList<Long> thirteenth = new ArrayList<>();\n\
    \        thirteenth.add(13l);\n        ArrayList<Long> fourteenth = new ArrayList<>();\n\
    \        fourteenth.add(14l);\n        ArrayList<Long> fifteenth = new ArrayList<>();\n\
    \        fifteenth.add(15l);\n        ArrayList<Long> sixteenth = new ArrayList<>();\n\
    \        sixteenth.add(16l);\n        ArrayList<Long> seventeenth = new ArrayList<>();\n\
    \        seventeenth.add(17l);\n        ArrayList<Long> eighteenth = new ArrayList<>();\n\
    \        eighteenth.add(18l);\n        ArrayList<Long> nineteenth = new ArrayList<>();\n\
    \        nineteenth.add(19l);\n        ArrayList<Long> twentieth = new ArrayList<>();\n\
    \        twentieth.add(20l);\n        ArrayList<Long> twentyfirst = new ArrayList<>();\n\
    \        twentyfirst.add(21l);\n        ArrayList<Long> twentysecond = new ArrayList<>();\n\
    \        twentysecond.add(22l);\n        ArrayList<Long> twentythird = new ArrayList<>();\n\
    \        twentythird.add(23l);\n        ArrayList<Long> twentyfourth = new ArrayList<>();\n\
    \        twentyfourth.add(24l);\n        ArrayList<Long> twentyfifth = new ArrayList<>();\n\
    \        twentyfifth.add(25l);\n        ArrayList<Long> twentysixth = new ArrayList<\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp32q7_mb2.java:82: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n <= 1l) return\
    \ new ArrayList<Long>(Arrays.asList((long)1l));\n        if (n % 2 == 0) return\
    \ tri(n - 1l) + tri(n - 2l) + tri(n - 3l);\n        else return tri(n - 1l) +\
    \ tri(n - 2l) + tri(n - 3l) + tri(n - 4l);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzanze6wc.java:27: error: bad operand types for binary operator\
    \ '+'\n        if (n % 2 == 0) return tri(n - 1l) + tri(n - 2l) + tri(n - 3l);\n\
    \                                           ^\n  first type:  ArrayList<Long>\n\
    \  second type: ArrayList<Long>\n/tmp/tmpzanze6wc.java:28: error: bad operand\
    \ types for binary operator '+'\n        else return tri(n - 1l) + tri(n - 2l)\
    \ + tri(n - 3l) + tri(n - 4l);\n                                ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659794576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long a = 1;\n        long b = 2;\n        long\
    \ c = 1;\n        long d = 1;\n        long temp;\n        long temp2;\n     \
    \   long temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n\
    \        long temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n\
    \        long temp11;\n        long temp12;\n        long temp13;\n        long\
    \ temp14;\n        long temp15;\n        long temp16;\n        long temp17;\n\
    \        long temp18;\n        long temp19;\n        long temp20;\n        long\
    \ temp21;\n        long temp22;\n        long temp23;\n        long temp24;\n\
    \        long temp25;\n        long temp26;\n        long temp27;\n        long\
    \ temp28;\n        long temp29;\n        long temp30;\n        long temp31;\n\
    \        long temp32;\n        long temp33;\n        long temp34;\n        long\
    \ temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n\
    \        long temp39;\n        long temp40;\n        long temp41;\n        long\
    \ temp42;\n        long temp43;\n        long temp44;\n        long temp45;\n\
    \        long temp46;\n        long temp47;\n        long temp48;\n        long\
    \ temp49;\n        long temp50;\n        long temp51;\n        long temp52;\n\
    \        long temp53;\n        long temp54;\n        long temp55;\n        long\
    \ temp56;\n        long temp57;\n        long temp58;\n        long temp59;\n\
    \        long temp60;\n        long temp61;\n        long temp62;\n        long\
    \ temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n\
    \        long temp67;\n        long temp68;\n        long temp69;\n        long\
    \ temp70;\n        long temp71;\n        long temp72;\n        long temp73;\n\
    \        long temp74;\n        long temp75;\n        long temp76;\n        long\
    \ temp77;\n        long temp78;\n        long temp79;\n        long temp80;\n\
    \        long temp81;\n        long temp82;\n        long temp83;\n        long\
    \ temp84;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppmfknovm.java:115: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659794569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(n);\n        third.add(n);\n        third.add(1l);\n     \
    \   third.add(n);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(1l);\n      \
    \  third.add(n);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(1l);\n      \
    \  third.add(n);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(1l);\n        third.add(n);\n      \
    \  third.add(n);\n        third.add(1l);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(1l);\n        third.add(n);\n        third.add(n);\n      \
    \  third.add(1l);\n        third.add(n);\n        third.add(n);\n        third.add(1l);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(1l);\n      \
    \  third.add(n);\n        third.add(n);\n        third.add(1l);\n        third.add(n);\n\
    \        third.add(n);\n        thir\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo7_hx_nl.java:107: error: not a statement\n        thir\n     \
    \   ^\n/tmp/tmpo7_hx_nl.java:107: error: ';' expected\n        thir\n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659794576
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = (long)3;\n        long tri2 = tri1\
    \ + tri1;\n        long tri3 = tri2 + tri2;\n        long tri4 = tri3 + tri3;\n\
    \        long tri5 = tri4 + tri4;\n        long tri6 = tri5 + tri5;\n        long\
    \ tri7 = tri6 + tri6;\n        long tri8 = tri7 + tri7;\n        long tri9 = tri8\
    \ + tri8;\n        long tri10 = tri9 + tri9;\n        long tri11 = tri10 + tri10;\n\
    \        long tri12 = tri11 + tri11;\n        long tri13 = tri12 + tri12;\n  \
    \      long tri14 = tri13 + tri13;\n        long tri15 = tri14 + tri14;\n    \
    \    long tri16 = tri15 + tri15;\n        long tri17 = tri16 + tri16;\n      \
    \  long tri18 = tri17 + tri17;\n        long tri19 = tri18 + tri18;\n        long\
    \ tri20 = tri19 + tri19;\n        long tri21 = tri20 + tri20;\n        long tri22\
    \ = tri21 + tri21;\n        long tri23 = tri22 + tri22;\n        long tri24 =\
    \ tri23 + tri23;\n        long tri25 = tri24 + tri24;\n        long tri26 = tri25\
    \ + tri25;\n        long tri27 = tri26 + tri26;\n        long tri28 = tri27 +\
    \ tri27;\n        long tri29 = tri28 + tri28;\n        long tri30 = tri29 + tri29;\n\
    \        long tri31 = tri30 + tri30;\n        long tri32 = tri31 + tri31;\n  \
    \      long tri33 = tri32 + tri32;\n        long tri34 = tri33 + tri33;\n    \
    \    long tri35 = tri34 + tri34;\n        long tri36 = tri35 + tri35;\n      \
    \  long tri37 = tri36 + tri36;\n        long tri38 = tri37 + tri37;\n        long\
    \ tri39 = tri38 + tri38;\n        long tri40 = tri39 + tri39;\n        long tri41\
    \ = tri40 + tri40;\n        long tri42 = tri41 + tri41;\n        long tri43 =\
    \ tri42 + tri42;\n        long tri44 = tri43 + tri43;\n        long tri45 = tri44\
    \ + tri44;\n        \n    }\n    public static void main(String[] args) {\n  \
    \  assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvckuzv4x.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = (long)3;\n        long tri2 = (long)1;\n\
    \        long tri3 = (long)2;\n        long tri4 = (long)3;\n        long tri5\
    \ = (long)1;\n        long tri6 = (long)2;\n        long tri7 = (long)3;\n   \
    \     long tri8 = (long)1;\n        long tri9 = (long)2;\n        long tri10 =\
    \ (long)3;\n        long tri11 = (long)1;\n        long tri12 = (long)2;\n   \
    \     long tri13 = (long)3;\n        long tri14 = (long)1;\n        long tri15\
    \ = (long)2;\n        long tri16 = (long)3;\n        long tri17 = (long)1;\n \
    \       long tri18 = (long)2;\n        long tri19 = (long)3;\n        long tri20\
    \ = (long)1;\n        long tri21 = (long)2;\n        long tri22 = (long)3;\n \
    \       long tri23 = (long)1;\n        long tri24 = (long)2;\n        long tri25\
    \ = (long)3;\n        long tri26 = (long)1;\n        long tri27 = (long)2;\n \
    \       long tri28 = (long)3;\n        long tri29 = (long)1;\n        long tri30\
    \ = (long)2;\n        long tri31 = (long)3;\n        long tri32 = (long)1;\n \
    \       long tri33 = (long)2;\n        long tri34 = (long)3;\n        long tri35\
    \ = (long)1;\n        long tri36 = (long)2;\n        long tri37 = (long)3;\n \
    \       long tri38 = (long)1;\n        long tri39 = (long)2;\n        long tri40\
    \ = (long)3;\n        long tri41 = (long)1;\n        long tri42 = (long)2;\n \
    \       long tri43 = (long)3;\n        long tri44 = (long)1;\n        long tri45\
    \ = (long)2;\n        long tri46 = (long)3;\n        long tri47 = (long)1;\n \
    \       long tri48 = (long)2;\n        long tri49 = (long)3;\n        long tri50\
    \ = (long)1;\n        long tri51 = (long)2;\n        long tri52 = (long)3;\n \
    \       long tri53 = (long)1;\n        long tri54 = (long)2;\n        long tri55\
    \ = (long)3;\n        long tri56 = (long)1;\n        long tri57 = (long)2;\n \
    \       long tri58 = (long)3;\n        long tri59 = (long)1;\n        long tri60\
    \ = (long)2;\n        long tri61 = (long)3;\n        long tri62 = (long)1;\n \
    \       long tri\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8ocwgxw.java:89: error: ';' expected\n        long tri\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659794568
