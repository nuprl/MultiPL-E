language: java
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(1l);\n\
    \        third.add(1l);\n        if (n % 2 == 0) {\n            third.add(1l);\n\
    \        }\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n    \
    \    third.add(1l);\n        third.add(1l);\n        third.add(1l);\n        third.add(1l);\n\
    \        third.add(1l);\n        third.add(1l);\n\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpniasqacc.java:102: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           return result;\n        }\n        if (n == 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4));\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp18ri2x_n.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp18ri2x_n.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n                                  ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 3) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \        } else {\n            long tri1 = tri(n - 1l);\n            long tri2\
    \ = tri(n - 2l);\n            long tri3 = tri(n + 1l);\n            result.add(tri1);\n\
    \            result.add(tri2);\n            result.add(tri3);\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ydea0av.java:33: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long tri1 = tri(n - 1l);\n               \
    \            ^\n/tmp/tmp4ydea0av.java:34: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri2 = tri(n - 2l);\n        \
    \                   ^\n/tmp/tmp4ydea0av.java:35: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri3 = tri(n + 1l);\n        \
    \                   ^\n3 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 2) {\n            result.add(1l);\n \
    \           result.add(2l);\n            return result;\n        }\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        result.add(tri1.get(0) + tri2.get(0) + tri3.get(0));\n\
    \        result.add(tri1.get(1) + tri2.get(1) + tri3.get(1));\n        result.add(tri1.get(2)\
    \ + tri2.get(2) + tri3.get(2));\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ 2, Size: 2\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n\tat java.util.ArrayList.get(ArrayList.java:433)\n\
    \tat Problem.tri(tmpxch12y43.java:37)\n\tat Problem.main(tmpxch12y43.java:41)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           result.add(1l);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        } else {\n            result.add(tri(n - 1) + tri(n - 2));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp07hb0ayp.java:33: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp07hb0ayp.java:35: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        long tri1 = (long)3;\n        long tri2 = tri1\
    \ + tri1;\n        long tri3 = tri2 + tri2;\n        long tri4 = tri3 + tri3;\n\
    \        long tri5 = tri4 + tri4;\n        long tri6 = tri5 + tri5;\n        long\
    \ tri7 = tri6 + tri6;\n        long tri8 = tri7 + tri7;\n        long tri9 = tri8\
    \ + tri8;\n        long tri10 = tri9 + tri9;\n        long tri11 = tri10 + tri10;\n\
    \        long tri12 = tri11 + tri11;\n        long tri13 = tri12 + tri12;\n  \
    \      long tri14 = tri13 + tri13;\n        long tri15 = tri14 + tri14;\n    \
    \    long tri16 = tri15 + tri15;\n        long tri17 = tri16 + tri16;\n      \
    \  long tri18 = tri17 + tri17;\n        long tri19 = tri18 + tri18;\n        long\
    \ tri20 = tri19 + tri19;\n        long tri21 = tri20 + tri20;\n        long tri22\
    \ = tri21 + tri21;\n        long tri23 = tri22 + tri22;\n        long tri24 =\
    \ tri23 + tri23;\n        long tri25 = tri24 + tri24;\n        long tri26 = tri25\
    \ + tri25;\n        long tri27 = tri26 + tri26;\n        long tri28 = tri27 +\
    \ tri27;\n        long tri29 = tri28 + tri28;\n        long tri30 = tri29 + tri29;\n\
    \        long tri31 = tri30 + tri30;\n        long tri32 = tri31 + tri31;\n  \
    \      long tri33 = tri32 + tri32;\n        long tri34 = tri33 + tri33;\n    \
    \    long tri35 = tri34 + tri34;\n        long tri36 = tri35 + tri35;\n      \
    \  long tri37 = tri36 + tri36;\n        long tri38 = tri37 + tri37;\n        long\
    \ tri39 = tri38 + tri38;\n        long tri40 = tri39 + tri39;\n        long tri41\
    \ = tri40 + tri40;\n        long tri42 = tri41 + tri41;\n        long tri43 =\
    \ tri42 + tri42;\n        long tri44 = tri43 + tri43;\n        long tri45 = tri44\
    \ + tri44;\n        \n    }\n    public static void main(String[] args) {\n  \
    \  assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvckuzv4x.java:73: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           result.add(n + 1l);\n            return result;\n        }\n     \
    \   ArrayList<Long> tri1 = tri(n - 1l);\n        ArrayList<Long> tri2 = tri(n\
    \ - 2l);\n        ArrayList<Long> tri3 = tri(n - 3l);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyt_1vod5.java:41)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 1) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long tri1 = tri(n - 1);\n            long tri2 = tri(n - 2);\n            result.add(tri1);\n\
    \            result.add(tri1 + tri2);\n            result.add(tri1 + tri2 + tri1);\n\
    \            return result;\n        } else {\n            long tri1 = tri(n -\
    \ 1);\n            long tri2 = tri(n - 2);\n            result.add(tri1);\n  \
    \          result.add(tri1 + tri2);\n            result.add(tri1 + tri2 + tri1);\n\
    \            result.add(tri1 + tri2 + tri1 + tri2);\n            return result;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz17o100p.java:35: error: incompatible types: ArrayList<Long> cannot\
    \ be converted to long\n            long tri1 = tri(n - 1);\n                \
    \           ^\n/tmp/tmpz17o100p.java:36: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri2 = tri(n - 2);\n         \
    \                  ^\n/tmp/tmpz17o100p.java:42: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri1 = tri(n - 1);\n         \
    \                  ^\n/tmp/tmpz17o100p.java:43: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to long\n            long tri2 = tri(n - 2);\n         \
    \                  ^\n4 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 3) {\n            result.add(1l);\n \
    \           result.add(3l);\n            result.add(2l);\n            result.add(8l);\n\
    \            return result;\n        }\n        long tri1 = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1);\n        long tri2 = tri(n - 3) + tri(n - 2) + tri(n - 1);\n\
    \        result.add(tri1);\n        result.add(tri2);\n        result.add(tri1\
    \ + tri2);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgr6ex2oy.java:34: error: bad operand types for binary operator\
    \ '+'\n        long tri1 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n           \
    \                    ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    /tmp/tmpgr6ex2oy.java:35: error: bad operand types for binary operator '+'\n \
    \       long tri2 = tri(n - 3) + tri(n - 2) + tri(n - 1);\n                  \
    \             ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(2l);\n\
    \        third.add(3l);\n        if (n % 2 == 0) {\n            third.add(1l);\n\
    \        }\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \ third.removeAll(first);\n        third.removeAll(second);\n        third.removeAll(third);\n\
    \        result.addAll(first);\n        result.addAll(second);\n        result.addAll(third);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnukw1mmx.java:40: error: bad operand types for binary operator\
    \ '+'\n        third.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n            \
    \                 ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           result.add(n);\n            return result;\n        }\n        ArrayList<Long>\
    \ first = new ArrayList<>();\n        ArrayList<Long> second = new ArrayList<>();\n\
    \        ArrayList<Long> third = new ArrayList<>();\n        first.add(1l);\n\
    \        second.add(n);\n        third.add(n);\n        third.add(1l);\n     \
    \   third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n        third.add(n);\n        third.add(n);\n\
    \        third.add(n);\n        third.add(n);\n        third.add(n);\n       \
    \ third.add(n);\n        third.add(n);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpntaysb3e.java:112: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n <= 1) {\n            result.add(1l);\n\
    \            result.add(n + 1l);\n            return result;\n        }\n    \
    \    ArrayList<Long> tri1 = tri(n - 1l);\n        ArrayList<Long> tri2 = tri(n\
    \ - 2l);\n        ArrayList<Long> tri3 = tri(n - 3l);\n        result.addAll(tri1);\n\
    \        result.addAll(tri2);\n        result.addAll(tri3);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbcx_79_4.java:41)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 1l) return\
    \ new ArrayList<Long>(Arrays.asList((long)1l));\n        if (n == 2l) return new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l));\n        if (n % 2 == 0l)\
    \ return tri(n - 1l).stream().flatMap(x -> tri(n - 2l).stream().map(y -> x + y)).collect(Collectors.toList());\n\
    \        else return tri(n - 1l).stream().flatMap(x -> tri(n - 2l).stream().flatMap(y\
    \ -> tri(n - 3l).stream().map(z -> x + y + z)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7m9t27u9.java:29: error: ')' expected\n        else return tri(n\
    \ - 1l).stream().flatMap(x -> tri(n - 2l).stream().flatMap(y -> tri(n - 3l).stream().map(z\
    \ -> x + y + z)).collect(Collectors.toList());\n                             \
    \                                                                            \
    \                                                     ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n <= 1) {\n            result.add(1l);\n \
    \           return result;\n        }\n        ArrayList<Long> first = new ArrayList<>();\n\
    \        ArrayList<Long> second = new ArrayList<>();\n        ArrayList<Long>\
    \ third = new ArrayList<>();\n        first.add(1l);\n        second.add(1l);\n\
    \        third.add(1l);\n        long firstSum = first.get(0l);\n        long\
    \ secondSum = second.get(0l);\n        long thirdSum = third.get(0l);\n      \
    \  long sum;\n        if (n % 2 == 0) {\n            sum = firstSum + secondSum\
    \ + thirdSum;\n            third.add(sum);\n            secondSum = sum;\n   \
    \         thirdSum = sum;\n            firstSum = sum;\n        }\n        else\
    \ {\n            sum = firstSum + secondSum + thirdSum;\n            third.add(sum);\n\
    \            secondSum = sum;\n            thirdSum = sum;\n            firstSum\
    \ = sum;\n        }\n        third.add(sum);\n        secondSum = sum;\n     \
    \   thirdSum = sum;\n        firstSum = sum;\n        third.add(sum);\n      \
    \  secondSum = sum;\n        thirdSum = sum;\n        firstSum = sum;\n      \
    \  third.add(sum);\n        secondSum = sum;\n        thirdSum = sum;\n      \
    \  firstSum = sum;\n        third.add(sum);\n        secondSum = sum;\n      \
    \  thirdSum = sum;\n        firstSum = sum;\n        third.add(sum);\n       \
    \ secondSum = sum;\n        thirdSum = sum;\n        firstSum = sum;\n       \
    \ third.add(sum);\n        secondSum = sum;\n        thirdSum = sum;\n       \
    \ firstSum = sum;\n        third.add(sum);\n        secondSum = sum;\n       \
    \ thirdSum = sum;\n        firstSum = sum;\n        third.add(sum);\n        secondSum\
    \ = sum;\n        thirdSum = sum;\n        firstSum = sum;\n        third.add(sum);\n\
    \        secondSum = sum;\n        thirdSum = sum;\n        firstSum = sum;\n\
    \        third.add(sum);\n        secondSum = sum;\n        thirdSum = sum;\n\
    \        firstSum = sum;\n        third.add(sum);\n        secondSum = sum;\n\
    \        thirdSum = sum\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplywrg5h0.java:97: error: ';' expected\n        thirdSum = sum\n\
    \                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           return result;\n        }\n        if (n == 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpytk3e0p3.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmpytk3e0p3.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2));\n           \
    \                       ^\n  first type:  ArrayList<Long>\n  second type: ArrayList<Long>\n\
    2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n <= 1l) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1l));\n            result.add(tri(n - 2l));\n          \
    \  result.add(tri(n + 1l));\n            return result;\n        }\n        result.add(tri(n\
    \ - 1l));\n        result.add(tri(n - 2l));\n        result.add(tri(n + 1l));\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkl4r36q5.java:32: error: no suitable method found for add(ArrayList<Long>)\n\
    \            result.add(tri(n - 1l));\n                  ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\n    method ArrayList.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n/tmp/tmpkl4r36q5.java:33: error: no suitable method found for add(ArrayList<Long>)\n\
    \            result.add(tri(n - 2l));\n                  ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\n    method ArrayList.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n/tmp/tmpkl4r36q5.java:34: error: no suitable method found for add(ArrayList<Long>)\n\
    \            result.add(tri(n + 1l));\n                  ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method List.add(Long) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\n    method AbstractList.add(Long) is not applic"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        if (n == 0) return new\
    \ ArrayList<Long>(Arrays.asList((long)1l));\n        if (n == 1) return new ArrayList<Long>(Arrays.asList((long)3l));\n\
    \        if (n == 2) return new ArrayList<Long>(Arrays.asList((long)2l, (long)8l));\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long>\
    \ tri1 = tri(n - 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long>\
    \ tri3 = tri(n - 3);\n        tri1.add(tri2.get(tri2.size() - 1) + tri3.get(tri3.size()\
    \ - 1));\n        result.addAll(tri1);\n        result.addAll(tri2);\n       \
    \ result.addAll(tri3);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl9nnzgtt.java:40)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n == 0) {\n            result.add(0l);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.add(1l);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n        } else {\n     \
    \       result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(tri((3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))));\n\
    \    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l)))));\n    assert(tri((6l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l)))));\n\
    \    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7i9j0l36.java:36: error: bad operand types for binary operator\
    \ '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n - 1));\n       \
    \                           ^\n  first type:  ArrayList<Long>\n  second type:\
    \ ArrayList<Long>\n/tmp/tmp7i9j0l36.java:38: error: bad operand types for binary\
    \ operator '+'\n            result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                                  ^\n  first type:  ArrayList<Long>\n  second\
    \ type: ArrayList<Long>\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if (n == 0) {\n            result.add(0l);\n \
    \           result.add(1l);\n            return result;\n        }\n        if\
    \ (n > 0) {\n            ArrayList<Long> first = new ArrayList<>();\n        \
    \    ArrayList<Long> second = new ArrayList<>();\n            ArrayList<Long>\
    \ third = new ArrayList<>();\n            first.add(0l);\n            second.add(1l);\n\
    \            third.add(2l);\n            ArrayList<Long> fourth = new ArrayList<>();\n\
    \            fourth.add(3l);\n            ArrayList<Long> fifth = new ArrayList<>();\n\
    \            fifth.add(4l);\n            ArrayList<Long> sixth = new ArrayList<>();\n\
    \            sixth.add(5l);\n            ArrayList<Long> seventh = new ArrayList<>();\n\
    \            seventh.add(6l);\n            ArrayList<Long> eighth = new ArrayList<>();\n\
    \            eighth.add(7l);\n            ArrayList<Long> ninth = new ArrayList<>();\n\
    \            ninth.add(8l);\n            ArrayList<Long> tenth = new ArrayList<>();\n\
    \            tenth.add(9l);\n            ArrayList<Long> eleventh = new ArrayList<>();\n\
    \            eleventh.add(10l);\n            ArrayList<Long> twelfth = new ArrayList<>();\n\
    \            twelfth.add(11l);\n            ArrayList<Long> thirteenth = new ArrayList<>();\n\
    \            thirteenth.add(12l);\n            ArrayList<Long> fourteenth = new\
    \ ArrayList<>();\n            fourteenth.add(13l);\n            ArrayList<Long>\
    \ fifteenth = new ArrayList<>();\n            fifteenth.add(14l);\n          \
    \  ArrayList<Long> sixteenth = new ArrayList<>();\n            sixteenth.add(15l);\n\
    \            ArrayList<Long> seventeenth = new ArrayList<>();\n            seventeenth.add(16l);\n\
    \            ArrayList<Long> eighteenth = new ArrayList<>();\n            eighteenth.add(17l);\n\
    \            ArrayList<Long> nineteenth = new ArrayList<>();\n            nineteenth.add(18l);\n\
    \            ArrayList<Long> twentieth = new ArrayList<>();\n            twentieth.add(19l);\n\
    \            ArrayList<Long> twentyfirst = new ArrayList<>();\n            twentyfirst.add(20l);\n\
    \            ArrayList<Long> twentysecond = new ArrayList<>();\n            twentysecond.add(21l);\n\
    \            ArrayList<Long> twentythird = new ArrayList<>();\n            twentythird.add(22l);\n\
    \            ArrayList<Long> twentyfourth = new ArrayList<>();\n            twentyfourth.add(23l);\n\
    \            ArrayList<Long> twentyfifth = new ArrayList<>();\n            twentyfifth.add(24l);\n\
    \            ArrayList<Long\n    }\n    public static void main(String[] args)\
    \ {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwepqqci.java:84: error: > expected\n    }\n    ^\n/tmp/tmpkwepqqci.java:83:\
    \ error: not a statement\n            ArrayList<Long\n                     ^\n\
    /tmp/tmpkwepqqci.java:85: error: illegal start of expression\n    public static\
    \ void main(String[] args) {\n    ^\n/tmp/tmpkwepqqci.java:85: error: ';' expected\n\
    \    public static void main(String[] args) {\n          ^\n/tmp/tmpkwepqqci.java:85:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpkwepqqci.java:85: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpkwepqqci.java:85:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpkwepqqci.java:98: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l)))\n\
    \    public static ArrayList<Long> tri(long n) {\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        if (n <= 1) {\n            result.add(n);\n\
    \            return result;\n        }\n        ArrayList<Long> tri1 = tri(n -\
    \ 1);\n        ArrayList<Long> tri2 = tri(n - 2);\n        ArrayList<Long> tri3\
    \ = tri(n - 3);\n        result.addAll(tri1);\n        result.addAll(tri2);\n\
    \        result.addAll(tri3);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(tri((3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l)))));\n    assert(tri((4l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l)))));\n    assert(tri((5l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l)))));\n    assert(tri((6l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l)))));\n    assert(tri((7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)8l, (long)3l,\
    \ (long)15l, (long)4l, (long)24l)))));\n    assert(tri((8l)).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)3l, (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l)))));\n\
    \    assert(tri((9l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l)))));\n\
    \    assert(tri((20l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l,\
    \ (long)2l, (long)8l, (long)3l, (long)15l, (long)4l, (long)24l, (long)5l, (long)35l,\
    \ (long)6l, (long)48l, (long)7l, (long)63l, (long)8l, (long)80l, (long)9l, (long)99l,\
    \ (long)10l, (long)120l, (long)11l)))));\n    assert(tri((0l)).equals((new ArrayList<Long>(Arrays.asList((long)1l)))));\n\
    \    assert(tri((1l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyrtnjz5p.java:40)\n"
  stdout: ''
