language: java
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ parens = new ArrayList<Long>();\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\(\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\(\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5e5ynru_.java:52: error: ';' expected\n        paren_string = paren_string\n\
    \                                   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_stack = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpconx4fq0.java:36: error: ';' expected\n        ArrayList<Long>\
    \ current_level_stack_pointer_pointer_pointer\n                              \
    \                                     ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_parens = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index4\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index14\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index19\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index20\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index24\
    \ = new ArrayList<Long>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9s0ij_ad.java:46: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean inParen = false;\n        for (char c : paren_string.toCharArray())\
    \ {\n            if (c == '(') {\n                inParen = true;\n          \
    \      sb.append(c);\n            } else if (c == ')') {\n                inParen\
    \ = false;\n                sb.append(c);\n            } else if (inParen) {\n\
    \                sb.append(c);\n            }\n        }\n        String[] tokens\
    \ = sb.toString().split(\" \");\n        for (String token : tokens) {\n     \
    \       if (token.equals(\"(\")) {\n                stack.push(token);\n     \
    \       } else if (token.equals(\")\")) {\n                while (!stack.isEmpty())\
    \ {\n                    result.add(stack.pop());\n                }\n       \
    \         stack.pop();\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn18cmr0m.java:36: error: no suitable method found for add(String)\n\
    \                    result.add(stack.pop());\n                          ^\n \
    \   method Collection.add(Long) is not applicable\n      (argument mismatch; String\
    \ cannot be converted to Long)\n    method List.add(Long) is not applicable\n\
    \      (argument mismatch; String cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to Long)\n\
    \    method AbstractList.add(Long) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to Long)\n    method ArrayList.add(Long) is not applicable\n\
    \      (argument mismatch; String cannot be converted to Long)\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack = new ArrayList<Long>();\n        ArrayList<Long> level_stack\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy = new\
    \ ArrayList<Long>();\n        ArrayList<Long> level_stack_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy2 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> level_stack_copy2 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack_copy3 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy4 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> level_stack_copy4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy5 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> level_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack_copy6 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy7 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> level_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy8 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> level_stack_copy8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy10 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> level_stack_copy10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy11 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> level_stack_copy11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack_copy12 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy13 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> level_stack_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy14 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> level_stack_copy14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy16 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> level_stack_copy16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy17 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> level_stack_copy17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack_copy18 = new ArrayList<\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4znra9gd.java:54: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp4znra9gd.java:55: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmp4znra9gd.java:55: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmp4znra9gd.java:55: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp4znra9gd.java:55: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp4znra9gd.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp4znra9gd.java:61: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_groups = paren_string.split(\"\\\\s+\");\n   \
    \     for(String group : paren_groups) {\n            ArrayList<Long> levels =\
    \ parseNestedParens(group);\n            for(Long level : levels) {\n        \
    \        result.add(level);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuu9eij8c.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_groups = paren_string.split(\"\
    \\\\s+\");\n                                                           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\"\\\\s+\");\n  \
    \      for (String s : paren_strings) {\n            ArrayList<Long> levels =\
    \ parseNestedParens(s);\n            result.addAll(levels);\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc3kxsygl.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \\\\s+\");\n                                                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder buffer = new StringBuilder();\n\
    \        boolean in_paren = false;\n        boolean in_quote = false;\n      \
    \  boolean in_backtick = false;\n        boolean in_single_quote = false;\n  \
    \      boolean in_double_quote = false;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.push(c);\n      \
    \      } else if (c == ')') {\n                in_paren = false;\n           \
    \     String s = stack.pop();\n                if (s.equals(\"'\")) {\n      \
    \              in_single_quote = true;\n                } else if (s.equals(\"\
    \\\"\")) {\n                    in_double_quote = true;\n                }\n \
    \               result.add(Long.valueOf(buffer.toString()));\n               \
    \ buffer.setLength(0);\n            } else if (c == '\\'' && !in_single_quote\
    \ && !in_double_quote) {\n                in_single_quote = true;\n          \
    \  } else if (c == '\"' && !in_single_quote && !in_double_quote) {\n         \
    \       in_double_quote = true;\n            } else if (c == '`' && !in_single_quote\
    \ && !in_double_quote) {\n                in_backtick = true;\n            } else\
    \ if (c == '\\'' && !in_single_quote && in_double_quote) {\n                in_single_quote\
    \ = false;\n            } else if (c == '\"' && !in_single_quote && in_double_quote)\
    \ {\n                in_double_quote = false;\n            } else if (c == '`'\
    \ && !in_single_quote && in_backtick) {\n                in_backtick = false;\n\
    \            } else if (c == '\\'' && in_single_quote) {\n                in_single_quote\
    \ = false;\n            } else if (c == '\"' && in_double_quote) {\n         \
    \       in_double_quote = false;\n            } else if (c == '`' && in_backtick)\
    \ {\n                in_backtick = false;\n            } else if (c == '\\\\')\
    \ {\n                buffer.append(c);\n            } else if (c == '\\n') {\n\
    \                result.add(Long.valueOf(buffer.toString()));\n              \
    \  buffer.setLength(0);\n            } else {\n                buffer.append(c);\n\
    \            }\n        }\n        if (buffer.length() > 0) {\n            result.add(Long.valueOf(buffer.toString()));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzinwvvwx.java:27: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> levels_stack = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack4 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack8 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack12 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack20 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack24 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack25\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack31 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack32 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack33\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack34 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack35 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack36 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack37\
    \ = new ArrayList<Long>();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4pj92iz4.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> paren_groups = paren_string.split(\"\\\\s+\");\n       \
    \ for (String group : paren_groups) {\n            ArrayList<Long> level_of_nesting\
    \ = new ArrayList<>();\n            ArrayList<Long> current_level_of_nesting =\
    \ new ArrayList<>();\n            ArrayList<Long> current_level_of_nesting_temp\
    \ = new ArrayList<>();\n            boolean in_paren = false;\n            for\
    \ (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    in_paren = true;\n                    current_level_of_nesting_temp.add(0l);\n\
    \                } else if (group.charAt(i) == ')') {\n                    in_paren\
    \ = false;\n                    current_level_of_nesting_temp.add(0l);\n     \
    \           } else if (in_paren) {\n                    current_level_of_nesting_temp.add(current_level_of_nesting.get(current_level_of_nesting.size()\
    \ - 1) + 1);\n                }\n            }\n            while (!current_level_of_nesting.isEmpty())\
    \ {\n                level_of_nesting.add(current_level_of_nesting.remove(0));\n\
    \            }\n            result.add(level_of_nesting);\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgfuykkls.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_groups = paren_string.split(\"\
    \\\\s+\");\n                                                           ^\n/tmp/tmpgfuykkls.java:36:\
    \ error: no suitable method found for add(ArrayList<Long>)\n            result.add(level_of_nesting);\n\
    \                  ^\n    method Collection.add(Long) is not applicable\n    \
    \  (argument mismatch; ArrayList<Long> cannot be converted to Long)\n    method\
    \ List.add(Long) is not applicable\n      (argument mismatch; ArrayList<Long>\
    \ cannot be converted to Long)\n    method AbstractCollection.add(Long) is not\
    \ applicable\n      (argument mismatch; ArrayList<Long> cannot be converted to\
    \ Long)\n    method AbstractList.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\n    method ArrayList.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> levels = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\" \");\n       \
    \ for (String s : paren_strings) {\n            ArrayList<Long> levels_temp =\
    \ parseNestedParens(s);\n            levels.addAll(levels_temp);\n        }\n\
    \        return levels;\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp86b1pmrl.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n                                                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\" \");\n       \
    \ ArrayList<String> paren_strings_copy = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy2 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy3 = paren_strings_copy2.clone();\n        ArrayList<String>\
    \ paren_strings_copy4 = paren_strings_copy3.clone();\n        ArrayList<String>\
    \ paren_strings_copy5 = paren_strings_copy4.clone();\n        ArrayList<String>\
    \ paren_strings_copy6 = paren_strings_copy5.clone();\n        ArrayList<String>\
    \ paren_strings_copy7 = paren_strings_copy6.clone();\n        ArrayList<String>\
    \ paren_strings_copy8 = paren_strings_copy7.clone();\n        ArrayList<String>\
    \ paren_strings_copy9 = paren_strings_copy8.clone();\n        ArrayList<String>\
    \ paren_strings_copy10 = paren_strings_copy9.clone();\n        ArrayList<String>\
    \ paren_strings_copy11 = paren_strings_copy10.clone();\n        ArrayList<String>\
    \ paren_strings_copy12 = paren_strings_copy11.clone();\n        ArrayList<String>\
    \ paren_strings_copy13 = paren_strings_copy12.clone();\n        ArrayList<String>\
    \ paren_strings_copy14 = paren_strings_copy13.clone();\n        ArrayList<String>\
    \ paren_strings_copy15 = paren_strings_copy14.clone();\n        ArrayList<String>\
    \ paren_strings_copy16 = paren_strings_copy15.clone();\n        ArrayList<String>\
    \ paren_strings_copy17 = paren_strings_copy16.clone();\n        ArrayList<String>\
    \ paren_strings_copy18 = paren_strings_copy17.clone();\n        ArrayList<String>\
    \ paren_strings_copy19 = paren_strings_copy18.clone();\n        ArrayList<String>\
    \ paren_strings_copy20 = paren_strings_copy19.clone();\n        ArrayList<String>\
    \ paren_strings_copy21 = paren_strings_copy20.clone();\n        ArrayList<String>\
    \ paren_strings_copy22 = paren_strings_copy21.clone();\n        ArrayList<String>\
    \ paren_strings_copy23 = paren_strings_copy22.clone();\n        ArrayList<String>\
    \ paren_strings_copy24 = paren_strings_copy23.clone();\n        ArrayList<String>\
    \ paren_strings_copy25 = paren_strings_copy24.clone();\n        ArrayList<String>\
    \ paren_strings_copy26 = paren_strings_copy25.clone();\n        ArrayList<String>\
    \ paren_strings_copy27 = paren_strings_copy26.clone();\n        ArrayList<String>\
    \ paren_strings_copy28 = paren_strings_copy27.clone();\n        ArrayList<String>\
    \ paren_strings_copy29 = paren_strings_copy28.clone();\n        ArrayList<String>\
    \ paren_strings_copy30 = paren_strings_copy29.clone();\n        ArrayList<String>\
    \ paren_strings_copy31 = paren_strings_copy30.clone();\n        ArrayList<String>\
    \ paren_strings_copy32 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohkt5th_.java:49: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpohkt5th_.java:50: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpohkt5th_.java:50: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpohkt5th_.java:50:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpohkt5th_.java:50: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpohkt5th_.java:50:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpohkt5th_.java:56: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_parens = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index4\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index14\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index19\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index20\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index24\
    \ = new ArrayList<Long>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9s0ij_ad.java:46: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        for (char c : paren_string.toCharArray())\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       stack.push(c);\n            } else if (c == ')') {\n                String\
    \ s = stack.pop();\n                if (s.equals(\"(\")) {\n                 \
    \   result.add(Long.valueOf(sb));\n                    sb.setLength(0);\n    \
    \            } else if (s.equals(\")\")) {\n                    result.add(Long.valueOf(sb));\n\
    \                    sb.setLength(0);\n                } else {\n            \
    \        sb.append(s);\n                }\n                in_paren = false;\n\
    \            } else if (in_paren) {\n                sb.append(c);\n         \
    \   }\n        }\n        if (sb.length() > 0) {\n            result.add(Long.valueOf(sb));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp5orv4q3.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\n/tmp/tmpp5orv4q3.java:26:\
    \ error: no suitable method found for valueOf(StringBuilder)\n               \
    \     result.add(Long.valueOf(sb));\n                                   ^\n  \
    \  method Long.valueOf(String) is not applicable\n      (argument mismatch; StringBuilder\
    \ cannot be converted to String)\n    method Long.valueOf(long) is not applicable\n\
    \      (argument mismatch; StringBuilder cannot be converted to long)\n/tmp/tmpp5orv4q3.java:29:\
    \ error: no suitable method found for valueOf(StringBuilder)\n               \
    \     result.add(Long.valueOf(sb));\n                                   ^\n  \
    \  method Long.valueOf(String) is not applicable\n      (argument mismatch; StringBuilder\
    \ cannot be converted to String)\n    method Long.valueOf(long) is not applicable\n\
    \      (argument mismatch; StringBuilder cannot be converted to long)\n/tmp/tmpp5orv4q3.java:40:\
    \ error: no suitable method found for valueOf(StringBuilder)\n            result.add(Long.valueOf(sb));\n\
    \                           ^\n    method Long.valueOf(String) is not applicable\n\
    \      (argument mismatch; StringBuilder cannot be converted to String)\n    method\
    \ Long.valueOf(long) is not applicable\n      (argument mismatch; StringBuilder\
    \ cannot be converted to long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> level\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpisjr_elu.java:55: error: ';' expected\n        ArrayList<Long>\
    \ level\n                             ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> levels_stack = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long> levels_\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiv3yhqi6.java:52: error: ';' expected\n        ArrayList<Long>\
    \ levels_\n                               ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<Long\n    }\n\
    \    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfv7hcaw.java:53: error: > expected\n    }\n    ^\n/tmp/tmpzfv7hcaw.java:52:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n/tmp/tmpzfv7hcaw.java:54:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpzfv7hcaw.java:54: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpzfv7hcaw.java:54: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpzfv7hcaw.java:54: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpzfv7hcaw.java:54:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpzfv7hcaw.java:60: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> levels_stack = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy6 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy10 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy11 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy18 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy22 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy23 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy28\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_aica7gg.java:46: error: ';' expected\n        ArrayList<Long>\
    \ levels_stack_copy28\n                                           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> deepest_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> levels_stack = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack4 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack8 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack12 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack20 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack24 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack25\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack31 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack32 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack33\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack34 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack35 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack36 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack37\
    \ = new ArrayList<\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2uc8rqft.java:55: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp2uc8rqft.java:56: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmp2uc8rqft.java:56: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmp2uc8rqft.java:56: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp2uc8rqft.java:56: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp2uc8rqft.java:56:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp2uc8rqft.java:62: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean in_paren = false;\n        boolean in_quote\
    \ = false;\n        boolean in_double_quote = false;\n        boolean in_single_quote\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2x7dnjv5.java:25: error: variable in_single_backtick is already\
    \ defined in method parseNestedParens(String)\n        boolean in_single_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:26: error: variable in_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:27: error: variable in_single_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_single_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:28: error: variable in_double_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_double_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:29: error: variable in_single_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_single_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:30: error: variable in_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:31: error: variable in_single_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_single_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:32: error: variable in_double_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_double_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:33: error: variable in_single_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_single_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:34: error: variable in_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:35: error: variable in_single_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_single_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:36: error: variable in_double_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean "
  stdout: ''
