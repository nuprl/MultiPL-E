language: java
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ parens = new ArrayList<Long>();\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\(\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\(\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5e5ynru_.java:52: error: ';' expected\n        paren_string = paren_string\n\
    \                                   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_stack = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_pointer_pointer_pointer\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpconx4fq0.java:36: error: ';' expected\n        ArrayList<Long>\
    \ current_level_stack_pointer_pointer_pointer\n                              \
    \                                     ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_parens = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index4\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index14\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index19\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index20\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index24\
    \ = new ArrayList<Long>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9s0ij_ad.java:46: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean inParen = false;\n        for (char c : paren_string.toCharArray())\
    \ {\n            if (c == '(') {\n                inParen = true;\n          \
    \      sb.append(c);\n            } else if (c == ')') {\n                inParen\
    \ = false;\n                sb.append(c);\n            } else if (inParen) {\n\
    \                sb.append(c);\n            }\n        }\n        String[] tokens\
    \ = sb.toString().split(\" \");\n        for (String token : tokens) {\n     \
    \       if (token.equals(\"(\")) {\n                stack.push(token);\n     \
    \       } else if (token.equals(\")\")) {\n                while (!stack.isEmpty())\
    \ {\n                    result.add(stack.pop());\n                }\n       \
    \         stack.pop();\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn18cmr0m.java:36: error: no suitable method found for add(String)\n\
    \                    result.add(stack.pop());\n                          ^\n \
    \   method Collection.add(Long) is not applicable\n      (argument mismatch; String\
    \ cannot be converted to Long)\n    method List.add(Long) is not applicable\n\
    \      (argument mismatch; String cannot be converted to Long)\n    method AbstractCollection.add(Long)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to Long)\n\
    \    method AbstractList.add(Long) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to Long)\n    method ArrayList.add(Long) is not applicable\n\
    \      (argument mismatch; String cannot be converted to Long)\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack = new ArrayList<Long>();\n        ArrayList<Long> level_stack\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy = new\
    \ ArrayList<Long>();\n        ArrayList<Long> level_stack_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy2 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> level_stack_copy2 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack_copy3 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy4 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> level_stack_copy4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy5 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> level_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack_copy6 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy7 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> level_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy8 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> level_stack_copy8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy10 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> level_stack_copy10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy11 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> level_stack_copy11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack_copy12 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy13 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> level_stack_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy14 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> level_stack_copy14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy16 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> level_stack_copy16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy17 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> level_stack_copy17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack_copy18 = new ArrayList<\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4znra9gd.java:54: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp4znra9gd.java:55: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmp4znra9gd.java:55: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmp4znra9gd.java:55: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp4znra9gd.java:55: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp4znra9gd.java:55:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp4znra9gd.java:61: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_groups = paren_string.split(\"\\\\s+\");\n   \
    \     for(String group : paren_groups) {\n            ArrayList<Long> levels =\
    \ parseNestedParens(group);\n            for(Long level : levels) {\n        \
    \        result.add(level);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuu9eij8c.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_groups = paren_string.split(\"\
    \\\\s+\");\n                                                           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\"\\\\s+\");\n  \
    \      for (String s : paren_strings) {\n            ArrayList<Long> levels =\
    \ parseNestedParens(s);\n            result.addAll(levels);\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc3kxsygl.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \\\\s+\");\n                                                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder buffer = new StringBuilder();\n\
    \        boolean in_paren = false;\n        boolean in_quote = false;\n      \
    \  boolean in_backtick = false;\n        boolean in_single_quote = false;\n  \
    \      boolean in_double_quote = false;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.push(c);\n      \
    \      } else if (c == ')') {\n                in_paren = false;\n           \
    \     String s = stack.pop();\n                if (s.equals(\"'\")) {\n      \
    \              in_single_quote = true;\n                } else if (s.equals(\"\
    \\\"\")) {\n                    in_double_quote = true;\n                }\n \
    \               result.add(Long.valueOf(buffer.toString()));\n               \
    \ buffer.setLength(0);\n            } else if (c == '\\'' && !in_single_quote\
    \ && !in_double_quote) {\n                in_single_quote = true;\n          \
    \  } else if (c == '\"' && !in_single_quote && !in_double_quote) {\n         \
    \       in_double_quote = true;\n            } else if (c == '`' && !in_single_quote\
    \ && !in_double_quote) {\n                in_backtick = true;\n            } else\
    \ if (c == '\\'' && !in_single_quote && in_double_quote) {\n                in_single_quote\
    \ = false;\n            } else if (c == '\"' && !in_single_quote && in_double_quote)\
    \ {\n                in_double_quote = false;\n            } else if (c == '`'\
    \ && !in_single_quote && in_backtick) {\n                in_backtick = false;\n\
    \            } else if (c == '\\'' && in_single_quote) {\n                in_single_quote\
    \ = false;\n            } else if (c == '\"' && in_double_quote) {\n         \
    \       in_double_quote = false;\n            } else if (c == '`' && in_backtick)\
    \ {\n                in_backtick = false;\n            } else if (c == '\\\\')\
    \ {\n                buffer.append(c);\n            } else if (c == '\\n') {\n\
    \                result.add(Long.valueOf(buffer.toString()));\n              \
    \  buffer.setLength(0);\n            } else {\n                buffer.append(c);\n\
    \            }\n        }\n        if (buffer.length() > 0) {\n            result.add(Long.valueOf(buffer.toString()));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzinwvvwx.java:27: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> levels_stack = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack4 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack8 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack12 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack20 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack24 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack25\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack31 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack32 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack33\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack34 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack35 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack36 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack37\
    \ = new ArrayList<Long>();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4pj92iz4.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> paren_groups = paren_string.split(\"\\\\s+\");\n       \
    \ for (String group : paren_groups) {\n            ArrayList<Long> level_of_nesting\
    \ = new ArrayList<>();\n            ArrayList<Long> current_level_of_nesting =\
    \ new ArrayList<>();\n            ArrayList<Long> current_level_of_nesting_temp\
    \ = new ArrayList<>();\n            boolean in_paren = false;\n            for\
    \ (int i = 0; i < group.length(); i++) {\n                if (group.charAt(i)\
    \ == '(') {\n                    in_paren = true;\n                    current_level_of_nesting_temp.add(0l);\n\
    \                } else if (group.charAt(i) == ')') {\n                    in_paren\
    \ = false;\n                    current_level_of_nesting_temp.add(0l);\n     \
    \           } else if (in_paren) {\n                    current_level_of_nesting_temp.add(current_level_of_nesting.get(current_level_of_nesting.size()\
    \ - 1) + 1);\n                }\n            }\n            while (!current_level_of_nesting.isEmpty())\
    \ {\n                level_of_nesting.add(current_level_of_nesting.remove(0));\n\
    \            }\n            result.add(level_of_nesting);\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgfuykkls.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_groups = paren_string.split(\"\
    \\\\s+\");\n                                                           ^\n/tmp/tmpgfuykkls.java:36:\
    \ error: no suitable method found for add(ArrayList<Long>)\n            result.add(level_of_nesting);\n\
    \                  ^\n    method Collection.add(Long) is not applicable\n    \
    \  (argument mismatch; ArrayList<Long> cannot be converted to Long)\n    method\
    \ List.add(Long) is not applicable\n      (argument mismatch; ArrayList<Long>\
    \ cannot be converted to Long)\n    method AbstractCollection.add(Long) is not\
    \ applicable\n      (argument mismatch; ArrayList<Long> cannot be converted to\
    \ Long)\n    method AbstractList.add(Long) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Long)\n    method ArrayList.add(Long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to Long)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> levels = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\" \");\n       \
    \ for (String s : paren_strings) {\n            ArrayList<Long> levels_temp =\
    \ parseNestedParens(s);\n            levels.addAll(levels_temp);\n        }\n\
    \        return levels;\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp86b1pmrl.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n                                                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\" \");\n       \
    \ ArrayList<String> paren_strings_copy = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy2 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy3 = paren_strings_copy2.clone();\n        ArrayList<String>\
    \ paren_strings_copy4 = paren_strings_copy3.clone();\n        ArrayList<String>\
    \ paren_strings_copy5 = paren_strings_copy4.clone();\n        ArrayList<String>\
    \ paren_strings_copy6 = paren_strings_copy5.clone();\n        ArrayList<String>\
    \ paren_strings_copy7 = paren_strings_copy6.clone();\n        ArrayList<String>\
    \ paren_strings_copy8 = paren_strings_copy7.clone();\n        ArrayList<String>\
    \ paren_strings_copy9 = paren_strings_copy8.clone();\n        ArrayList<String>\
    \ paren_strings_copy10 = paren_strings_copy9.clone();\n        ArrayList<String>\
    \ paren_strings_copy11 = paren_strings_copy10.clone();\n        ArrayList<String>\
    \ paren_strings_copy12 = paren_strings_copy11.clone();\n        ArrayList<String>\
    \ paren_strings_copy13 = paren_strings_copy12.clone();\n        ArrayList<String>\
    \ paren_strings_copy14 = paren_strings_copy13.clone();\n        ArrayList<String>\
    \ paren_strings_copy15 = paren_strings_copy14.clone();\n        ArrayList<String>\
    \ paren_strings_copy16 = paren_strings_copy15.clone();\n        ArrayList<String>\
    \ paren_strings_copy17 = paren_strings_copy16.clone();\n        ArrayList<String>\
    \ paren_strings_copy18 = paren_strings_copy17.clone();\n        ArrayList<String>\
    \ paren_strings_copy19 = paren_strings_copy18.clone();\n        ArrayList<String>\
    \ paren_strings_copy20 = paren_strings_copy19.clone();\n        ArrayList<String>\
    \ paren_strings_copy21 = paren_strings_copy20.clone();\n        ArrayList<String>\
    \ paren_strings_copy22 = paren_strings_copy21.clone();\n        ArrayList<String>\
    \ paren_strings_copy23 = paren_strings_copy22.clone();\n        ArrayList<String>\
    \ paren_strings_copy24 = paren_strings_copy23.clone();\n        ArrayList<String>\
    \ paren_strings_copy25 = paren_strings_copy24.clone();\n        ArrayList<String>\
    \ paren_strings_copy26 = paren_strings_copy25.clone();\n        ArrayList<String>\
    \ paren_strings_copy27 = paren_strings_copy26.clone();\n        ArrayList<String>\
    \ paren_strings_copy28 = paren_strings_copy27.clone();\n        ArrayList<String>\
    \ paren_strings_copy29 = paren_strings_copy28.clone();\n        ArrayList<String>\
    \ paren_strings_copy30 = paren_strings_copy29.clone();\n        ArrayList<String>\
    \ paren_strings_copy31 = paren_strings_copy30.clone();\n        ArrayList<String>\
    \ paren_strings_copy32 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpohkt5th_.java:49: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpohkt5th_.java:50: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpohkt5th_.java:50: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpohkt5th_.java:50:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpohkt5th_.java:50: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpohkt5th_.java:50:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpohkt5th_.java:56: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_parens = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index4\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index14\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index19\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index20\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index24\
    \ = new ArrayList<Long>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9s0ij_ad.java:46: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        for (char c : paren_string.toCharArray())\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       stack.push(c);\n            } else if (c == ')') {\n                String\
    \ s = stack.pop();\n                if (s.equals(\"(\")) {\n                 \
    \   result.add(Long.valueOf(sb));\n                    sb.setLength(0);\n    \
    \            } else if (s.equals(\")\")) {\n                    result.add(Long.valueOf(sb));\n\
    \                    sb.setLength(0);\n                } else {\n            \
    \        sb.append(s);\n                }\n                in_paren = false;\n\
    \            } else if (in_paren) {\n                sb.append(c);\n         \
    \   }\n        }\n        if (sb.length() > 0) {\n            result.add(Long.valueOf(sb));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp5orv4q3.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\n/tmp/tmpp5orv4q3.java:26:\
    \ error: no suitable method found for valueOf(StringBuilder)\n               \
    \     result.add(Long.valueOf(sb));\n                                   ^\n  \
    \  method Long.valueOf(String) is not applicable\n      (argument mismatch; StringBuilder\
    \ cannot be converted to String)\n    method Long.valueOf(long) is not applicable\n\
    \      (argument mismatch; StringBuilder cannot be converted to long)\n/tmp/tmpp5orv4q3.java:29:\
    \ error: no suitable method found for valueOf(StringBuilder)\n               \
    \     result.add(Long.valueOf(sb));\n                                   ^\n  \
    \  method Long.valueOf(String) is not applicable\n      (argument mismatch; StringBuilder\
    \ cannot be converted to String)\n    method Long.valueOf(long) is not applicable\n\
    \      (argument mismatch; StringBuilder cannot be converted to long)\n/tmp/tmpp5orv4q3.java:40:\
    \ error: no suitable method found for valueOf(StringBuilder)\n            result.add(Long.valueOf(sb));\n\
    \                           ^\n    method Long.valueOf(String) is not applicable\n\
    \      (argument mismatch; StringBuilder cannot be converted to String)\n    method\
    \ Long.valueOf(long) is not applicable\n      (argument mismatch; StringBuilder\
    \ cannot be converted to long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n\
    \        ArrayList<Long> level\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpisjr_elu.java:55: error: ';' expected\n        ArrayList<Long>\
    \ level\n                             ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> levels_stack = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long> levels_\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiv3yhqi6.java:52: error: ';' expected\n        ArrayList<Long>\
    \ levels_\n                               ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<Long\n    }\n\
    \    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfv7hcaw.java:53: error: > expected\n    }\n    ^\n/tmp/tmpzfv7hcaw.java:52:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n/tmp/tmpzfv7hcaw.java:54:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpzfv7hcaw.java:54: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpzfv7hcaw.java:54: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpzfv7hcaw.java:54: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpzfv7hcaw.java:54:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpzfv7hcaw.java:60: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> levels_stack = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy5 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy6 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy10 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy11 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy17 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy18 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy22 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy23 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>(levels_stack);\n\
    \        ArrayList<Long> levels_stack_copy28\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_aica7gg.java:46: error: ';' expected\n        ArrayList<Long>\
    \ levels_stack_copy28\n                                           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> deepest_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> levels_stack = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack4 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack8 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack12 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack20 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack24 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack25\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack31 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack32 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack33\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack34 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack35 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack36 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack37\
    \ = new ArrayList<\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2uc8rqft.java:55: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp2uc8rqft.java:56: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmp2uc8rqft.java:56: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmp2uc8rqft.java:56: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmp2uc8rqft.java:56: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp2uc8rqft.java:56:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp2uc8rqft.java:62: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean in_paren = false;\n        boolean in_quote\
    \ = false;\n        boolean in_double_quote = false;\n        boolean in_single_quote\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_single_backtick\
    \ = false;\n        boolean in_double_backtick = false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2x7dnjv5.java:25: error: variable in_single_backtick is already\
    \ defined in method parseNestedParens(String)\n        boolean in_single_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:26: error: variable in_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:27: error: variable in_single_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_single_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:28: error: variable in_double_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_double_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:29: error: variable in_single_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_single_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:30: error: variable in_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:31: error: variable in_single_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_single_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:32: error: variable in_double_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_double_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:33: error: variable in_single_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_single_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:34: error: variable in_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:35: error: variable in_single_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean in_single_backtick\
    \ = false;\n                ^\n/tmp/tmp2x7dnjv5.java:36: error: variable in_double_backtick\
    \ is already defined in method parseNestedParens(String)\n        boolean "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy4\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy5\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy8\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy9\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy12\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy13\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy20\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy21\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy24\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy25\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnamfw869.java:47: error: > expected\n    }\n    ^\n/tmp/tmpnamfw869.java:46:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> stack2\
    \ = new ArrayList<>();\n        ArrayList<Long> stack3 = new ArrayList<>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<>();\n        ArrayList<Long> stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<>();\n        ArrayList<Long> stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<>();\n        ArrayList<Long> stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<>();\n        ArrayList<Long> stack15 = new ArrayList<>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<>();\n        ArrayList<Long> stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<>();\n        ArrayList<Long> stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<>();\n        ArrayList<Long> stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<>();\n        ArrayList<Long> stack27 = new ArrayList<>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<>();\n        ArrayList<Long> stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<>();\n        ArrayList<Long> stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<>();\n        ArrayList<Long> stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<>();\n        ArrayList<Long> stack39 = new ArrayList<>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<>();\n        ArrayList<Long> stack42 = new ArrayList<>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<>();\n        ArrayList<Long> stack45 = new ArrayList<>();\n\
    \        ArrayList<Long> stack46 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack47 = new ArrayList<>();\n        ArrayList<Long> stack48 = new ArrayList<>();\n\
    \        ArrayList<Long> stack49 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack50 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5wlfhby.java:66: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpk5wlfhby.java:67: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpk5wlfhby.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpk5wlfhby.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk5wlfhby.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean inParen = false;\n        boolean inBrace = false;\n        boolean\
    \ inBracket = false;\n        for (int i = 0; i < paren_string.length(); i++)\
    \ {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n\
    \                inParen = true;\n                stack.push(c);\n           \
    \ } else if (c == ')') {\n                inParen = false;\n                String\
    \ s = stack.pop();\n                result.add(Long.parseLong(s));\n         \
    \   } else if (c == '[') {\n                inBracket = true;\n              \
    \  stack.push(c);\n            } else if (c == ']') {\n                inBracket\
    \ = false;\n                String s = stack.pop();\n                result.add(Long.parseLong(s));\n\
    \            } else if (c == '{') {\n                inBrace = true;\n       \
    \         stack.push(c);\n            } else if (c == '}') {\n               \
    \ inBrace = false;\n                String s = stack.pop();\n                result.add(Long.parseLong(s));\n\
    \            } else if (c == ' ') {\n                if (inParen) {\n        \
    \            sb.append(c);\n                } else if (inBracket) {\n        \
    \            sb.append(c);\n                } else if (inBrace) {\n          \
    \          sb.append(c);\n                }\n            }\n        }\n      \
    \  if (sb.length() > 0) {\n            result.add(Long.parseLong(sb.toString()));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwnxca3ub.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\n/tmp/tmpwnxca3ub.java:32:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    stack.push(c);\n                           ^\n/tmp/tmpwnxca3ub.java:39: error:\
    \ incompatible types: char cannot be converted to String\n                stack.push(c);\n\
    \                           ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\"\\\\s+\");\n  \
    \      ArrayList<String> paren_strings_copy = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy2 = new ArrayList<String>();\n  \
    \      ArrayList<String> paren_strings_copy3 = new ArrayList<String>();\n    \
    \    ArrayList<String> paren_strings_copy4 = new ArrayList<String>();\n      \
    \  ArrayList<String> paren_strings_copy5 = new ArrayList<String>();\n        ArrayList<String>\
    \ paren_strings_copy6 = new ArrayList<String>();\n        ArrayList<String> paren_strings_copy7\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_strings_copy8 =\
    \ new ArrayList<String>();\n        ArrayList<String> paren_strings_copy9 = new\
    \ ArrayList<String>();\n        ArrayList<String> paren_strings_copy10 = new ArrayList<String>();\n\
    \        ArrayList<String> paren_strings_copy11 = new ArrayList<String>();\n \
    \       ArrayList<String> paren_strings_copy12 = new ArrayList<String>();\n  \
    \      ArrayList<String> paren_strings_copy13 = new ArrayList<String>();\n   \
    \     ArrayList<String> paren_strings_copy14 = new ArrayList<String>();\n    \
    \    ArrayList<String> paren_strings_copy15 = new ArrayList<String>();\n     \
    \   ArrayList<String> paren_strings_copy16 = new ArrayList<String>();\n      \
    \  ArrayList<String> paren_strings_copy17 = new ArrayList<String>();\n       \
    \ ArrayList<String> paren_strings_copy18 = new ArrayList<String>();\n        ArrayList<String>\
    \ paren_strings_copy19 = new ArrayList<String>();\n        ArrayList<String> paren_strings_copy20\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_strings_copy21 =\
    \ new ArrayList<String>();\n        ArrayList<String> paren_strings_copy22 = new\
    \ ArrayList<String>();\n        ArrayList<String> paren_strings_copy23 = new ArrayList<String>();\n\
    \        ArrayList<String> paren_strings_copy24 = new ArrayList<String>();\n \
    \       ArrayList<String> paren_strings_copy25 = new ArrayList<String>();\n  \
    \      ArrayList<String> paren_strings_copy26 = new ArrayList<String>();\n   \
    \     ArrayList<String> paren_strings_copy27 = new ArrayList<String>();\n    \
    \    ArrayList<String> paren_strings_copy28 = new ArrayList<String>();\n     \
    \   ArrayList<String> paren_strings_copy29 = new ArrayList<String>();\n      \
    \  ArrayList<String> paren_strings_copy30 = new ArrayList<String>();\n       \
    \ ArrayList<String> paren_strings_copy31 = new ArrayList<String>();\n        ArrayList<String>\
    \ paren_strings_copy32 = new ArrayList<String>();\n        ArrayList<String> paren_strings_copy33\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_strings_copy34 =\
    \ new ArrayList<String>();\n        ArrayList<String> paren_strings_copy35 = new\
    \ ArrayList<String>();\n        ArrayList<String> paren_strings_copy36 = new ArrayList<String>();\n\
    \        ArrayList<String> paren_strings_copy37 = new ArrayList<String>();\n \
    \       ArrayList<String> \n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqi37xr67.java:54: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpqi37xr67.java:54: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_parens = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_\n  \
    \  }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvqs6_xey.java:35: error: ';' expected\n        ArrayList<Long>\
    \ current_level_parens_\n                                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> parens = new ArrayList<>();\n        paren_string = paren_string.replaceAll(\"\
    \\\\(|\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\s+\"\
    , \" \");\n        String[] tokens = paren_string.split(\" \");\n        for(String\
    \ token : tokens) {\n            if(token.equals(\"(\")) {\n                parens.add(token);\n\
    \            } else if(token.equals(\")\")) {\n                while(parens.size()\
    \ > 0) {\n                    result.add(parens.get(parens.size() - 1));\n   \
    \                 parens.remove(parens.size() - 1);\n                }\n     \
    \       }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3bbzrvpu.java:25: error: incompatible types: String cannot be converted\
    \ to Long\n                    result.add(parens.get(parens.size() - 1));\n  \
    \                                       ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_top = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom = new\
    \ ArrayList<Long>();\n        ArrayList<Long> stack_bottom_top = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_bottom_bottom_top = new ArrayList<Long>();\n  \
    \      ArrayList<Long> stack_bottom_bottom_bottom_top = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_bottom_bottom_bottom_bottom_top = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_top = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_top =\
    \ new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0dbbd42l.java:40: error: ';' expected\n        ArrayList<Long>\
    \ stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_\n\
    \                                                                            \
    \                                                                            \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> levels = new ArrayList<>();\n     \
    \   ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy38\
    \ = new \n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphlkxnbix.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmphlkxnbix.java:55: error: '(' or '[' expected\n    }\n    ^\n/tmp/tmphlkxnbix.java:55:\
    \ error: ';' expected\n    }\n     ^\n/tmp/tmphlkxnbix.java:56: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmphlkxnbix.java:56: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmphlkxnbix.java:56: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmphlkxnbix.java:56: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmphlkxnbix.java:62:\
    \ error: reached end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> groups = new ArrayList<>();\n        ArrayList<Long> current_group\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_sum = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_sum2 = new ArrayList<>();\n        ArrayList<Long> current_level_sum3\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum4 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_sum5 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_sum6 = new ArrayList<>();\n        ArrayList<Long> current_level_sum7\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum8 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_sum9 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_sum10 = new ArrayList<>();\n        ArrayList<Long> current_level_sum11\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum12 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_sum13 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_sum14 = new ArrayList<>();\n        ArrayList<Long> current_level_sum15\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum16 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_sum17 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_sum18 = new ArrayList<>();\n        ArrayList<Long> current_level_sum19\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum20 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_sum21 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_sum22 = new ArrayList<>();\n        ArrayList<Long> current_level_sum23\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum24 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_sum25 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_sum26 = new ArrayList<>();\n        ArrayList<Long> current_level_sum27\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum28 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_sum29 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_sum30 = new ArrayList<>();\n        ArrayList<Long> current_level_sum31\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum32 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_sum33 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_sum34 = new ArrayList<>();\n        ArrayList<Long> current_level_sum35\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_sum36 = new ArrayList<>();\n\
    \        ArrayList<Long> current_level_sum37 = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_sum38 = new ArrayList<>();\n        ArrayList<Long> current_level_sum39\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk0cg_ap.java:58: error: ';' expected\n        ArrayList<Long>\
    \ current_level_\n                                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> levels = new ArrayList<>();\n     \
    \   ArrayList<String> groups = new ArrayList<>();\n        ArrayList<Long> levels_stack\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy3 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy4\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy7 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy8\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy11 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy15 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy19 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy23 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy27 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy31 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy35 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy37 = new ArrayList<>();\n\
    \        ArrayList<\n    }\n    public static void main(String[] args) {\n   \
    \ assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9k9dcf1m.java:56: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmp9k9dcf1m.java:55: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> stack2\
    \ = new ArrayList<>();\n        ArrayList<Long> stack3 = new ArrayList<>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<>();\n        ArrayList<Long> stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<>();\n        ArrayList<Long> stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<>();\n        ArrayList<Long> stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<>();\n        ArrayList<Long> stack15 = new ArrayList<>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<>();\n        ArrayList<Long> stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<>();\n        ArrayList<Long> stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<>();\n        ArrayList<Long> stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<>();\n        ArrayList<Long> stack27 = new ArrayList<>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<>();\n        ArrayList<Long> stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<>();\n        ArrayList<Long> stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<>();\n        ArrayList<Long> stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<>();\n        ArrayList<Long> stack39 = new ArrayList<>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<>();\n        ArrayList<Long> stack42 = new ArrayList<>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<>();\n        ArrayList<Long> stack45 = new ArrayList<>();\n\
    \        ArrayList<Long> stack46 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack47 = new ArrayList<>();\n        ArrayList<Long> stack48 = new ArrayList<>();\n\
    \        ArrayList<Long> stack49 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack50 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5wlfhby.java:66: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpk5wlfhby.java:67: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpk5wlfhby.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpk5wlfhby.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk5wlfhby.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder buffer = new StringBuilder();\n\
    \        for (char c : paren_string.toCharArray()) {\n            if (c == '(')\
    \ {\n                stack.push(c);\n            } else if (c == ')') {\n    \
    \            while (!stack.isEmpty() && stack.peek() != '(') {\n             \
    \       result.add(Long.parseLong(buffer.toString()));\n                    buffer.delete(0,\
    \ buffer.length());\n                    stack.pop();\n                }\n   \
    \             stack.pop();\n                buffer.append(c);\n            } else\
    \ if (c == ' ') {\n                buffer.append(c);\n            } else {\n \
    \               buffer.append(c);\n            }\n        }\n        while (!stack.isEmpty())\
    \ {\n            result.add(Long.parseLong(buffer.toString()));\n            buffer.delete(0,\
    \ buffer.length());\n            stack.pop();\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3mkn28z.java:20: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\n/tmp/tmpv3mkn28z.java:22:\
    \ error: bad operand types for binary operator '!='\n                while (!stack.isEmpty()\
    \ && stack.peek() != '(') {\n                                                \
    \        ^\n  first type:  String\n  second type: char\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> stack2\
    \ = new ArrayList<>();\n        ArrayList<Long> stack3 = new ArrayList<>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<>();\n        ArrayList<Long> stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<>();\n        ArrayList<Long> stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<>();\n        ArrayList<Long> stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<>();\n        ArrayList<Long> stack15 = new ArrayList<>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<>();\n        ArrayList<Long> stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<>();\n        ArrayList<Long> stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<>();\n        ArrayList<Long> stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<>();\n        ArrayList<Long> stack27 = new ArrayList<>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<>();\n        ArrayList<Long> stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<>();\n        ArrayList<Long> stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<>();\n        ArrayList<Long> stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<>();\n        ArrayList<Long> stack39 = new ArrayList<>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<>();\n        ArrayList<Long> stack42 = new ArrayList<>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<>();\n        ArrayList<Long> stack45 = new ArrayList<>();\n\
    \        ArrayList<Long> stack46 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack47 = new ArrayList<>();\n        ArrayList<Long> stack48 = new ArrayList<>();\n\
    \        ArrayList<Long> stack49 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack50 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5wlfhby.java:66: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpk5wlfhby.java:67: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpk5wlfhby.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpk5wlfhby.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk5wlfhby.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> level\
    \ = new ArrayList<>();\n        ArrayList<Long> levels = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_level = new ArrayList<>();\n        ArrayList<Long> levels_levels = new\
    \ ArrayList<>();\n        ArrayList<Long> levels_levels_level = new ArrayList<>();\n\
    \        ArrayList<Long> levels_levels_levels = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_levels_levels_level = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_level\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_levels_level\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_levels_levels_level\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_levels_levels_levels_level\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_levels_levels_levels_level\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_levels_levels_levels_levels_level\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_levels_levels_levels_levels_levels_level\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_levels_levels_levels_levels_levels_level\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_levels_levels_levels_levels_levels_levels_levels_level\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_gte3qv6.java:42: error: ';' expected\n        ArrayList<Long>\
    \ levels_levels_levels_levels_levels_levels_levels_levels_level\n            \
    \                                                                         ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> deepest_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_parens = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count4\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count14\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count19\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count20\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count24\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count25\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count26\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count27\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count28\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_depth_count29\
    \ = new ArrayList<Long\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4j_drvxm.java:48: error: > expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> levels_stack = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ik6r5xk.java:52: error: ';' expected\n        ArrayList<Long>\
    \ levels_stack_\n                                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659797914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy4\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy5\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy8\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy9\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy12\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy13\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy20\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy21\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy24\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy25\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> \n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu91e710p.java:46: error: not a statement\n        ArrayList<Long>\
    \ \n                 ^\n/tmp/tmpu91e710p.java:46: error: ';' expected\n      \
    \  ArrayList<Long> \n                       ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean inParens = false;\n        boolean inBrackets = false;\n    \
    \    boolean inBraces = false;\n        boolean inBrace = false;\n        boolean\
    \ inBracket = false;\n        boolean inParen = false;\n        boolean inBracketParen\
    \ = false;\n        boolean inBraceParen = false;\n        boolean inBracketParens\
    \ = false;\n        boolean inBraceParens = false;\n        boolean inBracketParenParen\
    \ = false;\n        boolean inBraceParenParen = false;\n        boolean inBracketParenParens\
    \ = false;\n        boolean inBraceParenParens = false;\n        boolean inBracketParenParenParen\
    \ = false;\n        boolean inBraceParenParenParen = false;\n        boolean inBracketParenParenParens\
    \ = false;\n        boolean inBraceParenParenParens = false;\n        boolean\
    \ inBracketParenParenParenParen = false;\n        boolean inBraceParenParenParenParen\
    \ = false;\n        boolean inBracketParenParenParenParens = false;\n        boolean\
    \ inBraceParenParenParenParens = false;\n        boolean inBracketParenParenParenParenParen\
    \ = false;\n        boolean inBraceParenParenParenParenParen = false;\n      \
    \  boolean inBracketParenParenParenParenParens = false;\n        boolean inBraceParenParenParenParenParens\
    \ = false;\n        boolean inBracketParenParenParenParenParenParen = false;\n\
    \        boolean inBraceParenParenParenParenParenParen = false;\n        boolean\
    \ inBracketParenParenParenParenParenParens = false;\n        boolean inBraceParenParenParenParenParenParens\
    \ = false;\n        boolean inBracketParenParenParenParenParenParenParen = false;\n\
    \        boolean inBraceParenParenParenParenParenParenParen = false;\n       \
    \ boolean inBracketParenParenParenParenParenParenParens = false;\n        boolean\
    \ inBraceParenParenParenParenParenParenParens = false;\n        boolean inBracketParenParenParenParenParenParenParenParen\
    \ = false;\n        boolean inBraceParenParenParenParenParenParenParenParen =\
    \ false;\n        boolean inBracketParenParenParenParenParenParenParenParens =\
    \ false;\n        boolean inBraceParenParenParenParenParenParenParenParens = false;\n\
    \        boolean inBracketParenParenParenParenParenParenParenParenParenParen =\
    \ false;\n        boolean inBraceParenParenParenParenParenParenParenParenParen\
    \ = false;\n        boolean inBracketParenParenParenParenParenParenParenParenParens\
    \ = false;\n        boolean inBraceParenParen\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpit96w5tr.java:59: error: ';' expected\n        boolean inBraceParenParen\n\
    \                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean inParens = false;\n        boolean inQuotes = false;\n      \
    \  boolean inDoubleQuotes = false;\n        boolean inSingleQuotes = false;\n\
    \        boolean inBackslash = false;\n        boolean inSingleBackslash = false;\n\
    \        boolean inDoubleBackslash = false;\n        boolean inSingleSingleQuotes\
    \ = false;\n        boolean inDoubleSingleQuotes = false;\n        boolean inSingleDoubleQuotes\
    \ = false;\n        boolean inDoubleDoubleQuotes = false;\n        boolean inSingleBackslash\
    \ = false;\n        boolean inDoubleBackslash = false;\n        boolean inSingleSingleBackslash\
    \ = false;\n        boolean inDoubleSingleBackslash = false;\n        boolean\
    \ inSingleDoubleBackslash = false;\n        boolean inDoubleDoubleBackslash =\
    \ false;\n        boolean inSingleSingleSingleQuotes = false;\n        boolean\
    \ inDoubleSingleSingleQuotes = false;\n        boolean inSingleSingleDoubleQuotes\
    \ = false;\n        boolean inDoubleSingleDoubleQuotes = false;\n        boolean\
    \ inSingleDoubleDoubleQuotes = false;\n        boolean inDoubleDoubleDoubleQuotes\
    \ = false;\n        boolean inSingleBackslash = false;\n        boolean inDoubleBackslash\
    \ = false;\n        boolean inSingleSingleBackslash = false;\n        boolean\
    \ inDoubleSingleBackslash = false;\n        boolean inSingleDoubleBackslash =\
    \ false;\n        boolean inDoubleDoubleBackslash = false;\n        boolean inSingleSingleSingleBackslash\
    \ = false;\n        boolean inDoubleSingleSingleBackslash = false;\n        boolean\
    \ inSingleSingleDoubleBackslash = false;\n        boolean inDoubleSingleDoubleBackslash\
    \ = false;\n        boolean inSingleDoubleDoubleBackslash = false;\n        boolean\
    \ inDoubleDoubleDoubleBackslash = false;\n        boolean inSingleSingleSingleSingleBackslash\
    \ = false;\n        boolean inDoubleSingleSingleSingleBackslash = false;\n   \
    \     boolean inSingleSingleSingleDoubleBackslash = false;\n        boolean inDoubleSingleSingleDoubleBackslash\
    \ = false;\n        boolean inSingleSingleDoubleDoubleBackslash = false;\n   \
    \     boolean inDoubleSingleDoubleDoubleBackslash = false;\n        boolean inSingleDoubleDoubleDoubleBackslash\
    \ = false;\n        boolean inDoubleDoubleDoubleBackslash = false;\n        boolean\
    \ inSingleSingleSingleSingleSingleBackslash = false;\n        boolean inDoubleSingleSingleSingleSingleBackslash\
    \ = false;\n        boolean inSingleSingleSingleSingleDoubleBackslash = false;\n\
    \        boolean inDoubleSingleSingleSingleDoubleBackslash = false;\n        boolean\
    \ inSingleSingleSingleDoubleDoubleBackslash = false;\n        boolean inDoubleSingleSingleSingleDoubleDoubleBackslash\
    \ = false;\n        boolean inSingleSingleDoubleSingleSingleBackslash = false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpor4blgoc.java:29: error: variable inSingleBackslash is already\
    \ defined in method parseNestedParens(String)\n        boolean inSingleBackslash\
    \ = false;\n                ^\n/tmp/tmpor4blgoc.java:30: error: variable inDoubleBackslash\
    \ is already defined in method parseNestedParens(String)\n        boolean inDoubleBackslash\
    \ = false;\n                ^\n/tmp/tmpor4blgoc.java:41: error: variable inSingleBackslash\
    \ is already defined in method parseNestedParens(String)\n        boolean inSingleBackslash\
    \ = false;\n                ^\n/tmp/tmpor4blgoc.java:42: error: variable inDoubleBackslash\
    \ is already defined in method parseNestedParens(String)\n        boolean inDoubleBackslash\
    \ = false;\n                ^\n/tmp/tmpor4blgoc.java:43: error: variable inSingleSingleBackslash\
    \ is already defined in method parseNestedParens(String)\n        boolean inSingleSingleBackslash\
    \ = false;\n                ^\n/tmp/tmpor4blgoc.java:44: error: variable inDoubleSingleBackslash\
    \ is already defined in method parseNestedParens(String)\n        boolean inDoubleSingleBackslash\
    \ = false;\n                ^\n/tmp/tmpor4blgoc.java:45: error: variable inSingleDoubleBackslash\
    \ is already defined in method parseNestedParens(String)\n        boolean inSingleDoubleBackslash\
    \ = false;\n                ^\n/tmp/tmpor4blgoc.java:46: error: variable inDoubleDoubleBackslash\
    \ is already defined in method parseNestedParens(String)\n        boolean inDoubleDoubleBackslash\
    \ = false;\n                ^\n/tmp/tmpor4blgoc.java:60: error: variable inDoubleDoubleDoubleBackslash\
    \ is already defined in method parseNestedParens(String)\n        boolean inDoubleDoubleDoubleBackslash\
    \ = false;\n                ^\n9 errors\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_groups = paren_string.split(\"\\\\s+\");\n   \
    \     for (String group : paren_groups) {\n            ArrayList<Long> new_group\
    \ = new ArrayList<Long>();\n            ArrayList<String> group_split = group.split(\"\
    \\\\(\");\n            for (String group_split : group_split) {\n            \
    \    ArrayList<Long> new_group_split = new ArrayList<Long>();\n              \
    \  ArrayList<String> group_split_split = group_split.split(\"\\\\)\");\n     \
    \           for (String group_split_split : group_split_split) {\n           \
    \         ArrayList<Long> new_group_split_split = new ArrayList<Long>();\n   \
    \                 ArrayList<String> group_split_split_split = group_split_split.split(\"\
    \\\\)\");\n                    for (String group_split_split_split : group_split_split_split)\
    \ {\n                        ArrayList<Long> new_group_split_split_split = new\
    \ ArrayList<Long>();\n                        ArrayList<String> group_split_split_split_split\
    \ = group_split_split_split.split(\"\\\\)\");\n                        for (String\
    \ group_split_split_split_split : group_split_split_split_split) {\n         \
    \                   ArrayList<Long> new_group_split_split_split_split = new ArrayList<Long>();\n\
    \                            ArrayList<String> group_split_split_split_split_split\
    \ = group_split_split_split_split.split(\"\\\\)\");\n                        \
    \    for (String group_split_split_split_split_split : group_split_split_split_split_split)\
    \ {\n                                ArrayList<Long> new_group_split_split_split_split_split\
    \ = new ArrayList<Long>();\n                                ArrayList<String>\
    \ group_split_split_split_split_split_split = group_split_split_split_split_split.split(\"\
    \\\\)\");\n                                for (String group_split_split_split_split_split_split\
    \ : group_split_split_split_split_split_split) {\n                           \
    \         ArrayList<Long> new_group_split_split_split_split_split_split = new\
    \ ArrayList<Long>();\n                                    ArrayList<String> group_split_split_split_split_split_split_split\
    \ = group_split_split_split_split_split_split.split(\"\\\\)\");\n            \
    \                        for (String group_split_split_split_split_split_split_split\
    \ : group_split_split_split_split_split_split_split) {\n                     \
    \                   ArrayList<Long> new_group_split_split_split_split_split_split_split\
    \ = new ArrayList<Long>();\n                                        ArrayList<String>\
    \ group_split_split_split_split_split_split_split_split = group_split_split_split_split_split_split_split_split.split(\"\
    \\\\)\");\n                                        for (String group_split_split_split_split_split_split_split_split\
    \ : group_split_split_split_split_split_split_split_split_split) {\n         \
    \                                   ArrayList<Long> new_group_split_split_split_split_split_split_split_split\
    \ = new ArrayList<Long>();\n                                            ArrayList<String>\
    \ group_split_split_split_split_split_split_split_split_split = group_split_split_split_split_split_split_split_split_split_split.split(\"\
    \\\\)\");\n                                            for (String group_split_split_split_split_split_split_split_split\
    \ : group_split_split_split_split_split_split_split_split_split) {\n         \
    \                                       ArrayList<Long> new_group_\n    }\n  \
    \  public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpigc3zjov.java:45: error: ';' expected\n                       \
    \                         ArrayList<Long> new_group_\n                       \
    \                                                   ^\n/tmp/tmpigc3zjov.java:47:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean in_paren = false;\n        for (int i\
    \ = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n\
    \            if (c == '(') {\n                in_paren = true;\n             \
    \   stack.push(c);\n            } else if (c == ')') {\n                String\
    \ s = stack.pop();\n                if (s.equals(\"(\")) {\n                 \
    \   result.add(new Long(sb.length()));\n                    sb.setLength(0);\n\
    \                } else if (s.equals(\")\")) {\n                    result.add(new\
    \ Long(sb.length()));\n                    sb.setLength(0);\n                }\
    \ else {\n                    sb.append(s);\n                }\n             \
    \   in_paren = false;\n            } else if (in_paren) {\n                sb.append(c);\n\
    \            }\n        }\n        if (sb.length() > 0) {\n            result.add(new\
    \ Long(sb.length()));\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsk28v571.java:23: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\n/tmp/tmpsk28v571.java:27:\
    \ warning: [removal] Long(long) in Long has been deprecated and marked for removal\n\
    \                    result.add(new Long(sb.length()));\n                    \
    \           ^\n/tmp/tmpsk28v571.java:30: warning: [removal] Long(long) in Long\
    \ has been deprecated and marked for removal\n                    result.add(new\
    \ Long(sb.length()));\n                               ^\n/tmp/tmpsk28v571.java:41:\
    \ warning: [removal] Long(long) in Long has been deprecated and marked for removal\n\
    \            result.add(new Long(sb.length()));\n                       ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n3 warnings\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> stack2\
    \ = new ArrayList<>();\n        ArrayList<Long> stack3 = new ArrayList<>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<>();\n        ArrayList<Long> stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<>();\n        ArrayList<Long> stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<>();\n        ArrayList<Long> stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<>();\n        ArrayList<Long> stack15 = new ArrayList<>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<>();\n        ArrayList<Long> stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<>();\n        ArrayList<Long> stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<>();\n        ArrayList<Long> stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<>();\n        ArrayList<Long> stack27 = new ArrayList<>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<>();\n        ArrayList<Long> stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<>();\n        ArrayList<Long> stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<>();\n        ArrayList<Long> stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<>();\n        ArrayList<Long> stack39 = new ArrayList<>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<>();\n        ArrayList<Long> stack42 = new ArrayList<>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<>();\n        ArrayList<Long> stack45 = new ArrayList<>();\n\
    \        ArrayList<Long> stack46 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack47 = new ArrayList<>();\n        ArrayList<Long> stack48 = new ArrayList<>();\n\
    \        ArrayList<Long> stack49 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack50 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5wlfhby.java:66: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpk5wlfhby.java:67: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpk5wlfhby.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpk5wlfhby.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk5wlfhby.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<\n    }\n  \
    \  public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbcla8fa.java:53: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmplbcla8fa.java:52: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> stack2\
    \ = new ArrayList<>();\n        ArrayList<Long> stack3 = new ArrayList<>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<>();\n        ArrayList<Long> stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<>();\n        ArrayList<Long> stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<>();\n        ArrayList<Long> stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<>();\n        ArrayList<Long> stack15 = new ArrayList<>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<>();\n        ArrayList<Long> stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<>();\n        ArrayList<Long> stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<>();\n        ArrayList<Long> stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<>();\n        ArrayList<Long> stack27 = new ArrayList<>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<>();\n        ArrayList<Long> stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<>();\n        ArrayList<Long> stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<>();\n        ArrayList<Long> stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<>();\n        ArrayList<Long> stack39 = new ArrayList<>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<>();\n        ArrayList<Long> stack42 = new ArrayList<>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<>();\n        ArrayList<Long> stack45 = new ArrayList<>();\n\
    \        ArrayList<Long> stack46 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack47 = new ArrayList<>();\n        ArrayList<Long> stack48 = new ArrayList<>();\n\
    \        ArrayList<Long> stack49 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack50 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5wlfhby.java:66: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpk5wlfhby.java:67: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpk5wlfhby.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpk5wlfhby.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk5wlfhby.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> levels_stack = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack4 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack8 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack12 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack20 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack24 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack25\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack31 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack32 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack33\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack34 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack35 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack36 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack37\
    \ = new ArrayList<Long>();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4pj92iz4.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack2 = new ArrayList<Long>();\n        ArrayList<Long> stack3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<Long>();\n        ArrayList<Long> stack6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<Long>();\n        ArrayList<Long> stack9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<Long>();\n        ArrayList<Long> stack12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<Long>();\n        ArrayList<Long> stack15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<Long>();\n        ArrayList<Long> stack18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<Long>();\n        ArrayList<Long> stack21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<Long>();\n        ArrayList<Long> stack24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<Long>();\n        ArrayList<Long> stack27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<Long>();\n        ArrayList<Long> stack30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<Long>();\n        ArrayList<Long> stack33 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<Long>();\n        ArrayList<Long> stack36 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<Long>();\n        ArrayList<Long> stack39 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<Long>();\n        ArrayList<Long> stack42 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<Long>();\n        ArrayList<Long> stack45 = new ArrayList<Long>();\n\
    \        ArrayList<Long\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkmni_lwk.java:62: error: > expected\n    }\n    ^\n/tmp/tmpkmni_lwk.java:61:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n/tmp/tmpkmni_lwk.java:63:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpkmni_lwk.java:63: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpkmni_lwk.java:63: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpkmni_lwk.java:63: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpkmni_lwk.java:63:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpkmni_lwk.java:69: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<\n    }\n  \
    \  public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbcla8fa.java:53: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmplbcla8fa.java:52: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> deepest_level = new ArrayList<Long>();\n\
    \        ArrayList<String> groups = new ArrayList<String>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> levels_stack = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long> level\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8to7les.java:52: error: ';' expected\n        ArrayList<Long>\
    \ level\n                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<Long\n    }\n\
    \    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfv7hcaw.java:53: error: > expected\n    }\n    ^\n/tmp/tmpzfv7hcaw.java:52:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n/tmp/tmpzfv7hcaw.java:54:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpzfv7hcaw.java:54: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpzfv7hcaw.java:54: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpzfv7hcaw.java:54: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpzfv7hcaw.java:54:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpzfv7hcaw.java:60: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\"\\\\s+\");\n  \
    \      for (String s : paren_strings) {\n            ArrayList<Long> temp = new\
    \ ArrayList<Long>();\n            ArrayList<String> temp2 = s.split(\"\\\\(\"\
    );\n            for (String s2 : temp2) {\n                ArrayList<Long> temp3\
    \ = new ArrayList<Long>();\n                ArrayList<String> temp4 = s2.split(\"\
    \\\\)\");\n                for (String s3 : temp4) {\n                    ArrayList<Long>\
    \ temp5 = new ArrayList<Long>();\n                    ArrayList<String> temp6\
    \ = s3.split(\"\\\\)\");\n                    for (String s4 : temp6) {\n    \
    \                    ArrayList<Long> temp7 = new ArrayList<Long>();\n        \
    \                ArrayList<String> temp8 = s4.split(\"\\\\)\");\n            \
    \            for (String s5 : temp8) {\n                            ArrayList<Long>\
    \ temp9 = new ArrayList<Long>();\n                            ArrayList<String>\
    \ temp10 = s5.split(\"\\\\)\");\n                            for (String s6 :\
    \ temp10) {\n                                ArrayList<Long> temp11 = new ArrayList<Long>();\n\
    \                                ArrayList<String> temp12 = s6.split(\"\\\\)\"\
    );\n                                for (String s7 : temp12) {\n             \
    \                       ArrayList<Long> temp13 = new ArrayList<Long>();\n    \
    \                                ArrayList<String> temp14 = s7.split(\"\\\\)\"\
    );\n                                    for (String s8 : temp14) {\n         \
    \                               ArrayList<Long> temp15 = new ArrayList<Long>();\n\
    \                                        ArrayList<String> temp16 = s8.split(\"\
    \\\\)\");\n                                        for (String s9 : temp16) {\n\
    \                                            ArrayList<Long> temp17 = new ArrayList<Long>();\n\
    \                                            ArrayList<String> temp18 = s9.split(\"\
    \\\\)\");\n                                            for (String s10 : temp18)\
    \ {\n                                                ArrayList<Long> temp19 =\
    \ new ArrayList<Long>();\n                                                ArrayList<String>\
    \ temp20 = s10.split(\"\\\\)\");\n                                           \
    \     for (String s11 : temp20) {\n                                          \
    \          ArrayList<Long> temp21 = new ArrayList<Long>();\n                 \
    \                                   ArrayList<String> temp22 = s11.split(\"\\\\\
    )\");\n                                                    for (String s12 : temp22)\
    \ {\n                                                        ArrayList<Long> temp23\
    \ = new ArrayList<Long>();\n                                                 \
    \       ArrayList<String> temp24 = s12.split(\"\\\\)\");\n                   \
    \                                     for (String s13 : temp24) {\n          \
    \                                                  ArrayList<Long> temp25 = new\
    \ ArrayList<Long>();\n                                                       \
    \     ArrayList<String> temp26 = s13.split(\"\\\\)\");\n                     \
    \                                       for (String s14 : temp26) {\n        \
    \                                                        ArrayList<Long> temp27\
    \ = new ArrayList<Long>();\n                                                 \
    \               ArrayList<String> temp28 = s14.split(\"\\\\)\");\n           \
    \                                                     for (String s15 : temp28)\
    \ {\n                                                                    ArrayList<Long>\
    \ temp29 = new ArrayList<Long>();\n                                          \
    \                          ArrayList<String> temp30\n    }\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphevm1bzn.java:61: error: ';' expected\n                       \
    \                                             ArrayList<String> temp30\n     \
    \                                                                            \
    \           ^\n/tmp/tmphevm1bzn.java:63: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> levels = new ArrayList<Long>();\n \
    \       ArrayList<Long> levels_stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy11 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy23 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy35 = new ArrayList<Long>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8xyh1cim.java:52: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index3 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_levels_index4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels_index5 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> current_levels_index6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index7 = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index9 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_levels_index10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels_index11 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> current_levels_index12 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> current_levels_index13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index14 = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index16 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_levels_index17 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels_index18 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> current_levels_index19 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> current_levels_index20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index21 = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index23 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_levels_index24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels_index25 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> current_levels_index26 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> current_levels_index27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index28 = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index30 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_levels_index31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels_index32 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> current_levels_index33 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> current_levels_index34 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index35 = new ArrayList<Long>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuw_ggfmx.java:52: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_groups = paren_string.split(\"\\\\s+\");\n   \
    \     ArrayList<String> paren_groups_copy = paren_groups.clone();\n        ArrayList<String>\
    \ paren_groups_copy2 = paren_groups.clone();\n        ArrayList<String> paren_groups_copy3\
    \ = paren_groups.clone();\n        ArrayList<String> paren_groups_copy4 = paren_groups.clone();\n\
    \        ArrayList<String> paren_groups_copy5 = paren_groups.clone();\n      \
    \  ArrayList<String> paren_groups_copy6 = paren_groups.clone();\n        ArrayList<String>\
    \ paren_groups_copy7 = paren_groups.clone();\n        ArrayList<String> paren_groups_copy8\
    \ = paren_groups.clone();\n        ArrayList<String> paren_groups_copy9 = paren_groups.clone();\n\
    \        ArrayList<String> paren_groups_copy10 = paren_groups.clone();\n     \
    \   ArrayList<String> paren_groups_copy11 = paren_groups.clone();\n        ArrayList<String>\
    \ paren_groups_copy12 = paren_groups.clone();\n        ArrayList<String> paren_groups_copy13\
    \ = paren_groups.clone();\n        ArrayList<String> paren_groups_copy14 = paren_groups.clone();\n\
    \        ArrayList<String> paren_groups_copy15 = paren_groups.clone();\n     \
    \   ArrayList<String> paren_groups_copy16 = paren_groups.clone();\n        ArrayList<String>\
    \ paren_groups_copy17 = paren_groups.clone();\n        ArrayList<String> paren_groups_copy18\
    \ = paren_groups.clone();\n        ArrayList<String> paren_groups_copy19 = paren_groups.clone();\n\
    \        ArrayList<String> paren_groups_copy20 = paren_groups.clone();\n     \
    \   ArrayList<String> paren_groups_copy21 = paren_groups.clone();\n        ArrayList<String>\
    \ paren_groups_copy22 = paren_groups.clone();\n        ArrayList<String> paren_groups_copy23\
    \ = paren_groups.clone();\n        ArrayList<String> paren_groups_copy24 = paren_groups.clone();\n\
    \        ArrayList<String> paren_groups_copy25 = paren_groups.clone();\n     \
    \   ArrayList<String> paren_groups_copy26 = paren_groups.clone();\n        ArrayList<String>\
    \ paren_groups_copy27 = paren_groups.clone();\n        ArrayList<String> paren_groups_copy28\
    \ = paren_groups.clone();\n        ArrayList<String> paren_groups_copy29 = paren_groups.clone();\n\
    \        ArrayList<String> paren_groups_copy30 = paren_groups.clone();\n     \
    \   ArrayList<String> paren_groups_copy31 = paren_groups.clone();\n        ArrayList<String>\
    \ paren_groups_copy32 = paren_groups.clone();\n        ArrayList<String> paren_groups_copy33\
    \ = paren_groups.clone();\n        ArrayList<String> paren_\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpszemev2g.java:50: error: ';' expected\n        ArrayList<String>\
    \ paren_\n                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_ind = new ArrayList<Long>();\n        ArrayList<Long> level_ind =\
    \ new ArrayList<Long>();\n        ArrayList<Long> max_level_ind_ind = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_ind_ind = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_ind_ind_ind = new ArrayList<Long>();\n        ArrayList<Long> level_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_ind_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_ind_ind_ind_ind = new\
    \ ArrayList<Long>();\n        ArrayList<Long> max_level_ind_ind_ind_ind_ind =\
    \ new ArrayList<Long>();\n        ArrayList<Long> level_ind_ind_ind_ind_ind =\
    \ new ArrayList<Long>();\n        ArrayList<Long> max_level_ind_ind_ind_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_ind_ind_ind_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_ind_ind_ind_ind_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_ind_ind_ind_ind_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind_ind\
    \ = new ArrayList<Long\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvmgywy9j.java:43: error: > expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level2 = new ArrayList<Long>();\n        ArrayList<Long> current_level3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level6 = new ArrayList<Long>();\n        ArrayList<Long> current_level7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level10 = new ArrayList<Long>();\n        ArrayList<Long> current_level11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level14 = new ArrayList<Long>();\n        ArrayList<Long> current_level15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level18 = new ArrayList<Long>();\n        ArrayList<Long> current_level19\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level22 = new ArrayList<Long>();\n        ArrayList<Long> current_level23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level26 = new ArrayList<Long>();\n        ArrayList<Long> current_level27\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level28 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level29 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level30 = new ArrayList<Long>();\n        ArrayList<Long> current_level31\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level32 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level34 = new ArrayList<Long>();\n        ArrayList<Long> current_level35\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level36 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level37 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level38 = new ArrayList<Long>();\n        ArrayList<Long> current_level39\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level40 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level41 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level4\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkj93q2fh.java:57: error: ';' expected\n        ArrayList<Long>\
    \ current_level4\n                                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659797917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> groups = new ArrayList<>();\n        ArrayList<Long> levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_copy = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy_temp = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy_temp2 = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp3\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp4 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy_temp5 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy_temp6 = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp7\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp8 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy_temp9 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy_temp10 = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp11\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp12 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy_temp13 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy_temp14 = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp15\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp16 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy_temp17 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy_temp18 = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp19\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp20 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy_temp21 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy_temp22 = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp23\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp24 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy_temp25 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy_temp26 = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp27\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp28 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy_temp29 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy_temp30 = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp31\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp32 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_copy_temp33 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_copy_temp34 = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp35\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_copy_temp36 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ftom3tl.java:55: error: ';' expected\n        ArrayList<Long>\
    \ levels_\n                               ^\n1 error\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        boolean in_group = false;\n      \
    \  boolean in_quote = false;\n        boolean in_quote2 = false;\n        boolean\
    \ in_quote3 = false;\n        boolean in_quote4 = false;\n        boolean in_quote5\
    \ = false;\n        boolean in_quote6 = false;\n        boolean in_quote7 = false;\n\
    \        boolean in_quote8 = false;\n        boolean in_quote9 = false;\n    \
    \    boolean in_quote10 = false;\n        boolean in_quote11 = false;\n      \
    \  boolean in_quote12 = false;\n        boolean in_quote13 = false;\n        boolean\
    \ in_quote14 = false;\n        boolean in_quote15 = false;\n        boolean in_quote16\
    \ = false;\n        boolean in_quote17 = false;\n        boolean in_quote18 =\
    \ false;\n        boolean in_quote19 = false;\n        boolean in_quote20 = false;\n\
    \        boolean in_quote21 = false;\n        boolean in_quote22 = false;\n  \
    \      boolean in_quote23 = false;\n        boolean in_quote24 = false;\n    \
    \    boolean in_quote25 = false;\n        boolean in_quote26 = false;\n      \
    \  boolean in_quote27 = false;\n        boolean in_quote28 = false;\n        boolean\
    \ in_quote29 = false;\n        boolean in_quote30 = false;\n        boolean in_quote31\
    \ = false;\n        boolean in_quote32 = false;\n        boolean in_quote33 =\
    \ false;\n        boolean in_quote34 = false;\n        boolean in_quote35 = false;\n\
    \        boolean in_quote36 = false;\n        boolean in_quote37 = false;\n  \
    \      boolean in_quote38 = false;\n        boolean in_quote39 = false;\n    \
    \    boolean in_quote40 = false;\n        boolean in_quote41 = false;\n      \
    \  boolean in_quote42 = false;\n        boolean in_quote43 = false;\n        boolean\
    \ in_quote44 = false;\n        boolean in_quote45 = false;\n        boolean in_quote46\
    \ = false;\n        boolean in_quote47 = false;\n        boolean in_quote48 =\
    \ false;\n        boolean in_quote49 = false;\n        boolean in_quote50 = false;\n\
    \        boolean in_quote51 = false;\n        boolean in_quote52 = false;\n  \
    \      boolean in_quote53 = false;\n        boolean in_quote54 = false;\n    \
    \    boolean in_quote55 = false;\n        boolean in_quote56 = false;\n      \
    \  boolean in_quote57 = false;\n        boolean in_quote58 = false;\n        boolean\
    \ in_quote59 = false;\n        boolean in_quote60 = false;\n        boolean in_quote61\
    \ = false;\n        boolean in_quote62 = false;\n        boolean in_quote63 =\
    \ false;\n        boolean in_quote64 = false;\n        boolean in_quote65 = false;\n\
    \        boolean in_quote66\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ifwf8_0.java:85: error: ';' expected\n        boolean in_quote66\n\
    \                          ^\n1 error\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean inside_parantheses = false;\n        boolean\
    \ in_parenthesis = false;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(')\
    \ {\n                stack.push(c);\n                inside_parantheses = true;\n\
    \            } else if (c == ')') {\n                String s = stack.pop();\n\
    \                if (inside_parantheses && s.equals(\"(\")) {\n              \
    \      inside_parantheses = false;\n                } else if (inside_parantheses\
    \ && s.equals(\")\")) {\n                    inside_parantheses = false;\n   \
    \                 result.add(Long.parseLong(sb.toString()));\n               \
    \     sb = new StringBuilder();\n                } else if (inside_parantheses\
    \ && s.equals(\"[\")) {\n                    inside_parantheses = false;\n   \
    \                 result.add(Long.parseLong(sb.toString()));\n               \
    \     sb = new StringBuilder();\n                } else if (inside_parantheses\
    \ && s.equals(\"]\")) {\n                    inside_parantheses = false;\n   \
    \                 result.add(Long.parseLong(sb.toString()));\n               \
    \     sb = new StringBuilder();\n                } else if (inside_parantheses\
    \ && s.equals(\"{\")) {\n                    inside_parantheses = false;\n   \
    \                 result.add(Long.parseLong(sb.toString()));\n               \
    \     sb = new StringBuilder();\n                } else if (inside_parantheses\
    \ && s.equals(\"}\")) {\n                    inside_parantheses = false;\n   \
    \                 result.add(Long.parseLong(sb.toString()));\n               \
    \     sb = new StringBuilder();\n                } else if (inside_parantheses\
    \ && s.equals(\",\")) {\n                    inside_parantheses = false;\n   \
    \                 result.add(Long.parseLong(sb.toString()));\n               \
    \     sb = new StringBuilder();\n                } else if (inside_parantheses\
    \ && s.equals(\";\")) {\n                    inside_parantheses = false;\n   \
    \                 result.add(Long.parseLong(sb.toString()));\n               \
    \     sb = new StringBuilder();\n                } else if (inside_parantheses\
    \ && s.equals(\":\")) {\n                    inside_parantheses = false;\n   \
    \                 result.add(Long.parseLong(sb.toString()));\n               \
    \     sb = new StringBuilder();\n                } else if (inside_parantheses\
    \ && s.equals(\";\")) {\n                    inside_parantheses = false;\n   \
    \                 result.add(Long.parseLong(sb.toString()));\n               \
    \     sb = new StringBuilder();\n                } else if (inside_parantheses\
    \ && s.equals(\".\")) {\n                    \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppc_wu7cn.java:68: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        for (char c : paren_string.toCharArray())\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       stack.push(c);\n            } else if (c == ')') {\n                String\
    \ s = stack.pop();\n                if (s.equals(\"(\")) {\n                 \
    \   result.add(Long.parseLong(sb.toString()));\n                    sb = new StringBuilder();\n\
    \                } else {\n                    sb.append(s);\n               \
    \ }\n                in_paren = false;\n            } else if (in_paren) {\n \
    \               sb.append(c);\n            }\n        }\n        if (sb.length()\
    \ > 0) {\n            result.add(Long.parseLong(sb.toString()));\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi78xsolf.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\"\\\\s+\");\n  \
    \      Stack<String> stack = new Stack<String>();\n        for (String s : paren_strings)\
    \ {\n            if (s.equals(\"(\")) {\n                stack.push(s);\n    \
    \        } else if (s.equals(\")\")) {\n                while (!stack.isEmpty())\
    \ {\n                    String top = stack.pop();\n                    if (top.equals(\"\
    (\")) {\n                        result.add(new Long(result.size()));\n      \
    \              } else if (top.equals(\")\")) {\n                        result.add(new\
    \ Long(result.size() - 1));\n                    }\n                }\n      \
    \          stack.pop();\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn3vjkc8t.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \\\\s+\");\n                                                            ^\n/tmp/tmpn3vjkc8t.java:25:\
    \ warning: [removal] Long(long) in Long has been deprecated and marked for removal\n\
    \                        result.add(new Long(result.size()));\n              \
    \                     ^\n/tmp/tmpn3vjkc8t.java:27: warning: [removal] Long(long)\
    \ in Long has been deprecated and marked for removal\n                       \
    \ result.add(new Long(result.size() - 1));\n                                 \
    \  ^\n1 error\n2 warnings\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> stack2\
    \ = new ArrayList<>();\n        ArrayList<Long> stack3 = new ArrayList<>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<>();\n        ArrayList<Long> stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<>();\n        ArrayList<Long> stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<>();\n        ArrayList<Long> stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<>();\n        ArrayList<Long> stack15 = new ArrayList<>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<>();\n        ArrayList<Long> stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<>();\n        ArrayList<Long> stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<>();\n        ArrayList<Long> stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<>();\n        ArrayList<Long> stack27 = new ArrayList<>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<>();\n        ArrayList<Long> stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<>();\n        ArrayList<Long> stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<>();\n        ArrayList<Long> stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<>();\n        ArrayList<Long> stack39 = new ArrayList<>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<>();\n        ArrayList<Long> stack42 = new ArrayList<>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<>();\n        ArrayList<Long> stack45 = new ArrayList<>();\n\
    \        ArrayList<Long> stack46 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack47 = new ArrayList<>();\n        ArrayList<Long> stack48 = new ArrayList<>();\n\
    \        ArrayList<Long> stack49 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack50 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5wlfhby.java:66: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpk5wlfhby.java:67: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpk5wlfhby.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpk5wlfhby.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk5wlfhby.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> level_stack =\
    \ new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy2 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy3 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy4\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy5 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy7 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy10 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> level_stack_copy11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy12 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy15 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> level_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy17 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy20 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> level_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy25 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> level_stack_copy26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy28\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy29 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy30 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> level_stack_copy31 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ level_stack_copy32 = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy33\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy34 = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy35 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> level_stack_copy36 = new ArrayList<Long>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw7_bwj3x.java:55: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<\n    }\n  \
    \  public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbcla8fa.java:53: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmplbcla8fa.java:52: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<Long\n    }\n\
    \    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfv7hcaw.java:53: error: > expected\n    }\n    ^\n/tmp/tmpzfv7hcaw.java:52:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n/tmp/tmpzfv7hcaw.java:54:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpzfv7hcaw.java:54: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpzfv7hcaw.java:54: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpzfv7hcaw.java:54: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpzfv7hcaw.java:54:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpzfv7hcaw.java:60: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_groups = paren_string.split(\"\\\\s+\");\n   \
    \     ArrayList<Long> deepest_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level = new ArrayList<Long>();\n        for (String group : paren_groups)\
    \ {\n            ArrayList<Long> new_level = new ArrayList<Long>();\n        \
    \    ArrayList<Long> current_level = new ArrayList<Long>();\n            for (String\
    \ s : group.split(\"\\\\(\")) {\n                for (String s2 : s.split(\"\\\
    \\)\")) {\n                    current_level.add(Long.parseLong(s2));\n      \
    \          }\n            }\n            deepest_level.add(current_level);\n \
    \           for (Long l : current_level) {\n                new_level.add(l);\n\
    \            }\n            result.add(new_level);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyh_5a7q6.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_groups = paren_string.split(\"\
    \\\\s+\");\n                                                           ^\n/tmp/tmpyh_5a7q6.java:21:\
    \ error: variable current_level is already defined in method parseNestedParens(String)\n\
    \            ArrayList<Long> current_level = new ArrayList<Long>();\n        \
    \                    ^\n/tmp/tmpyh_5a7q6.java:27: error: incompatible types: ArrayList<Long>\
    \ cannot be converted to Long\n            deepest_level.add(current_level);\n\
    \                              ^\n/tmp/tmpyh_5a7q6.java:31: error: incompatible\
    \ types: ArrayList<Long> cannot be converted to Long\n            result.add(new_level);\n\
    \                       ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.push(c);\n      \
    \      } else if (c == ')') {\n                String s = stack.pop();\n     \
    \           if (s.equals(\"(\")) {\n                    result.add(new Long(result.size()\
    \ - 1));\n                } else {\n                    result.add(new Long(result.size()));\n\
    \                }\n                in_paren = false;\n            } else if (c\
    \ == ' ') {\n                String s = stack.pop();\n                if (s.equals(\"\
    (\")) {\n                    result.add(new Long(result.size() - 1));\n      \
    \          } else {\n                    result.add(new Long(result.size()));\n\
    \                }\n                in_paren = false;\n            } else if (c\
    \ == '(' || c == '[' || c == '{') {\n                stack.push(c);\n        \
    \    } else if (c == ']' || c == '}') {\n                String s = stack.pop();\n\
    \                if (s.equals(\"(\")) {\n                    result.add(new Long(result.size()\
    \ - 1));\n                } else {\n                    result.add(new Long(result.size()));\n\
    \                }\n                in_paren = false;\n            } else if (c\
    \ == ' ') {\n                String s = stack.pop();\n                if (s.equals(\"\
    (\")) {\n                    result.add(new Long(result.size() - 1));\n      \
    \          } else {\n                    result.add(new Long(result.size()));\n\
    \                }\n                in_paren = false;\n            }\n       \
    \     if (in_paren) {\n                sb.append(c);\n            }\n        }\n\
    \        if (sb.length() > 0) {\n            result.add(new Long(sb.length()));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5s8gsx8l.java:23: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\n/tmp/tmp5s8gsx8l.java:27:\
    \ warning: [removal] Long(long) in Long has been deprecated and marked for removal\n\
    \                    result.add(new Long(result.size() - 1));\n              \
    \                 ^\n/tmp/tmp5s8gsx8l.java:29: warning: [removal] Long(long) in\
    \ Long has been deprecated and marked for removal\n                    result.add(new\
    \ Long(result.size()));\n                               ^\n/tmp/tmp5s8gsx8l.java:35:\
    \ warning: [removal] Long(long) in Long has been deprecated and marked for removal\n\
    \                    result.add(new Long(result.size() - 1));\n              \
    \                 ^\n/tmp/tmp5s8gsx8l.java:37: warning: [removal] Long(long) in\
    \ Long has been deprecated and marked for removal\n                    result.add(new\
    \ Long(result.size()));\n                               ^\n/tmp/tmp5s8gsx8l.java:41:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    stack.push(c);\n                           ^\n/tmp/tmp5s8gsx8l.java:45: warning:\
    \ [removal] Long(long) in Long has been deprecated and marked for removal\n  \
    \                  result.add(new Long(result.size() - 1));\n                \
    \               ^\n/tmp/tmp5s8gsx8l.java:47: warning: [removal] Long(long) in\
    \ Long has been deprecated and marked for removal\n                    result.add(new\
    \ Long(result.size()));\n                               ^\n/tmp/tmp5s8gsx8l.java:53:\
    \ warning: [removal] Long(long) in Long has been deprecated and marked for removal\n\
    \                    result.add(new Long(result.size() - 1));\n              \
    \                 ^\n/tmp/tmp5s8gsx8l.java:55: warning: [removal] Long(long) in\
    \ Long has been deprecated and marked for removal\n                    result.add(new\
    \ Long(result.size()));\n                               ^\n/tmp/tmp5s8gsx8l.java:64:\
    \ warning: [removal] Long(long) in Long has been deprecated and marked for removal\n\
    \            result.add(new Long(sb.length()));\n      "
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\"\\\\s+\");\n  \
    \      for (String s : paren_strings) {\n            ArrayList<Long> current_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_level = new ArrayList<Long>();\n\
    \            ArrayList<Long> next_next_level = new ArrayList<Long>();\n      \
    \      ArrayList<Long> next_next_next_level = new ArrayList<Long>();\n       \
    \     ArrayList<Long> next_next_next_next_level = new ArrayList<Long>();\n   \
    \         ArrayList<Long> next_next_next_next_next_level = new ArrayList<Long>();\n\
    \            ArrayList<Long> next_next_next_next_next_next_level = new ArrayList<Long>();\n\
    \            ArrayList<Long> next_next_next_next_next_next_next_level = new ArrayList<Long>();\n\
    \            ArrayList<Long> next_next_next_next_next_next_next_next_level = new\
    \ ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> next_next_next_next_next_next_next_next_next_next_next_next_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> \n    }\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2qwmt6k0.java:44: error: not a statement\n            ArrayList<Long>\
    \ \n                     ^\n/tmp/tmp2qwmt6k0.java:44: error: ';' expected\n  \
    \          ArrayList<Long> \n                           ^\n/tmp/tmp2qwmt6k0.java:46:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy4\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy5\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy8\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy9\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy12\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy13\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy20\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy21\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy24\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy25\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnamfw869.java:47: error: > expected\n    }\n    ^\n/tmp/tmpnamfw869.java:46:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> stack2\
    \ = new ArrayList<>();\n        ArrayList<Long> stack3 = new ArrayList<>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<>();\n        ArrayList<Long> stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<>();\n        ArrayList<Long> stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<>();\n        ArrayList<Long> stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<>();\n        ArrayList<Long> stack15 = new ArrayList<>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<>();\n        ArrayList<Long> stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<>();\n        ArrayList<Long> stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<>();\n        ArrayList<Long> stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<>();\n        ArrayList<Long> stack27 = new ArrayList<>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<>();\n        ArrayList<Long> stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<>();\n        ArrayList<Long> stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<>();\n        ArrayList<Long> stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<>();\n        ArrayList<Long> stack39 = new ArrayList<>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<>();\n        ArrayList<Long> stack42 = new ArrayList<>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<>();\n        ArrayList<Long> stack45 = new ArrayList<>();\n\
    \        ArrayList<Long> stack46 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack47 = new ArrayList<>();\n        ArrayList<Long> stack48 = new ArrayList<>();\n\
    \        ArrayList<Long> stack49 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack50 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5wlfhby.java:66: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpk5wlfhby.java:67: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpk5wlfhby.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpk5wlfhby.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk5wlfhby.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> levels_stack = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ik6r5xk.java:52: error: ';' expected\n        ArrayList<Long>\
    \ levels_stack_\n                                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659797914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> parens = new ArrayList<>();\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\(\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\s\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\(\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\s\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\(\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\s\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\(\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\s\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\(\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\s\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\(\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\s\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\(\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\s\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\(\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\s\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\(\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\s\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\(\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\s\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\(\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\s\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\(\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\s\", \"\");\n        paren_string\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf3age56u.java:53: error: not a statement\n        paren_string\n\
    \        ^\n/tmp/tmpf3age56u.java:53: error: ';' expected\n        paren_string\n\
    \                    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        boolean in_quote = false;\n      \
    \  boolean in_escape = false;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.push(c);\n      \
    \      } else if (c == '\"') {\n                in_quote = true;\n           \
    \     stack.push(c);\n            } else if (c == '\\\\') {\n                in_escape\
    \ = true;\n                stack.push(c);\n            } else if (c == '\"' ||\
    \ c == '\\\\') {\n                String s = stack.pop();\n                sb.append(s);\n\
    \            } else if (c == '(') {\n                String s = stack.pop();\n\
    \                sb.append(s);\n                result.add(Long.valueOf(stack.pop()));\n\
    \            } else if (c == ')') {\n                String s = stack.pop();\n\
    \                sb.append(s);\n                result.add(Long.valueOf(stack.pop()));\n\
    \            } else if (c == '\\\\') {\n                String s = stack.pop();\n\
    \                sb.append(s);\n            } else if (c == '\"' || c == '\\\\\
    ') {\n                String s = stack.pop();\n                sb.append(s);\n\
    \            } else if (c == ')') {\n                String s = stack.pop();\n\
    \                sb.append(s);\n                result.add(Long.valueOf(stack.pop()));\n\
    \            } else if (c == '(') {\n                String s = stack.pop();\n\
    \                sb.append(s);\n                result.add(Long.valueOf(stack.pop()));\n\
    \            } else if (c == '\"' || c == '\\\\') {\n                String s\
    \ = stack.pop();\n                sb.append(s);\n            } else if (c == '(')\
    \ {\n                String s = stack.pop();\n                sb.append(s);\n\
    \                result.add(Long.valueOf(stack.pop()));\n            } else if\
    \ (c == '\"' || c == '\\\\') {\n                String s = stack.pop();\n    \
    \            sb.append(s);\n            } else if (c == '\"' || c == '\\\\') {\n\
    \                String s = stack.pop();\n                sb.append(s);\n    \
    \        } else if (c == '\"' || c == '\\\\') {\n                String s = stack.pop();\n\
    \                sb.append(s);\n            } else if (c == '\"' || c == '\\\\\
    ') {\n                String s = stack.pop();\n                sb.append(s);\n\
    \            } else if (c == '\"' || c == '\\\\') {\n                String s\
    \ = stack.pop();\n                sb.append(s);\n            } else if (c == '\"\
    ' || c == '\\\\') {\n                String s = stack.pop();\n               \
    \ sb.append(s);\n            } else if (c == '\"' || c == '\\\\') {\n        \
    \        String s = stack.pop();\n                sb.append(s);\n            }\
    \ else if (c == '\"' || c == '\\\\\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfppfzxyk.java:85: error: unclosed character literal\n         \
    \   } else if (c == '\"' || c == '\\\\\n                                     \
    \   ^\n/tmp/tmpfppfzxyk.java:87: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean inParen = false;\n        boolean inBrace = false;\n        boolean\
    \ inBracket = false;\n        boolean inBraceOrBracket = false;\n        boolean\
    \ inParenOrBracket = false;\n        boolean inBraceOrBracketOrParen = false;\n\
    \        boolean inParenOrBracketOrParen = false;\n        boolean inBraceOrBracketOrParenOrParen\
    \ = false;\n        boolean inParenOrBracketOrParenOrParen = false;\n        boolean\
    \ inBraceOrBracketOrParenOrParenOrParen = false;\n        boolean inParenOrBracketOrParenOrParenOrParen\
    \ = false;\n        boolean inBraceOrBracketOrParenOrParenOrParen = false;\n \
    \       boolean inParenOrBracketOrParenOrParenOrParen = false;\n        boolean\
    \ inBraceOrBracketOrParenOrParenOrParen = false;\n        boolean inParenOrBracketOrParenOrParenOrParen\
    \ = false;\n        boolean inBraceOrBracketOrParenOrParenOrParen = false;\n \
    \       boolean inParenOrBracketOrParenOrParenOrParen = false;\n        boolean\
    \ inBraceOrBracketOrParenOrParenOrParen = false;\n        boolean inParenOrBracketOrParenOrParenOrParen\
    \ = false;\n        boolean inBraceOrBracketOrParenOrParenOrParen = false;\n \
    \       boolean inParenOrBracketOrParenOrParenOrParen = false;\n        boolean\
    \ inBraceOrBracketOrParenOrParenOrParen = false;\n        boolean inParenOrBracketOrParenOrParenOrParen\
    \ = false;\n        boolean inBraceOrBracketOrParenOrParenOrParen = false;\n \
    \       boolean inParenOrBracketOrParenOrParenOrParen = false;\n        boolean\
    \ inBraceOrBracketOrParenOrParenOrParen = false;\n        boolean inParenOrBracketOrParenOrParenOrParen\
    \ = false;\n        boolean inBraceOrBracketOrParenOrParenOrParen = false;\n \
    \       boolean inParenOrBracketOrParenOrParenOrParen = false;\n        boolean\
    \ inBraceOrBracketOrParenOrParenOrParen = false;\n        boolean inParenOrBracketOrParenOrParenOrParen\
    \ = false;\n        boolean inBraceOrBracketOrParenOrParenOrParen = false;\n \
    \       boolean inParenOrBracketOrParenOrParenOrParen = false;\n        boolean\
    \ inBraceOrBracketOrParenOrParenOrParen = false;\n        boolean inParenOrBracket\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1v7ewu06.java:52: error: ';' expected\n        boolean inParenOrBracket\n\
    \                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> stack2\
    \ = new ArrayList<>();\n        ArrayList<Long> stack3 = new ArrayList<>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<>();\n        ArrayList<Long> stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<>();\n        ArrayList<Long> stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<>();\n        ArrayList<Long> stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<>();\n        ArrayList<Long> stack15 = new ArrayList<>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<>();\n        ArrayList<Long> stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<>();\n        ArrayList<Long> stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<>();\n        ArrayList<Long> stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<>();\n        ArrayList<Long> stack27 = new ArrayList<>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<>();\n        ArrayList<Long> stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<>();\n        ArrayList<Long> stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<>();\n        ArrayList<Long> stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<>();\n        ArrayList<Long> stack39 = new ArrayList<>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<>();\n        ArrayList<Long> stack42 = new ArrayList<>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<>();\n        ArrayList<Long> stack45 = new ArrayList<>();\n\
    \        ArrayList<Long> stack46 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack47 = new ArrayList<>();\n        ArrayList<Long> stack48 = new ArrayList<>();\n\
    \        ArrayList<Long> stack49 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack50 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5wlfhby.java:66: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpk5wlfhby.java:67: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpk5wlfhby.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpk5wlfhby.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk5wlfhby.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> current_level = new ArrayList<>();\n        ArrayList<Long>\
    \ current_level_parens = new ArrayList<>();\n        ArrayList<Long> current_level_parens_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth = new\
    \ ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size = new\
    \ ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size_size_size_size\
    \ = new ArrayList<>();\n        ArrayList<Long> current_level_parens_depth_size_size_size_size_size_size_size_size_size\
    \ = new \n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpynbsi_rq.java:42: error: <identifier> expected\n        ArrayList<Long>\
    \ current_level_parens_depth_size_size_size_size_size_size_size_size_size = new\
    \ \n                                                                         \
    \                            ^\n/tmp/tmpynbsi_rq.java:43: error: '(' or '[' expected\n\
    \    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy\
    \ = new ArrayList<Long>(current_levels);\n        ArrayList<Long> levels_copy\
    \ = new ArrayList<Long>(levels);\n        ArrayList<Long> max_levels_copy = new\
    \ ArrayList<Long>(max_levels);\n        ArrayList<Long> current_levels_copy2 =\
    \ new ArrayList<Long>(current_levels_copy);\n        ArrayList<Long> levels_copy2\
    \ = new ArrayList<Long>(levels_copy);\n        ArrayList<Long> max_levels_copy2\
    \ = new ArrayList<Long>(max_levels_copy);\n        ArrayList<Long> current_levels_copy3\
    \ = new ArrayList<Long>(current_levels_copy);\n        ArrayList<Long> levels_copy3\
    \ = new ArrayList<Long>(levels_copy);\n        ArrayList<Long> max_levels_copy3\
    \ = new ArrayList<Long>(max_levels_copy);\n        ArrayList<Long> current_levels_copy4\
    \ = new ArrayList<Long>(current_levels_copy);\n        ArrayList<Long> levels_copy4\
    \ = new ArrayList<Long>(levels_copy);\n        ArrayList<Long> max_levels_copy4\
    \ = new ArrayList<Long>(max_levels_copy);\n        ArrayList<Long> current_levels_copy5\
    \ = new ArrayList<Long>(current_levels_copy);\n        ArrayList<Long> levels_copy5\
    \ = new ArrayList<Long>(levels_copy);\n        ArrayList<Long> max_levels_copy5\
    \ = new ArrayList<Long>(max_levels_copy);\n        ArrayList<Long> current_levels_copy6\
    \ = new ArrayList<Long>(current_levels_copy);\n        ArrayList<Long> levels_copy6\
    \ = new ArrayList<Long>(levels_copy);\n        ArrayList<Long> max_levels_copy6\
    \ = new ArrayList<Long>(max_levels_copy);\n        ArrayList<Long> current_levels_copy7\
    \ = new ArrayList<Long>(current_levels_copy);\n        ArrayList<Long> levels_copy7\
    \ = new ArrayList<Long>(levels_copy);\n        ArrayList<Long> max_levels_copy7\
    \ = new ArrayList<Long>(max_levels_copy);\n        ArrayList<Long> current_levels_copy8\
    \ = new ArrayList<Long>(current_levels_copy);\n        ArrayList<Long> levels_copy8\
    \ = new ArrayList<Long>(levels_copy);\n        ArrayList<Long> max_levels_copy8\
    \ = new ArrayList<Long>(max_levels_copy);\n        ArrayList<Long> current_levels_copy9\
    \ = new ArrayList<Long>(current_levels_copy);\n        ArrayList<Long> levels_copy9\
    \ = new ArrayList<Long>(levels_copy);\n        ArrayList<Long> max_levels_copy9\
    \ = new ArrayList<Long>(\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphq1yx7yq.java:45: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean in_paren = false;\n        boolean in_brace\
    \ = false;\n        boolean in_brace2 = false;\n        boolean in_brace3 = false;\n\
    \        boolean in_brace4 = false;\n        boolean in_brace5 = false;\n    \
    \    boolean in_brace6 = false;\n        boolean in_brace7 = false;\n        boolean\
    \ in_brace8 = false;\n        boolean in_brace9 = false;\n        boolean in_brace10\
    \ = false;\n        boolean in_brace11 = false;\n        boolean in_brace12 =\
    \ false;\n        boolean in_brace13 = false;\n        boolean in_brace14 = false;\n\
    \        boolean in_brace15 = false;\n        boolean in_brace16 = false;\n  \
    \      boolean in_brace17 = false;\n        boolean in_brace18 = false;\n    \
    \    boolean in_brace19 = false;\n        boolean in_brace20 = false;\n      \
    \  boolean in_brace21 = false;\n        boolean in_brace22 = false;\n        boolean\
    \ in_brace23 = false;\n        boolean in_brace24 = false;\n        boolean in_brace25\
    \ = false;\n        boolean in_brace26 = false;\n        boolean in_brace27 =\
    \ false;\n        boolean in_brace28 = false;\n        boolean in_brace29 = false;\n\
    \        boolean in_brace30 = false;\n        boolean in_brace31 = false;\n  \
    \      boolean in_brace32 = false;\n        boolean in_brace33 = false;\n    \
    \    boolean in_brace34 = false;\n        boolean in_brace35 = false;\n      \
    \  boolean in_brace36 = false;\n        boolean in_brace37 = false;\n        boolean\
    \ in_brace38 = false;\n        boolean in_brace39 = false;\n        boolean in_brace40\
    \ = false;\n        boolean in_brace41 = false;\n        boolean in_brace42 =\
    \ false;\n        boolean in_brace43 = false;\n        boolean in_brace44 = false;\n\
    \        boolean in_brace45 = false;\n        boolean in_brace46 = false;\n  \
    \      boolean in_brace47 = false;\n        boolean in_brace48 = false;\n    \
    \    boolean in_brace49 = false;\n        boolean in_brace50 = false;\n      \
    \  boolean in_brace51 = false;\n        boolean in_brace52 = false;\n        boolean\
    \ in_brace53 = false;\n        boolean in_brace54 = false;\n        boolean in_brace55\
    \ = false;\n        boolean in_brace56 = false;\n        boolean in_brace57 =\
    \ false;\n        boolean in_brace58 = false;\n        boolean in_brace59 = false;\n\
    \        boolean in_brace60 = false;\n        boolean in_brace61 = false;\n  \
    \      boolean in_brace62 = false;\n        boolean in_brace63 = false;\n    \
    \    boolean in_brace64 = false;\n        boolean in_brace65 = false;\n      \
    \  boolean in_brace66 = false;\n        boolean \n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ljr_8wq.java:85: error: not a statement\n        boolean \n  \
    \      ^\n/tmp/tmp9ljr_8wq.java:85: error: ';' expected\n        boolean \n  \
    \             ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level2 = new ArrayList<Long>();\n        ArrayList<Long> current_level3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level6 = new ArrayList<Long>();\n        ArrayList<Long> current_level7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level10 = new ArrayList<Long>();\n        ArrayList<Long> current_level11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level14 = new ArrayList<Long>();\n        ArrayList<Long> current_level15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level18 = new ArrayList<Long>();\n        ArrayList<Long> current_level19\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level22 = new ArrayList<Long>();\n        ArrayList<Long> current_level23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level26 = new ArrayList<Long>();\n        ArrayList<Long> current_level27\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level28 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level29 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level30 = new ArrayList<Long>();\n        ArrayList<Long> current_level31\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level32 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level34 = new ArrayList<Long>();\n        ArrayList<Long> current_level35\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level36 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level37 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level38 = new ArrayList<Long>();\n        ArrayList<Long> current_level39\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level40 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level41 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level42 = \n    }\n    public static void main(String[] args) {\n  \
    \  assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvpfkbjv_.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> paren_strings = paren_string.split(\" \");\n        for\
    \ (String s : paren_strings) {\n            ArrayList<Long> levels = parseNestedParens(s);\n\
    \            result.addAll(levels);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6hv_xamw.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n                                                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack3 = new ArrayList<>();\n        ArrayList<Long> levels_stack4 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack5 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack7 = new ArrayList<>();\n        ArrayList<Long> levels_stack8 =\
    \ new ArrayList<>();\n        ArrayList<Long> levels_stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack11 = new ArrayList<>();\n        ArrayList<Long> levels_stack12\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack13 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack15 = new ArrayList<>();\n        ArrayList<Long> levels_stack16\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack17 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack19 = new ArrayList<>();\n        ArrayList<Long> levels_stack20\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack23 = new ArrayList<>();\n        ArrayList<Long> levels_stack24\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack25 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack27 = new ArrayList<>();\n        ArrayList<Long> levels_stack28\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack29 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack31 = new ArrayList<>();\n        ArrayList<Long> levels_stack32\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack35 = new ArrayList<>();\n        ArrayList<Long> levels_stack36\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack37 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack39 = new ArrayList<>();\n        ArrayList<Long> levels_stack40\
    \ = new ArrayList<>();\n        ArrayList<Long> \n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wyg0k7x.java:58: error: not a statement\n        ArrayList<Long>\
    \ \n                 ^\n/tmp/tmp5wyg0k7x.java:58: error: ';' expected\n      \
    \  ArrayList<Long> \n                       ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringTokenizer tok\
    \ = new StringTokenizer(paren_string, \" \");\n        while (tok.hasMoreTokens())\
    \ {\n            String token = tok.nextToken();\n            if (token.equals(\"\
    (\")) {\n                stack.push(token);\n            } else if (token.equals(\"\
    )\")) {\n                String top = stack.pop();\n                result.add(new\
    \ Long(top.length()));\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ii14hlr.java:30)\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level2 = new ArrayList<Long>();\n        ArrayList<Long> current_level3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level6 = new ArrayList<Long>();\n        ArrayList<Long> current_level7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level10 = new ArrayList<Long>();\n        ArrayList<Long> current_level11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level14 = new ArrayList<Long>();\n        ArrayList<Long> current_level15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level18 = new ArrayList<Long>();\n        ArrayList<Long> current_level19\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level22 = new ArrayList<Long>();\n        ArrayList<Long> current_level23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level26 = new ArrayList<Long>();\n        ArrayList<Long> current_level27\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level28 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level29 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level30 = new ArrayList<Long>();\n        ArrayList<Long> current_level31\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level32 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level34 = new ArrayList<Long>();\n        ArrayList<Long> current_level35\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level36 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level37 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level38 = new ArrayList<Long>();\n        ArrayList<Long> current_level39\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level40 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level41 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level4\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkj93q2fh.java:57: error: ';' expected\n        ArrayList<Long>\
    \ current_level4\n                                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659797917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> parens = new ArrayList<>();\n        paren_string = paren_string.trim();\n\
    \        paren_string = paren_string.replaceAll(\"\\\\)\\\\)\", \"\\\\)\");\n\
    \        paren_string = paren_string.replaceAll(\"\\\\(|\\\\)\", \"\");\n    \
    \    paren_string = paren_string.replaceAll(\"\\\\s+\", \" \");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\s+\\\\(|\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\s+\\\\(|\\\\)\\\\s+\", \"\\\\)\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\s+\\\\(|\\\\)\\\\s+\\\\s+\", \"\
    \\\\)\");\n        paren_string = paren_string.replaceAll(\"\\\\s+\\\\(|\\\\)\\\
    \\s+\\\\s+\\\\s+\", \"\\\\)\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\s+\\\\(|\\\\)\\\\s+\\\\s+\\\\s+\\\\s+\", \"\\\\)\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\s+\\\\(|\\\\)\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\"\
    , \"\\\\)\");\n        paren_string = paren_string.replaceAll(\"\\\\s+\\\\(|\\\
    \\)\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\", \"\\\\)\");\n        paren_string =\
    \ paren_string.replaceAll(\"\\\\s+\\\\(|\\\\)\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\\
    s+\\\\s+\", \"\\\\)\");\n        paren_string = paren_string.replaceAll(\"\\\\\
    s+\\\\(|\\\\)\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\", \"\\\\)\");\n\
    \        paren_string = paren_string.replaceAll(\"\\\\s+\\\\(|\\\\)\\\\s+\\\\\
    s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\", \"\\\\)\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\s+\\\\(|\\\\)\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\
    \\s+\\\\s+\\\\s+\\\\s+\\\\s+\", \"\\\\)\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\s+\\\\(|\\\\)\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\
    \\s+\", \"\\\\)\");\n        paren_string = paren_string.replaceAll(\"\\\\s+\\\
    \\(|\\\\)\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\s+\\\\\
    s+\", \"\\\\)\");\n        paren_string = paren_string.replaceAll(\"\\\\s+\\\\\
    (|\\\\)\\\\s+\\\\s+\\\\s+\\\\s\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphxoudq0u.java:34: error: unclosed string literal\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\s+\\\\(|\\\\)\\\\s+\\\\s+\\\\s+\\\\s\n     \
    \                                          ^\n1 error\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        boolean in_brace = false;\n      \
    \  boolean in_quote = false;\n        boolean in_double_quote = false;\n     \
    \   boolean in_single_quote = false;\n        boolean in_double_backslash = false;\n\
    \        boolean in_single_backslash = false;\n        boolean in_backslash =\
    \ false;\n        boolean in_backslash2 = false;\n        boolean in_backslash3\
    \ = false;\n        boolean in_backslash4 = false;\n        boolean in_backslash5\
    \ = false;\n        boolean in_backslash6 = false;\n        boolean in_backslash7\
    \ = false;\n        boolean in_backslash8 = false;\n        boolean in_backslash9\
    \ = false;\n        boolean in_backslash10 = false;\n        boolean in_backslash11\
    \ = false;\n        boolean in_backslash12 = false;\n        boolean in_backslash13\
    \ = false;\n        boolean in_backslash14 = false;\n        boolean in_backslash15\
    \ = false;\n        boolean in_backslash16 = false;\n        boolean in_backslash17\
    \ = false;\n        boolean in_backslash18 = false;\n        boolean in_backslash19\
    \ = false;\n        boolean in_backslash20 = false;\n        boolean in_backslash21\
    \ = false;\n        boolean in_backslash22 = false;\n        boolean in_backslash23\
    \ = false;\n        boolean in_backslash24 = false;\n        boolean in_backslash25\
    \ = false;\n        boolean in_backslash26 = false;\n        boolean in_backslash27\
    \ = false;\n        boolean in_backslash28 = false;\n        boolean in_backslash29\
    \ = false;\n        boolean in_backslash30 = false;\n        boolean in_backslash31\
    \ = false;\n        boolean in_backslash32 = false;\n        boolean in_backslash33\
    \ = false;\n        boolean in_backslash34 = false;\n        boolean in_backslash35\
    \ = false;\n        boolean in_backslash36 = false;\n        boolean in_backslash37\
    \ = false;\n        boolean in_backslash38 = false;\n        boolean in_backslash39\
    \ = false;\n        boolean in_backslash40 = false;\n        boolean in_backslash41\
    \ = false;\n        boolean in_backslash42 = false;\n        boolean in_backslash43\
    \ = false;\n        boolean in_backslash44 = false;\n        boolean in_backslash45\
    \ = false;\n        boolean in_backslash46 = false;\n        boolean in_backslash47\
    \ = false;\n        boolean in_backslash48 = false;\n        boolean in_backslash49\
    \ = false;\n        boolean in_backslash50 = false;\n        boolean in_backslash51\
    \ = false;\n        boolean in_backslash52 = false;\n        boolean in_backslash53\
    \ = false;\n        boolean in_back\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0kchg5dg.java:78: error: ';' expected\n        boolean in_back\n\
    \                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean in_paren = false;\n        boolean in_quote\
    \ = false;\n        for (int i = 0; i < paren_string.length(); i++) {\n      \
    \      char c = paren_string.charAt(i);\n            if (c == '(') {\n       \
    \         in_paren = true;\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                in_paren = false;\n                String s\
    \ = stack.pop();\n                if (s.equals(\"(\")) {\n                   \
    \ result.add(Long.valueOf(sb));\n                    sb.setLength(0);\n      \
    \          } else if (s.equals(\"\\\"\")) {\n                    in_quote = !in_quote;\n\
    \                } else if (s.equals(\"\\\"\")) {\n                    in_quote\
    \ = !in_quote;\n                } else {\n                    sb.append(s);\n\
    \                }\n            } else if (c == '\"') {\n                in_quote\
    \ = !in_quote;\n            }\n            if (in_paren) {\n                sb.append(c);\n\
    \            }\n        }\n        if (sb.length() > 0) {\n            result.add(Long.valueOf(sb));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpveu4pofn.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\n/tmp/tmpveu4pofn.java:29:\
    \ error: no suitable method found for valueOf(StringBuilder)\n               \
    \     result.add(Long.valueOf(sb));\n                                   ^\n  \
    \  method Long.valueOf(String) is not applicable\n      (argument mismatch; StringBuilder\
    \ cannot be converted to String)\n    method Long.valueOf(long) is not applicable\n\
    \      (argument mismatch; StringBuilder cannot be converted to long)\n/tmp/tmpveu4pofn.java:46:\
    \ error: no suitable method found for valueOf(StringBuilder)\n            result.add(Long.valueOf(sb));\n\
    \                           ^\n    method Long.valueOf(String) is not applicable\n\
    \      (argument mismatch; StringBuilder cannot be converted to String)\n    method\
    \ Long.valueOf(long) is not applicable\n      (argument mismatch; StringBuilder\
    \ cannot be converted to long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> stack2\
    \ = new ArrayList<>();\n        ArrayList<Long> stack3 = new ArrayList<>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<>();\n        ArrayList<Long> stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<>();\n        ArrayList<Long> stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<>();\n        ArrayList<Long> stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<>();\n        ArrayList<Long> stack15 = new ArrayList<>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<>();\n        ArrayList<Long> stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<>();\n        ArrayList<Long> stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<>();\n        ArrayList<Long> stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<>();\n        ArrayList<Long> stack27 = new ArrayList<>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<>();\n        ArrayList<Long> stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<>();\n        ArrayList<Long> stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<>();\n        ArrayList<Long> stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<>();\n        ArrayList<Long> stack39 = new ArrayList<>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<>();\n        ArrayList<Long> stack42 = new ArrayList<>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<>();\n        ArrayList<Long> stack45 = new ArrayList<>();\n\
    \        ArrayList<Long> stack46 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack47 = new ArrayList<>();\n        ArrayList<Long> stack48 = new ArrayList<>();\n\
    \        ArrayList<Long> stack49 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack50 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5wlfhby.java:66: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpk5wlfhby.java:67: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpk5wlfhby.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpk5wlfhby.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk5wlfhby.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy = new ArrayList<Long>();\n        ArrayList<Long> stack_copy2 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> stack_copy3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy6 =\
    \ new ArrayList<Long>();\n        ArrayList<Long> stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy10 =\
    \ new ArrayList<Long>();\n        ArrayList<Long> stack_copy11 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy12 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy13 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy14\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy17 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy23 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy24 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy25 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy26\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy29 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy30\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy32 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy34\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy35 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy36 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy37 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy38\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy39 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy40 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy41 = new ArrayList<Long\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp71dm4bw0.java:58: error: > expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean in_paren = false;\n        boolean in_group\
    \ = false;\n        boolean in_quote = false;\n        boolean in_escape = false;\n\
    \        for (int i = 0; i < paren_string.length(); i++) {\n            char c\
    \ = paren_string.charAt(i);\n            if (in_quote) {\n                if (c\
    \ == '\\\\') {\n                    in_escape = !in_escape;\n                }\
    \ else {\n                    sb.append(c);\n                }\n            }\
    \ else if (c == '(') {\n                in_paren = true;\n                stack.push(c);\n\
    \            } else if (c == ')') {\n                in_paren = false;\n     \
    \           String s = stack.pop();\n                if (in_group) {\n       \
    \             result.add(Long.parseLong(s) + 1);\n                } else {\n \
    \                   result.add(Long.parseLong(s));\n                }\n      \
    \      } else if (c == '[') {\n                in_group = true;\n            \
    \    stack.push(c);\n            } else if (c == ']') {\n                in_group\
    \ = false;\n                String s = stack.pop();\n                if (in_group)\
    \ {\n                    result.add(Long.parseLong(s) + 1);\n                }\
    \ else {\n                    result.add(Long.parseLong(s));\n               \
    \ }\n            } else if (c == '\\\\') {\n                in_escape = !in_escape;\n\
    \            } else if (in_paren) {\n                sb.append(c);\n         \
    \   }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgi7c3s15.java:32: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\n/tmp/tmpgi7c3s15.java:43:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    stack.push(c);\n                           ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy4\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy5\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy8\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy9\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy12\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy13\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy20\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy21\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy24\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy25\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnamfw869.java:47: error: > expected\n    }\n    ^\n/tmp/tmpnamfw869.java:46:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy4\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy5\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy8\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy9\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy12\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy13\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy20\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy21\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy24\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy25\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnamfw869.java:47: error: > expected\n    }\n    ^\n/tmp/tmpnamfw869.java:46:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        for (char c : paren_string.toCharArray())\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       stack.push(c);\n            } else if (c == ')') {\n                String\
    \ s = stack.pop();\n                result.add(Long.parseLong(s) - 1);\n     \
    \           in_paren = false;\n            } else if (in_paren) {\n          \
    \      sb.append(c);\n            }\n        }\n        if (sb.length() > 0) {\n\
    \            result.add(Long.parseLong(sb.toString()));\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaj5of08w.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> levels_stack = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long> levels_\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiv3yhqi6.java:52: error: ';' expected\n        ArrayList<Long>\
    \ levels_\n                               ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> levels_stack = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack4 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack8 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack12 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack20 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack24 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack25\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack31 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack32 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack33\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack34 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack35 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack36 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack37\
    \ = new ArrayList<Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpruep4e_a.java:55: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> levels = new ArrayList<>();\n     \
    \   ArrayList<String> groups = new ArrayList<>();\n        ArrayList<String> group_strings\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy2 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy3 = new ArrayList<>();\n        ArrayList<String> group_strings_copy4\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy5 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy6 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy7 = new ArrayList<>();\n        ArrayList<String> group_strings_copy8\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy9 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy10 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_copy11 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy12 = new ArrayList<>();\n        ArrayList<String> group_strings_copy13\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy14 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy15 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_copy16 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy17 = new ArrayList<>();\n        ArrayList<String> group_strings_copy18\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy19 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy20 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_copy21 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy22 = new ArrayList<>();\n        ArrayList<String> group_strings_copy23\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy24 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy25 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_copy26 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy27 = new ArrayList<>();\n        ArrayList<String> group_strings_copy28\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy29 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy30 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_copy31 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy32 = new ArrayList<>();\n        ArrayList<String> group_strings_copy33\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy34 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy35 = new ArrayList<>();\n       \
    \ ArrayList<String> group_strings_copy36 = new ArrayList<>();\n        ArrayList<String>\
    \ group_strings_copy37 = new ArrayList<>();\n        ArrayList<String> group_strings_copy38\
    \ = new ArrayList<>();\n        ArrayList<String> group_strings_copy39 = new ArrayList<>();\n\
    \        ArrayList<String> group_strings_copy40 = new ArrayList<>();\n       \
    \ ArrayList<String> group_string\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfix5oxe9.java:58: error: ';' expected\n        ArrayList<String>\
    \ group_string\n                                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack2 = new ArrayList<Long>();\n        ArrayList<Long> stack3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<Long>();\n        ArrayList<Long> stack6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<Long>();\n        ArrayList<Long> stack9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<Long>();\n        ArrayList<Long> stack12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<Long>();\n        ArrayList<Long> stack15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<Long>();\n        ArrayList<Long> stack18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<Long>();\n        ArrayList<Long> stack21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<Long>();\n        ArrayList<Long> stack24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<Long>();\n        ArrayList<Long> stack27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<Long>();\n        ArrayList<Long> stack30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<Long>();\n        ArrayList<Long> stack33 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<Long>();\n        ArrayList<Long> stack36 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<Long>();\n        ArrayList<Long> stack39 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<Long>();\n        ArrayList<Long> stack42 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<Long>();\n        ArrayList<Long> stack45 = new ArrayList<Long>();\n\
    \        ArrayList<Long\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkmni_lwk.java:62: error: > expected\n    }\n    ^\n/tmp/tmpkmni_lwk.java:61:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n/tmp/tmpkmni_lwk.java:63:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpkmni_lwk.java:63: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpkmni_lwk.java:63: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpkmni_lwk.java:63: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpkmni_lwk.java:63:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpkmni_lwk.java:69: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> stack2\
    \ = new ArrayList<>();\n        ArrayList<Long> stack3 = new ArrayList<>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<>();\n        ArrayList<Long> stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<>();\n        ArrayList<Long> stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<>();\n        ArrayList<Long> stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<>();\n        ArrayList<Long> stack15 = new ArrayList<>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<>();\n        ArrayList<Long> stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<>();\n        ArrayList<Long> stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<>();\n        ArrayList<Long> stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<>();\n        ArrayList<Long> stack27 = new ArrayList<>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<>();\n        ArrayList<Long> stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<>();\n        ArrayList<Long> stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<>();\n        ArrayList<Long> stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<>();\n        ArrayList<Long> stack39 = new ArrayList<>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<>();\n        ArrayList<Long> stack42 = new ArrayList<>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<>();\n        ArrayList<Long> stack45 = new ArrayList<>();\n\
    \        ArrayList<Long> stack46 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack47 = new ArrayList<>();\n        ArrayList<Long> stack48 = new ArrayList<>();\n\
    \        ArrayList<Long> stack49 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack50 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5wlfhby.java:66: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpk5wlfhby.java:67: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpk5wlfhby.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpk5wlfhby.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk5wlfhby.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean in_paren = false;\n        boolean in_quote\
    \ = false;\n        boolean in_escape = false;\n        boolean in_double_quote\
    \ = false;\n        boolean in_single_quote = false;\n        boolean in_double_escape\
    \ = false;\n        boolean in_single_escape = false;\n        boolean in_backslash\
    \ = false;\n        boolean in_backslash2 = false;\n        boolean in_backslash3\
    \ = false;\n        boolean in_backslash4 = false;\n        boolean in_backslash5\
    \ = false;\n        boolean in_backslash6 = false;\n        boolean in_backslash7\
    \ = false;\n        boolean in_backslash8 = false;\n        boolean in_backslash9\
    \ = false;\n        boolean in_backslash10 = false;\n        boolean in_backslash11\
    \ = false;\n        boolean in_backslash12 = false;\n        boolean in_backslash13\
    \ = false;\n        boolean in_backslash14 = false;\n        boolean in_backslash15\
    \ = false;\n        boolean in_backslash16 = false;\n        boolean in_backslash17\
    \ = false;\n        boolean in_backslash18 = false;\n        boolean in_backslash19\
    \ = false;\n        boolean in_backslash20 = false;\n        boolean in_backslash21\
    \ = false;\n        boolean in_backslash22 = false;\n        boolean in_backslash23\
    \ = false;\n        boolean in_backslash24 = false;\n        boolean in_backslash25\
    \ = false;\n        boolean in_backslash26 = false;\n        boolean in_backslash27\
    \ = false;\n        boolean in_backslash28 = false;\n        boolean in_backslash29\
    \ = false;\n        boolean in_backslash30 = false;\n        boolean in_backslash31\
    \ = false;\n        boolean in_backslash32 = false;\n        boolean in_backslash33\
    \ = false;\n        boolean in_backslash34 = false;\n        boolean in_backslash35\
    \ = false;\n        boolean in_backslash36 = false;\n        boolean in_backslash37\
    \ = false;\n        boolean in_backslash38 = false;\n        boolean in_backslash39\
    \ = false;\n        boolean in_backslash40 = false;\n        boolean in_backslash41\
    \ = false;\n        boolean in_backslash42 = false;\n        boolean in_backslash43\
    \ = false;\n        boolean in_backslash44 = false;\n        boolean in_backslash45\
    \ = false;\n        boolean in_backslash46 = false;\n        boolean in_backslash47\
    \ = false;\n        boolean in_backslash48 = false;\n        boolean in_backslash49\
    \ = false;\n        boolean in_backslash50 = false;\n        boolean in_backslash51\
    \ = false;\n        boolean in_backslash52 = false;\n        boolean in_backslash53\
    \ = false;\n        boolean in_back\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpte8vukqs.java:78: error: ';' expected\n        boolean in_back\n\
    \                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<\n    }\n  \
    \  public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbcla8fa.java:53: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmplbcla8fa.java:52: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack2 = new ArrayList<Long>();\n        ArrayList<Long> stack3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<Long>();\n        ArrayList<Long> stack6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<Long>();\n        ArrayList<Long> stack9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<Long>();\n        ArrayList<Long> stack12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<Long>();\n        ArrayList<Long> stack15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<Long>();\n        ArrayList<Long> stack18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<Long>();\n        ArrayList<Long> stack21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<Long>();\n        ArrayList<Long> stack24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<Long>();\n        ArrayList<Long> stack27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<Long>();\n        ArrayList<Long> stack30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<Long>();\n        ArrayList<Long> stack33 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<Long>();\n        ArrayList<Long> stack36 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<Long>();\n        ArrayList<Long> stack39 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<Long>();\n        ArrayList<Long> stack42 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<Long>();\n        ArrayList<Long> stack45 = new ArrayList<Long>();\n\
    \        ArrayList<Long\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkmni_lwk.java:62: error: > expected\n    }\n    ^\n/tmp/tmpkmni_lwk.java:61:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n/tmp/tmpkmni_lwk.java:63:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpkmni_lwk.java:63: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpkmni_lwk.java:63: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpkmni_lwk.java:63: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpkmni_lwk.java:63:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpkmni_lwk.java:69: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringTokenizer st\
    \ = new StringTokenizer(paren_string);\n        while (st.hasMoreTokens()) {\n\
    \            String token = st.nextToken();\n            if (token.equals(\"(\"\
    )) {\n                stack.push(token);\n            } else if (token.equals(\"\
    )\")) {\n                String top = stack.pop();\n                if (top.equals(\"\
    (\")) {\n                    result.add(new Long(result.size()));\n          \
    \      } else if (top.equals(\")\")) {\n                    result.add(new Long(result.size()\
    \ - 1));\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmeqdcrms.java:34)\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> levels = new ArrayList<Long>();\n \
    \       ArrayList<Long> levels_stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy11 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy23 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy35 = new ArrayList<Long>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8xyh1cim.java:52: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\" \");\n       \
    \ ArrayList<String> paren_strings_copy = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy2 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy3 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy4 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy5 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy6 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy7 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy8 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy9 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy10 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy11 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy12 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy13 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy14 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy15 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy16 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy17 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy18 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy19 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy20 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy21 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy22 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy23 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy24 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy25 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy26 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy27 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy28 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy29 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy30 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy31 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy32 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy33 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy34\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp10_iplrr.java:50: error: ';' expected\n        ArrayList<String>\
    \ paren_strings_copy34\n                                              ^\n1 error\n"
  stdout: ''
  timestamp: 1659797914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\"\\\\s+\");\n  \
    \      for (String s : paren_strings) {\n            ArrayList<Long> levels =\
    \ parseNestedParens(s);\n            result.addAll(levels);\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc3kxsygl.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \\\\s+\");\n                                                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy3\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy4\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy5\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy8\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy9\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy12\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy13\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy15\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy16\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy19\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy20\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy21\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy24\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy25\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy27\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long> levels_stack_copy28\
    \ = new ArrayList<Long>(levels_stack);\n        ArrayList<Long\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnamfw869.java:47: error: > expected\n    }\n    ^\n/tmp/tmpnamfw869.java:46:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> levels = new ArrayList<Long>();\n \
    \       ArrayList<String> groups = new ArrayList<String>();\n        ArrayList<String>\
    \ group_strings = new ArrayList<String>();\n        ArrayList<String> group_strings_copy\
    \ = new ArrayList<String>();\n        ArrayList<String> group_strings_copy_2 =\
    \ new ArrayList<String>();\n        ArrayList<String> group_strings_copy_3 = new\
    \ ArrayList<String>();\n        ArrayList<String> group_strings_copy_4 = new ArrayList<String>();\n\
    \        ArrayList<String> group_strings_copy_5 = new ArrayList<String>();\n \
    \       ArrayList<String> group_strings_copy_6 = new ArrayList<String>();\n  \
    \      ArrayList<String> group_strings_copy_7 = new ArrayList<String>();\n   \
    \     ArrayList<String> group_strings_copy_8 = new ArrayList<String>();\n    \
    \    ArrayList<String> group_strings_copy_9 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_10 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_11 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_12 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_13 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_14 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_15 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_16 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_17 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_18 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_19 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_20 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_21 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_22 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_23 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_24 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_25 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_26 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_27 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_28 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_29 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_30 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_31 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_32 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_33 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_34 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_35 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_36 = new ArrayList<String>();\n     \
    \   ArrayList<String> group_strings_copy_37 = new ArrayList<String>();\n     \
    \   \n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4oyb0k7j.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(')\
    \ {\n                stack.push(c);\n                in_paren = true;\n      \
    \      } else if (c == ')') {\n                String s = stack.pop();\n     \
    \           if (s.equals(\"(\")) {\n                    result.add(new Long(sb.length()));\n\
    \                    sb.setLength(0);\n                } else {\n            \
    \        result.add(new Long(sb.length()));\n                    sb.setLength(0);\n\
    \                }\n                in_paren = false;\n            } else if (in_paren)\
    \ {\n                sb.append(c);\n            }\n        }\n        if (sb.length()\
    \ > 0) {\n            result.add(new Long(sb.length()));\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp1he3mz3.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\n/tmp/tmpp1he3mz3.java:27:\
    \ warning: [removal] Long(long) in Long has been deprecated and marked for removal\n\
    \                    result.add(new Long(sb.length()));\n                    \
    \           ^\n/tmp/tmpp1he3mz3.java:30: warning: [removal] Long(long) in Long\
    \ has been deprecated and marked for removal\n                    result.add(new\
    \ Long(sb.length()));\n                               ^\n/tmp/tmpp1he3mz3.java:39:\
    \ warning: [removal] Long(long) in Long has been deprecated and marked for removal\n\
    \            result.add(new Long(sb.length()));\n                       ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n3 warnings\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        for (char c : paren_string.toCharArray())\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       stack.push(c);\n            } else if (c == ')') {\n                String\
    \ s = stack.pop();\n                result.add(Long.parseLong(s) - 1);\n     \
    \           in_paren = false;\n            } else if (c == ' ') {\n          \
    \      String s = stack.pop();\n                result.add(Long.parseLong(s) -\
    \ 1);\n            } else if (c == '(' || c == '[' || c == '{') {\n          \
    \      stack.push(c);\n            } else if (c == ']' || c == ']') {\n      \
    \          String s = stack.pop();\n                result.add(Long.parseLong(s)\
    \ - 1);\n            } else if (c == '}' || c == '}') {\n                String\
    \ s = stack.pop();\n                result.add(Long.parseLong(s) - 1);\n     \
    \       } else if (c == ' ') {\n                String s = stack.pop();\n    \
    \            result.add(Long.parseLong(s) - 1);\n            } else if (in_paren)\
    \ {\n                sb.append(c);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy1k1ual7.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\n/tmp/tmpy1k1ual7.java:31:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    stack.push(c);\n                           ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> levels_stack = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack4 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack8 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack11 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack12 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack20 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack22 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack23 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack24 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack25\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack31 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack32 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack33\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack34 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack35 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack36 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack37\
    \ = new ArrayList<Long>();\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4pj92iz4.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean inside_paren = false;\n        boolean\
    \ inside_group = false;\n        for (char c : paren_string.toCharArray()) {\n\
    \            if (c == '(') {\n                inside_paren = true;\n         \
    \       stack.push(c);\n            } else if (c == ')') {\n                inside_paren\
    \ = false;\n                String s = stack.pop();\n                result.add(Long.parseLong(s));\n\
    \            } else if (c == ' ') {\n                if (inside_paren) {\n   \
    \                 inside_group = true;\n                    sb.append(c);\n  \
    \              } else if (inside_group) {\n                    result.add(Long.parseLong(sb.toString()));\n\
    \                    inside_group = false;\n                    sb.setLength(0);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo5n8o27k.java:23: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_parens = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index4\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index14\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index19\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index20\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index24\
    \ = new ArrayList<Long>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9s0ij_ad.java:46: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<Long\n    }\n\
    \    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfv7hcaw.java:53: error: > expected\n    }\n    ^\n/tmp/tmpzfv7hcaw.java:52:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n/tmp/tmpzfv7hcaw.java:54:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpzfv7hcaw.java:54: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpzfv7hcaw.java:54: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpzfv7hcaw.java:54: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpzfv7hcaw.java:54:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpzfv7hcaw.java:60: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean in_paren = false;\n        boolean in_quote\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_backtick_brace\
    \ = false;\n        boolean in_backtick_escape = false;\n        boolean in_backtick_escape_brace\
    \ = false;\n        boolean in_backtick_escape_brace_escape = false;\n       \
    \ boolean in_backtick_escape_brace_escape_brace = false;\n        boolean in_backtick_escape_brace_escape_brace_escape\
    \ = false;\n        boolean in_backtick_escape_brace_escape_brace_escape_brace\
    \ = false;\n        boolean in_backtick_escape_brace_escape_brace_escape_brace_escape\
    \ = false;\n        boolean in_backtick_escape_brace_escape_brace_escape_brace_escape_brace\
    \ = false;\n        boolean in_backtick_escape_brace_escape_brace_escape_brace_escape_brace_escape\
    \ = false;\n        boolean in_backtick_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace\
    \ = false;\n        boolean in_backtick_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape\
    \ = false;\n        boolean in_backtick_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape\
    \ = false;\n        boolean in_backtick_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace\
    \ = false;\n        boolean in_backtick_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape\
    \ = false;\n        boolean in_backtick_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape\
    \ = false;\n        boolean in_backtick_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape\
    \ = false;\n        boolean in_backtick_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace\
    \ = false;\n        boolean in_backtick_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape\
    \ = false;\n        boolean in_backtick_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape_bra\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o3cjkds.java:40: error: ';' expected\n        boolean in_backtick_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape_brace_escape_bra\n\
    \                                                                            \
    \                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> deepest_level = new ArrayList<>();\n\
    \        ArrayList<String> groups = new ArrayList<>();\n        ArrayList<Long>\
    \ deepest_level_of_nesting = new ArrayList<>();\n        ArrayList<Long> deepest_level_of_nesting_of_nesting\
    \ = new ArrayList<>();\n        ArrayList<Long> deepest_level_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<>();\n        ArrayList<Long> deepest_level_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<>();\n        ArrayList<Long> deepest_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<>();\n        ArrayList<Long> deepest_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<>();\n        ArrayList<Long> deepest_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<>();\n        ArrayList<Long> deepest_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<>();\n        ArrayList<Long> deepest_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<>();\n        ArrayList<Long> deepest_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<>();\n        ArrayList<Long> deepest_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<>();\n        ArrayList<Long> deepest_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<>();\n        ArrayList<Long> deepest_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<>();\n        ArrayList<Long> deepest_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<>();\n        ArrayList<Long> deepest_level_of_nesting_of_nesting_of_nesting_of_\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp63rmpwhs.java:31: error: ';' expected\n        ArrayList<Long>\
    \ deepest_level_of_nesting_of_nesting_of_nesting_of_\n                       \
    \                                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index4\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index14\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index19\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index20\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index24\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index25\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index26\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index27\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index28\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index29\
    \ = new ArrayList<Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9cb07bdn.java:48: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> parens = new ArrayList<String>();\n        paren_string\
    \ = paren_string.trim();\n        paren_string = paren_string.replaceAll(\"\\\\\
    s+\", \" \");\n        paren_string = paren_string.replaceAll(\"\\\\(\", \"(\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \")\");\n      \
    \  paren_string = paren_string.replaceAll(\"\\\\[\", \"[\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\]\", \"]\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\{\", \"{\");\n        paren_string = paren_string.replaceAll(\"\\\\}\", \"\
    }\");\n        paren_string = paren_string.replaceAll(\"\\\\+\", \"+\");\n   \
    \     paren_string = paren_string.replaceAll(\"\\\\-\", \"-\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\*\", \"*\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\/\", \"/\");\n        paren_string = paren_string.replaceAll(\"\\\\%\", \"\
    %\");\n        paren_string = paren_string.replaceAll(\"\\\\^\", \"^\");\n   \
    \     paren_string = paren_string.replaceAll(\"\\\\~\", \"~\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\=\", \"=\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\<\", \"<\");\n        paren_string = paren_string.replaceAll(\"\\\\>\", \"\
    >\");\n        paren_string = paren_string.replaceAll(\"\\\\!\", \"!\");\n   \
    \     paren_string = paren_string.replaceAll(\"\\\\&\", \"&\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\|\", \"|\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\:\", \":\");\n        paren_string = paren_string.replaceAll(\"\\\\;\", \"\
    ;\");\n        paren_string = paren_string.replaceAll(\"\\\\,\", \",\");\n   \
    \     paren_string = paren_string.replaceAll(\"\\\\(\", \"(\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \")\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\[\", \"[\");\n        paren_string = paren_string.replaceAll(\"\\\\]\", \"\
    ]\");\n        paren_string = paren_string.replaceAll(\"\\\\{\", \"{\");\n   \
    \     paren_string = paren_string.replaceAll(\"\\\\}\", \"}\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\+\", \"+\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\-\", \"-\");\n        paren_string = paren_string.replaceAll(\"\\\\*\", \"\
    *\");\n        paren_string = paren_string\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxbtid_55.java:50: error: ';' expected\n        paren_string = paren_string\n\
    \                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack2 = new ArrayList<Long>();\n        ArrayList<Long> stack3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<Long>();\n        ArrayList<Long> stack6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<Long>();\n        ArrayList<Long> stack9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<Long>();\n        ArrayList<Long> stack12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<Long>();\n        ArrayList<Long> stack15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<Long>();\n        ArrayList<Long> stack18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<Long>();\n        ArrayList<Long> stack21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<Long>();\n        ArrayList<Long> stack24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<Long>();\n        ArrayList<Long> stack27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<Long>();\n        ArrayList<Long> stack30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<Long>();\n        ArrayList<Long> stack33 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<Long>();\n        ArrayList<Long> stack36 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<Long>();\n        ArrayList<Long> stack39 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<Long>();\n        ArrayList<Long> stack42 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<Long>();\n        ArrayList<Long> stack45 = new ArrayList<Long>();\n\
    \        ArrayList<Long\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkmni_lwk.java:62: error: > expected\n    }\n    ^\n/tmp/tmpkmni_lwk.java:61:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n/tmp/tmpkmni_lwk.java:63:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpkmni_lwk.java:63: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpkmni_lwk.java:63: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpkmni_lwk.java:63: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpkmni_lwk.java:63:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpkmni_lwk.java:69: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy = new ArrayList<Long>();\n        ArrayList<Long> stack_copy2 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> stack_copy3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy6 =\
    \ new ArrayList<Long>();\n        ArrayList<Long> stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy10 =\
    \ new ArrayList<Long>();\n        ArrayList<Long> stack_copy11 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy12 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy13 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy14\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy17 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy23 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy24 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy25 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy26\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy29 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy30\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy32 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy34\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy35 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy36 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy37 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy38\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy39 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy40 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy41 = new ArrayList<Long\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp71dm4bw0.java:58: error: > expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index3 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_levels_index4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels_index5 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> current_levels_index6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index7 = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index9 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_levels_index10 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels_index11 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> current_levels_index12 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> current_levels_index13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index14 = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index16 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_levels_index17 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels_index18 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> current_levels_index19 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> current_levels_index20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index21 = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index23 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_levels_index24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels_index25 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> current_levels_index26 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> current_levels_index27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index28 = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index30 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_levels_index31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels_index32 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> current_levels_index33 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> current_levels_index34 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index35 = new ArrayList<Long>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuw_ggfmx.java:52: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\"\\\\s+\");\n  \
    \      ArrayList<String> paren_strings_copy = paren_strings.clone();\n       \
    \ ArrayList<String> paren_strings_copy2 = paren_strings_copy.clone();\n      \
    \  ArrayList<String> paren_strings_copy3 = paren_strings_copy2.clone();\n    \
    \    ArrayList<String> paren_strings_copy4 = paren_strings_copy3.clone();\n  \
    \      ArrayList<String> paren_strings_copy5 = paren_strings_copy4.clone();\n\
    \        ArrayList<String> paren_strings_copy6 = paren_strings_copy5.clone();\n\
    \        ArrayList<String> paren_strings_copy7 = paren_strings_copy6.clone();\n\
    \        ArrayList<String> paren_strings_copy8 = paren_strings_copy7.clone();\n\
    \        ArrayList<String> paren_strings_copy9 = paren_strings_copy8.clone();\n\
    \        ArrayList<String> paren_strings_copy10 = paren_strings_copy9.clone();\n\
    \        ArrayList<String> paren_strings_copy11 = paren_strings_copy10.clone();\n\
    \        ArrayList<String> paren_strings_copy12 = paren_strings_copy11.clone();\n\
    \        ArrayList<String> paren_strings_copy13 = paren_strings_copy12.clone();\n\
    \        ArrayList<String> paren_strings_copy14 = paren_strings_copy13.clone();\n\
    \        ArrayList<String> paren_strings_copy15 = paren_strings_copy14.clone();\n\
    \        ArrayList<String> paren_strings_copy16 = paren_strings_copy15.clone();\n\
    \        ArrayList<String> paren_strings_copy17 = paren_strings_copy16.clone();\n\
    \        ArrayList<String> paren_strings_copy18 = paren_strings_copy17.clone();\n\
    \        ArrayList<String> paren_strings_copy19 = paren_strings_copy18.clone();\n\
    \        ArrayList<String> paren_strings_copy20 = paren_strings_copy19.clone();\n\
    \        ArrayList<String> paren_strings_copy21 = paren_strings_copy20.clone();\n\
    \        ArrayList<String> paren_strings_copy22 = paren_strings_copy21.clone();\n\
    \        ArrayList<String> paren_strings_copy23 = paren_strings_copy22.clone();\n\
    \        ArrayList<String> paren_strings_copy24 = paren_strings_copy23.clone();\n\
    \        ArrayList<String> paren_strings_copy25 = paren_strings_copy24.clone();\n\
    \        ArrayList<String> paren_strings_copy26 = paren_strings_copy25.clone();\n\
    \        ArrayList<String> paren_strings_copy27 = paren_strings_copy26.clone();\n\
    \        ArrayList<String> paren_strings_copy28 = paren_strings_copy27.clone();\n\
    \        ArrayList<String> paren_strings_copy29 = paren_strings_copy28.clone();\n\
    \        ArrayList<String> paren_strings_copy30 = paren_strings_copy29.clone();\n\
    \        ArrayList<String> paren_strings_copy31 = paren_strings_copy30.clone();\n\
    \        ArrayList<String> paren_strings_copy32\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqf1czrsh.java:48: error: ';' expected\n        ArrayList<String>\
    \ paren_strings_copy32\n                                              ^\n1 error\n"
  stdout: ''
  timestamp: 1659797917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean inParen = false;\n        boolean inBrackets = false;\n     \
    \   boolean inBraces = false;\n        boolean inBrace = false;\n        boolean\
    \ inBracket = false;\n        boolean inParens = false;\n        boolean inParen\
    \ = false;\n        boolean inBrackets = false;\n        boolean inBraces = false;\n\
    \        boolean inBrace = false;\n        boolean inBracket = false;\n      \
    \  boolean inParens = false;\n        boolean inParen = false;\n        boolean\
    \ inBrackets = false;\n        boolean inBraces = false;\n        boolean inBrace\
    \ = false;\n        boolean inBracket = false;\n        boolean inParens = false;\n\
    \        boolean inParen = false;\n        boolean inBrackets = false;\n     \
    \   boolean inBraces = false;\n        boolean inBrace = false;\n        boolean\
    \ inBracket = false;\n        boolean inParens = false;\n        boolean inParen\
    \ = false;\n        boolean inBrackets = false;\n        boolean inBraces = false;\n\
    \        boolean inBrace = false;\n        boolean inBracket = false;\n      \
    \  boolean inParens = false;\n        boolean inParen = false;\n        boolean\
    \ inBrackets = false;\n        boolean inBraces = false;\n        boolean inBrace\
    \ = false;\n        boolean inBracket = false;\n        boolean inParens = false;\n\
    \        boolean inParen = false;\n        boolean inBrackets = false;\n     \
    \   boolean inBraces = false;\n        boolean inBrace = false;\n        boolean\
    \ inBracket = false;\n        boolean inParens = false;\n        boolean inParen\
    \ = false;\n        boolean inBrackets = false;\n        boolean inBraces = false;\n\
    \        boolean inBrace = false;\n        boolean inBracket = false;\n      \
    \  boolean inParens = false;\n        boolean inParen = false;\n        boolean\
    \ inBrackets = false;\n        boolean inBraces = false;\n        boolean inBrace\
    \ = false;\n        boolean inBracket = false;\n        boolean inParens = false;\n\
    \        boolean inParen = false;\n        boolean inBrackets = false;\n     \
    \   boolean inBraces = false;\n        boolean inBrace = false;\n        boolean\
    \ inBracket = false;\n        boolean inParens = false;\n        boolean inParen\
    \ = false;\n        boolean inBrackets = false;\n        boolean inBraces = false;\n\
    \        boolean inBrace = false;\n        boolean inBracket = false;\n      \
    \  boolean inParens = false;\n        boolean inParen = false;\n        boolean\
    \ inBracket\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwid210ix.java:85: error: ';' expected\n        boolean inBracket\n\
    \                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_top = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom = new\
    \ ArrayList<Long>();\n        ArrayList<Long> stack_bottom_top = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_bottom_bottom_top = new ArrayList<Long>();\n  \
    \      ArrayList<Long> stack_bottom_bottom_bottom_top = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_bottom_bottom_bottom_bottom_top = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_top = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_top =\
    \ new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_top\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6tqz_znh.java:41: error: ';' expected\n        ArrayList<Long>\
    \ stack_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_bottom_\n\
    \                                                                            \
    \                                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> paren_strings = paren_string.split(\" \");\n        ArrayList<String>\
    \ paren_strings_copy = paren_strings.clone();\n        ArrayList<String> paren_strings_copy2\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy3 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy4 = paren_strings.clone();\n    \
    \    ArrayList<String> paren_strings_copy5 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy6 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy7\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy8 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy9 = paren_strings.clone();\n    \
    \    ArrayList<String> paren_strings_copy10 = paren_strings.clone();\n       \
    \ ArrayList<String> paren_strings_copy11 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy12 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy13\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy14 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy15 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy16 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy17 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy18 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy19\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy20 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy21 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy22 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy23 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy24 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy25\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy26 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy27 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy28 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy29 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy30 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy31\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy32 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy33 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy34 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy35 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy36 = paren_strings.clone();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe8vb3avd.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n                                                            ^\n/tmp/tmpe8vb3avd.java:17:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy = paren_strings.clone();\n     \
    \                                                             ^\n/tmp/tmpe8vb3avd.java:18:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy2 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpe8vb3avd.java:19:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy3 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpe8vb3avd.java:20:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy4 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpe8vb3avd.java:21:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy5 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpe8vb3avd.java:22:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy6 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpe8vb3avd.java:23:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy7 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpe8vb3avd.java:24:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> pare"
  stdout: ''
  timestamp: 1659797915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean inParens = false;\n        boolean inBrackets = false;\n    \
    \    boolean inBraces = false;\n        boolean inBrace = false;\n        boolean\
    \ inBracket = false;\n        boolean inParen = false;\n        boolean inBracketParen\
    \ = false;\n        boolean inBraceParen = false;\n        boolean inBracketParens\
    \ = false;\n        boolean inBraceParens = false;\n        boolean inBracketParenParen\
    \ = false;\n        boolean inBraceParenParen = false;\n        boolean inBracketParenParens\
    \ = false;\n        boolean inBraceParenParens = false;\n        boolean inBracketParenParenParen\
    \ = false;\n        boolean inBraceParenParenParen = false;\n        boolean inBracketParenParenParens\
    \ = false;\n        boolean inBraceParenParenParens = false;\n        boolean\
    \ inBracketParenParenParenParen = false;\n        boolean inBraceParenParenParenParen\
    \ = false;\n        boolean inBracketParenParenParenParens = false;\n        boolean\
    \ inBraceParenParenParenParens = false;\n        boolean inBracketParenParenParenParenParen\
    \ = false;\n        boolean inBraceParenParenParenParenParen = false;\n      \
    \  boolean inBracketParenParenParenParenParens = false;\n        boolean inBraceParenParenParenParenParens\
    \ = false;\n        boolean inBracketParenParenParenParenParenParen = false;\n\
    \        boolean inBraceParenParenParenParenParenParen = false;\n        boolean\
    \ inBracketParenParenParenParenParenParens = false;\n        boolean inBraceParenParenParenParenParenParens\
    \ = false;\n        boolean inBracketParenParenParenParenParenParenParen = false;\n\
    \        boolean inBraceParenParenParenParenParenParenParen = false;\n       \
    \ boolean inBracketParenParenParenParenParenParenParens = false;\n        boolean\
    \ inBraceParenParenParenParenParenParenParens = false;\n        boolean inBracketParenParenParenParenParenParenParenParen\
    \ = false;\n        boolean inBraceParenParenParenParenParenParenParenParen =\
    \ false;\n        boolean inBracketParenParenParenParenParenParenParenParens =\
    \ false;\n        boolean inBraceParenParenParenParenParenParenParenParens = false;\n\
    \        boolean inBracketParenParenParenParenParenParenParenParenParenParen =\
    \ false;\n        boolean inBraceParenParenParenParenParenParenParenParenParen\
    \ = false;\n        boolean inBracketParenParenParenParenParenParenParenParenParens\
    \ = false;\n        boolean inBraceParenParen\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpit96w5tr.java:59: error: ';' expected\n        boolean inBraceParenParen\n\
    \                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659797992
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_parens = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_paren\n    }\n\
    \    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpey1w8ux8.java:35: error: ';' expected\n        ArrayList<Long>\
    \ current_level_paren\n                                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659797913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> groups = new ArrayList<String>();\n        ArrayList<String>\
    \ group_strings = new ArrayList<String>();\n        ArrayList<String> group_lengths\
    \ = new ArrayList<String>();\n        ArrayList<Long> group_lengths_long = new\
    \ ArrayList<Long>();\n        ArrayList<Long> group_lengths_long_long = new ArrayList<Long>();\n\
    \        ArrayList<Long> group_lengths_long_long_long = new ArrayList<Long>();\n\
    \        ArrayList<Long> group_lengths_long_long_long_long = new ArrayList<Long>();\n\
    \        ArrayList<Long> group_lengths_long_long_long_long_long = new ArrayList<Long>();\n\
    \        ArrayList<Long> group_lengths_long_long_long_long_long_long = new ArrayList<Long>();\n\
    \        ArrayList<Long> group_lengths_long_long_long_long_long_long_long = new\
    \ ArrayList<Long>();\n        ArrayList<Long> group_lengths_long_long_long_long_long_long_long_long\
    \ = new ArrayList<Long>();\n        ArrayList<Long> group_lengths_long_long_long_long_long_long_long_long_long\
    \ = new ArrayList<Long>();\n        ArrayList<Long> group_lengths_long_long_long_long_long_long_long_long_long_long\
    \ = new ArrayList<Long>();\n        ArrayList<Long> group_lengths_long_long_long_long_long_long_long_long_long_long\
    \ = new ArrayList<Long>();\n        ArrayList<Long> group_lengths_long_long_long_long_long_long_long_long_long_long_long\
    \ = new ArrayList<Long>();\n        ArrayList<Long> group_lengths_long_long_long_long_long_long_long_long_long_long_long_long\
    \ = new ArrayList<Long>();\n        ArrayList<Long> group_lengths_long_long_long_long_long_long_long_long_long_long_long_long_long\
    \ = new ArrayList<Long>();\n        ArrayList<Long> group_lengths_long_long_long_long_long_long_long_long_long_long_long_long_long\
    \ = new ArrayList<Long>();\n        ArrayList<Long> group_lengths_long_long_long_long_long_long_long_long_long_long_long_long\
    \ = new ArrayList<Long>();\n        ArrayList<Long> group_lengths_long_long_long_long_long_long_long_long_long_long_long_long_long\
    \ = new ArrayList<Long>();\n        ArrayList<Long> group_lengths_long_long_long_long_long_long_long_long_long_long_long_long_long_long\
    \ = new ArrayList<Long>();\n        ArrayList<Long> group_lengths_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long\
    \ = new ArrayList<Long>();\n        ArrayList<Long> group_lengths_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long\
    \ = new ArrayList<Long>();\n        ArrayList<Long> group_lengths_long_long_long_long_long_long_long_long_long_long_long_long_long_long\
    \ = new ArrayList<Long>();\n        ArrayList<Long> group_lengths_long_long_long_long_long_long_long_long_long_long_long_long_long_long\
    \ = new ArrayList<Long\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa8d2f_ae.java:41: error: > expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_groups = paren_string.split(\"\\\\s+\");\n   \
    \     ArrayList<Long> current_level = new ArrayList<Long>();\n        for (String\
    \ group : paren_groups) {\n            ArrayList<Long> new_level = new ArrayList<Long>();\n\
    \            ArrayList<Long> current_level_copy = current_level;\n           \
    \ int opening_paren_count = 0;\n            int closing_paren_count = 0;\n   \
    \         boolean found = false;\n            boolean is_opening_paren = false;\n\
    \            boolean is_closing_paren = false;\n            for (int i = 0; i\
    \ < group.length(); i++) {\n                char c = group.charAt(i);\n      \
    \          if (c == '(') {\n                    opening_paren_count++;\n     \
    \               is_opening_paren = true;\n                } else if (c == ')')\
    \ {\n                    closing_paren_count++;\n                    is_closing_paren\
    \ = true;\n                }\n                if (is_opening_paren) {\n      \
    \              current_level_copy.add(new Long(opening_paren_count));\n      \
    \              is_opening_paren = false;\n                } else if (is_closing_paren)\
    \ {\n                    current_level_copy.add(new Long(closing_paren_count));\n\
    \                    is_closing_paren = false;\n                }\n          \
    \      if (c == '(') {\n                    opening_paren_count++;\n         \
    \       } else if (c == ')') {\n                    closing_paren_count++;\n \
    \               }\n            }\n            if (opening_paren_count == closing_paren_count)\
    \ {\n                found = true;\n            }\n            if (found) {\n\
    \                result.add(new Long(current_level_copy));\n            }\n  \
    \          current_level = new_level;\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm8r048w0.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_groups = paren_string.split(\"\
    \\\\s+\");\n                                                           ^\n/tmp/tmpm8r048w0.java:36:\
    \ warning: [removal] Long(long) in Long has been deprecated and marked for removal\n\
    \                    current_level_copy.add(new Long(opening_paren_count));\n\
    \                                           ^\n/tmp/tmpm8r048w0.java:39: warning:\
    \ [removal] Long(long) in Long has been deprecated and marked for removal\n  \
    \                  current_level_copy.add(new Long(closing_paren_count));\n  \
    \                                         ^\n/tmp/tmpm8r048w0.java:52: error:\
    \ no suitable constructor found for Long(ArrayList<Long>)\n                result.add(new\
    \ Long(current_level_copy));\n                           ^\n    constructor Long.Long(long)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to long)\n    constructor Long.Long(String) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to String)\n2 errors\n2 warnings\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_parens = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index4\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index14\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index19\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index20\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_level_count_max_index24\
    \ = new ArrayList<Long>();\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9s0ij_ad.java:46: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_groups = paren_string.split(\"\\\\s+\");\n   \
    \     for (String group : paren_groups) {\n            ArrayList<Long> level_of_nesting\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level = new ArrayList<Long>();\n\
    \            ArrayList<Long> current_level_of_nesting = new ArrayList<Long>();\n\
    \            ArrayList<Long> current_level_of_nesting_of_nesting = new ArrayList<Long>();\n\
    \            ArrayList<Long> current_level_of_nesting_of_nesting_of_nesting =\
    \ new ArrayList<Long>();\n            ArrayList<Long> current_level_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nest\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwk6c4f_6.java:33: error: ';' expected\n            ArrayList<Long>\
    \ current_level_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nesting_of_nest\n\
    \                                                                            \
    \                                                                            \
    \       ^\n/tmp/tmpwk6c4f_6.java:35: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_groups = paren_string.split(\"\\\\s+\");\n   \
    \     for (String group : paren_groups) {\n            ArrayList<Long> current_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens =\
    \ new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index2\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index3\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index4\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index5\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index6\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index7\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index8\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index9\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index10\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index11\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index12\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index13\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index14\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index15\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index16\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index17\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index18\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index19\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index20\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index21\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index22\
    \ = new ArrayList<Long>();\n            ArrayList<Long> current_level_parens_level_count_max_index23\
    \ = new \n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0jfz9ehx.java:45: error: <identifier> expected\n            ArrayList<Long>\
    \ current_level_parens_level_count_max_index23 = new \n                      \
    \                                                        ^\n/tmp/tmp0jfz9ehx.java:46:\
    \ error: '(' or '[' expected\n    }\n    ^\n/tmp/tmp0jfz9ehx.java:47: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n3\
    \ errors\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean in_paren = false;\n        boolean in_quote\
    \ = false;\n        boolean in_escape = false;\n        boolean in_backslash =\
    \ false;\n        boolean in_backslash2 = false;\n        boolean in_backslash3\
    \ = false;\n        boolean in_backslash4 = false;\n        boolean in_backslash5\
    \ = false;\n        boolean in_backslash6 = false;\n        boolean in_backslash7\
    \ = false;\n        boolean in_backslash8 = false;\n        boolean in_backslash9\
    \ = false;\n        boolean in_backslash10 = false;\n        boolean in_backslash11\
    \ = false;\n        boolean in_backslash12 = false;\n        boolean in_backslash13\
    \ = false;\n        boolean in_backslash14 = false;\n        boolean in_backslash15\
    \ = false;\n        boolean in_backslash16 = false;\n        boolean in_backslash17\
    \ = false;\n        boolean in_backslash18 = false;\n        boolean in_backslash19\
    \ = false;\n        boolean in_backslash20 = false;\n        boolean in_backslash21\
    \ = false;\n        boolean in_backslash22 = false;\n        boolean in_backslash23\
    \ = false;\n        boolean in_backslash24 = false;\n        boolean in_backslash25\
    \ = false;\n        boolean in_backslash26 = false;\n        boolean in_backslash27\
    \ = false;\n        boolean in_backslash28 = false;\n        boolean in_backslash29\
    \ = false;\n        boolean in_backslash30 = false;\n        boolean in_backslash31\
    \ = false;\n        boolean in_backslash32 = false;\n        boolean in_backslash33\
    \ = false;\n        boolean in_backslash34 = false;\n        boolean in_backslash35\
    \ = false;\n        boolean in_backslash36 = false;\n        boolean in_backslash37\
    \ = false;\n        boolean in_backslash38 = false;\n        boolean in_backslash39\
    \ = false;\n        boolean in_backslash40 = false;\n        boolean in_backslash41\
    \ = false;\n        boolean in_backslash42 = false;\n        boolean in_backslash43\
    \ = false;\n        boolean in_backslash44 = false;\n        boolean in_backslash45\
    \ = false;\n        boolean in_backslash46 = false;\n        boolean in_backslash47\
    \ = false;\n        boolean in_backslash48 = false;\n        boolean in_backslash49\
    \ = false;\n        boolean in_backslash50 = false;\n        boolean in_backslash51\
    \ = false;\n        boolean in_backslash52 = false;\n        boolean in_backslash53\
    \ = false;\n        boolean in_backslash54 = false;\n        boolean in_backslash55\
    \ = false;\n        boolean in_backslash56 = false;\n        boolean in_backslash57\
    \ = false;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc38rqcug.java:78: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy =\
    \ new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkzzqghkg.java:41: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpkzzqghkg.java:40: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean in_paren = false;\n        boolean in_brace\
    \ = false;\n        boolean in_brace2 = false;\n        boolean in_brace3 = false;\n\
    \        boolean in_brace4 = false;\n        boolean in_brace5 = false;\n    \
    \    boolean in_brace6 = false;\n        boolean in_brace7 = false;\n        boolean\
    \ in_brace8 = false;\n        boolean in_brace9 = false;\n        boolean in_brace10\
    \ = false;\n        boolean in_brace11 = false;\n        boolean in_brace12 =\
    \ false;\n        boolean in_brace13 = false;\n        boolean in_brace14 = false;\n\
    \        boolean in_brace15 = false;\n        boolean in_brace16 = false;\n  \
    \      boolean in_brace17 = false;\n        boolean in_brace18 = false;\n    \
    \    boolean in_brace19 = false;\n        boolean in_brace20 = false;\n      \
    \  boolean in_brace21 = false;\n        boolean in_brace22 = false;\n        boolean\
    \ in_brace23 = false;\n        boolean in_brace24 = false;\n        boolean in_brace25\
    \ = false;\n        boolean in_brace26 = false;\n        boolean in_brace27 =\
    \ false;\n        boolean in_brace28 = false;\n        boolean in_brace29 = false;\n\
    \        boolean in_brace30 = false;\n        boolean in_brace31 = false;\n  \
    \      boolean in_brace32 = false;\n        boolean in_brace33 = false;\n    \
    \    boolean in_brace34 = false;\n        boolean in_brace35 = false;\n      \
    \  boolean in_brace36 = false;\n        boolean in_brace37 = false;\n        boolean\
    \ in_brace38 = false;\n        boolean in_brace39 = false;\n        boolean in_brace40\
    \ = false;\n        boolean in_brace41 = false;\n        boolean in_brace42 =\
    \ false;\n        boolean in_brace43 = false;\n        boolean in_brace44 = false;\n\
    \        boolean in_brace45 = false;\n        boolean in_brace46 = false;\n  \
    \      boolean in_brace47 = false;\n        boolean in_brace48 = false;\n    \
    \    boolean in_brace49 = false;\n        boolean in_brace50 = false;\n      \
    \  boolean in_brace51 = false;\n        boolean in_brace52 = false;\n        boolean\
    \ in_brace53 = false;\n        boolean in_brace54 = false;\n        boolean in_brace55\
    \ = false;\n        boolean in_brace56 = false;\n        boolean in_brace57 =\
    \ false;\n        boolean in_brace58 = false;\n        boolean in_brace59 = false;\n\
    \        boolean in_brace60 = false;\n        boolean in_brace61 = false;\n  \
    \      boolean in_brace62 = false;\n        boolean in_brace63 = false;\n    \
    \    boolean in_brace64 = false;\n        boolean in_brace65 = false;\n      \
    \  boolean in_brace66 = false;\n        boolean \n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ljr_8wq.java:85: error: not a statement\n        boolean \n  \
    \      ^\n/tmp/tmp9ljr_8wq.java:85: error: ';' expected\n        boolean \n  \
    \             ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797993
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> levels = new ArrayList<Long>();\n \
    \       ArrayList<Long> levels_stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy6 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy11 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy23 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy35 = new ArrayList<Long>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8xyh1cim.java:52: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> stack2\
    \ = new ArrayList<>();\n        ArrayList<Long> stack3 = new ArrayList<>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<>();\n        ArrayList<Long> stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<>();\n        ArrayList<Long> stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<>();\n        ArrayList<Long> stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<>();\n        ArrayList<Long> stack15 = new ArrayList<>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<>();\n        ArrayList<Long> stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<>();\n        ArrayList<Long> stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<>();\n        ArrayList<Long> stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<>();\n        ArrayList<Long> stack27 = new ArrayList<>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<>();\n        ArrayList<Long> stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<>();\n        ArrayList<Long> stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<>();\n        ArrayList<Long> stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<>();\n        ArrayList<Long> stack39 = new ArrayList<>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<>();\n        ArrayList<Long> stack42 = new ArrayList<>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<>();\n        ArrayList<Long> stack45 = new ArrayList<>();\n\
    \        ArrayList<Long> stack46 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack47 = new ArrayList<>();\n        ArrayList<Long> stack48 = new ArrayList<>();\n\
    \        ArrayList<Long> stack49 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack50 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5wlfhby.java:66: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpk5wlfhby.java:67: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpk5wlfhby.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpk5wlfhby.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk5wlfhby.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> levels = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\" \");\n       \
    \ for(String s : paren_strings) {\n            levels.add(parseNestedParens(s));\n\
    \        }\n        return levels;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7v7kgcfe.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n                                                            ^\n/tmp/tmp7v7kgcfe.java:18:\
    \ error: incompatible types: ArrayList<Long> cannot be converted to Long\n   \
    \         levels.add(parseNestedParens(s));\n                                \
    \        ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_2 = new ArrayList<Long>();\n        ArrayList<Long> current_level_3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_4 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level_5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_6 = new ArrayList<Long>();\n        ArrayList<Long> current_level_7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level_9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_10 = new ArrayList<Long>();\n        ArrayList<Long> current_level_11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level_13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_14 = new ArrayList<Long>();\n        ArrayList<Long> current_level_15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level_17 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_18 = new ArrayList<Long>();\n        ArrayList<Long> current_level_19\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_20 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level_21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_22 = new ArrayList<Long>();\n        ArrayList<Long> current_level_23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level_25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_26 = new ArrayList<Long>();\n        ArrayList<Long> current_level_27\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_28 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level_29 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_30 = new ArrayList<Long>();\n        ArrayList<Long> current_level_31\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_32 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level_33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_34 = new ArrayList<Long>();\n        ArrayList<Long> current_level_35\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_36 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level_37 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_38 = new ArrayList<Long>();\n        ArrayList<Long> current_level_39\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_40 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level_41 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_42 = \n    }\n    public static void main(String[] args) {\n \
    \   assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyz2ln51g.java:58: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\" \");\n       \
    \ ArrayList<String> paren_strings_copy = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy2 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy3\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy4 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy5 = paren_strings.clone();\n    \
    \    ArrayList<String> paren_strings_copy6 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy7 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy8\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy9 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy10 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy11 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy12 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy13 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy14\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy15 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy16 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy17 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy18 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy19 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy20\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy21 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy22 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy23 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy24 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy25 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy26\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy27 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy28 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy29 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy30 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy31 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy32\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy33 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy34 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy35 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy36 = paren_strings.\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyh4zauct.java:52: error: <identifier> expected\n        ArrayList<String>\
    \ paren_strings_copy36 = paren_strings.\n                                    \
    \                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659797913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> paren_strings = paren_string.split(\"\\\\s+\");\n      \
    \  for(String s: paren_strings) {\n            ArrayList<Long> new_result = parseNestedParens(s);\n\
    \            result.addAll(new_result);\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8vzos7q6.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \\\\s+\");\n                                                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack2 = new ArrayList<Long>();\n        ArrayList<Long> stack3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<Long>();\n        ArrayList<Long> stack6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<Long>();\n        ArrayList<Long> stack9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<Long>();\n        ArrayList<Long> stack12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<Long>();\n        ArrayList<Long> stack15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<Long>();\n        ArrayList<Long> stack18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<Long>();\n        ArrayList<Long> stack21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<Long>();\n        ArrayList<Long> stack24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<Long>();\n        ArrayList<Long> stack27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<Long>();\n        ArrayList<Long> stack30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<Long>();\n        ArrayList<Long> stack33 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<Long>();\n        ArrayList<Long> stack36 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<Long>();\n        ArrayList<Long> stack39 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<Long>();\n        ArrayList<Long> stack42 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<Long>();\n        ArrayList<Long> stack45 = new ArrayList<Long>();\n\
    \        ArrayList<Long\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkmni_lwk.java:62: error: > expected\n    }\n    ^\n/tmp/tmpkmni_lwk.java:61:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n/tmp/tmpkmni_lwk.java:63:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpkmni_lwk.java:63: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpkmni_lwk.java:63: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpkmni_lwk.java:63: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpkmni_lwk.java:63:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpkmni_lwk.java:69: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack = new ArrayList<Long>();\n        ArrayList<Long> level_stack\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy = new\
    \ ArrayList<Long>();\n        ArrayList<Long> level_stack_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy_copy = new ArrayList<Long>();\n    \
    \    ArrayList<Long> max_level_stack_copy_copy_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy_copy_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy_copy_copy_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy_copy_copy_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy_copy_copy_copy_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy_copy_copy_copy_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy_copy_copy_copy_copy_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy_copy_copy_copy_copy_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy_copy_copy_copy_copy_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> level_stack_copy_copy_copy_copy_copy_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy_copy_copy_copy_copy_copy_copy =\
    \ new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> level_stack_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcdbb9fjp.java:46: error: > expected\n    }\n    ^\n/tmp/tmpcdbb9fjp.java:45:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\" \");\n       \
    \ ArrayList<String> paren_strings_copy = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy2 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy3 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy4 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy5 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy6 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy7 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy8 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy9 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy10 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy11 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy12 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy13 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy14 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy15 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy16 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy17 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy18 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy19 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy20 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy21 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy22 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy23 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy24 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy25 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy26 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy27 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy28 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy29 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy30 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy31 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy32 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy33 = paren_strings_copy.clone();\n        ArrayList<String>\
    \ paren_strings_copy34\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp10_iplrr.java:50: error: ';' expected\n        ArrayList<String>\
    \ paren_strings_copy34\n                                              ^\n1 error\n"
  stdout: ''
  timestamp: 1659797914
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        for (char c : paren_string.toCharArray())\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       stack.push(c);\n            } else if (c == ')') {\n                String\
    \ s = stack.pop();\n                if (s.equals(\"(\")) {\n                 \
    \   result.add(Long.valueOf(sb));\n                    sb.setLength(0);\n    \
    \                in_paren = false;\n                } else {\n               \
    \     sb.append(s);\n                }\n            } else {\n               \
    \ sb.append(c);\n            }\n        }\n        result.add(Long.valueOf(sb));\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpowsrgqat.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\n/tmp/tmpowsrgqat.java:26:\
    \ error: no suitable method found for valueOf(StringBuilder)\n               \
    \     result.add(Long.valueOf(sb));\n                                   ^\n  \
    \  method Long.valueOf(String) is not applicable\n      (argument mismatch; StringBuilder\
    \ cannot be converted to String)\n    method Long.valueOf(long) is not applicable\n\
    \      (argument mismatch; StringBuilder cannot be converted to long)\n/tmp/tmpowsrgqat.java:36:\
    \ error: no suitable method found for valueOf(StringBuilder)\n        result.add(Long.valueOf(sb));\n\
    \                       ^\n    method Long.valueOf(String) is not applicable\n\
    \      (argument mismatch; StringBuilder cannot be converted to String)\n    method\
    \ Long.valueOf(long) is not applicable\n      (argument mismatch; StringBuilder\
    \ cannot be converted to long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean inParen = false;\n        boolean inBracket\
    \ = false;\n        boolean inBrace = false;\n        boolean inQuote = false;\n\
    \        boolean inSpace = false;\n        boolean inNewLine = false;\n      \
    \  boolean inBackslash = false;\n        boolean inEscape = false;\n        boolean\
    \ inBackslash = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean inSingleQuote = false;\n        boolean\
    \ inDoubleQuote = false;\n        boolean in\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9uer30lz.java:87: error: ';' expected\n        boolean in\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(')\
    \ {\n                in_paren = true;\n                stack.push(c);\n      \
    \      } else if (c == ')') {\n                String s = stack.pop();\n     \
    \           if (s.equals(\"(\")) {\n                    result.add(new Long(sb.length()));\n\
    \                    sb.setLength(0);\n                    in_paren = false;\n\
    \                } else if (s.equals(\")\")) {\n                    result.add(new\
    \ Long(sb.length()));\n                    sb.setLength(0);\n                }\
    \ else {\n                    sb.append(s);\n                }\n            }\
    \ else if (in_paren) {\n                sb.append(c);\n            }\n       \
    \ }\n        if (sb.length() > 0) {\n            result.add(new Long(sb.length()));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5u4e0svs.java:23: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\n/tmp/tmp5u4e0svs.java:27:\
    \ warning: [removal] Long(long) in Long has been deprecated and marked for removal\n\
    \                    result.add(new Long(sb.length()));\n                    \
    \           ^\n/tmp/tmp5u4e0svs.java:31: warning: [removal] Long(long) in Long\
    \ has been deprecated and marked for removal\n                    result.add(new\
    \ Long(sb.length()));\n                               ^\n/tmp/tmp5u4e0svs.java:41:\
    \ warning: [removal] Long(long) in Long has been deprecated and marked for removal\n\
    \            result.add(new Long(sb.length()));\n                       ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n3 warnings\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        boolean in_quote = false;\n      \
    \  boolean in_escape = false;\n        boolean in_escaped_quote = false;\n   \
    \     boolean in_escaped_escape = false;\n        boolean in_escaped_escaped_quote\
    \ = false;\n        boolean in_escaped_escaped_escape = false;\n        boolean\
    \ in_escaped_escaped_escaped_quote = false;\n        boolean in_escaped_escaped_escaped_escape\
    \ = false;\n        boolean in_escaped_escaped_escaped_escaped_quote = false;\n\
    \        boolean in_escaped_escaped_escaped_escaped_escaped_quote = false;\n \
    \       boolean in_escaped_escaped_escaped_escaped_escaped_quote = false;\n  \
    \      boolean in_escaped_escaped_escaped_escaped_escaped_escape = false;\n  \
    \      boolean in_escaped_escaped_escaped_escaped_escaped_escaped_quote = false;\n\
    \        boolean in_escaped_escaped_escaped_escaped_escaped_escaped_escape = false;\n\
    \        boolean in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escape\
    \ = false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escape\
    \ = false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escape\
    \ = false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escape\
    \ = false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escape\
    \ = false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escape\
    \ = false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        boolean in_escaped_escaped_escaped_escape\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0izvtf8f.java:46: error: ';' expected\n        boolean in_escaped_escaped_escaped_escape\n\
    \                                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        for (char c : paren_string.toCharArray())\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       stack.push(c);\n            } else if (c == ')') {\n                String\
    \ s = stack.pop();\n                sb.append(s);\n                result.add(Long.parseLong(sb.toString()));\n\
    \                sb = new StringBuilder();\n                in_paren = false;\n\
    \            } else if (c == ' ') {\n                String s = stack.pop();\n\
    \                sb.append(s);\n                result.add(Long.parseLong(sb.toString()));\n\
    \                sb = new StringBuilder();\n                in_paren = false;\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        if (sb.length() > 0) {\n            String s = stack.pop();\n       \
    \     sb.append(s);\n            result.add(Long.parseLong(sb.toString()));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_tkbt0iu.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean in_paren = false;\n        boolean in_quote\
    \ = false;\n        boolean in_backtick = false;\n        boolean in_backtick2\
    \ = false;\n        boolean in_backtick3 = false;\n        boolean in_backtick4\
    \ = false;\n        boolean in_backtick5 = false;\n        boolean in_backtick6\
    \ = false;\n        boolean in_backtick7 = false;\n        boolean in_backtick8\
    \ = false;\n        boolean in_backtick9 = false;\n        boolean in_backtick10\
    \ = false;\n        boolean in_backtick11 = false;\n        boolean in_backtick12\
    \ = false;\n        boolean in_backtick13 = false;\n        boolean in_backtick14\
    \ = false;\n        boolean in_backtick15 = false;\n        boolean in_backtick16\
    \ = false;\n        boolean in_backtick17 = false;\n        boolean in_backtick18\
    \ = false;\n        boolean in_backtick19 = false;\n        boolean in_backtick20\
    \ = false;\n        boolean in_backtick21 = false;\n        boolean in_backtick22\
    \ = false;\n        boolean in_backtick23 = false;\n        boolean in_backtick24\
    \ = false;\n        boolean in_backtick25 = false;\n        boolean in_backtick26\
    \ = false;\n        boolean in_backtick27 = false;\n        boolean in_backtick28\
    \ = false;\n        boolean in_backtick29 = false;\n        boolean in_backtick30\
    \ = false;\n        boolean in_backtick31 = false;\n        boolean in_backtick32\
    \ = false;\n        boolean in_backtick33 = false;\n        boolean in_backtick34\
    \ = false;\n        boolean in_backtick35 = false;\n        boolean in_backtick36\
    \ = false;\n        boolean in_backtick37 = false;\n        boolean in_backtick38\
    \ = false;\n        boolean in_backtick39 = false;\n        boolean in_backtick40\
    \ = false;\n        boolean in_backtick41 = false;\n        boolean in_backtick42\
    \ = false;\n        boolean in_backtick43 = false;\n        boolean in_backtick44\
    \ = false;\n        boolean in_backtick45 = false;\n        boolean in_backtick46\
    \ = false;\n        boolean in_backtick47 = false;\n        boolean in_backtick48\
    \ = false;\n        boolean in_backtick49 = false;\n        boolean in_backtick50\
    \ = false;\n        boolean in_backtick51 = false;\n        boolean in_backtick52\
    \ = false;\n        boolean in_backtick53 = false;\n        boolean in_backtick54\
    \ = false;\n        boolean in_backtick55 = false;\n        boolean in_backtick56\
    \ = false;\n        boolean in_backtick57 = false;\n        boolean in_backtick\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwqpu7tk9.java:77: error: ';' expected\n        boolean in_backtick\n\
    \                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_parens = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index4\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index14\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index19\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index20\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index24\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index25\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index26\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index27\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index28\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index30\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index31\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_parens_index32\
    \ = new ArrayList<\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcb0yzwjd.java:50: error: illegal start of type\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<\n    }\n  \
    \  public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbcla8fa.java:53: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmplbcla8fa.java:52: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean inside_paren = false;\n        boolean\
    \ in_paren = false;\n        boolean in_paren_group = false;\n        boolean\
    \ in_paren_group_with_paren = false;\n        boolean in_paren_group_with_paren_group\
    \ = false;\n        boolean in_paren_group_with_paren_group_with_paren = false;\n\
    \        boolean in_paren_group_with_paren_group_with_paren_group = false;\n \
    \       boolean in_paren_group_with_paren_group_with_paren_group_with_paren =\
    \ false;\n        boolean in_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        boolean in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        boolean in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        boolean in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        boolean in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        boolean in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        boolean in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = false;\n        boolean in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        boolean in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        boolean in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        boolean in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        boolean in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren\
    \ = false;\n        boolean in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsg0vm59d.java:38: error: ';' expected\n        boolean in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_\n\
    \                                                                            \
    \                                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> stack2\
    \ = new ArrayList<>();\n        ArrayList<Long> stack3 = new ArrayList<>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<>();\n        ArrayList<Long> stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<>();\n        ArrayList<Long> stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<>();\n        ArrayList<Long> stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<>();\n        ArrayList<Long> stack15 = new ArrayList<>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<>();\n        ArrayList<Long> stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<>();\n        ArrayList<Long> stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<>();\n        ArrayList<Long> stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<>();\n        ArrayList<Long> stack27 = new ArrayList<>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<>();\n        ArrayList<Long> stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<>();\n        ArrayList<Long> stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<>();\n        ArrayList<Long> stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<>();\n        ArrayList<Long> stack39 = new ArrayList<>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<>();\n        ArrayList<Long> stack42 = new ArrayList<>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<>();\n        ArrayList<Long> stack45 = new ArrayList<>();\n\
    \        ArrayList<Long> stack46 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack47 = new ArrayList<>();\n        ArrayList<Long> stack48 = new ArrayList<>();\n\
    \        ArrayList<Long> stack49 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack50 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5wlfhby.java:66: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpk5wlfhby.java:67: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpk5wlfhby.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpk5wlfhby.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk5wlfhby.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean in_paren = false;\n        boolean in_quote\
    \ = false;\n        boolean in_curly_bracket = false;\n        boolean in_square_bracket\
    \ = false;\n        boolean in_curly_brace = false;\n        boolean in_square_brace\
    \ = false;\n        boolean in_curly_brackets = false;\n        boolean in_square_brackets\
    \ = false;\n        boolean in_curly_braces = false;\n        boolean in_square_braces\
    \ = false;\n        boolean in_curly_brackets_or_curly_braces = false;\n     \
    \   boolean in_square_brackets_or_square_braces = false;\n        boolean in_curly_brackets_or_curly_braces_or_square_braces\
    \ = false;\n        boolean in_square_brackets_or_curly_brackets = false;\n  \
    \      boolean in_square_brackets_or_curly_braces = false;\n        boolean in_square_brackets_or_curly_brackets_or_curly_braces\
    \ = false;\n        boolean in_square_brackets_or_curly_brackets_or_curly_braces_or_square_brackets\
    \ = false;\n        boolean in_square_brackets_or_curly_brackets_or_curly_braces_or_square_brackets_or_curly_braces\
    \ = false;\n        boolean in_square_brackets_or_curly_brackets_or_curly_braces_or_square_brackets_or_curly_braces_or_square_brackets\
    \ = false;\n        boolean in_square_brackets_or_curly_brackets_or_curly_braces_or_square_brackets_or_curly_braces_or_square_brackets_or_curly_braces\
    \ = false;\n        boolean in_square_brackets_or_curly_brackets_or_curly_braces_or_square_brackets_or_curly_braces_or_square_brackets_or_curly_braces_or_square_brackets\
    \ = false;\n        boolean in_square_brackets_or_curly_brackets_or_curly_braces_or_square_brackets_or_curly_braces_or_square_brackets_or_curly_braces_or_square_brackets_or_curly_braces\
    \ = false;\n        boolean in_square_brackets_or_curly_brackets_or_curly_braces_or_square_brackets_or_curly_braces_or_square_brackets_or_curly_braces_or_square_brackets_or_curly_braces_or_square_brackets\
    \ = false;\n        boolean in_square_bra\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5000_iuo.java:41: error: ';' expected\n        boolean in_square_bra\n\
    \                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> parens = new ArrayList<>();\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\(\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\s\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\(\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\(\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n       \
    \ paren_string = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\)\", \"\");\n        paren_string = paren_string\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdjvvokgj.java:52: error: ';' expected\n        paren_string = paren_string\n\
    \                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        boolean in_quote = false;\n      \
    \  for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n\
    \            if (c == '(') {\n                in_paren = true;\n             \
    \   stack.push(c);\n            } else if (c == ')') {\n                String\
    \ s = stack.pop();\n                if (s.equals(\"(\")) {\n                 \
    \   in_paren = false;\n                    result.add(new Long(sb));\n       \
    \             sb.setLength(0);\n                } else {\n                   \
    \ result.add(new Long(s));\n                }\n            } else if (c == '\"\
    ') {\n                in_quote = !in_quote;\n            } else if (in_paren)\
    \ {\n                sb.append(c);\n            }\n        }\n        if (sb.length()\
    \ > 0) {\n            result.add(new Long(sb));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj4aehpl0.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\n/tmp/tmpj4aehpl0.java:29:\
    \ error: no suitable constructor found for Long(StringBuilder)\n             \
    \       result.add(new Long(sb));\n                               ^\n    constructor\
    \ Long.Long(long) is not applicable\n      (argument mismatch; StringBuilder cannot\
    \ be converted to long)\n    constructor Long.Long(String) is not applicable\n\
    \      (argument mismatch; StringBuilder cannot be converted to String)\n/tmp/tmpj4aehpl0.java:32:\
    \ warning: [removal] Long(String) in Long has been deprecated and marked for removal\n\
    \                    result.add(new Long(s));\n                              \
    \ ^\n/tmp/tmpj4aehpl0.java:41: error: no suitable constructor found for Long(StringBuilder)\n\
    \            result.add(new Long(sb));\n                       ^\n    constructor\
    \ Long.Long(long) is not applicable\n      (argument mismatch; StringBuilder cannot\
    \ be converted to long)\n    constructor Long.Long(String) is not applicable\n\
    \      (argument mismatch; StringBuilder cannot be converted to String)\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n3 errors\n1 warning\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> paren_strings = paren_string.split(\"\\\\s+\");\n      \
    \  ArrayList<String> paren_strings_copy = new ArrayList<>(paren_strings);\n  \
    \      ArrayList<String> paren_strings_copy2 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_copy3 = new ArrayList<>();\n        ArrayList<String> paren_strings_copy4\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy5 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_copy6 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_copy7 = new ArrayList<>();\n        ArrayList<String> paren_strings_copy8\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy9 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_copy10 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_copy11 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_copy12 = new ArrayList<>();\n        ArrayList<String> paren_strings_copy13\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy14 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_copy15 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_copy16 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_copy17 = new ArrayList<>();\n        ArrayList<String> paren_strings_copy18\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy19 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_copy20 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_copy21 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_copy22 = new ArrayList<>();\n        ArrayList<String> paren_strings_copy23\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy24 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_copy25 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_copy26 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_copy27 = new ArrayList<>();\n        ArrayList<String> paren_strings_copy28\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy29 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_copy30 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_copy31 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_copy32 = new ArrayList<>();\n        ArrayList<String> paren_strings_copy33\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy34 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_copy35 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_strings_copy36 = new ArrayList<>();\n        ArrayList<String>\
    \ paren_strings_copy37 = new ArrayList<>();\n        ArrayList<String> paren_strings_copy38\
    \ = new ArrayList<>();\n        ArrayList<String> paren_strings_copy39 = new ArrayList<>();\n\
    \        ArrayList<String> paren_strings_copy40 = new ArrayList<>();\n       \
    \ ArrayList<String> paren_string\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsydkv44q.java:57: error: ';' expected\n        ArrayList<String>\
    \ paren_string\n                                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> paren_strings = paren_string.split(\" \");\n        ArrayList<String>\
    \ paren_strings_copy = new ArrayList<>(paren_strings);\n        ArrayList<Long>\
    \ paren_levels = new ArrayList<>();\n        ArrayList<Long> paren_levels_copy\
    \ = new ArrayList<>(paren_levels);\n        ArrayList<Long> paren_levels_copy2\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy3\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy4\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy5\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy6\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy7\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy8\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy9\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy10\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy11\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy12\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy13\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy14\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy15\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy16\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy17\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy18\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy19\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy20\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy21\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy22\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_levels_copy23\
    \ = new ArrayList<>(paren_levels_copy);\n        ArrayList<Long> paren_level\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe3cqt91_.java:42: error: ';' expected\n        ArrayList<Long>\
    \ paren_level\n                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        for (char c : paren_string.toCharArray())\
    \ {\n            if (c == '(') {\n                in_paren = true;\n         \
    \       stack.push(c);\n            } else if (c == ')') {\n                String\
    \ s = stack.pop();\n                while (!s.equals(\"(\")) {\n             \
    \       sb.append(s);\n                    s = stack.pop();\n                }\n\
    \                result.add(Long.parseLong(sb.toString()));\n                in_paren\
    \ = false;\n                sb = new StringBuilder();\n            } else if (c\
    \ == ' ') {\n                String s = stack.pop();\n                while (!s.equals(\"\
    (\")) {\n                    sb.append(s);\n                    s = stack.pop();\n\
    \                }\n                result.add(Long.parseLong(sb.toString()));\n\
    \                in_paren = false;\n                sb = new StringBuilder();\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        if (in_paren) {\n            String s = stack.pop();\n            while\
    \ (!s.equals(\"(\")) {\n                sb.append(s);\n                s = stack.pop();\n\
    \            }\n            result.add(Long.parseLong(sb.toString()));\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lbizndh.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_level_stack_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy_2 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> current_level_stack_copy_2 = new ArrayList<Long>();\n  \
    \      ArrayList<Long> max_level_stack_copy_3 = new ArrayList<Long>();\n     \
    \   ArrayList<Long> current_level_stack_copy_3 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> max_level_stack_copy_4 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> current_level_stack_copy_4 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> max_level_stack_copy_5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_stack_copy_5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ max_level_stack_copy_6 = new ArrayList<Long>();\n        ArrayList<Long> current_level_stack_copy_6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy_7 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_level_stack_copy_7 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> max_level_stack_copy_8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level_stack_copy_8 = new ArrayList<Long>();\n\
    \        ArrayList<Long> max_level_stack_copy_9 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> current_level_stack_copy_9 = new ArrayList<Long>();\n  \
    \      ArrayList<Long> max_level_stack_copy_10 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> current_level_stack_copy_10 = new ArrayList<Long>();\n  \
    \      ArrayList<Long> max_level_stack_copy_11 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> current_level_stack_copy_11 = new ArrayList<Long>();\n  \
    \      ArrayList<Long> max_level_stack_copy_12 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> current_level_stack_copy_12 = new ArrayList<Long>();\n  \
    \      ArrayList<Long> max_level_stack_copy_13 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> current_level_stack_copy_13 = new ArrayList<Long>();\n  \
    \      ArrayList<Long> max_level_stack_copy_14 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> current_level_stack_copy_14 = new ArrayList<Long>();\n  \
    \      ArrayList<Long> max_level_stack_copy_15 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> current_level_stack_copy_15 = new ArrayList<Long>();\n  \
    \      ArrayList<Long> max_level_stack_copy_16 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> current_level_stack_copy_16 = new ArrayList<Long>();\n  \
    \      ArrayList<Long> max_level_stack_copy_17 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> current_level_\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgxt797z7.java:52: error: ';' expected\n        ArrayList<Long>\
    \ current_level_\n                                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        boolean in_quote = false;\n      \
    \  boolean in_quoted = false;\n        boolean in_paren_or_quote = false;\n  \
    \      boolean in_paren_or_quoted = false;\n        boolean in_paren_or_quoted_or_paren\
    \ = false;\n        boolean in_paren_or_quoted_or_paren_or_quote = false;\n  \
    \      boolean in_paren_or_quoted_or_paren_or_quoted = false;\n        boolean\
    \ in_paren_or_quoted_or_paren_or_quoted_or_paren = false;\n        boolean in_paren_or_quoted_or_paren_or_quoted_or_paren_or_quote\
    \ = false;\n        boolean in_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted\
    \ = false;\n        boolean in_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren\
    \ = false;\n        boolean in_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quote\
    \ = false;\n        boolean in_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted\
    \ = false;\n        boolean in_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren\
    \ = false;\n        boolean in_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quote\
    \ = false;\n        boolean in_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren\
    \ = false;\n        boolean in_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quote\
    \ = false;\n        boolean in_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren\
    \ = false;\n        boolean in_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren\
    \ = false;\n        boolean in_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quote\
    \ = false;\n        \n    }\n    public static void main(String[] args) {\n  \
    \  assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3kyrd96y.java:37: error: variable in_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren\
    \ is already defined in method parseNestedParens(String)\n        boolean in_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren_or_quoted_or_paren\
    \ = false;\n                ^\n1 error\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> stack2\
    \ = new ArrayList<>();\n        ArrayList<Long> stack3 = new ArrayList<>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<>();\n        ArrayList<Long> stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<>();\n        ArrayList<Long> stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<>();\n        ArrayList<Long> stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<>();\n        ArrayList<Long> stack15 = new ArrayList<>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<>();\n        ArrayList<Long> stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<>();\n        ArrayList<Long> stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<>();\n        ArrayList<Long> stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<>();\n        ArrayList<Long> stack27 = new ArrayList<>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<>();\n        ArrayList<Long> stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<>();\n        ArrayList<Long> stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<>();\n        ArrayList<Long> stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<>();\n        ArrayList<Long> stack39 = new ArrayList<>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<>();\n        ArrayList<Long> stack42 = new ArrayList<>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<>();\n        ArrayList<Long> stack45 = new ArrayList<>();\n\
    \        ArrayList<Long> stack46 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack47 = new ArrayList<>();\n        ArrayList<Long> stack48 = new ArrayList<>();\n\
    \        ArrayList<Long> stack49 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack50 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5wlfhby.java:66: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpk5wlfhby.java:67: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpk5wlfhby.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpk5wlfhby.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk5wlfhby.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder buffer = new StringBuilder();\n\
    \        for (char c : paren_string.toCharArray()) {\n            if (c == '(')\
    \ {\n                stack.push(c);\n            } else if (c == ')') {\n    \
    \            String s = stack.pop();\n                while (!s.equals('(')) {\n\
    \                    buffer.append(s);\n                    s = stack.pop();\n\
    \                }\n                result.add(Long.parseLong(buffer.toString()));\n\
    \                buffer.setLength(0);\n            } else {\n                buffer.append(c);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqqf86via.java:20: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> stack2\
    \ = new ArrayList<>();\n        ArrayList<Long> stack3 = new ArrayList<>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<>();\n        ArrayList<Long> stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<>();\n        ArrayList<Long> stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<>();\n        ArrayList<Long> stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<>();\n        ArrayList<Long> stack15 = new ArrayList<>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<>();\n        ArrayList<Long> stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<>();\n        ArrayList<Long> stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<>();\n        ArrayList<Long> stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<>();\n        ArrayList<Long> stack27 = new ArrayList<>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<>();\n        ArrayList<Long> stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<>();\n        ArrayList<Long> stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<>();\n        ArrayList<Long> stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<>();\n        ArrayList<Long> stack39 = new ArrayList<>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<>();\n        ArrayList<Long> stack42 = new ArrayList<>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<>();\n        ArrayList<Long> stack45 = new ArrayList<>();\n\
    \        ArrayList<Long> stack46 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack47 = new ArrayList<>();\n        ArrayList<Long> stack48 = new ArrayList<>();\n\
    \        ArrayList<Long> stack49 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack50 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5wlfhby.java:66: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpk5wlfhby.java:67: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpk5wlfhby.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpk5wlfhby.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk5wlfhby.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean inParen = false;\n        boolean inBrace = false;\n        boolean\
    \ inBracket = false;\n        boolean inQuote = false;\n        boolean inDoubleQuote\
    \ = false;\n        boolean inSingleQuote = false;\n        boolean inComma =\
    \ false;\n        boolean inCommaOrParen = false;\n        boolean inCommaOrBrace\
    \ = false;\n        boolean inCommaOrBracket = false;\n        boolean inCommaOrQuote\
    \ = false;\n        boolean inCommaOrDoubleQuote = false;\n        boolean inCommaOrSingleQuote\
    \ = false;\n        boolean inCommaOrComma = false;\n        boolean inCommaOrCommaOrParen\
    \ = false;\n        boolean inCommaOrCommaOrBrace = false;\n        boolean inCommaOrCommaOrBracket\
    \ = false;\n        boolean inCommaOrCommaOrQuote = false;\n        boolean inCommaOrCommaOrDoubleQuote\
    \ = false;\n        boolean inCommaOrCommaOrSingleQuote = false;\n        boolean\
    \ inCommaOrCommaOrComma = false;\n        boolean inCommaOrCommaOrCommaOrParen\
    \ = false;\n        boolean inCommaOrCommaOrCommaOrBrace = false;\n        boolean\
    \ inCommaOrCommaOrCommaOrBracket = false;\n        boolean inCommaOrCommaOrCommaOrQuote\
    \ = false;\n        boolean inCommaOrCommaOrCommaOrDoubleQuote = false;\n    \
    \    boolean inCommaOrCommaOrCommaOrSingleQuote = false;\n        boolean inCommaOrCommaOrCommaOrComma\
    \ = false;\n        boolean inCommaOrCommaOrCommaOrCommaOrParen = false;\n   \
    \     boolean inCommaOrCommaOrCommaOrCommaOrBrace = false;\n        boolean inCommaOrCommaOrCommaOrCommaOrBracket\
    \ = false;\n        boolean inCommaOrCommaOrCommaOrCommaOrQuote = false;\n   \
    \     boolean inCommaOrCommaOrCommaOrCommaOrDoubleQuote = false;\n        boolean\
    \ inCommaOrCommaOrCommaOrCommaOrSingleQuote = false;\n        boolean inCommaOrCommaOrCommaOrCommaOrComma\
    \ = false;\n        boolean inCommaOrCommaOrCommaOrCommaOrCommaOrParen = false;\n\
    \        boolean inCommaOrCommaOrCommaOrCommaOrCommaOr\n    }\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxo0jqgu.java:54: error: ';' expected\n        boolean inCommaOrCommaOrCommaOrCommaOrCommaOr\n\
    \                                                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659797916
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack2 = new ArrayList<Long>();\n        ArrayList<Long> stack3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<Long>();\n        ArrayList<Long> stack6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<Long>();\n        ArrayList<Long> stack9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<Long>();\n        ArrayList<Long> stack12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<Long>();\n        ArrayList<Long> stack15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<Long>();\n        ArrayList<Long> stack18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<Long>();\n        ArrayList<Long> stack21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<Long>();\n        ArrayList<Long> stack24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<Long>();\n        ArrayList<Long> stack27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<Long>();\n        ArrayList<Long> stack30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<Long>();\n        ArrayList<Long> stack33 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<Long>();\n        ArrayList<Long> stack36 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<Long>();\n        ArrayList<Long> stack39 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<Long>();\n        ArrayList<Long> stack42 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<Long>();\n        ArrayList<Long> stack45 = new ArrayList<Long>();\n\
    \        ArrayList<Long\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkmni_lwk.java:62: error: > expected\n    }\n    ^\n/tmp/tmpkmni_lwk.java:61:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n/tmp/tmpkmni_lwk.java:63:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpkmni_lwk.java:63: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpkmni_lwk.java:63: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpkmni_lwk.java:63: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpkmni_lwk.java:63:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpkmni_lwk.java:69: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        boolean in_quote = false;\n      \
    \  for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n\
    \            if (c == '(') {\n                in_paren = true;\n             \
    \   stack.push(c);\n            } else if (c == ')') {\n                String\
    \ s = stack.pop();\n                if (s.equals(\"(\")) {\n                 \
    \   in_paren = false;\n                    result.add(Long.valueOf(sb));\n   \
    \                 sb.setLength(0);\n                } else if (s.equals(\"\\\"\
    \")) {\n                    in_quote = !in_quote;\n                } else if (s.equals(\"\
    '\")) {\n                    in_quote = !in_quote;\n                } else if\
    \ (s.equals(\",\")) {\n                    sb.append(c);\n                } else\
    \ {\n                    sb.append(s);\n                }\n            } else\
    \ if (c == '\"') {\n                in_quote = !in_quote;\n            } else\
    \ if (c == '\\'') {\n                in_quote = !in_quote;\n            } else\
    \ if (c == '\\\\') {\n                sb.append(c);\n            } else {\n  \
    \              sb.append(c);\n            }\n        }\n        if (sb.length()\
    \ > 0) {\n            result.add(Long.valueOf(sb));\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkmhd_1mj.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\n/tmp/tmpkmhd_1mj.java:29:\
    \ error: no suitable method found for valueOf(StringBuilder)\n               \
    \     result.add(Long.valueOf(sb));\n                                   ^\n  \
    \  method Long.valueOf(String) is not applicable\n      (argument mismatch; StringBuilder\
    \ cannot be converted to String)\n    method Long.valueOf(long) is not applicable\n\
    \      (argument mismatch; StringBuilder cannot be converted to long)\n/tmp/tmpkmhd_1mj.java:51:\
    \ error: no suitable method found for valueOf(StringBuilder)\n            result.add(Long.valueOf(sb));\n\
    \                           ^\n    method Long.valueOf(String) is not applicable\n\
    \      (argument mismatch; StringBuilder cannot be converted to String)\n    method\
    \ Long.valueOf(long) is not applicable\n      (argument mismatch; StringBuilder\
    \ cannot be converted to long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack2 = new ArrayList<Long>();\n        ArrayList<Long> stack3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<Long>();\n        ArrayList<Long> stack6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<Long>();\n        ArrayList<Long> stack9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<Long>();\n        ArrayList<Long> stack12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<Long>();\n        ArrayList<Long> stack15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<Long>();\n        ArrayList<Long> stack18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<Long>();\n        ArrayList<Long> stack21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<Long>();\n        ArrayList<Long> stack24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<Long>();\n        ArrayList<Long> stack27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<Long>();\n        ArrayList<Long> stack30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<Long>();\n        ArrayList<Long> stack33 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<Long>();\n        ArrayList<Long> stack36 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<Long>();\n        ArrayList<Long> stack39 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<Long>();\n        ArrayList<Long> stack42 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<Long>();\n        ArrayList<Long> stack45 = new ArrayList<Long>();\n\
    \        ArrayList<Long\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkmni_lwk.java:62: error: > expected\n    }\n    ^\n/tmp/tmpkmni_lwk.java:61:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n/tmp/tmpkmni_lwk.java:63:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpkmni_lwk.java:63: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpkmni_lwk.java:63: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpkmni_lwk.java:63: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpkmni_lwk.java:63:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpkmni_lwk.java:69: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> levels = new ArrayList<>();\n     \
    \   ArrayList<Long> levels_stack = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy2\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy3 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy4 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy9 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy10\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy11 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy12 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy13 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy14\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy15 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy16 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy17 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy18\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy21 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy22\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy23 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy24 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy25 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy26\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy27 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy28 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy29 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy30\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy33 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy34\
    \ = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy35 = new ArrayList<>();\n\
    \        ArrayList<Long> levels_stack_copy36 = new ArrayList<>();\n        ArrayList<Long>\
    \ levels_stack_copy37 = new ArrayList<>();\n        ArrayList<Long> levels_stack_copy38\
    \ = new \n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphlkxnbix.java:54: error: <identifier> expected\n        ArrayList<Long>\
    \ levels_stack_copy38 = new \n                                               \
    \  ^\n/tmp/tmphlkxnbix.java:55: error: '(' or '[' expected\n    }\n    ^\n/tmp/tmphlkxnbix.java:55:\
    \ error: ';' expected\n    }\n     ^\n/tmp/tmphlkxnbix.java:56: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmphlkxnbix.java:56: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmphlkxnbix.java:56: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmphlkxnbix.java:56: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmphlkxnbix.java:62:\
    \ error: reached end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\" \");\n       \
    \ for (String s : paren_strings) {\n            ArrayList<Long> new_result = parseNestedParens(s);\n\
    \            for (Long l : new_result) {\n                result.add(l);\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ciqfrgi.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n                                                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> groups = new ArrayList<String>();\n        ArrayList<String>\
    \ group_strings = new ArrayList<String>();\n        ArrayList<String> group_lengths\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_lengths_strings_strings_strings_string\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyrman8h7.java:36: error: ';' expected\n        ArrayList<String>\
    \ group_lengths_strings_strings_strings_string\n                             \
    \                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> paren_groups = paren_string.split(\"\\\\s+\");\n       \
    \ for (String group : paren_groups) {\n            ArrayList<Long> level_of_nesting\
    \ = new ArrayList<>();\n            int opening_paren_level = 0;\n           \
    \ int closing_paren_level = 0;\n            boolean in_paren = false;\n      \
    \      for (int i = 0; i < group.length(); i++) {\n                char c = group.charAt(i);\n\
    \                if (c == '(') {\n                    opening_paren_level++;\n\
    \                    level_of_nesting.add(opening_paren_level);\n            \
    \        in_paren = true;\n                } else if (c == ')') {\n          \
    \          closing_paren_level++;\n                    level_of_nesting.add(closing_paren_level);\n\
    \                    in_paren = false;\n                } else if (in_paren) {\n\
    \                    level_of_nesting.add(opening_paren_level);\n            \
    \    }\n            }\n            result.add(level_of_nesting);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6rem_9c_.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_groups = paren_string.split(\"\
    \\\\s+\");\n                                                           ^\n/tmp/tmp6rem_9c_.java:26:\
    \ error: incompatible types: int cannot be converted to Long\n               \
    \     level_of_nesting.add(opening_paren_level);\n                           \
    \              ^\n/tmp/tmp6rem_9c_.java:30: error: incompatible types: int cannot\
    \ be converted to Long\n                    level_of_nesting.add(closing_paren_level);\n\
    \                                         ^\n/tmp/tmp6rem_9c_.java:33: error:\
    \ incompatible types: int cannot be converted to Long\n                    level_of_nesting.add(opening_paren_level);\n\
    \                                         ^\n/tmp/tmp6rem_9c_.java:36: error:\
    \ incompatible types: ArrayList<Long> cannot be converted to Long\n          \
    \  result.add(level_of_nesting);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n5 errors\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<\n    }\n  \
    \  public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbcla8fa.java:53: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmplbcla8fa.java:52: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels = new ArrayList<Long>();\n        ArrayList<Long> levels_copy = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_copy2 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_copy3 = new ArrayList<Long>();\n        ArrayList<Long> levels_copy4\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_copy5 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_copy6 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_copy7 = new ArrayList<Long>();\n        ArrayList<Long> levels_copy8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_copy9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_copy10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_copy11 = new ArrayList<Long>();\n        ArrayList<Long> levels_copy12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_copy14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_copy15 = new ArrayList<Long>();\n        ArrayList<Long> levels_copy16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_copy17 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_copy18 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_copy19 = new ArrayList<Long>();\n        ArrayList<Long> levels_copy20\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_copy21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_copy22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_copy23 = new ArrayList<Long>();\n        ArrayList<Long> levels_copy24\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_copy25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_copy26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_copy27 = new ArrayList<Long>();\n        ArrayList<Long> levels_copy28\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_copy29 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_copy30 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_copy31 = new ArrayList<Long>();\n        ArrayList<Long> levels_copy32\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_copy33 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_copy34 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_copy35 = new ArrayList<Long>();\n        ArrayList<Long> levels_copy36\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_copy37 = new ArrayList<Long>();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr92k8o_x.java:56: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<\n    }\n  \
    \  public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbcla8fa.java:53: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmplbcla8fa.java:52: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_level = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_level_count = new ArrayList<Long>();\n        ArrayList<Long> current_level_count_sum\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_sum = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level_sum_sq = new ArrayList<Long>();\n     \
    \   ArrayList<Long> current_level_sum_sq_sum = new ArrayList<Long>();\n      \
    \  ArrayList<Long> current_level_sum_sq_sum_sq = new ArrayList<Long>();\n    \
    \    ArrayList<Long> current_level_sum_sq_sum_sq_sum = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level_sum_sq_sum_sq_sum_sq = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level_sum_sq_sum_sq_sum_sq_sum_sq = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level_sum_sq_sum_sq_sum_sq_sum_sq_sum = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_level_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_level_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = new \n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp10jkihoz.java:39: error: <identifier> expected\n        ArrayList<Long>\
    \ current_level_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq_sum_sq\
    \ = new \n                                                                   \
    \                                       ^\n/tmp/tmp10jkihoz.java:40: error: '('\
    \ or '[' expected\n    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> paren_groups = paren_string.split(\"\\\\s+\");\n       \
    \ ArrayList<String> paren_groups_copy = new ArrayList<>(paren_groups);\n     \
    \   ArrayList<Long> paren_groups_copy2 = new ArrayList<>();\n        ArrayList<Long>\
    \ paren_groups_copy3 = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy4\
    \ = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy5 = new ArrayList<>();\n\
    \        ArrayList<Long> paren_groups_copy6 = new ArrayList<>();\n        ArrayList<Long>\
    \ paren_groups_copy7 = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy8\
    \ = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy9 = new ArrayList<>();\n\
    \        ArrayList<Long> paren_groups_copy10 = new ArrayList<>();\n        ArrayList<Long>\
    \ paren_groups_copy11 = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy12\
    \ = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy13 = new ArrayList<>();\n\
    \        ArrayList<Long> paren_groups_copy14 = new ArrayList<>();\n        ArrayList<Long>\
    \ paren_groups_copy15 = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy16\
    \ = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy17 = new ArrayList<>();\n\
    \        ArrayList<Long> paren_groups_copy18 = new ArrayList<>();\n        ArrayList<Long>\
    \ paren_groups_copy19 = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy20\
    \ = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy21 = new ArrayList<>();\n\
    \        ArrayList<Long> paren_groups_copy22 = new ArrayList<>();\n        ArrayList<Long>\
    \ paren_groups_copy23 = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy24\
    \ = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy25 = new ArrayList<>();\n\
    \        ArrayList<Long> paren_groups_copy26 = new ArrayList<>();\n        ArrayList<Long>\
    \ paren_groups_copy27 = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy28\
    \ = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy29 = new ArrayList<>();\n\
    \        ArrayList<Long> paren_groups_copy30 = new ArrayList<>();\n        ArrayList<Long>\
    \ paren_groups_copy31 = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy32\
    \ = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy33 = new ArrayList<>();\n\
    \        ArrayList<Long> paren_groups_copy34 = new ArrayList<>();\n        ArrayList<Long>\
    \ paren_groups_copy35 = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy36\
    \ = new ArrayList<>();\n        ArrayList<Long> paren_groups_copy37 = new ArrayList<>();\n\
    \        ArrayList<Long\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0i9o0485.java:55: error: > expected\n    }\n    ^\n/tmp/tmp0i9o0485.java:54:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringBuilder sb =\
    \ new StringBuilder();\n        boolean in_paren = false;\n        boolean in_quote\
    \ = false;\n        boolean in_escape = false;\n        boolean in_escaped_quote\
    \ = false;\n        boolean in_escaped_paren = false;\n        boolean in_escaped_escape\
    \ = false;\n        boolean in_escaped_escaped_quote = false;\n        boolean\
    \ in_escaped_escaped_paren = false;\n        boolean in_escaped_escaped_escape\
    \ = false;\n        boolean in_escaped_escaped_escaped_quote = false;\n      \
    \  boolean in_escaped_escaped_escaped_paren = false;\n        boolean in_escaped_escaped_escaped_escape\
    \ = false;\n        boolean in_escaped_escaped_escaped_escaped_quote = false;\n\
    \        boolean in_escaped_escaped_escaped_escaped_paren = false;\n        boolean\
    \ in_escaped_escaped_escaped_escaped_escape = false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_quote\
    \ = false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_paren =\
    \ false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_escape =\
    \ false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_quote = false;\n\
    \        boolean in_escaped_escaped_escaped_escaped_escaped_paren = false;\n \
    \       boolean in_escaped_escaped_escaped_escaped_escaped_escape = false;\n \
    \       boolean in_escaped_escaped_escaped_escaped_escaped_quote = false;\n  \
    \      boolean in_escaped_escaped_escaped_escaped_escaped_paren = false;\n   \
    \     boolean in_escaped_escaped_escaped_escaped_escaped_escape = false;\n   \
    \     boolean in_escaped_escaped_escaped_escaped_escaped_quote = false;\n    \
    \    boolean in_escaped_escaped_escaped_escaped_escaped_paren = false;\n     \
    \   boolean in_escaped_escaped_escaped_escaped_escaped_escape = false;\n     \
    \   boolean in_escaped_escaped_escaped_escaped_escaped_quote = false;\n      \
    \  boolean in_escaped_escaped_escaped_escaped_escaped_paren = false;\n       \
    \ boolean in_escaped_escaped_escaped_escaped_escaped_escape = false;\n       \
    \ boolean in_escaped_escaped_escaped_escaped_escaped_quote = false;\n        boolean\
    \ in_escaped_escaped_escaped_escaped_escaped_paren = false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_escape\
    \ = false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_quote =\
    \ false;\n        boolean in_escaped_escaped_escaped_escaped_escaped_paren = false;\n\
    \        boolean in_escaped_escaped_escaped_escaped_escape\n    }\n    public\
    \ static void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((()))\
    \ () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprlznpx9x.java:53: error: ';' expected\n        boolean in_escaped_escaped_escaped_escaped_escape\n\
    \                                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659797995
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> paren_strings = paren_string.split(\" \");\n        ArrayList<String>\
    \ paren_strings_copy = paren_strings.clone();\n        ArrayList<String> paren_strings_copy2\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy3 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy4 = paren_strings.clone();\n    \
    \    ArrayList<String> paren_strings_copy5 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy6 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy7\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy8 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy9 = paren_strings.clone();\n    \
    \    ArrayList<String> paren_strings_copy10 = paren_strings.clone();\n       \
    \ ArrayList<String> paren_strings_copy11 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy12 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy13\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy14 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy15 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy16 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy17 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy18 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy19\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy20 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy21 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy22 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy23 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy24 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy25\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy26 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy27 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy28 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy29 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy30 = paren_strings.clone();\n        ArrayList<String> paren_strings_copy31\
    \ = paren_strings.clone();\n        ArrayList<String> paren_strings_copy32 = paren_strings.clone();\n\
    \        ArrayList<String> paren_strings_copy33 = paren_strings.clone();\n   \
    \     ArrayList<String> paren_strings_copy34 = paren_strings.clone();\n      \
    \  ArrayList<String> paren_strings_copy35 = paren_strings.clone();\n        ArrayList<String>\
    \ paren_strings_copy36 = paren_strings.clone();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe8vb3avd.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \ \");\n                                                            ^\n/tmp/tmpe8vb3avd.java:17:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy = paren_strings.clone();\n     \
    \                                                             ^\n/tmp/tmpe8vb3avd.java:18:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy2 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpe8vb3avd.java:19:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy3 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpe8vb3avd.java:20:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy4 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpe8vb3avd.java:21:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy5 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpe8vb3avd.java:22:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy6 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpe8vb3avd.java:23:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> paren_strings_copy7 = paren_strings.clone();\n    \
    \                                                               ^\n/tmp/tmpe8vb3avd.java:24:\
    \ error: incompatible types: Object cannot be converted to ArrayList<String>\n\
    \        ArrayList<String> pare"
  stdout: ''
  timestamp: 1659797915
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\"\\\\s+\");\n  \
    \      ArrayList<String> paren_strings_copy = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy2 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy3 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy4 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy5 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy6 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy7 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy8 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy9 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy10 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy11 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy12 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy13 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy14 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy15 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy16 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy17 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy18 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy19 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy20 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy21 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy22 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy23 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy24 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy25 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy26 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy27 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy28 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy29 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy30 = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy3\n    }\n    public static void\
    \ main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt2m1od8t.java:47: error: ';' expected\n        ArrayList<String>\
    \ paren_strings_copy3\n                                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<\n    }\n  \
    \  public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbcla8fa.java:53: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmplbcla8fa.java:52: error: not a statement\n        ArrayList<\n       \
    \          ^\n2 errors\n"
  stdout: ''
  timestamp: 1659797913
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_size = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index2 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_levels_index3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels_index4 = new ArrayList<Long>();\n    \
    \    ArrayList<Long> current_levels_index5 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index6 = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index8 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_levels_index9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels_index10 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> current_levels_index11 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> current_levels_index12 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index13 = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index14\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index15 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_levels_index16 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels_index17 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> current_levels_index18 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> current_levels_index19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index20 = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index22 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_levels_index23 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels_index24 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> current_levels_index25 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> current_levels_index26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index27 = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index28\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index29 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> current_levels_index30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels_index31 = new ArrayList<Long>();\n   \
    \     ArrayList<Long> current_levels_index32 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> current_levels_index33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index34 = new ArrayList<Long>();\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0janlzv2.java:53: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797917
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy2 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy3 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy5 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy8 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> levels_stack_copy9 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy10 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy12 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy13 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy14 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy15 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy16 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy18 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy20 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy21 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy22 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy24 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy25 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy26 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy27 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy28 = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy29\
    \ = new ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy30 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> levels_stack_copy31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> levels_stack_copy32 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> levels_stack_copy33 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ levels_stack_copy34 = new ArrayList<Long>();\n        ArrayList<Long\n    }\n\
    \    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfv7hcaw.java:53: error: > expected\n    }\n    ^\n/tmp/tmpzfv7hcaw.java:52:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n/tmp/tmpzfv7hcaw.java:54:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpzfv7hcaw.java:54: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpzfv7hcaw.java:54: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpzfv7hcaw.java:54: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpzfv7hcaw.java:54:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpzfv7hcaw.java:60: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack2 = new ArrayList<Long>();\n        ArrayList<Long> stack3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<Long>();\n        ArrayList<Long> stack6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<Long>();\n        ArrayList<Long> stack9 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<Long>();\n        ArrayList<Long> stack12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<Long>();\n        ArrayList<Long> stack15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<Long>();\n        ArrayList<Long> stack18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<Long>();\n        ArrayList<Long> stack21 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<Long>();\n        ArrayList<Long> stack24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<Long>();\n        ArrayList<Long> stack27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<Long>();\n        ArrayList<Long> stack30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<Long>();\n        ArrayList<Long> stack33 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<Long>();\n        ArrayList<Long> stack36 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<Long>();\n        ArrayList<Long> stack39 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<Long>();\n        ArrayList<Long> stack42 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<Long>();\n        ArrayList<Long> stack45 = new ArrayList<Long>();\n\
    \        ArrayList<Long\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkmni_lwk.java:62: error: > expected\n    }\n    ^\n/tmp/tmpkmni_lwk.java:61:\
    \ error: not a statement\n        ArrayList<Long\n                 ^\n/tmp/tmpkmni_lwk.java:63:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n/tmp/tmpkmni_lwk.java:63: error: ';' expected\n    public static void\
    \ main(String[] args) {\n          ^\n/tmp/tmpkmni_lwk.java:63: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpkmni_lwk.java:63: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpkmni_lwk.java:63:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpkmni_lwk.java:69: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_groups = paren_string.split(\"\\\\s+\");\n   \
    \     ArrayList<String> paren_groups_copy = paren_groups.clone();\n        ArrayList<String>\
    \ paren_groups_copy2 = paren_groups_copy.clone();\n        ArrayList<String> paren_groups_copy3\
    \ = paren_groups_copy2.clone();\n        ArrayList<String> paren_groups_copy4\
    \ = paren_groups_copy3.clone();\n        ArrayList<String> paren_groups_copy5\
    \ = paren_groups_copy4.clone();\n        ArrayList<String> paren_groups_copy6\
    \ = paren_groups_copy5.clone();\n        ArrayList<String> paren_groups_copy7\
    \ = paren_groups_copy6.clone();\n        ArrayList<String> paren_groups_copy8\
    \ = paren_groups_copy7.clone();\n        ArrayList<String> paren_groups_copy9\
    \ = paren_groups_copy8.clone();\n        ArrayList<String> paren_groups_copy10\
    \ = paren_groups_copy9.clone();\n        ArrayList<String> paren_groups_copy11\
    \ = paren_groups_copy10.clone();\n        ArrayList<String> paren_groups_copy12\
    \ = paren_groups_copy11.clone();\n        ArrayList<String> paren_groups_copy13\
    \ = paren_groups_copy12.clone();\n        ArrayList<String> paren_groups_copy14\
    \ = paren_groups_copy13.clone();\n        ArrayList<String> paren_groups_copy15\
    \ = paren_groups_copy14.clone();\n        ArrayList<String> paren_groups_copy16\
    \ = paren_groups_copy15.clone();\n        ArrayList<String> paren_groups_copy17\
    \ = paren_groups_copy16.clone();\n        ArrayList<String> paren_groups_copy18\
    \ = paren_groups_copy17.clone();\n        ArrayList<String> paren_groups_copy19\
    \ = paren_groups_copy18.clone();\n        ArrayList<String> paren_groups_copy20\
    \ = paren_groups_copy19.clone();\n        ArrayList<String> paren_groups_copy21\
    \ = paren_groups_copy20.clone();\n        ArrayList<String> paren_groups_copy22\
    \ = paren_groups_copy21.clone();\n        ArrayList<String> paren_groups_copy23\
    \ = paren_groups_copy22.clone();\n        ArrayList<String> paren_groups_copy24\
    \ = paren_groups_copy23.clone();\n        ArrayList<String> paren_groups_copy25\
    \ = paren_groups_copy24.clone();\n        ArrayList<String> paren_groups_copy26\
    \ = paren_groups_copy25.clone();\n        ArrayList<String> paren_groups_copy27\
    \ = paren_groups_copy26.clone();\n        ArrayList<String> paren_groups_copy28\
    \ = paren_groups_copy27.clone();\n        ArrayList<String> paren_groups_copy29\
    \ = paren_groups_copy28.clone();\n        ArrayList<String> paren_groups_copy30\
    \ = paren_groups_copy29.clone();\n        ArrayList<String> paren_groups_copy31\
    \ = paren_groups_copy30.clone();\n        ArrayList<String> paren_groups_copy\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyk1bx56r.java:48: error: ';' expected\n        ArrayList<String>\
    \ paren_groups_copy\n                                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> groups = new ArrayList<>();\n        ArrayList<Long> levels\
    \ = new ArrayList<>();\n        ArrayList<Long> levelsCount = new ArrayList<>();\n\
    \        ArrayList<Long> levelsCount2 = new ArrayList<>();\n        ArrayList<Long>\
    \ levelsCount3 = new ArrayList<>();\n        ArrayList<Long> levelsCount4 = new\
    \ ArrayList<>();\n        ArrayList<Long> levelsCount5 = new ArrayList<>();\n\
    \        ArrayList<Long> levelsCount6 = new ArrayList<>();\n        ArrayList<Long>\
    \ levelsCount7 = new ArrayList<>();\n        ArrayList<Long> levelsCount8 = new\
    \ ArrayList<>();\n        ArrayList<Long> levelsCount9 = new ArrayList<>();\n\
    \        ArrayList<Long> levelsCount10 = new ArrayList<>();\n        ArrayList<Long>\
    \ levelsCount11 = new ArrayList<>();\n        ArrayList<Long> levelsCount12 =\
    \ new ArrayList<>();\n        ArrayList<Long> levelsCount13 = new ArrayList<>();\n\
    \        ArrayList<Long> levelsCount14 = new ArrayList<>();\n        ArrayList<Long>\
    \ levelsCount15 = new ArrayList<>();\n        ArrayList<Long> levelsCount16 =\
    \ new ArrayList<>();\n        ArrayList<Long> levelsCount17 = new ArrayList<>();\n\
    \        ArrayList<Long> levelsCount18 = new ArrayList<>();\n        ArrayList<Long>\
    \ levelsCount19 = new ArrayList<>();\n        ArrayList<Long> levelsCount20 =\
    \ new ArrayList<>();\n        ArrayList<Long> levelsCount21 = new ArrayList<>();\n\
    \        ArrayList<Long> levelsCount22 = new ArrayList<>();\n        ArrayList<Long>\
    \ levelsCount23 = new ArrayList<>();\n        ArrayList<Long> levelsCount24 =\
    \ new ArrayList<>();\n        ArrayList<Long> levelsCount25 = new ArrayList<>();\n\
    \        ArrayList<Long> levelsCount26 = new ArrayList<>();\n        ArrayList<Long>\
    \ levelsCount27 = new ArrayList<>();\n        ArrayList<Long> levelsCount28 =\
    \ new ArrayList<>();\n        ArrayList<Long> levelsCount29 = new ArrayList<>();\n\
    \        ArrayList<Long> levelsCount30 = new ArrayList<>();\n        ArrayList<Long>\
    \ levelsCount31 = new ArrayList<>();\n        ArrayList<Long> levelsCount32 =\
    \ new ArrayList<>();\n        ArrayList<Long> levelsCount33 = new ArrayList<>();\n\
    \        ArrayList<Long> levelsCount34 = new ArrayList<>();\n        ArrayList<Long>\
    \ levelsCount35 = new ArrayList<>();\n        ArrayList<Long> levelsCount36 =\
    \ new ArrayList<>();\n        ArrayList<Long> levelsCount37 = new ArrayList<>();\n\
    \        ArrayList<Long> levelsCount38 = new ArrayList<>();\n        ArrayList<Long>\
    \ levelsCount39 = new ArrayList<>();\n        ArrayList<Long> levelsCount40 =\
    \ new ArrayList<>();\n        ArrayList<Long> level\n    }\n    public static\
    \ void main(String[] args) {\n    assert(parseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (()) ((())) (((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))));\n\
    \    assert(parseNestedParens((\"(()(())((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp472h7t51.java:58: error: ';' expected\n        ArrayList<Long>\
    \ level\n                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> stack2\
    \ = new ArrayList<>();\n        ArrayList<Long> stack3 = new ArrayList<>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<>();\n        ArrayList<Long> stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<>();\n        ArrayList<Long> stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<>();\n        ArrayList<Long> stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<>();\n        ArrayList<Long> stack15 = new ArrayList<>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<>();\n        ArrayList<Long> stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<>();\n        ArrayList<Long> stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<>();\n        ArrayList<Long> stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<>();\n        ArrayList<Long> stack27 = new ArrayList<>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<>();\n        ArrayList<Long> stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<>();\n        ArrayList<Long> stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<>();\n        ArrayList<Long> stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<>();\n        ArrayList<Long> stack39 = new ArrayList<>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<>();\n        ArrayList<Long> stack42 = new ArrayList<>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<>();\n        ArrayList<Long> stack45 = new ArrayList<>();\n\
    \        ArrayList<Long> stack46 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack47 = new ArrayList<>();\n        ArrayList<Long> stack48 = new ArrayList<>();\n\
    \        ArrayList<Long> stack49 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack50 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5wlfhby.java:66: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpk5wlfhby.java:67: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpk5wlfhby.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpk5wlfhby.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk5wlfhby.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_groups = paren_string.split(\"\\\\s+\");\n   \
    \     ArrayList<String> paren_groups_copy = new ArrayList<String>(paren_groups);\n\
    \        ArrayList<Long> paren_groups_copy2 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> paren_groups_copy3 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ paren_groups_copy4 = new ArrayList<Long>();\n        ArrayList<Long> paren_groups_copy5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> paren_groups_copy6 = new ArrayList<Long>();\n\
    \        ArrayList<Long> paren_groups_copy7 = new ArrayList<Long>();\n       \
    \ ArrayList<Long> paren_groups_copy8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ paren_groups_copy9 = new ArrayList<Long>();\n        ArrayList<Long> paren_groups_copy10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> paren_groups_copy11 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> paren_groups_copy12 = new ArrayList<Long>();\n\
    \        ArrayList<Long> paren_groups_copy13 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> paren_groups_copy14 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ paren_groups_copy15 = new ArrayList<Long>();\n        ArrayList<Long> paren_groups_copy16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> paren_groups_copy17 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> paren_groups_copy18 = new ArrayList<Long>();\n\
    \        ArrayList<Long> paren_groups_copy19 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> paren_groups_copy20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ paren_groups_copy21 = new ArrayList<Long>();\n        ArrayList<Long> paren_groups_copy22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> paren_groups_copy23 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> paren_groups_copy24 = new ArrayList<Long>();\n\
    \        ArrayList<Long> paren_groups_copy25 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> paren_groups_copy26 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ paren_groups_copy27 = new ArrayList<Long>();\n        ArrayList<Long> paren_groups_copy28\
    \ = new ArrayList<Long>();\n        ArrayList<Long> paren_groups_copy29 = new\
    \ ArrayList<Long>();\n        ArrayList<Long> paren_groups_copy30 = new ArrayList<Long>();\n\
    \        ArrayList<Long> paren_groups_copy31 = new ArrayList<Long>();\n      \
    \  ArrayList<Long> paren_groups_copy32 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ paren_groups_copy33 = new ArrayList<Long>();\n        ArrayList<Long> paren_groups_copy34\
    \ = new ArrayList<Long>();\n        ArrayList<Long> paren_groups_\n    }\n   \
    \ public static void main(String[] args) {\n    assert(parseNestedParens((\"(()())\
    \ ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw6gmb_8d.java:51: error: ';' expected\n        ArrayList<Long>\
    \ paren_groups_\n                                     ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> stack = new ArrayList<>();\n        ArrayList<Long> stack2\
    \ = new ArrayList<>();\n        ArrayList<Long> stack3 = new ArrayList<>();\n\
    \        ArrayList<Long> stack4 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack5 = new ArrayList<>();\n        ArrayList<Long> stack6 = new ArrayList<>();\n\
    \        ArrayList<Long> stack7 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack8 = new ArrayList<>();\n        ArrayList<Long> stack9 = new ArrayList<>();\n\
    \        ArrayList<Long> stack10 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack11 = new ArrayList<>();\n        ArrayList<Long> stack12 = new ArrayList<>();\n\
    \        ArrayList<Long> stack13 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack14 = new ArrayList<>();\n        ArrayList<Long> stack15 = new ArrayList<>();\n\
    \        ArrayList<Long> stack16 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack17 = new ArrayList<>();\n        ArrayList<Long> stack18 = new ArrayList<>();\n\
    \        ArrayList<Long> stack19 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack20 = new ArrayList<>();\n        ArrayList<Long> stack21 = new ArrayList<>();\n\
    \        ArrayList<Long> stack22 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack23 = new ArrayList<>();\n        ArrayList<Long> stack24 = new ArrayList<>();\n\
    \        ArrayList<Long> stack25 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack26 = new ArrayList<>();\n        ArrayList<Long> stack27 = new ArrayList<>();\n\
    \        ArrayList<Long> stack28 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack29 = new ArrayList<>();\n        ArrayList<Long> stack30 = new ArrayList<>();\n\
    \        ArrayList<Long> stack31 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack32 = new ArrayList<>();\n        ArrayList<Long> stack33 = new ArrayList<>();\n\
    \        ArrayList<Long> stack34 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack35 = new ArrayList<>();\n        ArrayList<Long> stack36 = new ArrayList<>();\n\
    \        ArrayList<Long> stack37 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack38 = new ArrayList<>();\n        ArrayList<Long> stack39 = new ArrayList<>();\n\
    \        ArrayList<Long> stack40 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack41 = new ArrayList<>();\n        ArrayList<Long> stack42 = new ArrayList<>();\n\
    \        ArrayList<Long> stack43 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack44 = new ArrayList<>();\n        ArrayList<Long> stack45 = new ArrayList<>();\n\
    \        ArrayList<Long> stack46 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack47 = new ArrayList<>();\n        ArrayList<Long> stack48 = new ArrayList<>();\n\
    \        ArrayList<Long> stack49 = new ArrayList<>();\n        ArrayList<Long>\
    \ stack50 = new ArrayList<\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk5wlfhby.java:66: error: illegal start of type\n    }\n    ^\n\
    /tmp/tmpk5wlfhby.java:67: error: '(' or '[' expected\n    public static void main(String[]\
    \ args) {\n    ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n          ^\n/tmp/tmpk5wlfhby.java:67: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \          ^\n/tmp/tmpk5wlfhby.java:67: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmpk5wlfhby.java:67:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpk5wlfhby.java:73: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<Long> stack = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_2 =\
    \ new ArrayList<Long>();\n        ArrayList<Long> stack_copy_3 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy_4 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy_5 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_7 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy_8 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy_9 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_11 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy_12 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy_13 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_14\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_15 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy_16 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy_17 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_19 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy_20 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy_21 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_23 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy_24 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy_25 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_26\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_27 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy_28 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy_29 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_30\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_31 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy_32 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy_33 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_34\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_35 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy_36 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy_37 = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_38\
    \ = new ArrayList<Long>();\n        ArrayList<Long> stack_copy_39 = new ArrayList<Long>();\n\
    \        ArrayList<Long> stack_copy_40 = new ArrayList<Long>();\n        ArrayList<Long>\
    \ stack_copy_41 = new ArrayList<Long\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_ml_f4w.java:58: error: > expected\n    }\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> max_levels = new ArrayList<Long>();\n\
    \        ArrayList<Long> current_levels = new ArrayList<Long>();\n        ArrayList<Long>\
    \ current_levels_index = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index2\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index3\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index4\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index5\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index6\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index7\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index8\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index9\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index10\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index11\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index12\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index13\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index14\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index15\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index16\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index17\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index18\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index19\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index20\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index21\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index22\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index23\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index24\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index25\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index26\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index27\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index28\
    \ = new ArrayList<Long>();\n        ArrayList<Long> current_levels_index_max_index29\
    \ = new ArrayList<Long>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9cb07bdn.java:48: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659797994
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> parens = new ArrayList<String>();\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\(|\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\s+\", \" \");\n        paren_string = paren_string.replaceAll(\"\\\\(|\\\\\
    )\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\s+\", \" \"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\(|\\\\)\", \"\");\n \
    \       paren_string = paren_string.replaceAll(\"\\\\s+\", \" \");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\(|\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\s+\", \" \");\n        paren_string = paren_string.replaceAll(\"\\\\(|\\\\\
    )\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\s+\", \" \"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\(|\\\\)\", \"\");\n \
    \       paren_string = paren_string.replaceAll(\"\\\\s+\", \" \");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\(|\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\s+\", \" \");\n        paren_string = paren_string.replaceAll(\"\\\\(|\\\\\
    )\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\s+\", \" \"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\(|\\\\)\", \"\");\n \
    \       paren_string = paren_string.replaceAll(\"\\\\s+\", \" \");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\(|\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\s+\", \" \");\n        paren_string = paren_string.replaceAll(\"\\\\(|\\\\\
    )\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\s+\", \" \"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\(|\\\\)\", \"\");\n \
    \       paren_string = paren_string.replaceAll(\"\\\\s+\", \" \");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\(|\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\s+\", \" \");\n        paren_string = paren_string.replaceAll(\"\\\\(|\\\\\
    )\", \"\");\n        paren_string = paren_string.replaceAll(\"\\\\s+\", \" \"\
    );\n        paren_string = paren_string.replaceAll(\"\\\\(|\\\\)\", \"\");\n \
    \       paren_string = paren_string.replaceAll(\"\\\\s+\", \" \");\n        paren_string\
    \ = paren_string.replaceAll(\"\\\\(|\\\\)\", \"\");\n        paren_string = paren_string.replaceAll(\"\
    \\\\s+\", \n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuu98jhrt.java:49: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<Long> levels = new ArrayList<>();\n        ArrayList<Long> parens\
    \ = new ArrayList<>();\n        ArrayList<Long> parens_levels = new ArrayList<>();\n\
    \        ArrayList<Long> parens_levels_levels = new ArrayList<>();\n        ArrayList<Long>\
    \ parens_levels_levels_levels = new ArrayList<>();\n        ArrayList<Long> parens_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> parens_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> parens_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> parens_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> parens_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> parens_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels\
    \ = new ArrayList<>();\n        ArrayList<Long> parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0nwzixxl.java:35: error: ';' expected\n        ArrayList<Long>\
    \ parens_levels_levels_levels_levels_levels_levels_levels_levels_levels_levels_\n\
    \                                                                            \
    \                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\" \");\n       \
    \ ArrayList<String> paren_strings_copy = new ArrayList<String>(paren_strings);\n\
    \        ArrayList<String> paren_strings_copy2 = new ArrayList<String>();\n  \
    \      ArrayList<String> paren_strings_copy3 = new ArrayList<String>();\n    \
    \    ArrayList<String> paren_strings_copy4 = new ArrayList<String>();\n      \
    \  ArrayList<String> paren_strings_copy5 = new ArrayList<String>();\n        ArrayList<String>\
    \ paren_strings_copy6 = new ArrayList<String>();\n        ArrayList<String> paren_strings_copy7\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_strings_copy8 =\
    \ new ArrayList<String>();\n        ArrayList<String> paren_strings_copy9 = new\
    \ ArrayList<String>();\n        ArrayList<String> paren_strings_copy10 = new ArrayList<String>();\n\
    \        ArrayList<String> paren_strings_copy11 = new ArrayList<String>();\n \
    \       ArrayList<String> paren_strings_copy12 = new ArrayList<String>();\n  \
    \      ArrayList<String> paren_strings_copy13 = new ArrayList<String>();\n   \
    \     ArrayList<String> paren_strings_copy14 = new ArrayList<String>();\n    \
    \    ArrayList<String> paren_strings_copy15 = new ArrayList<String>();\n     \
    \   ArrayList<String> paren_strings_copy16 = new ArrayList<String>();\n      \
    \  ArrayList<String> paren_strings_copy17 = new ArrayList<String>();\n       \
    \ ArrayList<String> paren_strings_copy18 = new ArrayList<String>();\n        ArrayList<String>\
    \ paren_strings_copy19 = new ArrayList<String>();\n        ArrayList<String> paren_strings_copy20\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_strings_copy21 =\
    \ new ArrayList<String>();\n        ArrayList<String> paren_strings_copy22 = new\
    \ ArrayList<String>();\n        ArrayList<String> paren_strings_copy23 = new ArrayList<String>();\n\
    \        ArrayList<String> paren_strings_copy24 = new ArrayList<String>();\n \
    \       ArrayList<String> paren_strings_copy25 = new ArrayList<String>();\n  \
    \      ArrayList<String> paren_strings_copy26 = new ArrayList<String>();\n   \
    \     ArrayList<String> paren_strings_copy27 = new ArrayList<String>();\n    \
    \    ArrayList<String> paren_strings_copy28 = new ArrayList<String>();\n     \
    \   ArrayList<String> paren_strings_copy29 = new ArrayList<String>();\n      \
    \  ArrayList<String> paren_strings_copy30 = new ArrayList<String>();\n       \
    \ ArrayList<String> paren_strings_copy31 = new ArrayList<String>();\n        ArrayList<String>\
    \ paren_strings_copy32 = new ArrayList<String>();\n        ArrayList<String> paren_strings_copy33\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_strings_copy34 =\
    \ new ArrayList<String>();\n        ArrayList<String> paren_strings_copy35 = new\
    \ ArrayList<String>();\n        ArrayList<String> paren_strings_copy36 = new ArrayList<String>();\n\
    \        ArrayList<String> paren_strings_copy37 = new ArrayList<String>();\n \
    \       ArrayList<String> paren\n    }\n    public static void main(String[] args)\
    \ {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69ltcxqf.java:54: error: ';' expected\n        ArrayList<String>\
    \ paren\n                               ^\n1 error\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean inParen = false;\n        boolean inBrace = false;\n        boolean\
    \ inBracket = false;\n        boolean inQuote = false;\n        boolean inDoubleQuote\
    \ = false;\n        boolean inSingleQuote = false;\n        boolean inBackslash\
    \ = false;\n        boolean inSingleBackslash = false;\n        boolean inDoubleBackslash\
    \ = false;\n        boolean inSingleQuoteOrDoubleQuote = false;\n        boolean\
    \ inDoubleQuoteOrSingleQuote = false;\n        boolean inSingleQuoteOrDoubleQuoteOrBackslash\
    \ = false;\n        boolean inDoubleQuoteOrSingleQuoteOrBackslash = false;\n \
    \       boolean inSingleQuoteOrDoubleQuoteOrBackslashOrParen = false;\n      \
    \  boolean inDoubleQuoteOrSingleQuoteOrBackslashOrParen = false;\n        boolean\
    \ inSingleQuoteOrDoubleQuoteOrBackslashOrParenOrBrace = false;\n        boolean\
    \ inDoubleQuoteOrSingleQuoteOrBackslashOrParenOrBrace = false;\n        boolean\
    \ inSingleQuoteOrDoubleQuoteOrBackslashOrParenOrBracket = false;\n        boolean\
    \ inDoubleQuoteOrSingleQuoteOrBackslashOrParenOrBracket = false;\n        boolean\
    \ inSingleQuoteOrDoubleQuoteOrBackslashOrParenOrBracketOrParen = false;\n    \
    \    boolean inDoubleQuoteOrSingleQuoteOrBackslashOrParenOrBracketOrParen = false;\n\
    \        boolean inSingleQuoteOrDoubleQuoteOrBackslashOrParenOrBracketOrParen\
    \ = false;\n        boolean inDoubleQuoteOrSingleQuoteOrBackslashOrParenOrBracketOrParen\
    \ = false;\n        boolean inSingleQuoteOrDoubleQuoteOrBackslashOrParenOrBracketOrParen\
    \ = false;\n        boolean inDoubleQuoteOrSingleQuoteOrBackslashOrParenOrBracketOrParen\
    \ = false;\n        boolean inSingleQuoteOrDoubleQuoteOrBackslashOrParenOrBracketOrParen\
    \ = false;\n        boolean inDoubleQuoteOrSingleQuoteOrBackslashOrParenOrBracketOrParen\
    \ = false;\n        boolean inSingleQuoteOrDoubleQuoteOrBackslashOrParenOrBracketOrParen\
    \ = false;\n        boolean inDoubleQuoteOrSingleQuoteOrBackslashOrParenOrBracketOrParen\
    \ = false;\n        boolean inSingleQuoteOrDoubleQuoteOrBackslashOrParenOrBracketOrParen\
    \ = false;\n        boolean inDoubleQuoteOrSingleQuoteOrBackslashOrParenOrBracketOrParen\
    \ = false;\n        boolean inSingleQuoteOrDoubleQuoteOrBackslashOrParenOrBracketOrParen\
    \ = false;\n        boolean inDoubleQuoteOrSingleQuoteOrBackslashOrParen\n   \
    \ }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_txnrtb2.java:50: error: ';' expected\n        boolean inDoubleQuoteOrSingleQuoteOrBackslashOrParen\n\
    \                                                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> paren_strings = paren_string.split(\"\\\\s+\");\n  \
    \      for (String s : paren_strings) {\n            ArrayList<Long> levels =\
    \ parseNestedParens(s);\n            result.addAll(levels);\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc3kxsygl.java:16: error: incompatible types: String[] cannot be\
    \ converted to ArrayList<String>\n        ArrayList<String> paren_strings = paren_string.split(\"\
    \\\\s+\");\n                                                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> groups = new ArrayList<String>();\n        ArrayList<String>\
    \ group_strings = new ArrayList<String>();\n        ArrayList<String> group_lengths\
    \ = new ArrayList<String>();\n        ArrayList<String> group_levels = new ArrayList<String>();\n\
    \        ArrayList<String> group_level_lengths = new ArrayList<String>();\n  \
    \      ArrayList<String> group_level_lengths_strings = new ArrayList<String>();\n\
    \        ArrayList<String> group_level_lengths_strings_strings = new ArrayList<String>();\n\
    \        ArrayList<String> group_level_lengths_strings_strings_strings = new ArrayList<String>();\n\
    \        ArrayList<String> group_level_lengths_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_lengths_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = new ArrayList<String>();\n        ArrayList<String> group_level_lengths_string\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpykoxet71.java:37: error: ';' expected\n        ArrayList<String>\
    \ group_level_lengths_string\n                                               \
    \     ^\n1 error\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean inParens = false;\n        for (int i = 0; i < paren_string.length();\
    \ i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(')\
    \ {\n                inParens = true;\n                stack.push(c);\n      \
    \      } else if (c == ')') {\n                inParens = false;\n           \
    \     String s = stack.pop();\n                sb.append(s);\n               \
    \ result.add(Long.parseLong(sb.toString()));\n                sb.setLength(0);\n\
    \            } else if (inParens) {\n                sb.append(c);\n         \
    \   }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l, (long)3l)))));\n\
    \    assert(parseNestedParens((\"() (()) ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\"\
    )).equals((new ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbo5fksjs.java:23: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   ArrayList<String> paren_strings = paren_string.split(\" \");\n        ArrayList<String>\
    \ paren_strings_copy = paren_strings.clone();\n        ArrayList<String> paren_strings_copy2\
    \ = paren_strings_copy.clone();\n        ArrayList<String> paren_strings_copy3\
    \ = paren_strings_copy2.clone();\n        ArrayList<String> paren_strings_copy4\
    \ = paren_strings_copy3.clone();\n        ArrayList<String> paren_strings_copy5\
    \ = paren_strings_copy4.clone();\n        ArrayList<String> paren_strings_copy6\
    \ = paren_strings_copy5.clone();\n        ArrayList<String> paren_strings_copy7\
    \ = paren_strings_copy6.clone();\n        ArrayList<String> paren_strings_copy8\
    \ = paren_strings_copy7.clone();\n        ArrayList<String> paren_strings_copy9\
    \ = paren_strings_copy8.clone();\n        ArrayList<String> paren_strings_copy10\
    \ = paren_strings_copy9.clone();\n        ArrayList<String> paren_strings_copy11\
    \ = paren_strings_copy10.clone();\n        ArrayList<String> paren_strings_copy12\
    \ = paren_strings_copy11.clone();\n        ArrayList<String> paren_strings_copy13\
    \ = paren_strings_copy12.clone();\n        ArrayList<String> paren_strings_copy14\
    \ = paren_strings_copy13.clone();\n        ArrayList<String> paren_strings_copy15\
    \ = paren_strings_copy14.clone();\n        ArrayList<String> paren_strings_copy16\
    \ = paren_strings_copy15.clone();\n        ArrayList<String> paren_strings_copy17\
    \ = paren_strings_copy16.clone();\n        ArrayList<String> paren_strings_copy18\
    \ = paren_strings_copy17.clone();\n        ArrayList<String> paren_strings_copy19\
    \ = paren_strings_copy18.clone();\n        ArrayList<String> paren_strings_copy20\
    \ = paren_strings_copy19.clone();\n        ArrayList<String> paren_strings_copy21\
    \ = paren_strings_copy20.clone();\n        ArrayList<String> paren_strings_copy22\
    \ = paren_strings_copy21.clone();\n        ArrayList<String> paren_strings_copy23\
    \ = paren_strings_copy22.clone();\n        ArrayList<String> paren_strings_copy24\
    \ = paren_strings_copy23.clone();\n        ArrayList<String> paren_strings_copy25\
    \ = paren_strings_copy24.clone();\n        ArrayList<String> paren_strings_copy26\
    \ = paren_strings_copy25.clone();\n        ArrayList<String> paren_strings_copy27\
    \ = paren_strings_copy26.clone();\n        ArrayList<String> paren_strings_copy28\
    \ = paren_strings_copy27.clone();\n        ArrayList<String> paren_strings_copy29\
    \ = paren_strings_copy28.clone();\n        ArrayList<String> paren_strings_copy30\
    \ = paren_strings_copy29.clone();\n        ArrayList<String> paren_strings_copy31\
    \ = paren_strings_copy30.clone();\n        ArrayList<String> paren_strings_copy32\
    \ = paren\n    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeg_j9rrr.java:48: error: ';' expected\n        ArrayList<String>\
    \ paren_strings_copy32 = paren\n                                             \
    \         ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       ArrayList<String> groups = new ArrayList<String>();\n        ArrayList<String>\
    \ paren_groups = new ArrayList<String>();\n        ArrayList<String> paren_group_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents_contents_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents_contents_contents_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents_contents_contents_contents_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents_contents_contents_contents_contents_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents_contents_contents_contents_contents_contents_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents\
    \ = new ArrayList<String>();\n        ArrayList<String> paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_\n\
    \    }\n    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp923evzyv.java:35: error: ';' expected\n        ArrayList<String>\
    \ paren_group_contents_contents_contents_contents_contents_contents_contents_contents_contents_contents_\n\
    \                                                                            \
    \                                                    ^\n1 error\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<>();\n     \
    \   Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean in_paren = false;\n        boolean in_quote = false;\n      \
    \  for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n\
    \            if (c == '(') {\n                in_paren = true;\n             \
    \   stack.push(c);\n            } else if (c == ')') {\n                in_paren\
    \ = false;\n                String s = stack.pop();\n                if (s.equals(\"\
    (\")) {\n                    result.add(Long.valueOf(sb));\n                 \
    \   sb.setLength(0);\n                } else if (s.equals(\"\\\"\")) {\n     \
    \               in_quote = !in_quote;\n                } else if (s.equals(\"\\\
    \"\")) {\n                    in_quote = !in_quote;\n                } else {\n\
    \                    sb.append(s);\n                }\n            } else if (c\
    \ == '\"') {\n                in_quote = !in_quote;\n            } else if (in_paren)\
    \ {\n                sb.append(c);\n            }\n        }\n        result.add(Long.valueOf(sb));\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(parseNestedParens((\"(()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpegruhzpg.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                stack.push(c);\n                           ^\n/tmp/tmpegruhzpg.java:29:\
    \ error: no suitable method found for valueOf(StringBuilder)\n               \
    \     result.add(Long.valueOf(sb));\n                                   ^\n  \
    \  method Long.valueOf(String) is not applicable\n      (argument mismatch; StringBuilder\
    \ cannot be converted to String)\n    method Long.valueOf(long) is not applicable\n\
    \      (argument mismatch; StringBuilder cannot be converted to long)\n/tmp/tmpegruhzpg.java:44:\
    \ error: no suitable method found for valueOf(StringBuilder)\n        result.add(Long.valueOf(sb));\n\
    \                       ^\n    method Long.valueOf(String) is not applicable\n\
    \      (argument mismatch; StringBuilder cannot be converted to String)\n    method\
    \ Long.valueOf(long) is not applicable\n      (argument mismatch; StringBuilder\
    \ cannot be converted to long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659797996
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    // For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    // E.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))\n    public static ArrayList<Long> parseNestedParens(String\
    \ paren_string) {\n        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       Stack<String> stack = new Stack<String>();\n        StringTokenizer st\
    \ = new StringTokenizer(paren_string);\n        while (st.hasMoreTokens()) {\n\
    \            String token = st.nextToken();\n            if (token.equals(\"(\"\
    )) {\n                stack.push(token);\n            } else if (token.equals(\"\
    )\")) {\n                String top = stack.pop();\n                if (top.equals(\"\
    (\")) {\n                    result.add(new Long(result.size()));\n          \
    \      } else {\n                    result.add(new Long(result.size() - 1));\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(parseNestedParens((\"\
    (()()) ((())) () ((())()())\")).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)1l, (long)3l)))));\n    assert(parseNestedParens((\"() (())\
    \ ((())) (((())))\")).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))));\n    assert(parseNestedParens((\"(()(())((())))\")).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpig9ze5h8.java:34)\n"
  stdout: ''
  timestamp: 1659797996
