name: HumanEval_61_correct_bracketing
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
  \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
  \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"()\"\
  ))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n \
  \   // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
  \ correctBracketing(String brackets) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
  ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n   \
  \ assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
  ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
  )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
  (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
  )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"\
  ()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if(c == '(') {\n\
    \                if(brackets.charAt(i+1) != '(') {\n                    result\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if(c == ')') {\n                if(brackets.charAt(i-1) != ')') {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n            }\n        }\n        return result;", "        List<String>\
    \ openingBrackets = new ArrayList<>();\n        List<String> closingBrackets =\
    \ new ArrayList<>();\n        boolean result = false;\n        for (int i = 0;\
    \ i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n  \
    \          if (c == '(') {\n                openingBrackets.add(i);\n        \
    \    } else if (c == ')') {\n                closingBrackets.add(i);\n       \
    \     }\n        }\n        if (openingBrackets.size() != closingBrackets.size())\
    \ {\n            result = false;\n        } else {\n            result = true;\n\
    \            for (int i = 0; i < openingBrackets.size(); i++) {\n            \
    \    if (openingBrackets.get(i) != closingBrackets.get(i)) {\n               \
    \     result = false;\n                    break;\n                }\n       \
    \     }\n        }\n        return result;", "        Stack<Character> stack =\
    \ new Stack<>();\n        for(int i = 0; i < brackets.length(); i++) {\n     \
    \       char c = brackets.charAt(i);\n            if(c == '(') {\n           \
    \     stack.push(c);\n            }\n            else if(c == ')') {\n       \
    \         if(!stack.isEmpty()) {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();", "        Stack<Character> stack = new Stack<>();\n      \
    \  for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n    \
    \            stack.push(c);\n            } else if (c == ')') {\n            \
    \    if (stack.isEmpty()) {\n                    return false;\n             \
    \   }\n                char top = stack.pop();\n                if (top != '(')\
    \ {\n                    return false;\n                }\n            } else\
    \ {\n                if (stack.isEmpty() || c != stack.peek()) {\n           \
    \         return false;\n                }\n            }\n        }\n       \
    \ return stack.isEmpty();", "        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();", "  \
    \      Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if(c == '(') {\n\
    \                stack.push(c);\n            } else if(c == ')') {\n         \
    \       if(!stack.isEmpty()) {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            } else {\n            \
    \    if(!stack.isEmpty()) {\n                    char top = stack.pop();\n   \
    \                 if(top != '(') {\n                        return false;\n  \
    \                  }\n                }\n                stack.push(c);\n    \
    \        }\n        }\n        return !stack.isEmpty();", "        Stack<Character>\
    \ stack = new Stack<>();\n        for(int i = 0; i < brackets.length(); i++) {\n\
    \            char c = brackets.charAt(i);\n            if (c == '(') {\n     \
    \           stack.push(c);\n            } else if (c == ')') {\n             \
    \   if (stack.isEmpty()) {\n                    return false;\n              \
    \  }\n                char top = stack.pop();\n                if (top != '(')\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return stack.isEmpty();", "        Stack<Character> stack = new\
    \ Stack<>();\n        for(int i = 0; i < brackets.length(); i++) {\n         \
    \   char c = brackets.charAt(i);\n            if (c == '(') {\n              \
    \  stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if (top != '(') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();",
  "        List<String> openingBrackets = new ArrayList<>();\n        List<String>\
    \ closingBrackets = new ArrayList<>();\n        List<String> bracketsList = new\
    \ ArrayList<>();\n        bracketsList.addAll(brackets.split(\"\\\\(|\\\\)\"));\n\
    \        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n", "        Stack<Character> stack =\
    \ new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n    \
    \        char c = brackets.charAt(i);\n            if (c == '(') {\n         \
    \       stack.push(c);\n            } else if (c == ')') {\n                if\
    \ (stack.isEmpty()) {\n                    return false;\n                }\n\
    \                char top = stack.pop();\n                if (top != '(') {\n\
    \                    return false;\n                }\n            } else {\n\
    \                if (stack.isEmpty() || c != stack.peek()) {\n               \
    \     return false;\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();", "        boolean result = true;\n        for(int i = 0; i\
    \ < brackets.length(); i++) {\n            if(brackets.charAt(i) == '(') {\n \
    \               if(brackets.charAt(i+1) != '(') {\n                    result\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if(brackets.charAt(i) == ')') {\n                if(brackets.charAt(i-1)\
    \ != ')') {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray())\
    \ {\n            if (c == '(') {\n                stack.push(c);\n           \
    \ } else if (c == ')') {\n                if (stack.isEmpty()) {\n           \
    \         return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();", "  \
    \      boolean result = true;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                for (int j = i + 1; j < brackets.length(); j++) {\n     \
    \               char d = brackets.charAt(j);\n                    if (d != ')')\
    \ {\n                        result = false;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();",
  "        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray())\
    \ {\n            if (c == '(') {\n                stack.push(c);\n           \
    \ } else if (c == ')') {\n                if (stack.isEmpty()) {\n           \
    \         return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();", "  \
    \      Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if(c == '(') {\n\
    \                stack.push(c);\n            } else if(c == ')') {\n         \
    \       if(stack.isEmpty()) {\n                    return false;\n           \
    \     }\n                char top = stack.pop();\n                if(top != '(')\
    \ {\n                    return false;\n                }\n            } else\
    \ if(c == '[') {\n                stack.push(c);\n            } else if(c == ']')\
    \ {\n                if(stack.isEmpty()) {\n                    return false;\n\
    \                }\n                char top = stack.pop();\n                if(top\
    \ != '[') {\n                    return false;\n                }\n          \
    \  } else if(c == '{') {\n                stack.push(c);\n            } else if(c\
    \ == '}') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '{') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();", "        Stack<Character>\
    \ stack = new Stack<>();\n        for(int i = 0; i < brackets.length(); i++) {\n\
    \            char c = brackets.charAt(i);\n            if(c == '(') {\n      \
    \          stack.push(c);\n            } else if(c == ')') {\n               \
    \ if(!stack.isEmpty() && stack.peek() == '(') {\n                    stack.pop();\n\
    \                } else {\n                    return false;\n               \
    \ }\n            } else {\n                return false;\n            }\n    \
    \    }\n        return stack.isEmpty();", "        Stack<Character> stack = new\
    \ Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if\
    \ (c == '(') {\n                stack.push(c);\n            } else if (c == ')')\
    \ {\n                if (stack.isEmpty()) {\n                    return false;\n\
    \                }\n                char top = stack.pop();\n                if\
    \ (top != '(') {\n                    return false;\n                }\n     \
    \       }\n        }\n        return stack.isEmpty();", "        Stack<Character>\
    \ stack = new Stack<>();\n        for(int i = 0; i < brackets.length(); i++) {\n\
    \            char c = brackets.charAt(i);\n            if (c == '(') {\n     \
    \           stack.push(c);\n            } else if (c == ')') {\n             \
    \   if (stack.isEmpty()) {\n                    return false;\n              \
    \  }\n                char top = stack.pop();\n                if (top != '(')\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return stack.isEmpty();", "        Stack<Character> stack = new\
    \ Stack<>();\n        for(int i = 0; i < brackets.length(); i++) {\n         \
    \   char c = brackets.charAt(i);\n            if(c == '(') {\n               \
    \ stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                } else {\n           \
    \         char top = stack.pop();\n                    if(top != '(') {\n    \
    \                    return false;\n                    }\n                }\n\
    \            }\n        }\n        return stack.isEmpty();"]
stop_tokens:
- "\n    }\n"
