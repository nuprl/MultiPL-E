language: java
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().mapToLong(i -> i).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(i -> i).max().getAsLong();\n      \
    \  long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long\
    \ mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 /\
    \ 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long\
    \ mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 /\
    \ 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n     \
    \   long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15\
    \ = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 /\
    \ 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n     \
    \   long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 /\
    \ 2;\n        long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n     \
    \   \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdbqmyaor.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long \n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpci_od_wb.java:71: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpci_od_wb.java:71: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().mapToLong(i -> i).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(i -> i).max().getAsLong();\n      \
    \  long current = min;\n        long previous = min;\n        long nextMax = max;\n\
    \        long nextMin = min;\n        boolean changed = false;\n        do {\n\
    \            result.add(current);\n            previous = current;\n         \
    \   current = next;\n            nextMax = nextMin + 1;\n            nextMin =\
    \ nextMax - 1;\n            changed = false;\n            for (long i : lst) {\n\
    \                if (i == current) {\n                    continue;\n        \
    \        }\n                if (i > current && i <= nextMax) {\n             \
    \       nextMax = i;\n                    nextMin = i;\n                    changed\
    \ = true;\n                }\n                if (i < current && i >= nextMin)\
    \ {\n                    nextMin = i;\n                    nextMax = i;\n    \
    \                changed = true;\n                }\n            }\n        }\
    \ while (changed);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx8cpv9p8.java:31: error: cannot find symbol\n            current\
    \ = next;\n                      ^\n  symbol:   variable next\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().mapToLong(x -> x).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(x -> x).max().getAsLong();\n      \
    \  long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long\
    \ mid3 = mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n\
    \        long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8\
    \ = mid * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n  \
    \      long mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13\
    \ = mid * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n\
    \        long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long\
    \ mid18 = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid\
    \ * 19;\n        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n    \
    \    long mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25\
    \ = mid * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n\
    \        long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long\
    \ mid30 = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid\
    \ * 31;\n        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n    \
    \    long mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37\
    \ = mid * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n\
    \        long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long\
    \ mid42 = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid\
    \ * 43;\n        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n    \
    \    long mid47 = mid * 46;\n        long mid48 = m\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz3bic583.java:70: error: ';' expected\n        long mid48 = m\n\
    \                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsp1kh4cp.java:55: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpsp1kh4cp.java:55: error: ';' expected\n    }\n     ^\n/tmp/tmpsp1kh4cp.java:56:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpsp1kh4cp.java:56: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpsp1kh4cp.java:56: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpsp1kh4cp.java:56: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpsp1kh4cp.java:68: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long current\
    \ = min;\n        long nextMax = max;\n        long nextMin = min;\n        do\
    \ {\n            result.add(current);\n            nextMax = nextMax + 1;\n  \
    \          nextMin = nextMin - 1;\n            current = nextMin;\n        } while\
    \ (nextMin != nextMax);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long curr = min;\n        long next = mid;\n\
    \        long prev;\n        do {\n            prev = curr;\n            curr\
    \ = next;\n            next = curr + (max - curr) / 2;\n            if (curr <\
    \ max) {\n                result.add(curr);\n            }\n        } while (next\
    \ != max);\n        result.add(max);\n        result.add(min);\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long temp;\n        for (long i : lst) {\n            if\
    \ (i < mid) {\n                res.add(i);\n            } else if (i > mid) {\n\
    \                res.add(mid);\n            } else {\n                res.add(mid);\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt8ctbt0t.java:37)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long middle\
    \ = min + (max - min) / 2;\n        long middle2 = middle + 1;\n        long middle3\
    \ = middle2 + 1;\n        long middle4 = middle3 + 1;\n        long middle5 =\
    \ middle4 + 1;\n        long middle6 = middle5 + 1;\n        long middle7 = middle6\
    \ + 1;\n        long middle8 = middle7 + 1;\n        long middle9 = middle8 +\
    \ 1;\n        long middle10 = middle9 + 1;\n        long middle11 = middle10 +\
    \ 1;\n        long middle12 = middle11 + 1;\n        long middle13 = middle12\
    \ + 1;\n        long middle14 = middle13 + 1;\n        long middle15 = middle14\
    \ + 1;\n        long middle16 = middle15 + 1;\n        long middle17 = middle16\
    \ + 1;\n        long middle18 = middle17 + 1;\n        long middle19 = middle18\
    \ + 1;\n        long middle20 = middle19 + 1;\n        long middle21 = middle20\
    \ + 1;\n        long middle22 = middle21 + 1;\n        long middle23 = middle22\
    \ + 1;\n        long middle24 = middle23 + 1;\n        long middle25 = middle24\
    \ + 1;\n        long middle26 = middle25 + 1;\n        long middle27 = middle26\
    \ + 1;\n        long middle28 = middle27 + 1;\n        long middle29 = middle28\
    \ + 1;\n        long middle30 = middle29 + 1;\n        long middle31 = middle30\
    \ + 1;\n        long middle32 = middle31 + 1;\n        long middle33 = middle32\
    \ + 1;\n        long middle34 = middle33 + 1;\n        long middle35 = middle34\
    \ + 1;\n        long middle36 = middle35 + 1;\n        long middle37 = middle36\
    \ + 1;\n        long middle38 = middle37 + 1;\n        long middle39 = middle38\
    \ + 1;\n        long middle40 = middle39 + 1;\n        long middle41 = middle40\
    \ + 1;\n        long middle42 = middle41 + 1;\n        long middle43 = middle42\
    \ + 1;\n        long middle44 = middle43 + 1;\n        long middle45 = middle44\
    \ + 1;\n        long middle46 = middle45 + 1;\n        long middle47 = middle46\
    \ + 1;\n        long middle48 = middle47 + 1;\n        long middle49 = middle48\
    \ + 1;\n        long middle50 = middle49 + 1;\n        long middle51 = middle50\
    \ + 1;\n        long middle52 = middle51 + 1;\n        long middle53 = middle52\
    \ + 1;\n        \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1xtz_lw5.java:77: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid - 1;\n        long mid3 =\
    \ mid + 1;\n        long mid4 = mid * 2;\n        long mid5 = mid * 3;\n     \
    \   long mid6 = mid * 4;\n        long mid7 = mid * 5;\n        long mid8 = mid\
    \ * 6;\n        long mid9 = mid * 7;\n        long mid10 = mid * 8;\n        long\
    \ mid11 = mid * 9;\n        long mid12 = mid * 10;\n        long mid13 = mid *\
    \ 11;\n        long mid14 = mid * 12;\n        long mid15 = mid * 13;\n      \
    \  long mid16 = mid * 14;\n        long mid17 = mid * 15;\n        long mid18\
    \ = mid * 16;\n        long mid19 = mid * 17;\n        long mid20 = mid * 18;\n\
    \        long mid21 = mid * 19;\n        long mid22 = mid * 20;\n        long\
    \ mid23 = mid * 21;\n        long mid24 = mid * 22;\n        long mid25 = mid\
    \ * 23;\n        long mid26 = mid * 24;\n        long mid27 = mid * 25;\n    \
    \    long mid28 = mid * 26;\n        long mid29 = mid * 27;\n        long mid30\
    \ = mid * 28;\n        long mid31 = mid * 29;\n        long mid32 = mid * 30;\n\
    \        long mid33 = mid * 31;\n        long mid34 = mid * 32;\n        long\
    \ mid35 = mid * 33;\n        long mid36 = mid * 34;\n        long mid37 = mid\
    \ * 35;\n        long mid38 = mid * 36;\n        long mid39 = mid * 37;\n    \
    \    long mid40 = mid * 38;\n        long mid41 = mid * 39;\n        long mid42\
    \ = mid * 40;\n        long mid43 = mid * 41;\n        long mid44 = mid * 42;\n\
    \        long mid45 = mid * 43;\n        long mid46 = mid * 44;\n        long\
    \ mid47 = mid * 45;\n        long mid48 = mid * 46;\n        long mid49 = mid\
    \ * \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8nycvxiz.java:72: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp8nycvxiz.java:73: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp8nycvxiz.java:73: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp8nycvxiz.java:73:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp8nycvxiz.java:73: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp8nycvxiz.java:73:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp8nycvxiz.java:85: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long current\
    \ = min;\n        long next = max;\n        do {\n            result.add(current);\n\
    \            current = next;\n            next = current + 1;\n        } while\
    \ (next < max);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptlp1rhue.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        mid = min + (max - min) / 2;\n        result.add(mid);\n\
    \        min = mid;\n        max = mid;\n        mid = min + (max - min) / 2;\n\
    \        result.add(mid);\n        min = mid;\n        max = mid;\n        mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        mid = min + (max - min) / 2;\n        result.add(mid);\n\
    \        min = mid;\n        max = mid;\n        mid = min + (max - min) / 2;\n\
    \        result.add(mid);\n        min = mid;\n        max = mid;\n        mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        mid = min + (max - min) / 2;\n        result.add(mid);\n\
    \        min = mid;\n        max = mid;\n        mid = min + (max - min) / 2;\n\
    \        result.add(mid);\n        min = mid;\n        max = mid;\n        mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        mid = min + (max - min) / 2;\n        result.add(mid);\n\
    \        min = mid;\n        max = mid;\n        mid = min + (max - min) / 2;\n\
    \        result.add(mid);\n        min = mid;\n        max = mid;\n        mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        mid = min + (max - min) / 2;\n        result.add(mid);\n\
    \        min = mid;\n        max = mid;\n        mid = min + (max - min) / 2;\n\
    \        result.add(mid);\n        min = mid;\n        max = mid;\n        mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        mid = min + (max - min) / 2;\n        result.add(mid);\n\
    \        min = mid;\n        max = mid;\n        mid = min + (max - min) / 2;\n\
    \        result.add(mid);\n        min = mid;\n        max = mid;\n        mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgket2qe.java:99: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpbgket2qe.java:100: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpbgket2qe.java:100: error:\
    \ ';' expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpbgket2qe.java:100:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpbgket2qe.java:100: error: ';' expected\n   \
    \ public static void main(String[] args) {\n                           ^\n/tmp/tmpbgket2qe.java:100:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpbgket2qe.java:112: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid4\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc4ie2fj8.java:63: error: ';' expected\n        long mid4\n    \
    \             ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = m\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqylpefs1.java:71: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n       \
    \ long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min) /\
    \ 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min + (max\
    \ - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8 =\
    \ min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n       \
    \ long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = min + (\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0dyo2wzh.java:64: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp0dyo2wzh.java:64: error: ';' expected\n    }\n     ^\n/tmp/tmp0dyo2wzh.java:65:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmp0dyo2wzh.java:65: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp0dyo2wzh.java:65: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp0dyo2wzh.java:65: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp0dyo2wzh.java:77: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long minValue = lst.get(0);\n        long maxValue =\
    \ lst.get(lst.size() - 1);\n        long minIndex = lst.indexOf(minValue);\n \
    \       long maxIndex = lst.lastIndexOf(maxValue);\n        long temp;\n     \
    \   for(int i = 0; i <= maxIndex; i++) {\n            temp = lst.get(i);\n   \
    \         for(int j = i; j < lst.size(); j++) {\n                if(temp < lst.get(j))\
    \ {\n                    temp = lst.get(j);\n                    minIndex = j;\n\
    \                }\n            }\n            result.add(temp);\n        }\n\
    \        for(int i = maxIndex; i >= minIndex; i--) {\n            temp = lst.get(i);\n\
    \            for(int j = i; j >= minIndex; j--) {\n                if(temp > lst.get(j))\
    \ {\n                    temp = lst.get(j);\n                    maxIndex = j;\n\
    \                }\n            }\n            result.add(temp);\n        }\n\
    \        for(int i = minIndex; i <= maxIndex; i++) {\n            temp = lst.get(i);\n\
    \            for(int j = i; j < lst.size(); j++) {\n                if(temp >\
    \ lst.get(j)) {\n                    temp = lst.get(j);\n                    minIndex\
    \ = j;\n                }\n            }\n            result.add(temp);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpumg88rrt.java:36: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for(int i = maxIndex; i >= minIndex; i--) {\n    \
    \                ^\n/tmp/tmpumg88rrt.java:46: error: incompatible types: possible\
    \ lossy conversion from long to int\n        for(int i = minIndex; i <= maxIndex;\
    \ i++) {\n                    ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = m\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqylpefs1.java:71: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n       \
    \ long max = lst.stream().max().getAsLong();\n        long current = min;\n  \
    \      while (current < max) {\n            result.add(current);\n           \
    \ current++;\n        }\n        current = min;\n        while (current > min)\
    \ {\n            result.add(current);\n            current--;\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj0c51usg.java:21: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpj0c51usg.java:22: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found: no\
    \ arguments\n  reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in interface Stream\n2\
    \ errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long minValue = lst.get(0);\n        long maxValue\
    \ = lst.get(lst.size() - 1);\n        long currentMinValue = minValue;\n     \
    \   long currentMaxValue = maxValue;\n        long currentMinIndex = 0;\n    \
    \    long currentMaxIndex = 0;\n        boolean isFirst = true;\n        boolean\
    \ isLast = true;\n        for (long value : lst) {\n            if (isFirst) {\n\
    \                currentMinValue = value;\n                currentMinIndex = lst.indexOf(value);\n\
    \                isFirst = false;\n            }\n            if (isLast) {\n\
    \                currentMaxValue = value;\n                currentMaxIndex = lst.indexOf(value);\n\
    \                isLast = false;\n            }\n            if (currentMinValue\
    \ > currentMaxValue) {\n                result.add(currentMinValue);\n       \
    \         result.add(currentMaxValue);\n                result.add(currentMinIndex);\n\
    \                result.add(currentMaxIndex);\n                currentMinValue\
    \ = value;\n                currentMinIndex = lst.indexOf(value);\n          \
    \      currentMaxValue = value;\n                currentMaxIndex = lst.indexOf(value);\n\
    \            } else if (currentMinValue < currentMaxValue) {\n               \
    \ result.add(currentMinValue);\n                result.add(currentMaxValue);\n\
    \                result.add(currentMinIndex);\n                result.add(currentMaxIndex);\n\
    \                currentMaxValue = value;\n                currentMaxIndex = lst.indexOf(value);\n\
    \                currentMinValue = value;\n                currentMinIndex = lst.indexOf(value);\n\
    \            } else {\n                result.add(currentMinValue);\n        \
    \        result.add(currentMaxValue);\n                result.add(currentMinIndex);\n\
    \                result.add(currentMaxIndex);\n                currentMinValue\
    \ = value;\n                currentMinIndex = lst.indexOf(value);\n          \
    \      currentMaxValue = value;\n                currentMaxIndex = lst.indexOf(value);\n\
    \            }\n        }\n        result.add(currentMinValue);\n        result.add(currentMaxValue);\n\
    \        result.add(currentMinIndex);\n        result.add(currentMaxIndex);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr808soph.java:76)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid\
    \ / 3;\n        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n        long\
    \ mid6 = mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid / 8;\n\
    \        long mid9 = mid / 9;\n        long mid10 = mid / 10;\n        long mid11\
    \ = mid / 11;\n        long mid12 = mid / 12;\n        long mid13 = mid / 13;\n\
    \        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n        long\
    \ mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long mid18 = mid\
    \ / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid / 20;\n    \
    \    long mid21 = mid / 21;\n        long mid22 = mid / 22;\n        long mid23\
    \ = mid / 23;\n        long mid24 = mid / 24;\n        long mid25 = mid / 25;\n\
    \        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n        long\
    \ mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long mid30 = mid\
    \ / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid / 32;\n    \
    \    long mid33 = mid / 33;\n        long mid34 = mid / 34;\n        long mid35\
    \ = mid / 35;\n        long mid36 = mid / 36;\n        long mid37 = mid / 37;\n\
    \        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n        long\
    \ mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long mid42 = mid\
    \ / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid / 44;\n    \
    \    long mid45 = mid / 45;\n        long mid46 = mid / 46;\n        long mid47\
    \ = mid / 47;\n        long mid48 = mid / 48;\n        long mid49 = mid \n   \
    \ }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0g5g0yzv.java:71: error: ';' expected\n        long mid49 = mid\
    \ \n                        ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = m\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqylpefs1.java:71: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long minValue = lst.get(0);\n        long maxValue\
    \ = lst.get(lst.size() - 1);\n        long currentMinValue = minValue;\n     \
    \   long currentMaxValue = maxValue;\n        long currentMinIndex = 0;\n    \
    \    long currentMaxIndex = 0;\n        long currentMinValueIndex = 0;\n     \
    \   long currentMaxValueIndex = 0;\n        long currentMinValueIndex2 = 0;\n\
    \        long currentMaxValueIndex2 = 0;\n        long currentMinValueIndex3 =\
    \ 0;\n        long currentMaxValueIndex3 = 0;\n        long currentMinValueIndex4\
    \ = 0;\n        long currentMaxValueIndex4 = 0;\n        long currentMinValueIndex5\
    \ = 0;\n        long currentMaxValueIndex5 = 0;\n        long currentMinValueIndex6\
    \ = 0;\n        long currentMaxValueIndex6 = 0;\n        long currentMinValueIndex7\
    \ = 0;\n        long currentMaxValueIndex7 = 0;\n        long currentMinValueIndex8\
    \ = 0;\n        long currentMaxValueIndex8 = 0;\n        long currentMinValueIndex9\
    \ = 0;\n        long currentMaxValueIndex9 = 0;\n        long currentMinValueIndex10\
    \ = 0;\n        long currentMaxValueIndex10 = 0;\n        long currentMinValueIndex11\
    \ = 0;\n        long currentMaxValueIndex11 = 0;\n        long currentMinValueIndex12\
    \ = 0;\n        long currentMaxValueIndex12 = 0;\n        long currentMinValueIndex13\
    \ = 0;\n        long currentMaxValueIndex13 = 0;\n        long currentMinValueIndex14\
    \ = 0;\n        long currentMaxValueIndex14 = 0;\n        long currentMinValueIndex15\
    \ = 0;\n        long currentMaxValueIndex15 = 0;\n        long currentMinValueIndex16\
    \ = 0;\n        long currentMaxValueIndex16 = 0;\n        long currentMinValueIndex17\
    \ = 0;\n        long currentMaxValueIndex17 = 0;\n        long currentMinValueIndex18\
    \ = 0;\n        long currentMaxValueIndex18 = 0;\n        long currentMinValueIndex19\
    \ = 0;\n        long currentMaxValueIndex19 = 0;\n        long currentMinValueIndex20\
    \ = 0;\n        long currentMaxValueIndex20 = 0;\n        long currentMinValueIndex21\
    \ = 0;\n        long currentMaxValueIndex21 = 0;\n        long currentMinValueIndex22\
    \ = 0;\n        long currentMaxValueIndex22 = 0;\n        long currentMinValueIndex23\
    \ = 0;\n        long currentMaxValueIndex23 = 0;\n        long currentMinValueIndex24\
    \ = 0;\n        long currentMaxValueIndex24 = 0;\n        long currentMinValueIndex25\
    \ = 0;\n        long currentMaxValueIndex25 = 0;\n        long currentMinValueIndex26\
    \ = 0;\n        long current\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps70csaoa.java:78: error: ';' expected\n        long current\n \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long minValue = lst.get(0);\n        Long maxValue =\
    \ lst.get(lst.size() - 1);\n        Long minIndex = Collections.binarySearch(lst,\
    \ (long)minValue);\n        Long maxIndex = Collections.binarySearch(lst, (long)maxValue);\n\
    \        Long minIndex2 = Collections.binarySearch(lst, (long)minValue);\n   \
    \     Long maxIndex2 = Collections.binarySearch(lst, (long)maxValue);\n      \
    \  if (minIndex < maxIndex) {\n            Collections.rotate(lst, minIndex +\
    \ 1, maxIndex);\n            Collections.rotate(lst, minIndex2, maxIndex2);\n\
    \            Collections.rotate(lst, minIndex + 1, maxIndex2);\n            Collections.rotate(lst,\
    \ minIndex2, maxIndex2);\n            Collections.rotate(lst, minIndex + 1, maxIndex2);\n\
    \            Collections.rotate(lst, minIndex2, maxIndex2);\n            Collections.rotate(lst,\
    \ minIndex + 1, maxIndex2);\n            Collections.rotate(lst, minIndex2, maxIndex2);\n\
    \            Collections.rotate(lst, minIndex + 1, maxIndex2);\n            Collections.rotate(lst,\
    \ minIndex2, maxIndex2);\n            Collections.rotate(lst, minIndex + 1, maxIndex2);\n\
    \            Collections.rotate(lst, minIndex2, maxIndex2);\n            Collections.rotate(lst,\
    \ minIndex + 1, maxIndex2);\n            Collections.rotate(lst, minIndex2, maxIndex2);\n\
    \            Collections.rotate(lst, minIndex + 1, maxIndex2);\n            Collections.rotate(lst,\
    \ minIndex2, maxIndex2);\n            Collections.rotate(lst, minIndex + 1, maxIndex2);\n\
    \            Collections.rotate(lst, minIndex2, maxIndex2);\n            Collections.rotate(lst,\
    \ minIndex + 1, maxIndex2);\n            Collections.rotate(lst, minIndex2, maxIndex2);\n\
    \            Collections.rotate(lst, minIndex + 1, maxIndex2);\n            Collections.rotate(lst,\
    \ minIndex2, maxIndex2);\n            Collections.rotate(lst, minIndex + 1, maxIndex2);\n\
    \            Collections.rotate(lst, minIndex2, maxIndex2);\n            Collections.rotate(lst,\
    \ minIndex + 1, maxIndex2);\n            Collections.rotate(lst, minIndex2, maxIndex2);\n\
    \            Collections.rotate(lst, minIndex + 1, maxIndex2);\n            Collections.rotate(lst,\
    \ minIndex2, maxIndex2);\n            Collections.rotate(lst, minIndex + 1, maxIndex2);\n\
    \            Collections.rotate(lst, minIndex2, maxIndex2);\n            Collections.rotate(lst,\
    \ minIndex + 1, maxIndex2);\n            Collections.rotate(lst, minIndex2, max\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ilocimh.java:59: error: ')' expected\n            Collections.rotate(lst,\
    \ minIndex2, max\n                                                  ^\n/tmp/tmp4ilocimh.java:61:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsp1kh4cp.java:55: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpsp1kh4cp.java:55: error: ';' expected\n    }\n     ^\n/tmp/tmpsp1kh4cp.java:56:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpsp1kh4cp.java:56: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpsp1kh4cp.java:56: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpsp1kh4cp.java:56: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpsp1kh4cp.java:68: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsp1kh4cp.java:55: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpsp1kh4cp.java:55: error: ';' expected\n    }\n     ^\n/tmp/tmpsp1kh4cp.java:56:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpsp1kh4cp.java:56: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpsp1kh4cp.java:56: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpsp1kh4cp.java:56: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpsp1kh4cp.java:68: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4q31vq6.java:64: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long curr = min;\n        while (curr <= max)\
    \ {\n            result.add(curr);\n            curr += mid;\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2whel5o_.java:32)\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min().getAsLong();\n   \
    \     long max = lst.stream().max().getAsLong();\n        long mid = min + (max\
    \ - min) / 2;\n        long temp;\n        for (long i = min; i <= max; i++) {\n\
    \            temp = i;\n            for (long j = mid; j > min; j--) {\n     \
    \           if (lst.get(j) < temp) {\n                    temp = lst.get(j);\n\
    \                }\n            }\n            result.add(temp);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa4xr1ntb.java:21: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpa4xr1ntb.java:22: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpa4xr1ntb.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n                if (lst.get(j) < temp) {\n               \
    \             ^\n/tmp/tmpa4xr1ntb.java:29: error: incompatible types: possible\
    \ lossy conversion from long to int\n                    temp = lst.get(j);\n\
    \                                   ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long minValue = lst.get(0);\n        Long maxValue =\
    \ lst.get(lst.size() - 1);\n        Long minIndex = Collections.binarySearch(lst,\
    \ (Long)minValue);\n        Long maxIndex = Collections.binarySearch(lst, (Long)maxValue);\n\
    \        Long minIndex2 = Collections.binarySearch(lst, (Long)minValue, minIndex);\n\
    \        Long maxIndex2 = Collections.binarySearch(lst, (Long)maxValue, maxIndex);\n\
    \        Long minIndex3 = Collections.binarySearch(lst, (Long)minValue, minIndex2);\n\
    \        Long maxIndex3 = Collections.binarySearch(lst, (Long)maxValue, maxIndex2);\n\
    \        Long minIndex4 = Collections.binarySearch(lst, (Long)minValue, minIndex3);\n\
    \        Long maxIndex4 = Collections.binarySearch(lst, (Long)maxValue, maxIndex3);\n\
    \        Long minIndex5 = Collections.binarySearch(lst, (Long)minValue, minIndex4);\n\
    \        Long maxIndex5 = Collections.binarySearch(lst, (Long)maxValue, maxIndex4);\n\
    \        Long minIndex6 = Collections.binarySearch(lst, (Long)minValue, minIndex5);\n\
    \        Long maxIndex6 = Collections.binarySearch(lst, (Long)maxValue, maxIndex5);\n\
    \        Long minIndex7 = Collections.binarySearch(lst, (Long)minValue, minIndex6);\n\
    \        Long maxIndex7 = Collections.binarySearch(lst, (Long)maxValue, maxIndex6);\n\
    \        Long minIndex8 = Collections.binarySearch(lst, (Long)minValue, minIndex7);\n\
    \        Long maxIndex8 = Collections.binarySearch(lst, (Long)maxValue, maxIndex7);\n\
    \        Long minIndex9 = Collections.binarySearch(lst, (Long)minValue, minIndex8);\n\
    \        Long maxIndex9 = Collections.binarySearch(lst, (Long)maxValue, maxIndex8);\n\
    \        Long minIndex10 = Collections.binarySearch(lst, (Long)minValue, minIndex9);\n\
    \        Long maxIndex10 = Collections.binarySearch(lst, (Long)maxValue, maxIndex9);\n\
    \        Long minIndex11 = Collections.binarySearch(lst, (Long)minValue, minIndex10);\n\
    \        Long maxIndex11 = Collections.binarySearch(lst, (Long)maxValue, maxIndex10);\n\
    \        Long minIndex12 = Collections.binarySearch(lst, (Long)minValue, minIndex11);\n\
    \        Long maxIndex12 = Collections.binarySearch(lst, (Long)maxValue, maxIndex11);\n\
    \        Long minIndex13 = Collections.binarySearch(\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvetlw7it.java:48: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4q31vq6.java:64: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().mapToLong(i -> i).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(i -> i).max().getAsLong();\n      \
    \  long min = lst.stream().mapToLong(i -> i).min().getAsLong();\n        long\
    \ max = lst.stream().mapToLong(i -> i).max().getAsLong();\n        long min =\
    \ lst.stream().mapToLong(i -> i).min().getAsLong();\n        long max = lst.stream().mapToLong(i\
    \ -> i).max().getAsLong();\n        long min = lst.stream().mapToLong(i -> i).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(i -> i).max().getAsLong();\n      \
    \  long min = lst.stream().mapToLong(i -> i).min().getAsLong();\n        long\
    \ max = lst.stream().mapToLong(i -> i).max().getAsLong();\n        long min =\
    \ lst.stream().mapToLong(i -> i).min().getAsLong();\n        long max = lst.stream().mapToLong(i\
    \ -> i).max().getAsLong();\n        long min = lst.stream().mapToLong(i -> i).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(i -> i).max().getAsLong();\n      \
    \  long min = lst.stream().mapToLong(i -> i).min().getAsLong();\n        long\
    \ max = lst.stream().mapToLong(i -> i).max().getAsLong();\n        long min =\
    \ lst.stream().mapToLong(i -> i).min().getAsLong();\n        long max = lst.stream().mapToLong(i\
    \ -> i).max().getAsLong();\n        long min = lst.stream().mapToLong(i -> i).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(i -> i).max().getAsLong();\n      \
    \  long min = lst.stream().mapToLong(i -> i).min().getAsLong();\n        long\
    \ max = lst.stream().mapToLong(i -> i).max().getAsLong();\n        long min =\
    \ lst.stream().mapToLong(i -> i).min().getAsLong();\n        long max = lst.stream().mapToLong(i\
    \ -> i).max().getAsLong();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp564ra7e4.java:23: error: variable min is already defined in method\
    \ strangeSortList(ArrayList<Long>)\n        long min = lst.stream().mapToLong(i\
    \ -> i).min().getAsLong();\n             ^\n/tmp/tmp564ra7e4.java:24: error: variable\
    \ max is already defined in method strangeSortList(ArrayList<Long>)\n        long\
    \ max = lst.stream().mapToLong(i -> i).max().getAsLong();\n             ^\n/tmp/tmp564ra7e4.java:25:\
    \ error: variable min is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        long min = lst.stream().mapToLong(i -> i).min().getAsLong();\n      \
    \       ^\n/tmp/tmp564ra7e4.java:26: error: variable max is already defined in\
    \ method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().mapToLong(i\
    \ -> i).max().getAsLong();\n             ^\n/tmp/tmp564ra7e4.java:27: error: variable\
    \ min is already defined in method strangeSortList(ArrayList<Long>)\n        long\
    \ min = lst.stream().mapToLong(i -> i).min().getAsLong();\n             ^\n/tmp/tmp564ra7e4.java:28:\
    \ error: variable max is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        long max = lst.stream().mapToLong(i -> i).max().getAsLong();\n      \
    \       ^\n/tmp/tmp564ra7e4.java:29: error: variable min is already defined in\
    \ method strangeSortList(ArrayList<Long>)\n        long min = lst.stream().mapToLong(i\
    \ -> i).min().getAsLong();\n             ^\n/tmp/tmp564ra7e4.java:30: error: variable\
    \ max is already defined in method strangeSortList(ArrayList<Long>)\n        long\
    \ max = lst.stream().mapToLong(i -> i).max().getAsLong();\n             ^\n/tmp/tmp564ra7e4.java:31:\
    \ error: variable min is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        long min = lst.stream().mapToLong(i -> i).min().getAsLong();\n      \
    \       ^\n/tmp/tmp564ra7e4.java:32: error: variable max is already defined in\
    \ method strangeSortList(ArrayList<Long>)\n        long max = lst.stream().mapToLong(i\
    \ -> i).max().getAsLong();\n             ^\n/tmp/tmp564ra7e4.java:33: error: variable\
    \ min is already defined in method strangeSortList(ArrayList<Long>)\n        long\
    \ min = l"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        Long min = lst.stream().min(Long::compare).get();\n\
    \        Long max = lst.stream().max(Long::compare).get();\n        Long mid =\
    \ min + (max - min) / 2;\n        Long mid2 = min + (max - min) / 2;\n       \
    \ Long mid3 = min + (max - min) / 2;\n        Long mid4 = min + (max - min) /\
    \ 2;\n        Long mid5 = min + (max - min) / 2;\n        Long mid6 = min + (max\
    \ - min) / 2;\n        Long mid7 = min + (max - min) / 2;\n        Long mid8 =\
    \ min + (max - min) / 2;\n        Long mid9 = min + (max - min) / 2;\n       \
    \ Long mid10 = min + (max - min) / 2;\n        Long mid11 = min + (max - min)\
    \ / 2;\n        Long mid12 = min + (max - min) / 2;\n        Long mid13 = min\
    \ + (max - min) / 2;\n        Long mid14 = min + (max - min) / 2;\n        Long\
    \ mid15 = min + (max - min) / 2;\n        Long mid16 = min + (max - min) / 2;\n\
    \        Long mid17 = min + (max - min) / 2;\n        Long mid18 = min + (max\
    \ - min) / 2;\n        Long mid19 = min + (max - min) / 2;\n        Long mid20\
    \ = min + (max - min) / 2;\n        Long mid21 = min + (max - min) / 2;\n    \
    \    Long mid22 = min + (max - min) / 2;\n        Long mid23 = min + (max - min)\
    \ / 2;\n        Long mid24 = min + (max - min) / 2;\n        Long mid25 = min\
    \ + (max - min) / 2;\n        Long mid26 = min + (max - min) / 2;\n        Long\
    \ mid27 = min + (max - min) / 2;\n        Long mid28 = min + (max - min) / 2;\n\
    \        Long mid29 = min + (max - min) / 2;\n        Long mid30 = min + (max\
    \ - min) / 2;\n        Long mid31 = min + (max - min) / 2;\n        Long mid32\
    \ = min + (max - min) / 2;\n        Long mid33 = min + (max - min) / 2;\n    \
    \    Long mid34 = min + (max - min) / 2;\n        Long mid35 = min + (max - min)\
    \ / 2;\n        Long mid36 = min + (max - min) / 2;\n        Long mid37 = min\
    \ + (max - min) / 2;\n        Long \n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp27kkltl0.java:60: error: not a statement\n        Long \n     \
    \   ^\n/tmp/tmp27kkltl0.java:60: error: ';' expected\n        Long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ip8cpqt.java:52: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp3ip8cpqt.java:52: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp07oyfkfk.java:54: error: <identifier> expected\n        long max\
    \ = lst.stream().\n                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4q31vq6.java:64: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long curr\
    \ = min;\n        long nextMax = max;\n        long nextMin = min;\n        while(curr\
    \ != nextMax && curr != nextMin) {\n            result.add(curr);\n          \
    \  nextMax = max;\n            nextMin = min;\n            curr++;\n        }\n\
    \        while(curr != nextMax) {\n            result.add(curr);\n           \
    \ curr++;\n            nextMax++;\n        }\n        while(curr != nextMin) {\n\
    \            result.add(curr);\n            curr++;\n            nextMin--;\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659798764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().mapToLong(Long::longValue).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(Long::longValue).max().getAsLong();\n\
    \        long curr = min;\n        long nextMax = max;\n        long nextMin =\
    \ min;\n        do {\n            result.add(curr);\n            curr += nextMax;\n\
    \            nextMax -= nextMin;\n            nextMin += max;\n        } while\
    \ (curr < nextMin);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ec4n6ey.java:35)\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp03499q5q.java:71: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid / 3;\n        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n     \
    \   long mid6 = mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid\
    \ / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid / 10;\n       \
    \ long mid11 = mid / 11;\n        long mid12 = mid / 12;\n        long mid13 =\
    \ mid / 13;\n        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n\
    \        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long\
    \ mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid\
    \ / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid / 22;\n    \
    \    long mid23 = mid / 23;\n        long mid24 = mid / 24;\n        long mid25\
    \ = mid / 25;\n        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n\
    \        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long\
    \ mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid\
    \ / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid / 34;\n    \
    \    long mid35 = mid / 35;\n        long mid36 = mid / 36;\n        long mid37\
    \ = mid / 37;\n        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n\
    \        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long\
    \ mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid\
    \ / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid / 46;\n    \
    \    long mid47 = mid / 47;\n        long mid48 = mid / 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupek4yp4.java:71: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long curr = min;\n        long next = 0;\n \
    \       for (long i : lst) {\n            if (curr == mid) {\n               \
    \ result.add(next);\n                curr = next;\n                next = 0;\n\
    \            }\n            next = i;\n            curr++;\n        }\n      \
    \  result.add(next);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxys7ixql.java:39)\n"
  stdout: ''
  timestamp: 1659798759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (long i : lst) {\n            if (i < min) {\n \
    \               min = i;\n            }\n            if (i > max) {\n        \
    \        max = i;\n            }\n        }\n        result.add(min);\n      \
    \  result.add(max);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4mnbapcf.java:40)\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp_rokvrj.java:26)\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = m\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqylpefs1.java:71: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compare).get();\n        long max =\
    \ lst.stream().max(Long::compare).get();\n        long mid = min + (max - min)\
    \ / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long\
    \ mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 /\
    \ 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long\
    \ mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10\
    \ / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n   \
    \     long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16\
    \ = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 /\
    \ 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n     \
    \   long mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23\
    \ = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 /\
    \ 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n     \
    \   long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30\
    \ = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 /\
    \ 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n     \
    \   long mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37\
    \ = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 /\
    \ 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n     \
    \   long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44\
    \ = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 /\
    \ 2;\n        long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n     \
    \   long mid49 = \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpabvzplkz.java:72: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n       \
    \ long max = lst.stream().max().getAsLong();\n        long mid = min + (max -\
    \ min) / 2;\n        long temp;\n        for (long i = min; i <= max; i++) {\n\
    \            temp = i;\n            while (true) {\n                while (lst.contains(temp))\
    \ {\n                    temp = temp * 2;\n                }\n               \
    \ while (lst.contains(temp)) {\n                    temp = temp / 2;\n       \
    \         }\n                result.add(temp);\n                if (temp == mid)\
    \ {\n                    break;\n                }\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt00xnox8.java:21: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpt00xnox8.java:22: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = m\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqylpefs1.java:71: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        res.addAll(lst);\n        res.addAll(Collections.nCopies(lst.size()\
    \ - 1, mid));\n        res.addAll(Collections.nCopies(lst.size() - 1, max));\n\
    \        res.addAll(Collections.nCopies(lst.size() - 1, min));\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphfysf8h6.java:31)\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long minValue = lst.get(0);\n        long maxValue =\
    \ lst.get(lst.size() - 1);\n        long currentMin = minValue;\n        long\
    \ currentMax = maxValue;\n        long currentMinIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        for (int i = 0; i < lst.size(); i++) {\n            if (currentMin\
    \ > lst.get(i)) {\n                currentMin = lst.get(i);\n                currentMinIndex\
    \ = i;\n            }\n            if (currentMax < lst.get(i)) {\n          \
    \      currentMax = lst.get(i);\n                currentMaxIndex = i;\n      \
    \      }\n        }\n        long currentMinValue = currentMin;\n        long\
    \ currentMaxValue = currentMax;\n        long currentMinIndex = currentMinIndex;\n\
    \        long currentMaxIndex = currentMaxIndex;\n        long currentMinValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            if (currentMinValue > lst.get(i)) {\n      \
    \          currentMinValue = lst.get(i);\n                currentMinValueIndex\
    \ = i;\n            }\n            if (currentMaxValue < lst.get(i)) {\n     \
    \           currentMaxValue = lst.get(i);\n                currentMaxValueIndex\
    \ = i;\n            }\n        }\n        long currentMinValueValue = currentMinValue;\n\
    \        long currentMaxValueValue = currentMaxValue;\n        long currentMinValueIndex\
    \ = currentMinValueIndex;\n        long currentMaxValueIndex = currentMaxValueIndex;\n\
    \        long currentMinValueValueIndex = -1;\n        long currentMaxValueValueIndex\
    \ = -1;\n        for (int i = 0; i < lst.size(); i++) {\n            if (currentMinValueIndex\
    \ == -1) {\n                currentMinValueIndex = i;\n                currentMinValueValue\
    \ = lst.get(i);\n            }\n            if (currentMaxValueIndex == -1) {\n\
    \                currentMaxValueIndex = i;\n                currentMaxValueValue\
    \ = lst.get(i);\n            }\n            if (currentMinValueValue > lst.get(i))\
    \ {\n                currentMinValueValue = lst.get(i);\n                currentMinValueValueIndex\
    \ = i;\n            }\n            if (currentMaxValueValue < lst.get(i)) {\n\
    \                currentMaxValueValue = lst.get(i);\n                currentMaxValueValueIndex\
    \ = i;\n            }\n        }\n        long currentMinValueValueValue = currentMinValueValue;\n\
    \        long currentMaxValueValueValue = currentMaxValueValue;\n        long\
    \ currentMinValueValueIndex = currentMinValueValueIndex;\n        long currentMaxValueValueIndex\
    \ = currentMaxValueValueIndex;\n        long currentMinValueValueValueIndex =\
    \ -1;\n        long currentMaxValueValueIndex = -1;\n        for (int i = 0; i\
    \ < lst.size(); i++) {\n            if (currentMinValueValueIndex == -1) {\n \
    \               currentMinValueValueIndex = i;\n                \n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprz5ejq5l.java:88: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min3 = lst.stream().min(Long::compareTo).get();\n        Long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max4 = lst.stream().max(Long::compareTo).get();\n        Long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min6 = lst.stream().min(Long::compareTo).get();\n        Long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max7 = lst.stream().max(Long::compareTo).get();\n        Long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min9 = lst.stream().min(Long::compareTo).get();\n        Long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max10 = lst.stream().max(Long::compareTo).get();\n        Long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min12 = lst.stream().min(Long::compareTo).get();\n        Long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max13 = lst.stream().max(Long::compareTo).get();\n        Long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min15 = lst.stream().min(Long::compareTo).get();\n        Long max15\
    \ = l\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz382k3kz.java:50: error: ';' expected\n        Long max15 = l\n\
    \                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        for(Long i : lst) {\n\
    \            result.add(i);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0p8yavzy.java:28)\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp_rokvrj.java:26)\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        for (long i = min; i <= max; i++) {\n    \
    \        result.add(i);\n        }\n        for (long i = min; i <= mid; i++)\
    \ {\n            result.add(i);\n        }\n        for (long i = mid; i <= max;\
    \ i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5xyv3rn9.java:36)\n"
  stdout: ''
  timestamp: 1659798759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsp1kh4cp.java:55: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpsp1kh4cp.java:55: error: ';' expected\n    }\n     ^\n/tmp/tmpsp1kh4cp.java:56:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpsp1kh4cp.java:56: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpsp1kh4cp.java:56: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpsp1kh4cp.java:56: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpsp1kh4cp.java:68: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid + 1;\n        long mid3 =\
    \ mid + 2;\n        long mid4 = mid + 3;\n        long mid5 = mid + 4;\n     \
    \   long mid6 = mid + 5;\n        long mid7 = mid + 6;\n        long mid8 = mid\
    \ + 7;\n        long mid9 = mid + 8;\n        long mid10 = mid + 9;\n        long\
    \ mid11 = mid + 10;\n        long mid12 = mid + 11;\n        long mid13 = mid\
    \ + 12;\n        long mid14 = mid + 13;\n        long mid15 = mid + 14;\n    \
    \    long mid16 = mid + 15;\n        long mid17 = mid + 16;\n        long mid18\
    \ = mid + 17;\n        long mid19 = mid + 18;\n        long mid20 = mid + 19;\n\
    \        long mid21 = mid + 20;\n        long mid22 = mid + 21;\n        long\
    \ mid23 = mid + 22;\n        long mid24 = mid + 23;\n        long mid25 = mid\
    \ + 24;\n        long mid26 = mid + 25;\n        long mid27 = mid + 26;\n    \
    \    long mid28 = mid + 27;\n        long mid29 = mid + 28;\n        long mid30\
    \ = mid + 29;\n        long mid31 = mid + 30;\n        long mid32 = mid + 31;\n\
    \        long mid33 = mid + 32;\n        long mid34 = mid + 33;\n        long\
    \ mid35 = mid + 34;\n        long mid36 = mid + 35;\n        long mid37 = mid\
    \ + 36;\n        long mid38 = mid + 37;\n        long mid39 = mid + 38;\n    \
    \    long mid40 = mid + 39;\n        long mid41 = mid + 40;\n        long mid42\
    \ = mid + 41;\n        long mid43 = mid + 42;\n        long mid44 = mid + 43;\n\
    \        long mid45 = mid + 44;\n        long mid46 = mid + 45;\n        long\
    \ mid47 = mid + 46;\n        long mid48 = mid + 47;\n        long mid49 = mid\
    \ + 48;\n        long mid50 = mid + 49;\n        long mid51 = mid + 50;\n    \
    \    long mid52 = mid + 51;\n        long mid53 = mid + 52;\n        long mid\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0owemutj.java:76: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long current\
    \ = min;\n        long nextMax = max;\n        long nextMin = min;\n        while(current\
    \ != nextMax) {\n            result.add(current);\n            nextMax = nextMax\
    \ + 1;\n        }\n        while(current != nextMin) {\n            result.add(current);\n\
    \            nextMin = nextMin - 1;\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659798764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min().getAsLong();\n   \
    \     long max = lst.stream().max().getAsLong();\n        long mid = min + (max\
    \ - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n \
    \       long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6\
    \ = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n\
    \        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11\
    \ = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12 /\
    \ 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n     \
    \   long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18\
    \ = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 /\
    \ 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n     \
    \   long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long mid25\
    \ = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26 /\
    \ 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n     \
    \   long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32\
    \ = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 /\
    \ 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n     \
    \   long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long mid39\
    \ = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40 /\
    \ 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n     \
    \   long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long mid46\
    \ = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48 = mid47 /\
    \ 2;\n        long mid49 = mid\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6x6mbxzw.java:71: error: ';' expected\n        long mid49 = mid\n\
    \                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4q31vq6.java:64: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ip8cpqt.java:52: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp3ip8cpqt.java:52: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long minValue = lst.get(0);\n        Long maxValue =\
    \ lst.get(lst.size() - 1);\n        Long minIndex = 0;\n        Long maxIndex\
    \ = 0;\n        Long minIndex2 = maxIndex;\n        Long maxIndex2 = minIndex;\n\
    \        Long minIndex3 = maxIndex;\n        Long maxIndex3 = minIndex;\n    \
    \    Long minIndex4 = maxIndex;\n        Long maxIndex4 = minIndex;\n        Long\
    \ minIndex5 = maxIndex;\n        Long maxIndex5 = minIndex;\n        Long minIndex6\
    \ = maxIndex;\n        Long maxIndex6 = minIndex;\n        Long minIndex7 = maxIndex;\n\
    \        Long maxIndex7 = minIndex;\n        Long minIndex8 = maxIndex;\n    \
    \    Long maxIndex8 = minIndex;\n        Long minIndex9 = maxIndex;\n        Long\
    \ maxIndex9 = minIndex;\n        Long minIndex10 = maxIndex;\n        Long maxIndex10\
    \ = minIndex;\n        Long minIndex11 = maxIndex;\n        Long maxIndex11 =\
    \ minIndex;\n        Long minIndex12 = maxIndex;\n        Long maxIndex12 = minIndex;\n\
    \        Long minIndex13 = maxIndex;\n        Long maxIndex13 = minIndex;\n  \
    \      Long minIndex14 = maxIndex;\n        Long maxIndex14 = minIndex;\n    \
    \    Long minIndex15 = maxIndex;\n        Long maxIndex15 = minIndex;\n      \
    \  Long minIndex16 = maxIndex;\n        Long maxIndex16 = minIndex;\n        Long\
    \ minIndex17 = maxIndex;\n        Long maxIndex17 = minIndex;\n        Long minIndex18\
    \ = maxIndex;\n        Long maxIndex18 = minIndex;\n        Long minIndex19 =\
    \ maxIndex;\n        Long maxIndex19 = minIndex;\n        Long minIndex20 = maxIndex;\n\
    \        Long maxIndex20 = minIndex;\n        Long minIndex21 = maxIndex;\n  \
    \      Long maxIndex21 = minIndex;\n        Long minIndex22 = maxIndex;\n    \
    \    Long maxIndex22 = minIndex;\n        Long minIndex23 = maxIndex;\n      \
    \  Long maxIndex23 = minIndex;\n        Long minIndex24 = maxIndex;\n        Long\
    \ maxIndex24 = minIndex;\n        Long minIndex25 = maxIndex;\n        Long maxIndex25\
    \ = minIndex;\n        Long minIndex26 = maxIndex;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfkodfm5.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n        Long minIndex = 0;\n                        ^\n/tmp/tmpzfkodfm5.java:24:\
    \ error: incompatible types: int cannot be converted to Long\n        Long maxIndex\
    \ = 0;\n                        ^\n2 errors\n"
  stdout: ''
  timestamp: 1659798759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp_rokvrj.java:26)\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4q31vq6.java:64: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Long min = lst.get(0);\n\
    \        Long max = lst.get(lst.size() - 1);\n        Long mid = min + ((max -\
    \ min) / 2);\n        Long mid2 = mid + ((max - min) / 2);\n        Long mid3\
    \ = mid2 + ((max - min) / 2);\n        Long mid4 = mid3 + ((max - min) / 2);\n\
    \        Long mid5 = mid4 + ((max - min) / 2);\n        Long mid6 = mid5 + ((max\
    \ - min) / 2);\n        Long mid7 = mid6 + ((max - min) / 2);\n        Long mid8\
    \ = mid7 + ((max - min) / 2);\n        Long mid9 = mid8 + ((max - min) / 2);\n\
    \        Long mid10 = mid9 + ((max - min) / 2);\n        Long mid11 = mid10 +\
    \ ((max - min) / 2);\n        Long mid12 = mid11 + ((max - min) / 2);\n      \
    \  Long mid13 = mid12 + ((max - min) / 2);\n        Long mid14 = mid13 + ((max\
    \ - min) / 2);\n        Long mid15 = mid14 + ((max - min) / 2);\n        Long\
    \ mid16 = mid15 + ((max - min) / 2);\n        Long mid17 = mid16 + ((max - min)\
    \ / 2);\n        Long mid18 = mid17 + ((max - min) / 2);\n        Long mid19 =\
    \ mid18 + ((max - min) / 2);\n        Long mid20 = mid19 + ((max - min) / 2);\n\
    \        Long mid21 = mid20 + ((max - min) / 2);\n        Long mid22 = mid21 +\
    \ ((max - min) / 2);\n        Long mid23 = mid22 + ((max - min) / 2);\n      \
    \  Long mid24 = mid23 + ((max - min) / 2);\n        Long mid25 = mid24 + ((max\
    \ - min) / 2);\n        Long mid26 = mid25 + ((max - min) / 2);\n        Long\
    \ mid27 = mid26 + ((max - min) / 2);\n        Long mid28 = mid27 + ((max - min)\
    \ / 2);\n        Long mid29 = mid28 + ((max - min) / 2);\n        Long mid30 =\
    \ mid29 + ((max - min) / 2);\n        Long mid31 = mid30 + ((max - min) / 2);\n\
    \        Long mid32 = mid31 + ((max - min) / 2);\n        Long mid33 = mid32 +\
    \ ((max - \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcld75mv2.java:57: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i = min; i <=\
    \ max; i++) {\n            temp = i;\n            for (long j = mid; j > min;\
    \ j--) {\n                if (lst.get(j) > temp) {\n                    temp =\
    \ lst.get(j);\n                }\n            }\n            result.add(temp);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt510tu81.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n                if (lst.get(j) > temp) {\n               \
    \             ^\n/tmp/tmpt510tu81.java:29: error: incompatible types: possible\
    \ lossy conversion from long to int\n                    temp = lst.get(j);\n\
    \                                   ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        Long minValue = lst.get(0);\n        Long maxValue\
    \ = lst.get(lst.size() - 1);\n        Long minIndex = lst.indexOf(minValue);\n\
    \        Long maxIndex = lst.indexOf(maxValue);\n        Long minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1);\n        Long maxIndex2 = lst.indexOf(maxValue, maxIndex + 1);\n\
    \        Long minIndex3 = lst.indexOf(minValue, minIndex + 2);\n        Long maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2);\n        Long minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3);\n        Long maxIndex4 = lst.indexOf(maxValue, maxIndex + 3);\n\
    \        Long minIndex5 = lst.indexOf(minValue, minIndex + 4);\n        Long maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4);\n        Long minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5);\n        Long maxIndex6 = lst.indexOf(maxValue, maxIndex + 5);\n\
    \        Long minIndex7 = lst.indexOf(minValue, minIndex + 6);\n        Long maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6);\n        Long minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7);\n        Long maxIndex8 = lst.indexOf(maxValue, maxIndex + 7);\n\
    \        Long minIndex9 = lst.indexOf(minValue, minIndex + 8);\n        Long maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8);\n        Long minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9);\n        Long maxIndex10 = lst.indexOf(maxValue, maxIndex + 9);\n\
    \        Long minIndex11 = lst.indexOf(minValue, minIndex + 10);\n        Long\
    \ maxIndex11 = lst.indexOf(maxValue, maxIndex + 10);\n        Long minIndex12\
    \ = lst.indexOf(minValue, minIndex + 11);\n        Long maxIndex12 = lst.indexOf(maxValue,\
    \ maxIndex + 11);\n        Long minIndex13 = lst.indexOf(minValue, minIndex +\
    \ 12);\n        Long maxIndex13 = lst.indexOf(maxValue, maxIndex + 12);\n    \
    \    Long minIndex14 = lst.indexOf(minValue, minIndex + 13);\n        Long maxIndex14\
    \ = lst.indexOf(maxValue, maxIndex + 13);\n        Long minIndex15 = lst.indexOf(minValue,\
    \ minIndex + 14);\n        Long maxIndex15 = lst.indexOf(maxValue, maxIndex +\
    \ 14);\n        Long minIndex16\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpazw5jfxs.java:53: error: ';' expected\n        Long minIndex16\n\
    \                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min3 = lst.stream().min(Long::compareTo).get();\n        Long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max4 = lst.stream().max(Long::compareTo).get();\n        Long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min6 = lst.stream().min(Long::compareTo).get();\n        Long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max7 = lst.stream().max(Long::compareTo).get();\n        Long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min9 = lst.stream().min(Long::compareTo).get();\n        Long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max10 = lst.stream().max(Long::compareTo).get();\n        Long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min12 = lst.stream().min(Long::compareTo).get();\n        Long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max13 = lst.stream().max(Long::compareTo).get();\n        Long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min15 = lst.stream().min(Long::compareTo).get();\n        Long max15\
    \ = \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuvj27j92.java:51: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long current\
    \ = min;\n        long nextMax = max;\n        long nextMin = min;\n        do\
    \ {\n            result.add(current);\n            nextMax = nextMax + 1;\n  \
    \          nextMin = nextMin - 1;\n            current = nextMax;\n        } while\
    \ (nextMin > nextMax);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ligz8av.java:35)\n"
  stdout: ''
  timestamp: 1659798759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp_rokvrj.java:26)\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        result.addAll(lst);\n\
    \        result.add(min);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_in_m0ic.java:30)\n"
  stdout: ''
  timestamp: 1659798759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid4\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc4ie2fj8.java:63: error: ';' expected\n        long mid4\n    \
    \             ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp03499q5q.java:71: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4q31vq6.java:64: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        Collections.sort(lst);\n        Long min = lst.get(0);\n        Long\
    \ max = lst.get(lst.size()-1);\n        Long mid = lst.get(lst.size()/2);\n  \
    \      for(Long i : lst) {\n            if(i.compareTo(mid) < 0) {\n         \
    \       res.add(i);\n            }\n            if(i.compareTo(max) > 0) {\n \
    \               res.add(max);\n            }\n            if(i.compareTo(min)\
    \ < 0) {\n                res.add(min);\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpncngjew5.java:39)\n"
  stdout: ''
  timestamp: 1659798759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long minValue = lst.stream().min(Long::compareTo).get();\n\
    \        Long maxValue = lst.stream().max(Long::compareTo).get();\n        Long\
    \ minValue2 = lst.stream().min(Long::compareTo).get();\n        Long maxValue2\
    \ = lst.stream().max(Long::compareTo).get();\n        Long minValue3 = lst.stream().min(Long::compareTo).get();\n\
    \        Long maxValue3 = lst.stream().max(Long::compareTo).get();\n        Long\
    \ minValue4 = lst.stream().min(Long::compareTo).get();\n        Long maxValue4\
    \ = lst.stream().max(Long::compareTo).get();\n        Long minValue5 = lst.stream().min(Long::compareTo).get();\n\
    \        Long maxValue5 = lst.stream().max(Long::compareTo).get();\n        Long\
    \ minValue6 = lst.stream().min(Long::compareTo).get();\n        Long maxValue6\
    \ = lst.stream().max(Long::compareTo).get();\n        Long minValue7 = lst.stream().min(Long::compareTo).get();\n\
    \        Long maxValue7 = lst.stream().max(Long::compareTo).get();\n        Long\
    \ minValue8 = lst.stream().min(Long::compareTo).get();\n        Long maxValue8\
    \ = lst.stream().max(Long::compareTo).get();\n        Long minValue9 = lst.stream().min(Long::compareTo).get();\n\
    \        Long maxValue9 = lst.stream().max(Long::compareTo).get();\n        Long\
    \ minValue10 = lst.stream().min(Long::compareTo).get();\n        Long maxValue10\
    \ = lst.stream().max(Long::compareTo).get();\n        Long minValue11 = lst.stream().min(Long::compareTo).get();\n\
    \        Long maxValue11 = lst.stream().max(Long::compareTo).get();\n        Long\
    \ minValue12 = lst.stream().min(Long::compareTo).get();\n        Long maxValue12\
    \ = lst.stream().max(Long::compareTo).get();\n        Long minValue13 = lst.stream().min(Long::compareTo).get();\n\
    \        Long maxValue13 = lst.stream().max(Long::compareTo).get();\n        Long\
    \ minValue14 = lst.stream().min(Long::compareTo).get();\n        Long maxValue14\
    \ = lst.stream().max(Long::compareTo\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl9244po4.java:48: error: ')' expected\n        Long maxValue14\
    \ = lst.stream().max(Long::compareTo\n                                       \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long \n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpci_od_wb.java:71: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpci_od_wb.java:71: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        Collections.sort(lst);\n        for(Long i : lst)\
    \ {\n            result.add(i);\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzcvohs11.java:28)\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long minValue = lst.get(0);\n        long maxValue =\
    \ lst.get(lst.size() - 1);\n        long minIndex = -1;\n        long maxIndex\
    \ = -1;\n        for (int i = 0; i < lst.size(); i++) {\n            if (minIndex\
    \ == -1 && lst.get(i) < minValue) {\n                minIndex = i;\n         \
    \       minValue = lst.get(i);\n            } else if (maxIndex == -1 && lst.get(i)\
    \ > maxValue) {\n                maxIndex = i;\n                maxValue = lst.get(i);\n\
    \            }\n        }\n        if (minIndex == -1) {\n            return result;\n\
    \        }\n        if (maxIndex == -1) {\n            return result;\n      \
    \  }\n        long minValue = lst.get(minIndex);\n        long maxValue = lst.get(maxIndex);\n\
    \        long minIndex = -1;\n        long maxIndex = -1;\n        for (int i\
    \ = minIndex + 1; i < lst.size(); i++) {\n            if (minIndex == -1 && lst.get(i)\
    \ < minValue) {\n                minIndex = i;\n                minValue = lst.get(i);\n\
    \            } else if (maxIndex == -1 && lst.get(i) > maxValue) {\n         \
    \       maxIndex = i;\n                maxValue = lst.get(i);\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        if (maxIndex == -1) {\n            return result;\n        }\n \
    \       long minValue = lst.get(minIndex);\n        long maxValue = lst.get(maxIndex);\n\
    \        long minIndex = -1;\n        long maxIndex = -1;\n        for (int i\
    \ = minIndex + 1; i < lst.size(); i++) {\n            if (minIndex == -1 && lst.get(i)\
    \ < minValue) {\n                minIndex = i;\n                minValue = lst.get(i);\n\
    \            } else if (maxIndex == -1 && lst.get(i) > maxValue) {\n         \
    \       maxIndex = i;\n                maxValue = lst.get(i);\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        if (maxIndex == -1) {\n            return result;\n        }\n \
    \       long minValue = lst.get(minIndex);\n        long maxValue = lst.get(maxIndex);\n\
    \        long minIndex = -1;\n        long maxIndex = -1;\n        for (int i\
    \ = minIndex + 1; i < lst.size(); i++) {\n            if (minIndex == -1 && lst.get(i)\
    \ < minValue) {\n                minIndex = i;\n                minValue = lst.get(i);\n\
    \            } else if (maxIndex == -1 && lst.get(i) > maxValue) {\n         \
    \       maxIndex = i;\n                maxValue = lst.get(i);\n            }\n\
    \        }\n        if (minIndex == -1) {\n            return result;\n      \
    \  }\n        if (maxIndex == -1) {\n            return result;\n        }\n \
    \       long minValue = lst.get(minIndex);\n        long maxValue = lst.get(maxIndex);\n\
    \        long minIndex = -1;\n        long maxIndex = -1;\n        for (int i\
    \ = \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9v60qjvl.java:102: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659798759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().mapToLong(i -> i).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(i -> i).max().getAsLong();\n      \
    \  long curr = min;\n        long nextMin = min;\n        long nextMax = max;\n\
    \        long nextCurr = curr;\n        long nextNextMin = nextMin;\n        long\
    \ nextNextMax = nextMax;\n        long nextNextCurr = nextCurr;\n        long\
    \ nextNextNextMin = nextNextMin;\n        long nextNextNextMax = nextNextMax;\n\
    \        long nextNextNextCurr = nextNextCurr;\n        long nextNextNextNextMin\
    \ = nextNextNextMin;\n        long nextNextNextNextMax = nextNextNextMax;\n  \
    \      long nextNextNextNextCurr = nextNextNextCurr;\n        long nextNextNextNextNextMin\
    \ = nextNextNextNextMin;\n        long nextNextNextNextNextMax = nextNextNextNextMax;\n\
    \        long nextNextNextNextNextCurr = nextNextNextNextCurr;\n        long nextNextNextNextNextNextMin\
    \ = nextNextNextNextNextMin;\n        long nextNextNextNextNextNextMax = nextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextCurr = nextNextNextNextNextCurr;\n     \
    \   long nextNextNextNextNextNextNextMin = nextNextNextNextNextNextMin;\n    \
    \    long nextNextNextNextNextNextNextMax = nextNextNextNextNextNextMax;\n   \
    \     long nextNextNextNextNextNextNextCurr = nextNextNextNextNextNextCurr;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextCurr = nextNextNextNextNextNextNextCurr;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextCurr = nextNextNextNextNextNextNextNextCurr;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextNextMin;\n\
    \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpazx8ae3y.java:48: error: variable nextNextNextNextNextNextNextNextMin\
    \ is already defined in method strangeSortList(ArrayList<Long>)\n        long\
    \ nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextMin;\n\
    \             ^\n/tmp/tmpazx8ae3y.java:49: error: variable nextNextNextNextNextNextNextNextMax\
    \ is already defined in method strangeSortList(ArrayList<Long>)\n        long\
    \ nextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextMax;\n\
    \             ^\n/tmp/tmpazx8ae3y.java:50: error: variable nextNextNextNextNextNextNextNextCurr\
    \ is already defined in method strangeSortList(ArrayList<Long>)\n        long\
    \ nextNextNextNextNextNextNextNextCurr = nextNextNextNextNextNextNextNextCurr;\n\
    \             ^\n/tmp/tmpazx8ae3y.java:51: error: variable nextNextNextNextNextNextNextNextMin\
    \ is already defined in method strangeSortList(ArrayList<Long>)\n        long\
    \ nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextNextMin;\n\
    \             ^\n/tmp/tmpazx8ae3y.java:51: error: cannot find symbol\n       \
    \ long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextNextMin;\n\
    \                                                   ^\n  symbol:   variable nextNextNextNextNextNextNextNextNextMin\n\
    \  location: class Problem\n5 errors\n"
  stdout: ''
  timestamp: 1659798759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.addAll(lst);\n        result.add(mid);\n\
    \        result.add(max);\n        result.add(min);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppli1b7_0.java:31)\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long min = lst.stream().min(Long::compare).get();\n\
    \        Long max = lst.stream().max(Long::compare).get();\n        Long mid =\
    \ min + (max - min) / 2;\n        Long mid2 = min + (max - min) / 2;\n       \
    \ Long mid3 = min + (max - min) / 2;\n        Long mid4 = min + (max - min) /\
    \ 2;\n        Long mid5 = min + (max - min) / 2;\n        Long mid6 = min + (max\
    \ - min) / 2;\n        Long mid7 = min + (max - min) / 2;\n        Long mid8 =\
    \ min + (max - min) / 2;\n        Long mid9 = min + (max - min) / 2;\n       \
    \ Long mid10 = min + (max - min) / 2;\n        Long mid11 = min + (max - min)\
    \ / 2;\n        Long mid12 = min + (max - min) / 2;\n        Long mid13 = min\
    \ + (max - min) / 2;\n        Long mid14 = min + (max - min) / 2;\n        Long\
    \ mid15 = min + (max - min) / 2;\n        Long mid16 = min + (max - min) / 2;\n\
    \        Long mid17 = min + (max - min) / 2;\n        Long mid18 = min + (max\
    \ - min) / 2;\n        Long mid19 = min + (max - min) / 2;\n        Long mid20\
    \ = min + (max - min) / 2;\n        Long mid21 = min + (max - min) / 2;\n    \
    \    Long mid22 = min + (max - min) / 2;\n        Long mid23 = min + (max - min)\
    \ / 2;\n        Long mid24 = min + (max - min) / 2;\n        Long mid25 = min\
    \ + (max - min) / 2;\n        Long mid26 = min + (max - min) / 2;\n        Long\
    \ mid27 = min + (max - min) / 2;\n        Long mid28 = min + (max - min) / 2;\n\
    \        Long mid29 = min + (max - min) / 2;\n        Long mid30 = min + (max\
    \ - min) / 2;\n        Long mid31 = min + (max - min) / 2;\n        Long mid32\
    \ = min + (max - min) / 2;\n        Long mid33 = min + (max - min) / 2;\n    \
    \    Long mid34 = min + (max - min) / 2;\n        Long mid35 = min + (max - min)\
    \ / 2;\n        Long mid36 = min + (max - min) / 2;\n        Long mid37 = min\
    \ + (max - min) / 2;\n        Long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv1nl_dsd.java:60: error: ';' expected\n        Long mid\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659798759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        Long min = null;\n        Long max = null;\n   \
    \     for (Long i : lst) {\n            if (min == null || i < min) {\n      \
    \          min = i;\n            }\n            if (max == null || i > max) {\n\
    \                max = i;\n            }\n        }\n        if (min == null)\
    \ {\n            min = 0l;\n        }\n        if (max == null) {\n          \
    \  max = 0l;\n        }\n        Long mid = (min + max) / 2;\n        Long left\
    \ = new Long(mid);\n        Long right = new Long(mid);\n        Long nextLeft\
    \ = new Long(mid);\n        Long nextRight = new Long(mid);\n        for (Long\
    \ i : lst) {\n            if (i == mid) {\n                result.add(left);\n\
    \                result.add(right);\n                result.add(mid);\n      \
    \          result.add(nextLeft);\n                result.add(nextRight);\n   \
    \         } else if (i < mid) {\n                nextLeft = left;\n          \
    \      nextRight = right;\n                left = new Long(i);\n             \
    \   right = new Long(i);\n            } else {\n                nextLeft = mid;\n\
    \                nextRight = mid;\n                mid = new Long(i);\n      \
    \      }\n        }\n        result.add(left);\n        result.add(right);\n \
    \       result.add(mid);\n        result.add(nextLeft);\n        result.add(nextRight);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvy4ktjkm.java:68)\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        long curr = mid;\n\
    \        long nextMin = mid;\n        long nextMax = mid;\n        for (long i\
    \ : lst) {\n            if (i < mid) {\n                result.add(i);\n     \
    \       } else if (i > mid) {\n                result.add(curr);\n           \
    \     result.add(nextMin);\n                result.add(nextMax);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n           \
    \     result.add(nextMax);\n                result.add(nextMin);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnfebl6pb.java:92: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659798759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long current\
    \ = min;\n        long nextMax = max;\n        long nextMin = min;\n        long\
    \ nextCurrent = current;\n        long nextNextMax = nextMax;\n        long nextNextMin\
    \ = nextMin;\n        long nextNextCurrent = nextCurrent;\n        long nextNextNextMax\
    \ = nextNextMax;\n        long nextNextNextMin = nextNextMin;\n        long nextNextNextCurrent\
    \ = nextNextCurrent;\n        long nextNextNextNextMax = nextNextNextMax;\n  \
    \      long nextNextNextNextMin = nextNextNextMin;\n        long nextNextNextNextCurrent\
    \ = nextNextNextCurrent;\n        long nextNextNextNextNextMax = nextNextNextNextMax;\n\
    \        long nextNextNextNextNextMin = nextNextNextNextMin;\n        long nextNextNextNextNextCurrent\
    \ = nextNextNextNextCurrent;\n        long nextNextNextNextNextNextMax = nextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextMin = nextNextNextNextNextMin;\n       \
    \ long nextNextNextNextNextNextCurrent = nextNextNextNextNextCurrent;\n      \
    \  long nextNextNextNextNextNextNextMax = nextNextNextNextNextNextMax;\n     \
    \   long nextNextNextNextNextNextNextMin = nextNextNextNextNextNextMin;\n    \
    \    long nextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextNextMin\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp89eqweag.java:52: error: ';' expected\n        long nextNextNextNextNextNextNextNextNextMin\n\
    \                                                    ^\n1 error\n"
  stdout: ''
  timestamp: 1659798759
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long current\
    \ = min;\n        long nextMax = max;\n        long nextMin = min;\n        do\
    \ {\n            result.add(current);\n            nextMax = nextMax + 1;\n  \
    \          nextMin = nextMin - 1;\n            current = nextMax;\n        } while\
    \ (current != nextMin);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659798765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().mapToLong(i -> i).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(i -> i).max().getAsLong();\n      \
    \  long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long\
    \ mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 /\
    \ 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long\
    \ mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 /\
    \ 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n     \
    \   long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15\
    \ = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 /\
    \ 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n     \
    \   long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 /\
    \ 2;\n        long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n     \
    \   \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdbqmyaor.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long current\
    \ = min;\n        long nextMax = max;\n        long nextMin = min;\n        do\
    \ {\n            result.add(current);\n            nextMax = nextMax + 1;\n  \
    \          nextMin = nextMin - 1;\n            current = nextMax;\n        } while\
    \ (current != nextMin);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659798765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpurmqi6q9.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4q31vq6.java:64: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpurmqi6q9.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        for(long i : lst) {\n\
    \            result.add(i);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptotb0p9c.java:28)\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long current\
    \ = min;\n        long nextMax = max;\n        long nextMin = min;\n        while(current\
    \ != nextMax) {\n            result.add(current);\n            nextMax = nextMax\
    \ + 1;\n        }\n        current = min;\n        while(current != nextMin) {\n\
    \            result.add(current);\n            nextMin = nextMin - 1;\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659798766
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpurmqi6q9.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp03499q5q.java:71: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpurmqi6q9.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long current\
    \ = min;\n        long next = max;\n        do {\n            result.add(current);\n\
    \            current = next;\n            next = current + 1;\n        } while\
    \ (next <= max);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_86bumfq.java:33)\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        for (Long i : lst) {\n            result.add(i);\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjguaug93.java:29)\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long minValue = lst.get(0);\n        Long maxValue =\
    \ lst.get(lst.size() - 1);\n        Long minIndex = lst.indexOf(minValue);\n \
    \       Long maxIndex = lst.indexOf(maxValue);\n        Long temp;\n        for(int\
    \ i = 0; i < lst.size(); i++) {\n            temp = lst.get(i);\n            if(minIndex\
    \ == lst.indexOf(temp)) {\n                result.add(temp);\n               \
    \ minIndex = lst.indexOf(temp);\n            }\n            else if(maxIndex ==\
    \ lst.indexOf(temp)) {\n                result.add(temp);\n                maxIndex\
    \ = lst.indexOf(temp);\n            }\n            else if(minIndex != lst.indexOf(temp))\
    \ {\n                result.add(temp);\n                minIndex = lst.indexOf(temp);\n\
    \            }\n            else if(maxIndex != lst.indexOf(temp)) {\n       \
    \         result.add(temp);\n                maxIndex = lst.indexOf(temp);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp60aqcy6a.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n        Long minIndex = lst.indexOf(minValue);\n                  \
    \                 ^\n/tmp/tmp60aqcy6a.java:24: error: incompatible types: int\
    \ cannot be converted to Long\n        Long maxIndex = lst.indexOf(maxValue);\n\
    \                                   ^\n/tmp/tmp60aqcy6a.java:30: error: incompatible\
    \ types: int cannot be converted to Long\n                minIndex = lst.indexOf(temp);\n\
    \                                      ^\n/tmp/tmp60aqcy6a.java:34: error: incompatible\
    \ types: int cannot be converted to Long\n                maxIndex = lst.indexOf(temp);\n\
    \                                      ^\n/tmp/tmp60aqcy6a.java:38: error: incompatible\
    \ types: int cannot be converted to Long\n                minIndex = lst.indexOf(temp);\n\
    \                                      ^\n/tmp/tmp60aqcy6a.java:42: error: incompatible\
    \ types: int cannot be converted to Long\n                maxIndex = lst.indexOf(temp);\n\
    \                                      ^\n6 errors\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i = min; i <=\
    \ max; i++) {\n            temp = i;\n            for (long j = mid; j >= min;\
    \ j--) {\n                if (lst.get(j) > temp) {\n                    temp =\
    \ lst.get(j);\n                }\n            }\n            result.add(temp);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprqyp5wm1.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n                if (lst.get(j) > temp) {\n               \
    \             ^\n/tmp/tmprqyp5wm1.java:29: error: incompatible types: possible\
    \ lossy conversion from long to int\n                    temp = lst.get(j);\n\
    \                                   ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        for (long i = min; i <= max; i++) {\n    \
    \        if (lst.contains(i)) {\n                result.add(i);\n            }\n\
    \        }\n        if (result.isEmpty()) {\n            result.add(min);\n  \
    \      }\n        if (result.isEmpty()) {\n            result.add(max);\n    \
    \    }\n        if (result.isEmpty()) {\n            result.add(mid);\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy9nbrgz2.java:41)\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long minValue = lst.get(0);\n        long maxValue =\
    \ lst.get(lst.size() - 1);\n        long currentMinValue = minValue;\n       \
    \ long currentMaxValue = maxValue;\n        long currentMinIndex = -1;\n     \
    \   long currentMaxIndex = -1;\n        boolean isMax = true;\n        boolean\
    \ isMin = true;\n        boolean isFirst = true;\n        boolean isLast = true;\n\
    \        boolean isMiddle = true;\n        boolean isMiddleMiddle = true;\n  \
    \      boolean isMiddleLast = true;\n        boolean isMiddleFirst = true;\n \
    \       boolean isMiddleMiddleFirst = true;\n        boolean isMiddleMiddleLast\
    \ = true;\n        boolean isMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleLast\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddle = true;\n        boolean\
    \ isMiddleMiddleMiddleMiddleLast = true;\n        boolean isMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleLast = true;\n    \
    \    boolean isMiddleMiddleMiddleMiddleMiddleMiddle = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleLast\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n\
    \        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleLast = true;\n  \
    \      boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n  \
    \      boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleLast = true;\n    \
    \    boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n\
    \        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleLast = true;\n\
    \        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddle = true;\n\
    \        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleLast = true;\n\
    \        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleLast\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleLast\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleLast\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleLast\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleLast\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddle\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddleLast\
    \ = true;\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddle\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8q9aeuc4.java:65: error: ';' expected\n        boolean isMiddleMiddleMiddleMiddleMiddleMiddleMiddleMiddle\n\
    \                                                                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long temp;\n        for (long i = min; i <=\
    \ max; i++) {\n            temp = i;\n            while (lst.contains(temp)) {\n\
    \                temp = temp * 2;\n            }\n            result.add(temp);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpox83o03v.java:35)\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (long i : lst) {\n            if (i < mid) {\n \
    \               result.add(i);\n                min = i;\n            } else if\
    \ (i > mid) {\n                result.add(max);\n                max = i;\n  \
    \          } else {\n                result.add(min);\n                min = i;\n\
    \                max = i;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptl3nc_6p.java:43)\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long curr\
    \ = min;\n        long nextMin = min;\n        long nextMax = max;\n        while(curr\
    \ <= max) {\n            while(nextMin <= nextMax && lst.contains(nextMin)) {\n\
    \                nextMin++;\n            }\n            while(nextMax >= nextMin\
    \ && lst.contains(nextMax)) {\n                nextMax--;\n            }\n   \
    \         result.add(curr);\n            curr++;\n            nextMin++;\n   \
    \         nextMax--;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp34a4nogz.java:41)\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (long i : lst) {\n            if (i > mid) {\n \
    \               max = i;\n            } else if (i < mid) {\n                min\
    \ = i;\n            }\n            result.add(min);\n            result.add(max);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp76xy5m9z.java:39)\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsp1kh4cp.java:55: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpsp1kh4cp.java:55: error: ';' expected\n    }\n     ^\n/tmp/tmpsp1kh4cp.java:56:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpsp1kh4cp.java:56: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpsp1kh4cp.java:56: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpsp1kh4cp.java:56: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpsp1kh4cp.java:68: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (Long i : lst) {\n            if (i < min) {\n \
    \               min = i;\n            } else if (i > max) {\n                max\
    \ = i;\n            }\n            result.add(i);\n        }\n        result.add(min);\n\
    \        result.add(max);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmtva6lav.java:40)\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long minValue = lst.get(0);\n        Long maxValue =\
    \ lst.get(lst.size() - 1);\n        Long minIndex = lst.indexOf(minValue);\n \
    \       Long maxIndex = lst.indexOf(maxValue);\n        Long minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1);\n        Long maxIndex2 = lst.indexOf(maxValue, maxIndex + 1);\n\
    \        Long minIndex3 = lst.indexOf(minValue, minIndex + 2);\n        Long maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex + 2);\n        Long minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 3);\n        Long maxIndex4 = lst.indexOf(maxValue, maxIndex + 3);\n\
    \        Long minIndex5 = lst.indexOf(minValue, minIndex + 4);\n        Long maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex + 4);\n        Long minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 5);\n        Long maxIndex6 = lst.indexOf(maxValue, maxIndex + 5);\n\
    \        Long minIndex7 = lst.indexOf(minValue, minIndex + 6);\n        Long maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex + 6);\n        Long minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 7);\n        Long maxIndex8 = lst.indexOf(maxValue, maxIndex + 7);\n\
    \        Long minIndex9 = lst.indexOf(minValue, minIndex + 8);\n        Long maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex + 8);\n        Long minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 9);\n        Long maxIndex10 = lst.indexOf(maxValue, maxIndex + 9);\n\
    \        Long minIndex11 = lst.indexOf(minValue, minIndex + 10);\n        Long\
    \ maxIndex11 = lst.indexOf(maxValue, maxIndex + 10);\n        Long minIndex12\
    \ = lst.indexOf(minValue, minIndex + 11);\n        Long maxIndex12 = lst.indexOf(maxValue,\
    \ maxIndex + 11);\n        Long minIndex13 = lst.indexOf(minValue, minIndex +\
    \ 12);\n        Long maxIndex13 = lst.indexOf(maxValue, maxIndex + 12);\n    \
    \    Long minIndex14 = lst.indexOf(minValue, minIndex + 13);\n        Long maxIndex14\
    \ = lst.indexOf(maxValue, maxIndex + 13);\n        Long minIndex15 = lst.indexOf(minValue,\
    \ minIndex + 14);\n        Long maxIndex15 = lst.indexOf(maxValue, maxIndex +\
    \ 14);\n        Long minIndex16 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2fooa7z8.java:54: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long curr = min;\n     \
    \   long nextMax = max;\n        long nextMin = min;\n        long nextCurr =\
    \ curr;\n        long nextNextMax = nextMax;\n        long nextNextMin = nextMin;\n\
    \        long nextNextCurr = nextCurr;\n        long nextNextNextMax = nextNextMax;\n\
    \        long nextNextNextMin = nextNextMin;\n        long nextNextNextCurr =\
    \ nextNextCurr;\n        long nextNextNextNextMax = nextNextNextMax;\n       \
    \ long nextNextNextNextMin = nextNextNextMin;\n        long nextNextNextNextCurr\
    \ = nextNextNextCurr;\n        long nextNextNextNextNextMax = nextNextNextNextMax;\n\
    \        long nextNextNextNextNextMin = nextNextNextNextMin;\n        long nextNextNextNextNextCurr\
    \ = nextNextNextNextCurr;\n        long nextNextNextNextNextNextMax = nextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextMin = nextNextNextNextNextMin;\n       \
    \ long nextNextNextNextNextNextCurr = nextNextNextNextNextCurr;\n        long\
    \ nextNextNextNextNextNextNextMax = nextNextNextNextNextNextMax;\n        long\
    \ nextNextNextNextNextNextMin = nextNextNextNextNextNextMin;\n        long nextNextNextNextNextNextCurr\
    \ = nextNextNextNextNextNextCurr;\n        long nextNextNextNextNextNextNextMax\
    \ = nextNextNextNextNextNextNextMax;\n        long nextNextNextNextNextNextMin\
    \ = nextNextNextNextNextNextNextMin;\n        long nextNextNextNextNextNextCurr\
    \ = nextNextNextNextNextNextCurr;\n        long nextNextNextNextNextNextNextMax\
    \ = nextNextNextNextNextNextNextMax;\n        long nextNextNextNextNextNextMin\
    \ = nextNextNextNextNextNextNextMin;\n        long nextNextNextNextNextNextCurr\
    \ = nextNextNextNextNextNextNextCurr;\n        long nextNextNextNextNextNextNextMax\
    \ = nextNextNextNextNextNextNextMax;\n        long nextNextNextNextNextNextMin\
    \ = nextNextNextNextNextNextNextMin;\n        long nextNextNextNextNextNextCurr\
    \ = nextNext\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp30yuh7u8.java:53: error: ';' expected\n        long nextNextNextNextNextNextCurr\
    \ = nextNext\n                                                    ^\n1 error\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsp1kh4cp.java:55: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpsp1kh4cp.java:55: error: ';' expected\n    }\n     ^\n/tmp/tmpsp1kh4cp.java:56:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpsp1kh4cp.java:56: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpsp1kh4cp.java:56: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpsp1kh4cp.java:56: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpsp1kh4cp.java:68: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n       \
    \ long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().getAsLong();\n\
    \        long max = lst.stream().max().getAsLong();\n        long min = lst.stream().min().get\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph6_up8g7.java:59: error: ';' expected\n        long min = lst.stream().min().get\n\
    \                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long minValue = lst.get(0);\n        long maxValue =\
    \ lst.get(lst.size() - 1);\n        long minIndex = -1;\n        long maxIndex\
    \ = -1;\n        long currentValue = minValue;\n        long currentIndex = -1;\n\
    \        boolean isFirst = true;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            if (currentValue == maxValue) {\n                result.add(currentValue);\n\
    \                currentValue = minValue;\n                currentIndex = i;\n\
    \                isFirst = true;\n            } else if (currentValue == minValue)\
    \ {\n                result.add(currentValue);\n                currentValue =\
    \ maxValue;\n                currentIndex = i;\n                isFirst = false;\n\
    \            } else if (currentValue == lst.get(i)) {\n                if (isFirst)\
    \ {\n                    currentValue = lst.get(i);\n                    currentIndex\
    \ = i;\n                    isFirst = false;\n                } else {\n     \
    \               currentValue = lst.get(i);\n                    currentIndex =\
    \ i;\n                    isFirst = true;\n                }\n            } else\
    \ {\n                result.add(currentValue);\n                currentValue =\
    \ lst.get(i);\n                currentIndex = i;\n                isFirst = true;\n\
    \            }\n        }\n        result.add(currentValue);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp29ieo6if.java:60)\n"
  stdout: ''
  timestamp: 1659798762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long min = lst.stream().min().getAsLong();\n        long max = lst.stream().max().getAsLong();\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = min + (max - min)\
    \ / 2;\n        long mid3 = min + (max - min) / 2;\n        long mid4 = min +\
    \ (max - min) / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6\
    \ = min + (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n     \
    \   long mid8 = min + (max - min) / 2;\n        long mid9 = min + (max - min)\
    \ / 2;\n        long mid10 = min + (max - min) / 2;\n        long mid11 = min\
    \ + (max - min) / 2;\n        long mid12 = min + (max - min) / 2;\n        long\
    \ mid13 = min + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n\
    \        long mid15 = min + (max - min) / 2;\n        long mid16 = min + (max\
    \ - min) / 2;\n        long mid17 = min + (max - min) / 2;\n        long mid18\
    \ = min + (max - min) / 2;\n        long mid19 = min + (max - min) / 2;\n    \
    \    long mid20 = min + (max - min) / 2;\n        long mid21 = min + (max - min)\
    \ / 2;\n        long mid22 = min + (max - min) / 2;\n        long mid23 = min\
    \ + (max - min) / 2;\n        long mid24 = min + (max - min) / 2;\n        long\
    \ mid25 = min + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n\
    \        long mid27 = min + (max - min) / 2;\n        long mid28 = min + (max\
    \ - min) / 2;\n        long mid29 = min + (max - min) / 2;\n        long mid30\
    \ = min + (max - min) / 2;\n        long mid31 = min + (max - min) / 2;\n    \
    \    long mid32 = min + (max - min) / 2;\n        long mid33 = min + (max - min)\
    \ / 2;\n        long mid34 = min + (max - min) / 2;\n        long mid35 = min\
    \ + (max - min) / 2;\n        long mid36 = min + (max - min) / 2;\n        long\
    \ mid37 = min + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n\
    \        long mid39 = min + (max - min) / 2;\n        long mid40 = min + (max\
    \ - min) / 2;\n        long mid41 = min + (max - min\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_v8z2zex.java:63: error: ')' expected\n        long mid41 = min\
    \ + (max - min\n                                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        Long cur = mid;\n\
    \        Long next = mid;\n        for (Long i : lst) {\n            if (i.compareTo(cur)\
    \ < 0) {\n                result.add(cur);\n                cur = i;\n       \
    \     } else if (i.compareTo(cur) > 0) {\n                result.add(next);\n\
    \                next = i;\n            }\n        }\n        result.add(next);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj_kvuiy8.java:40)\n"
  stdout: ''
  timestamp: 1659798762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        Long mid2 = min + (max - min) / 2;\n     \
    \   Long mid3 = min + (max - min) / 2;\n        Long mid4 = min + (max - min)\
    \ / 2;\n        Long mid5 = min + (max - min) / 2;\n        Long mid6 = min +\
    \ (max - min) / 2;\n        Long mid7 = min + (max - min) / 2;\n        Long mid8\
    \ = min + (max - min) / 2;\n        Long mid9 = min + (max - min) / 2;\n     \
    \   Long mid10 = min + (max - min) / 2;\n        Long mid11 = min + (max - min)\
    \ / 2;\n        Long mid12 = min + (max - min) / 2;\n        Long mid13 = min\
    \ + (max - min) / 2;\n        Long mid14 = min + (max - min) / 2;\n        Long\
    \ mid15 = min + (max - min) / 2;\n        Long mid16 = min + (max - min) / 2;\n\
    \        Long mid17 = min + (max - min) / 2;\n        Long mid18 = min + (max\
    \ - min) / 2;\n        Long mid19 = min + (max - min) / 2;\n        Long mid20\
    \ = min + (max - min) / 2;\n        Long mid21 = min + (max - min) / 2;\n    \
    \    Long mid22 = min + (max - min) / 2;\n        Long mid23 = min + (max - min)\
    \ / 2;\n        Long mid24 = min + (max - min) / 2;\n        Long mid25 = min\
    \ + (max - min) / 2;\n        Long mid26 = min + (max - min) / 2;\n        Long\
    \ mid27 = min + (max - min) / 2;\n        Long mid28 = min + (max - min) / 2;\n\
    \        Long mid29 = min + (max - min) / 2;\n        Long mid30 = min + (max\
    \ - min) / 2;\n        Long mid31 = min + (max - min) / 2;\n        Long mid32\
    \ = min + (max - min) / 2;\n        Long mid33 = min + (max - min) / 2;\n    \
    \    Long mid34 = min + (max - min) / 2;\n        Long mid35 = min + (max - min)\
    \ / 2;\n        Long mid36 = min + (max - min) / 2;\n        Long mid37 = min\
    \ + (max - min) / 2;\n        Long\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn1vwf8ap.java:60: error: not a statement\n        Long\n      \
    \  ^\n/tmp/tmpn1vwf8ap.java:60: error: ';' expected\n        Long\n          \
    \  ^\n2 errors\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i = min; i <=\
    \ max; i++) {\n            temp = i;\n            for (long j = mid; j > min;\
    \ j--) {\n                if (lst.get(j) < temp) {\n                    temp =\
    \ lst.get(j);\n                }\n            }\n            result.add(temp);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyepos6ix.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n                if (lst.get(j) < temp) {\n               \
    \             ^\n/tmp/tmpyepos6ix.java:29: error: incompatible types: possible\
    \ lossy conversion from long to int\n                    temp = lst.get(j);\n\
    \                                   ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Long minValue = lst.get(0);\n\
    \        Long maxValue = lst.get(lst.size() - 1);\n        Long minIndex = Collections.binarySearch(lst,minValue);\n\
    \        Long maxIndex = Collections.binarySearch(lst,maxValue);\n        Long\
    \ minIndex2 = Collections.binarySearch(lst,minValue,minIndex);\n        Long maxIndex2\
    \ = Collections.binarySearch(lst,maxValue,maxIndex);\n        Long minIndex3 =\
    \ Collections.binarySearch(lst,minValue,minIndex2);\n        Long maxIndex3 =\
    \ Collections.binarySearch(lst,maxValue,maxIndex2);\n        Long minIndex4 =\
    \ Collections.binarySearch(lst,minValue,minIndex3);\n        Long maxIndex4 =\
    \ Collections.binarySearch(lst,maxValue,maxIndex3);\n        Long minIndex5 =\
    \ Collections.binarySearch(lst,minValue,minIndex4);\n        Long maxIndex5 =\
    \ Collections.binarySearch(lst,maxValue,maxIndex4);\n        Long minIndex6 =\
    \ Collections.binarySearch(lst,minValue,minIndex5);\n        Long maxIndex6 =\
    \ Collections.binarySearch(lst,maxValue,maxIndex5);\n        Long minIndex7 =\
    \ Collections.binarySearch(lst,minValue,minIndex6);\n        Long maxIndex7 =\
    \ Collections.binarySearch(lst,maxValue,maxIndex6);\n        Long minIndex8 =\
    \ Collections.binarySearch(lst,minValue,minIndex7);\n        Long maxIndex8 =\
    \ Collections.binarySearch(lst,maxValue,maxIndex7);\n        Long minIndex9 =\
    \ Collections.binarySearch(lst,minValue,minIndex8);\n        Long maxIndex9 =\
    \ Collections.binarySearch(lst,maxValue,maxIndex8);\n        Long minIndex10 =\
    \ Collections.binarySearch(lst,minValue,minIndex9);\n        Long maxIndex10 =\
    \ Collections.binarySearch(lst,maxValue,maxIndex9);\n        Long minIndex11 =\
    \ Collections.binarySearch(lst,minValue,minIndex10);\n        Long maxIndex11\
    \ = Collections.binarySearch(lst,maxValue,maxIndex10);\n        Long minIndex12\
    \ = Collections.binarySearch(lst,minValue,minIndex11);\n        Long maxIndex12\
    \ = Collections.binarySearch(lst,maxValue,maxIndex11);\n        Long minIndex13\
    \ = Collections.binarySearch(lst,minValue,minIndex12);\n        Long maxIndex13\
    \ = Collections.binarySearch(\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_b_or03c.java:50: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsp1kh4cp.java:55: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpsp1kh4cp.java:55: error: ';' expected\n    }\n     ^\n/tmp/tmpsp1kh4cp.java:56:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpsp1kh4cp.java:56: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpsp1kh4cp.java:56: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpsp1kh4cp.java:56: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpsp1kh4cp.java:68: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpurmqi6q9.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min().getAsLong();\n   \
    \     long max = lst.stream().max().getAsLong();\n        long current = min;\n\
    \        long nextMax = max;\n        long nextMin = min;\n        while (current\
    \ <= max) {\n            result.add(current);\n            current = nextMax;\n\
    \            nextMax = nextMin;\n            nextMin = lst.stream().filter(i ->\
    \ i == current).min().getAsLong();\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvkfjuh0m.java:21: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpvkfjuh0m.java:22: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpvkfjuh0m.java:30: error: method min in interface Stream<T> cannot be applied\
    \ to given types;\n            nextMin = lst.stream().filter(i -> i == current).min().getAsLong();\n\
    \                                                            ^\n  required: Comparator<?\
    \ super Long>\n  found:    no arguments\n  reason: actual and formal argument\
    \ lists differ in length\n  where T is a type-variable:\n    T extends Object\
    \ declared in interface Stream\n3 errors\n"
  stdout: ''
  timestamp: 1659798762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        for (Long i : lst) {\n            result.add(i);\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjguaug93.java:29)\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long current\
    \ = min;\n        Long next = max;\n        while (current != next) {\n      \
    \      result.add(current);\n            current = next;\n            next = lst.stream().filter(i\
    \ -> i.longValue() == current).min(Long::compareTo).get();\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkvubf52.java:28: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n            next = lst.stream().filter(i\
    \ -> i.longValue() == current).min(Long::compareTo).get();\n                 \
    \                                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659798762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid / 3;\n        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n     \
    \   long mid6 = mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid\
    \ / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid / 10;\n       \
    \ long mid11 = mid / 11;\n        long mid12 = mid / 12;\n        long mid13 =\
    \ mid / 13;\n        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n\
    \        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long\
    \ mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid\
    \ / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid / 22;\n    \
    \    long mid23 = mid / 23;\n        long mid24 = mid / 24;\n        long mid25\
    \ = mid / 25;\n        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n\
    \        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long\
    \ mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid\
    \ / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid / 34;\n    \
    \    long mid35 = mid / 35;\n        long mid36 = mid / 36;\n        long mid37\
    \ = mid / 37;\n        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n\
    \        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long\
    \ mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid\
    \ / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid / 46;\n    \
    \    long mid47 = mid / 47;\n        long mid48 = mid / 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupek4yp4.java:71: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long minValue = lst.get(0);\n        long maxValue =\
    \ lst.get(lst.size() - 1);\n        long currentMinValue = minValue;\n       \
    \ long currentMaxValue = maxValue;\n        long currentMinIndex = -1;\n     \
    \   long currentMaxIndex = -1;\n        boolean isFirst = true;\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            if (isFirst) {\n                currentMinValue\
    \ = lst.get(i);\n                currentMinIndex = i;\n                currentMaxValue\
    \ = lst.get(i);\n                currentMaxIndex = i;\n                isFirst\
    \ = false;\n            } else {\n                long currentValue = lst.get(i);\n\
    \                if (currentValue < currentMinValue) {\n                    currentMinValue\
    \ = currentValue;\n                    currentMinIndex = i;\n                }\n\
    \                if (currentValue > currentMaxValue) {\n                    currentMaxValue\
    \ = currentValue;\n                    currentMaxIndex = i;\n                }\n\
    \            }\n        }\n        Collections.sort(lst);\n        for (int i\
    \ = 0; i < lst.size(); i++) {\n            if (i == currentMinIndex) {\n     \
    \           result.add(currentMinValue);\n            } else if (i == currentMaxIndex)\
    \ {\n                result.add(currentMaxValue);\n            } else {\n    \
    \            result.add(lst.get(i));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnfnqy4kk.java:60)\n"
  stdout: ''
  timestamp: 1659798762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long minValue = lst.get(0);\n        long maxValue =\
    \ lst.get(lst.size() - 1);\n        long currentMin = minValue;\n        long\
    \ currentMax = maxValue;\n        long currentSum = 0;\n        long currentProduct\
    \ = 1;\n        long currentProductSum = 0;\n        long currentProductProduct\
    \ = 1;\n        long currentProductProductSum = 0;\n        long currentProductProductProduct\
    \ = 1;\n        long currentProductProductProductSum = 0;\n        long currentProductProductProductProduct\
    \ = 1;\n        long currentProductProductProductProductSum = 0;\n        long\
    \ currentProductProductProductProductProduct = 1;\n        long currentProductProductProductProductProductSum\
    \ = 0;\n        long currentProductProductProductProductProductProduct = 1;\n\
    \        long currentProductProductProductProductProductProductSum = 0;\n    \
    \    long currentProductProductProductProductProductProduct = 1;\n        long\
    \ currentProductProductProductProductProductProductSum = 0;\n        long currentProductProductProductProductProductProductProduct\
    \ = 1;\n        long currentProductProductProductProductProductProductProductSum\
    \ = 0;\n        long currentProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long currentProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long currentProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long currentProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long currentProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long currentProductProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long currentProductProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long currentProductProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long currentProductProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long currentProductProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long currentProductProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long currentProductProductProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long currentProductProductProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long currentProductProductProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long currentProductProductProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long currentProductProductProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long currentProductProductProductProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n        long currentProductProductProductProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n        long currentProductProductProductProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoc4qwo_k.java:38: error: variable currentProductProductProductProductProductProduct\
    \ is already defined in method strangeSortList(ArrayList<Long>)\n        long\
    \ currentProductProductProductProductProductProduct = 1;\n             ^\n/tmp/tmpoc4qwo_k.java:39:\
    \ error: variable currentProductProductProductProductProductProductSum is already\
    \ defined in method strangeSortList(ArrayList<Long>)\n        long currentProductProductProductProductProductProductSum\
    \ = 0;\n             ^\n/tmp/tmpoc4qwo_k.java:49: error: variable currentProductProductProductProductProductProductProductProductProductProductSum\
    \ is already defined in method strangeSortList(ArrayList<Long>)\n        long\
    \ currentProductProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n             ^\n/tmp/tmpoc4qwo_k.java:50: error: variable currentProductProductProductProductProductProductProductProductProductProductProduct\
    \ is already defined in method strangeSortList(ArrayList<Long>)\n        long\
    \ currentProductProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n             ^\n/tmp/tmpoc4qwo_k.java:51: error: variable currentProductProductProductProductProductProductProductProductProductProductSum\
    \ is already defined in method strangeSortList(ArrayList<Long>)\n        long\
    \ currentProductProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n             ^\n/tmp/tmpoc4qwo_k.java:52: error: variable currentProductProductProductProductProductProductProductProductProductProductProduct\
    \ is already defined in method strangeSortList(ArrayList<Long>)\n        long\
    \ currentProductProductProductProductProductProductProductProductProductProductProduct\
    \ = 1;\n             ^\n/tmp/tmpoc4qwo_k.java:55: error: variable currentProductProductProductProductProductProductProductProductProductProductProductSum\
    \ is already defined in method strangeSortList(ArrayList<Long>)\n        long\
    \ currentProductProductProductProductProductProductProductProductProductProductProductSum\
    \ = 0;\n             ^\n/tmp/tmpoc4qwo_k.java:56: error: variable c"
  stdout: ''
  timestamp: 1659798762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        Collections.sort(lst);\n        Long min = lst.get(0);\n        Long\
    \ max = lst.get(lst.size() - 1);\n        Long mid = min + ((max - min) / 2);\n\
    \        Long temp;\n        for (int i = 0; i < lst.size(); i++) {\n        \
    \    temp = lst.get(i);\n            if (temp < mid) {\n                res.add(temp);\n\
    \                res.add(mid);\n                res.add(max);\n              \
    \  res.add(min);\n                res.add(lst.get(i + 1));\n                res.add(lst.get(i\
    \ + 2));\n                res.add(lst.get(i + 3));\n                res.add(lst.get(i\
    \ + 4));\n                res.add(lst.get(i + 5));\n                res.add(lst.get(i\
    \ + 6));\n                res.add(lst.get(i + 7));\n                res.add(lst.get(i\
    \ + 8));\n                res.add(lst.get(i + 9));\n                res.add(lst.get(i\
    \ + 10));\n                res.add(lst.get(i + 11));\n                res.add(lst.get(i\
    \ + 12));\n                res.add(lst.get(i + 13));\n                res.add(lst.get(i\
    \ + 14));\n                res.add(lst.get(i + 15));\n                res.add(lst.get(i\
    \ + 16));\n                res.add(lst.get(i + 17));\n                res.add(lst.get(i\
    \ + 18));\n                res.add(lst.get(i + 19));\n                res.add(lst.get(i\
    \ + 20));\n                res.add(lst.get(i + 21));\n                res.add(lst.get(i\
    \ + 22));\n                res.add(lst.get(i + 23));\n                res.add(lst.get(i\
    \ + 24));\n                res.add(lst.get(i + 25));\n                res.add(lst.get(i\
    \ + 26));\n                res.add(lst.get(i + 27));\n                res.add(lst.get(i\
    \ + 28));\n                res.add(lst.get(i + 29));\n                res.add(lst.get(i\
    \ + 30));\n                res.add(lst.get(i + 31));\n                res.add(lst.get(i\
    \ + 32));\n                res.add(lst.get(i + 33));\n                res.add(lst.get(i\
    \ + 34));\n                res.add(lst.get(i + 35));\n                res.add(lst.get(i\
    \ + 36));\n                res.add(lst.get(i + 37));\n                res.add(lst.get(i\
    \ + 38));\n                res.add(lst.get(i + 39));\n                res.add(lst.get(i\
    \ + 40));\n                res.add(lst.get(i + 41));\n                res.add(lst.get(i\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8iho1fj.java:74: error: ')' expected\n                res.add(lst.get(i\n\
    \                                 ^\n/tmp/tmpv8iho1fj.java:76: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n2\
    \ errors\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp03499q5q.java:71: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long curr\
    \ = min;\n        long next = max;\n        while(curr < max) {\n            result.add(curr);\n\
    \            curr++;\n            next = curr;\n            while(next < max)\
    \ {\n                result.add(next);\n                next++;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprz31q6l3.java:37)\n"
  stdout: ''
  timestamp: 1659798762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long minValue = lst.get(0);\n        Long maxValue =\
    \ lst.get(lst.size() - 1);\n        Long currentMinValue = minValue;\n       \
    \ Long currentMaxValue = maxValue;\n        Long currentMinIndex = 0;\n      \
    \  Long currentMaxIndex = 0;\n        Long currentMinValueIndex = 0;\n       \
    \ Long currentMaxValueIndex = 0;\n        Long currentMinValueIndex2 = 0;\n  \
    \      Long currentMaxValueIndex2 = 0;\n        Long currentMinValueIndex3 = 0;\n\
    \        Long currentMaxValueIndex3 = 0;\n        Long currentMinValueIndex4 =\
    \ 0;\n        Long currentMaxValueIndex4 = 0;\n        Long currentMinValueIndex5\
    \ = 0;\n        Long currentMaxValueIndex5 = 0;\n        Long currentMinValueIndex6\
    \ = 0;\n        Long currentMaxValueIndex6 = 0;\n        Long currentMinValueIndex7\
    \ = 0;\n        Long currentMaxValueIndex7 = 0;\n        Long currentMinValueIndex8\
    \ = 0;\n        Long currentMaxValueIndex8 = 0;\n        Long currentMinValueIndex9\
    \ = 0;\n        Long currentMaxValueIndex9 = 0;\n        Long currentMinValueIndex10\
    \ = 0;\n        Long currentMaxValueIndex10 = 0;\n        Long currentMinValueIndex11\
    \ = 0;\n        Long currentMaxValueIndex11 = 0;\n        Long currentMinValueIndex12\
    \ = 0;\n        Long currentMaxValueIndex12 = 0;\n        Long currentMinValueIndex13\
    \ = 0;\n        Long currentMaxValueIndex13 = 0;\n        Long currentMinValueIndex14\
    \ = 0;\n        Long currentMaxValueIndex14 = 0;\n        Long currentMinValueIndex15\
    \ = 0;\n        Long currentMaxValueIndex15 = 0;\n        Long currentMinValueIndex16\
    \ = 0;\n        Long currentMaxValueIndex16 = 0;\n        Long currentMinValueIndex17\
    \ = 0;\n        Long currentMaxValueIndex17 = 0;\n        Long currentMinValueIndex18\
    \ = 0;\n        Long currentMaxValueIndex18 = 0;\n        Long currentMinValueIndex19\
    \ = 0;\n        Long currentMaxValueIndex19 = 0;\n        Long currentMinValueIndex20\
    \ = 0;\n        Long currentMaxValueIndex20 = 0;\n        Long currentMinValueIndex21\
    \ = 0;\n        Long currentMaxValueIndex21 = 0;\n        Long currentMinValueIndex22\
    \ = 0;\n        Long currentMaxValueIndex22 = 0;\n        Long currentMinValueIndex23\
    \ = 0;\n        Long currentMaxValueIndex\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdgjgjc4a.java:72: error: ';' expected\n        Long currentMaxValueIndex\n\
    \                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659798762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = m\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqylpefs1.java:71: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long min = null;\n        Long max = null;\n       \
    \ for (Long i : lst) {\n            if (min == null || i < min) {\n          \
    \      min = i;\n            }\n            if (max == null || i > max) {\n  \
    \              max = i;\n            }\n        }\n        if (min == max) {\n\
    \            result.add(min);\n            return result;\n        }\n       \
    \ Long mid = (min + max) / 2;\n        ArrayList<Long> left = new ArrayList<>();\n\
    \        ArrayList<Long> right = new ArrayList<>();\n        for (Long i : lst)\
    \ {\n            if (i < mid) {\n                left.add(i);\n            } else\
    \ {\n                right.add(i);\n            }\n        }\n        left = strangeSortList(left);\n\
    \        right = strangeSortList(right);\n        left.addAll(right);\n      \
    \  result.addAll(left);\n        result.add(mid);\n        result.addAll(right);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.util.ArrayList.grow(ArrayList.java:244)\n\
    \tat java.base/java.util.ArrayList.add(ArrayList.java:454)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:467)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:32)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:45)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\
    \tat Problem.strangeSortList(tmpfxr4hi4o.java:46)\n\tat "
  stdout: ''
  timestamp: 1659798763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long current\
    \ = min;\n        long nextMax = max;\n        long nextMin = min;\n        boolean\
    \ isFirst = true;\n        for (long i : lst) {\n            if (isFirst) {\n\
    \                result.add(current);\n                isFirst = false;\n    \
    \        }\n            if (i.compareTo(current) < 0) {\n                result.add(current);\n\
    \                current = i;\n            } else if (i.compareTo(current) > 0)\
    \ {\n                result.add(nextMax);\n                nextMax = i;\n    \
    \        } else if (i.compareTo(current) == 0) {\n                result.add(nextMin);\n\
    \                nextMin = i;\n            }\n        }\n        result.add(nextMax);\n\
    \        result.add(nextMin);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8h2ppl85.java:32: error: long cannot be dereferenced\n        \
    \    if (i.compareTo(current) < 0) {\n                 ^\n/tmp/tmp8h2ppl85.java:35:\
    \ error: long cannot be dereferenced\n            } else if (i.compareTo(current)\
    \ > 0) {\n                        ^\n/tmp/tmp8h2ppl85.java:38: error: long cannot\
    \ be dereferenced\n            } else if (i.compareTo(current) == 0) {\n     \
    \                   ^\n3 errors\n"
  stdout: ''
  timestamp: 1659798762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().mapToLong(Long::longValue).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(Long::longValue).max().getAsLong();\n\
    \        long current = min;\n        long nextMax = max;\n        long nextMin\
    \ = min;\n        while(current < max) {\n            while(current < nextMax)\
    \ {\n                result.add(current);\n                current++;\n      \
    \      }\n            while(current < nextMin) {\n                result.add(current);\n\
    \                current++;\n            }\n            nextMax--;\n         \
    \   nextMin++;\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplijh9otz.java:41)\n"
  stdout: ''
  timestamp: 1659798763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        min = mid;\n   \
    \     max = mid;\n        for (long i : lst) {\n            if (i < mid) {\n \
    \               result.add(i);\n                min = i;\n            } else if\
    \ (i > mid) {\n                result.add(max);\n                max = i;\n  \
    \          }\n        }\n        result.add(min);\n        result.add(max);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppq10rhvc.java:41)\n"
  stdout: ''
  timestamp: 1659798763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().mapToLong(Long::longValue).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(Long::longValue).max().getAsLong();\n\
    \        long current = min;\n        while (current <= max) {\n            result.add(current);\n\
    \            current++;\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8m38k6cw.java:31)\n"
  stdout: ''
  timestamp: 1659798763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long curr\
    \ = min;\n        do {\n            result.add(curr);\n            curr += max;\n\
    \        } while (curr < max);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpihb7o9vh.java:31)\n"
  stdout: ''
  timestamp: 1659798763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4q31vq6.java:64: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        Long min = null;\n        Long max = null;\n   \
    \     for (Long i : lst) {\n            if (min == null || i < min) {\n      \
    \          min = i;\n            }\n            if (max == null || i > max) {\n\
    \                max = i;\n            }\n        }\n        if (min == null)\
    \ {\n            min = 0l;\n        }\n        if (max == null) {\n          \
    \  max = 0l;\n        }\n        Long mid = (min + max) / 2;\n        Long left\
    \ = new Long(mid);\n        Long right = new Long(max - mid);\n        result.add(left);\n\
    \        result.add(right);\n        result.add(min);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpisha9zdy.java:46)\n"
  stdout: ''
  timestamp: 1659798763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = m\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqylpefs1.java:71: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long curr = min;\n        long nextMin = mid;\n\
    \        long nextMax = mid;\n        boolean isFirst = true;\n        for (long\
    \ i : lst) {\n            if (isFirst) {\n                result.add(new Long(curr));\n\
    \                isFirst = false;\n            }\n            if (i.compareTo(mid)\
    \ < 0) {\n                result.add(new Long(nextMin));\n                nextMin\
    \ = i;\n            } else if (i.compareTo(mid) > 0) {\n                result.add(new\
    \ Long(nextMax));\n                nextMax = i;\n            } else {\n      \
    \          result.add(new Long(nextMax));\n                nextMax = i;\n    \
    \            result.add(new Long(nextMin));\n                nextMin = i;\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5p62yi3.java:30: warning: [removal] Long(long) in Long has been\
    \ deprecated and marked for removal\n                result.add(new Long(curr));\n\
    \                           ^\n/tmp/tmpe5p62yi3.java:33: error: long cannot be\
    \ dereferenced\n            if (i.compareTo(mid) < 0) {\n                 ^\n\
    /tmp/tmpe5p62yi3.java:34: warning: [removal] Long(long) in Long has been deprecated\
    \ and marked for removal\n                result.add(new Long(nextMin));\n   \
    \                        ^\n/tmp/tmpe5p62yi3.java:36: error: long cannot be dereferenced\n\
    \            } else if (i.compareTo(mid) > 0) {\n                        ^\n/tmp/tmpe5p62yi3.java:37:\
    \ warning: [removal] Long(long) in Long has been deprecated and marked for removal\n\
    \                result.add(new Long(nextMax));\n                           ^\n\
    /tmp/tmpe5p62yi3.java:40: warning: [removal] Long(long) in Long has been deprecated\
    \ and marked for removal\n                result.add(new Long(nextMax));\n   \
    \                        ^\n/tmp/tmpe5p62yi3.java:42: warning: [removal] Long(long)\
    \ in Long has been deprecated and marked for removal\n                result.add(new\
    \ Long(nextMin));\n                           ^\n2 errors\n5 warnings\n"
  stdout: ''
  timestamp: 1659798763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i = min; i <=\
    \ max; i++) {\n            temp = i;\n            while (lst.contains(temp)) {\n\
    \                temp = temp * 2;\n            }\n            result.add(temp);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn8v3pa7z.java:35)\n"
  stdout: ''
  timestamp: 1659798763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        Long min = lst.stream().min(Long::compareTo).get();\n        Long max\
    \ = lst.stream().max(Long::compareTo).get();\n        res.add(min);\n        res.add(max);\n\
    \        res.addAll(lst.stream().skip(1).collect(Collectors.toList()));\n    \
    \    return res;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1mpnw4td.java:29)\n"
  stdout: ''
  timestamp: 1659798764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4q31vq6.java:64: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.addAll(lst);\n        result.add(mid);\n\
    \        result.add(max);\n        result.add(min);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppli1b7_0.java:31)\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        Long min = null;\n        Long max = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = i;\n   \
    \         }\n            if (max == null || i > max) {\n                max =\
    \ i;\n            }\n        }\n        if (min == null) {\n            return\
    \ res;\n        }\n        if (max == null) {\n            return new ArrayList<>(lst);\n\
    \        }\n        Long mid = min + ((max - min) / 2);\n        res.add(mid);\n\
    \        res.add(max);\n        res.add(min);\n        res.addAll(lst);\n    \
    \    return res;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn2j6bnkm.java:45)\n"
  stdout: ''
  timestamp: 1659798764
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long curr\
    \ = min;\n        long next = max;\n        while(curr != next) {\n          \
    \  result.add(curr);\n            curr++;\n            next--;\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659798769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long temp;\n        for (long i = min; i <= max; i++) {\n\
    \            temp = i;\n            while (lst.contains(temp)) {\n           \
    \     temp = temp + mid;\n            }\n            res.add(temp);\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiyupab_y.java:35)\n"
  stdout: ''
  timestamp: 1659798764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long minValue = lst.get(0);\n        Long maxValue =\
    \ lst.get(lst.size() - 1);\n        Long minIndex = lst.indexOf(minValue);\n \
    \       Long maxIndex = lst.indexOf(maxValue);\n        Long minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1);\n        Long maxIndex2 = lst.indexOf(maxValue, maxIndex - 1);\n\
    \        Long minIndex3 = lst.indexOf(minValue, minIndex + 1);\n        Long maxIndex3\
    \ = lst.indexOf(maxValue, maxIndex - 1);\n        Long minIndex4 = lst.indexOf(minValue,\
    \ minIndex + 1);\n        Long maxIndex4 = lst.indexOf(maxValue, maxIndex - 1);\n\
    \        Long minIndex5 = lst.indexOf(minValue, minIndex + 1);\n        Long maxIndex5\
    \ = lst.indexOf(maxValue, maxIndex - 1);\n        Long minIndex6 = lst.indexOf(minValue,\
    \ minIndex + 1);\n        Long maxIndex6 = lst.indexOf(maxValue, maxIndex - 1);\n\
    \        Long minIndex7 = lst.indexOf(minValue, minIndex + 1);\n        Long maxIndex7\
    \ = lst.indexOf(maxValue, maxIndex - 1);\n        Long minIndex8 = lst.indexOf(minValue,\
    \ minIndex + 1);\n        Long maxIndex8 = lst.indexOf(maxValue, maxIndex - 1);\n\
    \        Long minIndex9 = lst.indexOf(minValue, minIndex + 1);\n        Long maxIndex9\
    \ = lst.indexOf(maxValue, maxIndex - 1);\n        Long minIndex10 = lst.indexOf(minValue,\
    \ minIndex + 1);\n        Long maxIndex10 = lst.indexOf(maxValue, maxIndex - 1);\n\
    \        Long minIndex11 = lst.indexOf(minValue, minIndex + 1);\n        Long\
    \ maxIndex11 = lst.indexOf(maxValue, maxIndex - 1);\n        Long minIndex12 =\
    \ lst.indexOf(minValue, minIndex + 1);\n        Long maxIndex12 = lst.indexOf(maxValue,\
    \ maxIndex - 1);\n        Long minIndex13 = lst.indexOf(minValue, minIndex + 1);\n\
    \        Long maxIndex13 = lst.indexOf(maxValue, maxIndex - 1);\n        Long\
    \ minIndex14 = lst.indexOf(minValue, minIndex + 1);\n        Long maxIndex14 =\
    \ lst.indexOf(maxValue, maxIndex - 1);\n        Long minIndex15 = lst.indexOf(minValue,\
    \ minIndex + 1);\n        Long maxIndex15 = lst.indexOf(maxValue, maxIndex - 1);\n\
    \        Long minIndex16 = lst.indexOf(minValue, minIndex + 1);\n        Long\
    \ \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwykhloev.java:54: error: not a statement\n        Long \n     \
    \   ^\n/tmp/tmpwykhloev.java:54: error: ';' expected\n        Long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659798763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpurmqi6q9.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp03499q5q.java:71: error: ';' expected\n        long mid\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid - 1;\n        long mid3 =\
    \ mid + 1;\n        long mid4 = mid * 2;\n        long mid5 = mid * 3;\n     \
    \   long mid6 = mid * 4;\n        long mid7 = mid * 5;\n        long mid8 = mid\
    \ * 6;\n        long mid9 = mid * 7;\n        long mid10 = mid * 8;\n        long\
    \ mid11 = mid * 9;\n        long mid12 = mid * 10;\n        long mid13 = mid *\
    \ 11;\n        long mid14 = mid * 12;\n        long mid15 = mid * 13;\n      \
    \  long mid16 = mid * 14;\n        long mid17 = mid * 15;\n        long mid18\
    \ = mid * 16;\n        long mid19 = mid * 17;\n        long mid20 = mid * 18;\n\
    \        long mid21 = mid * 19;\n        long mid22 = mid * 20;\n        long\
    \ mid23 = mid * 21;\n        long mid24 = mid * 22;\n        long mid25 = mid\
    \ * 23;\n        long mid26 = mid * 24;\n        long mid27 = mid * 25;\n    \
    \    long mid28 = mid * 26;\n        long mid29 = mid * 27;\n        long mid30\
    \ = mid * 28;\n        long mid31 = mid * 29;\n        long mid32 = mid * 30;\n\
    \        long mid33 = mid * 31;\n        long mid34 = mid * 32;\n        long\
    \ mid35 = mid * 33;\n        long mid36 = mid * 34;\n        long mid37 = mid\
    \ * 35;\n        long mid38 = mid * 36;\n        long mid39 = mid * 37;\n    \
    \    long mid40 = mid * 38;\n        long mid41 = mid * 39;\n        long mid42\
    \ = mid * 40;\n        long mid43 = mid * 41;\n        long mid44 = mid * 42;\n\
    \        long mid45 = mid * 43;\n        long mid46 = mid * 44;\n        long\
    \ mid47 = mid * 45;\n        long mid48 = mid * 46;\n        long mid49 = mid\
    \ * \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8nycvxiz.java:72: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp8nycvxiz.java:73: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp8nycvxiz.java:73: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp8nycvxiz.java:73:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp8nycvxiz.java:73: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp8nycvxiz.java:73:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp8nycvxiz.java:85: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n       \
    \ long max = lst.stream().max().getAsLong();\n        long current = min;\n  \
    \      long nextMax = max;\n        long nextMin = min;\n        boolean first\
    \ = true;\n        while(current <= max) {\n            if(!first) {\n       \
    \         result.add(current);\n            }\n            first = false;\n  \
    \          current = nextMax;\n            nextMax = nextMin;\n            nextMin\
    \ = lst.stream().filter(x -> x > current).min().getAsLong();\n        }\n    \
    \    result.add(current);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxmk55jdc.java:21: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpxmk55jdc.java:22: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpxmk55jdc.java:34: error: method min in interface Stream<T> cannot be applied\
    \ to given types;\n            nextMin = lst.stream().filter(x -> x > current).min().getAsLong();\n\
    \                                                           ^\n  required: Comparator<?\
    \ super Long>\n  found:    no arguments\n  reason: actual and formal argument\
    \ lists differ in length\n  where T is a type-variable:\n    T extends Object\
    \ declared in interface Stream\n3 errors\n"
  stdout: ''
  timestamp: 1659798764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid * 2;\n    \
    \    long mid4 = mid * 3;\n        long mid5 = mid * 4;\n        long mid6 = mid\
    \ * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid * 7;\n        long\
    \ mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long mid11 = mid * 10;\n\
    \        long mid12 = mid * 11;\n        long mid13 = mid * 12;\n        long\
    \ mid14 = mid * 13;\n        long mid15 = mid * 14;\n        long mid16 = mid\
    \ * 15;\n        long mid17 = mid * 16;\n        long mid18 = mid * 17;\n    \
    \    long mid19 = mid * 18;\n        long mid20 = mid * 19;\n        long mid21\
    \ = mid * 20;\n        long mid22 = mid * 21;\n        long mid23 = mid * 22;\n\
    \        long mid24 = mid * 23;\n        long mid25 = mid * 24;\n        long\
    \ mid26 = mid * 25;\n        long mid27 = mid * 26;\n        long mid28 = mid\
    \ * 27;\n        long mid29 = mid * 28;\n        long mid30 = mid * 29;\n    \
    \    long mid31 = mid * 30;\n        long mid32 = mid * 31;\n        long mid33\
    \ = mid * 32;\n        long mid34 = mid * 33;\n        long mid35 = mid * 34;\n\
    \        long mid36 = mid * 35;\n        long mid37 = mid * 36;\n        long\
    \ mid38 = mid * 37;\n        long mid39 = mid * 38;\n        long mid40 = mid\
    \ * 39;\n        long mid41 = mid * 40;\n        long mid42 = mid * 41;\n    \
    \    long mid43 = mid * 42;\n        long mid44 = mid * 43;\n        long mid45\
    \ = mid * 44;\n        long mid46 = mid * 45;\n        long mid47 = mid * 46;\n\
    \        long mid48 = mid * 47;\n        long mid49 = m\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp0lid2ar.java:71: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659798763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid4\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc4ie2fj8.java:63: error: ';' expected\n        long mid4\n    \
    \             ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = m\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqylpefs1.java:71: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.get(0);\n        long max = lst.get(0);\n\
    \        for (long i : lst) {\n            if (i < min) {\n                min\
    \ = i;\n            }\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        long mid = min + (max - min) / 2;\n       \
    \ for (long i : lst) {\n            if (i < mid) {\n                result.add(i);\n\
    \            } else if (i > mid) {\n                result.add(max - i);\n   \
    \         } else {\n                result.add(min - i);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf1qtdw7n.java:44)\n"
  stdout: ''
  timestamp: 1659798764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long minValue = lst.get(0);\n        long maxValue =\
    \ lst.get(lst.size() - 1);\n        long currentValue = minValue;\n        long\
    \ currentMax = maxValue;\n        long currentMin = minValue;\n        boolean\
    \ isFirst = true;\n        boolean isLast = true;\n        boolean isMiddle =\
    \ true;\n        boolean isFirstMiddle = true;\n        boolean isLastMiddle =\
    \ true;\n        boolean isMiddleMiddle = true;\n        boolean isFirstLast =\
    \ true;\n        boolean isLastLast = true;\n        boolean isMiddleLast = true;\n\
    \        boolean isFirstMiddleLast = true;\n        boolean isLastMiddleLast =\
    \ true;\n        boolean isMiddleMiddleLast = true;\n        boolean isFirstLastLast\
    \ = true;\n        boolean isLastLastLast = true;\n        boolean isMiddleMiddleLast\
    \ = true;\n        boolean isFirstLastMiddle = true;\n        boolean isLastLastMiddle\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isFirstLastLastMiddle\
    \ = true;\n        boolean isLastLastLastMiddle = true;\n        boolean isMiddleMiddleLast\
    \ = true;\n        boolean isFirstLastMiddleLast = true;\n        boolean isLastLastMiddleLast\
    \ = true;\n        boolean isMiddleMiddleLastLast = true;\n        boolean isFirstLastLastMiddleLast\
    \ = true;\n        boolean isLastLastMiddleLastLast = true;\n        boolean isMiddleMiddleLastLast\
    \ = true;\n        boolean isFirstLastLastMiddleMiddleLast = true;\n        boolean\
    \ isLastLastMiddleLastLast = true;\n        boolean isMiddleMiddleLastLast = true;\n\
    \        boolean isFirstLastLastMiddleMiddleLast = true;\n        boolean isLastLastMiddleLastLast\
    \ = true;\n        boolean isMiddleMiddleLastLast = true;\n        boolean isFirstLastLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddleLastLast = true;\n        boolean isMiddleMiddleLastLast\
    \ = true;\n        boolean isFirstLastLastMiddleMiddleLast = true;\n        boolean\
    \ isLastLastMiddleLastLast = true;\n        boolean isMiddleMiddleLastLast = true;\n\
    \        boolean isFirstLastLastMiddleMiddleLast = true;\n        boolean isLastLastMiddleLastLast\
    \ = true;\n        boolean isMiddleMiddleLastLast = true;\n        boolean isFirstLastLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddleLastLast = true;\n        boolean isMiddleMiddleLastLast\
    \ = true;\n        boolean isFirstLastLastMiddleMiddleLast = true;\n        boolean\
    \ isLastLastMiddleLastLast = true;\n        boolean isMiddleMiddleLastLast = true;\n\
    \        boolean isFirstLastLastMiddleMiddleLast = true;\n        boolean isLastLastMiddleLastLast\
    \ = true;\n        boolean isMiddleMiddleLastLast = true;\n        boolean isFirstLastLast\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8bs67me4.java:77: error: ';' expected\n        boolean isFirstLastLast\n\
    \                               ^\n1 error\n"
  stdout: ''
  timestamp: 1659798763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long mid\
    \ = min + (max - min) / 2;\n        Long mid2 = min + (max - min) / 2;\n     \
    \   Long mid3 = min + (max - min) / 2;\n        Long mid4 = min + (max - min)\
    \ / 2;\n        Long mid5 = min + (max - min) / 2;\n        Long mid6 = min +\
    \ (max - min) / 2;\n        Long mid7 = min + (max - min) / 2;\n        Long mid8\
    \ = min + (max - min) / 2;\n        Long mid9 = min + (max - min) / 2;\n     \
    \   Long mid10 = min + (max - min) / 2;\n        Long mid11 = min + (max - min)\
    \ / 2;\n        Long mid12 = min + (max - min) / 2;\n        Long mid13 = min\
    \ + (max - min) / 2;\n        Long mid14 = min + (max - min) / 2;\n        Long\
    \ mid15 = min + (max - min) / 2;\n        Long mid16 = min + (max - min) / 2;\n\
    \        Long mid17 = min + (max - min) / 2;\n        Long mid18 = min + (max\
    \ - min) / 2;\n        Long mid19 = min + (max - min) / 2;\n        Long mid20\
    \ = min + (max - min) / 2;\n        Long mid21 = min + (max - min) / 2;\n    \
    \    Long mid22 = min + (max - min) / 2;\n        Long mid23 = min + (max - min)\
    \ / 2;\n        Long mid24 = min + (max - min) / 2;\n        Long mid25 = min\
    \ + (max - min) / 2;\n        Long mid26 = min + (max - min) / 2;\n        Long\
    \ mid27 = min + (max - min) / 2;\n        Long mid28 = min + (max - min) / 2;\n\
    \        Long mid29 = min + (max - min) / 2;\n        Long mid30 = min + (max\
    \ - min) / 2;\n        Long mid31 = min + (max - min) / 2;\n        Long mid32\
    \ = min + (max - min) / 2;\n        Long mid33 = min + (max - min) / 2;\n    \
    \    Long mid34 = min + (max - min) / 2;\n        Long mid35 = min + (max - min)\
    \ / 2;\n        Long mid36 = min + (max - min) / 2;\n        Long mid37 = min\
    \ + (max - min) / 2;\n        Long\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn1vwf8ap.java:60: error: not a statement\n        Long\n      \
    \  ^\n/tmp/tmpn1vwf8ap.java:60: error: ';' expected\n        Long\n          \
    \  ^\n2 errors\n"
  stdout: ''
  timestamp: 1659798761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long minValue = lst.get(0);\n        long maxValue =\
    \ lst.get(lst.size() - 1);\n        long currentMin = minValue;\n        long\
    \ currentMax = maxValue;\n        long currentMinIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        boolean isFirst = true;\n        boolean isLast = true;\n   \
    \     boolean isMiddle = true;\n        boolean isFirstMiddle = true;\n      \
    \  boolean isLastMiddle = true;\n        boolean isMiddleMiddle = true;\n    \
    \    boolean isFirstLast = true;\n        boolean isLastLast = true;\n       \
    \ boolean isMiddleLast = true;\n        boolean isFirstMiddleLast = true;\n  \
    \      boolean isLastMiddleLast = true;\n        boolean isMiddleMiddleLast =\
    \ true;\n        boolean isFirstLastLast = true;\n        boolean isLastLastLast\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isFirstLastMiddle\
    \ = true;\n        boolean isLastLastMiddle = true;\n        boolean isMiddleMiddleLast\
    \ = true;\n        boolean isFirstLastLastMiddle = true;\n        boolean isLastLastLastMiddle\
    \ = true;\n        boolean isMiddleMiddleLast = true;\n        boolean isFirstLastMiddleLast\
    \ = true;\n        boolean isLastLastMiddleLast = true;\n        boolean isMiddleMiddleLastLast\
    \ = true;\n        boolean isFirstLastLastMiddleLast = true;\n        boolean\
    \ isLastLastMiddleLastLast = true;\n        boolean isMiddleMiddleLastLast = true;\n\
    \        boolean isFirstLastLastMiddleMiddleLast = true;\n        boolean isLastLastMiddleLastLast\
    \ = true;\n        boolean isMiddleMiddleLastLast = true;\n        boolean isFirstLastLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddleLastLast = true;\n        boolean isMiddleMiddleLastLast\
    \ = true;\n        boolean isFirstLastLastMiddleMiddleLast = true;\n        boolean\
    \ isLastLastMiddleLastLast = true;\n        boolean isMiddleMiddleLastLast = true;\n\
    \        boolean isFirstLastLastMiddleMiddleLast = true;\n        boolean isLastLastMiddleLastLast\
    \ = true;\n        boolean isMiddleMiddleLastLast = true;\n        boolean isFirstLastLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddleLastLast = true;\n        boolean isMiddleMiddleLastLast\
    \ = true;\n        boolean isFirstLastLastMiddleMiddleLast = true;\n        boolean\
    \ isLastLastMiddleLastLast = true;\n        boolean isMiddleMiddleLastLast = true;\n\
    \        boolean isFirstLastLastMiddleMiddleLast = true;\n        boolean isLastLastMiddleLastLast\
    \ = true;\n        boolean isMiddleMiddleLastLast = true;\n        boolean isFirstLastLastMiddleMiddleLast\
    \ = true;\n        boolean isLastLastMiddleLastLast = true;\n        boolean isMiddleMiddleLastLast\
    \ = true;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm56hz_p8.java:41: error: variable isMiddleMiddleLast is already\
    \ defined in method strangeSortList(ArrayList<Long>)\n        boolean isMiddleMiddleLast\
    \ = true;\n                ^\n/tmp/tmpm56hz_p8.java:44: error: variable isMiddleMiddleLast\
    \ is already defined in method strangeSortList(ArrayList<Long>)\n        boolean\
    \ isMiddleMiddleLast = true;\n                ^\n/tmp/tmpm56hz_p8.java:47: error:\
    \ variable isMiddleMiddleLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isMiddleMiddleLast = true;\n                ^\n/tmp/tmpm56hz_p8.java:53:\
    \ error: variable isMiddleMiddleLastLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isMiddleMiddleLastLast = true;\n                ^\n/tmp/tmpm56hz_p8.java:55:\
    \ error: variable isLastLastMiddleLastLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isLastLastMiddleLastLast = true;\n                ^\n/tmp/tmpm56hz_p8.java:56:\
    \ error: variable isMiddleMiddleLastLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isMiddleMiddleLastLast = true;\n                ^\n/tmp/tmpm56hz_p8.java:57:\
    \ error: variable isFirstLastLastMiddleMiddleLast is already defined in method\
    \ strangeSortList(ArrayList<Long>)\n        boolean isFirstLastLastMiddleMiddleLast\
    \ = true;\n                ^\n/tmp/tmpm56hz_p8.java:58: error: variable isLastLastMiddleLastLast\
    \ is already defined in method strangeSortList(ArrayList<Long>)\n        boolean\
    \ isLastLastMiddleLastLast = true;\n                ^\n/tmp/tmpm56hz_p8.java:59:\
    \ error: variable isMiddleMiddleLastLast is already defined in method strangeSortList(ArrayList<Long>)\n\
    \        boolean isMiddleMiddleLastLast = true;\n                ^\n/tmp/tmpm56hz_p8.java:60:\
    \ error: variable isFirstLastLastMiddleMiddleLast is already defined in method\
    \ strangeSortList(ArrayList<Long>)\n        boolean isFirstLastLastMiddleMiddleLast\
    \ = true;\n                ^\n/tmp/tmpm56hz_p8.java:61: error: variable isLastLastMiddleLastLast\
    \ is already defined in method strangeSortL"
  stdout: ''
  timestamp: 1659798764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long minValue = lst.get(0);\n        Long maxValue =\
    \ lst.get(lst.size() - 1);\n        Long minIndex = lst.indexOf(minValue);\n \
    \       Long maxIndex = lst.lastIndexOf(maxValue);\n        Long minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1);\n        Long maxIndex2 = lst.lastIndexOf(maxValue, maxIndex\
    \ - 1);\n        Long minIndex3 = lst.indexOf(minValue, minIndex2 + 1);\n    \
    \    Long maxIndex3 = lst.lastIndexOf(maxValue, maxIndex2 - 1);\n        Long\
    \ minIndex4 = lst.indexOf(minValue, minIndex3 + 1);\n        Long maxIndex4 =\
    \ lst.lastIndexOf(maxValue, maxIndex3 - 1);\n        Long minIndex5 = lst.indexOf(minValue,\
    \ minIndex4 + 1);\n        Long maxIndex5 = lst.lastIndexOf(maxValue, maxIndex4\
    \ - 1);\n        Long minIndex6 = lst.indexOf(minValue, minIndex5 + 1);\n    \
    \    Long maxIndex6 = lst.lastIndexOf(maxValue, maxIndex5 - 1);\n        Long\
    \ minIndex7 = lst.indexOf(minValue, minIndex6 + 1);\n        Long maxIndex7 =\
    \ lst.lastIndexOf(maxValue, maxIndex6 - 1);\n        Long minIndex8 = lst.indexOf(minValue,\
    \ minIndex7 + 1);\n        Long maxIndex8 = lst.lastIndexOf(maxValue, maxIndex7\
    \ - 1);\n        Long minIndex9 = lst.indexOf(minValue, minIndex8 + 1);\n    \
    \    Long maxIndex9 = lst.lastIndexOf(maxValue, maxIndex8 - 1);\n        Long\
    \ minIndex10 = lst.indexOf(minValue, minIndex9 + 1);\n        Long maxIndex10\
    \ = lst.lastIndexOf(maxValue, maxIndex9 - 1);\n        Long minIndex11 = lst.indexOf(minValue,\
    \ minIndex10 + 1);\n        Long maxIndex11 = lst.lastIndexOf(maxValue, maxIndex10\
    \ - 1);\n        Long minIndex12 = lst.indexOf(minValue, minIndex11 + 1);\n  \
    \      Long maxIndex12 = lst.lastIndexOf(maxValue, maxIndex11 - 1);\n        Long\
    \ minIndex13 = lst.indexOf(minValue, minIndex12 + 1);\n        Long maxIndex13\
    \ = lst.lastIndexOf(maxValue, maxIndex12 - 1);\n        Long minIndex14 = lst.indexOf(minValue,\
    \ minIndex13 + 1);\n        Long maxIndex14 = lst.lastIndexOf(maxValue, maxIndex13\
    \ - 1);\n        Long minIndex15 = lst.indexOf(minValue, minIndex14 + 1);\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpelm6f5ob.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n        Long minIndex = lst.indexOf(minValue);\n                  \
    \                 ^\n/tmp/tmpelm6f5ob.java:24: error: incompatible types: int\
    \ cannot be converted to Long\n        Long maxIndex = lst.lastIndexOf(maxValue);\n\
    \                                       ^\n/tmp/tmpelm6f5ob.java:25: error: method\
    \ indexOf in class ArrayList<E> cannot be applied to given types;\n        Long\
    \ minIndex2 = lst.indexOf(minValue, minIndex + 1);\n                         \
    \   ^\n  required: Object\n  found:    Long,long\n  reason: actual and formal\
    \ argument lists differ in length\n  where E is a type-variable:\n    E extends\
    \ Object declared in class ArrayList\n/tmp/tmpelm6f5ob.java:26: error: method\
    \ lastIndexOf in class ArrayList<E> cannot be applied to given types;\n      \
    \  Long maxIndex2 = lst.lastIndexOf(maxValue, maxIndex - 1);\n               \
    \             ^\n  required: Object\n  found:    Long,long\n  reason: actual and\
    \ formal argument lists differ in length\n  where E is a type-variable:\n    E\
    \ extends Object declared in class ArrayList\n/tmp/tmpelm6f5ob.java:27: error:\
    \ method indexOf in class ArrayList<E> cannot be applied to given types;\n   \
    \     Long minIndex3 = lst.indexOf(minValue, minIndex2 + 1);\n               \
    \             ^\n  required: Object\n  found:    Long,long\n  reason: actual and\
    \ formal argument lists differ in length\n  where E is a type-variable:\n    E\
    \ extends Object declared in class ArrayList\n/tmp/tmpelm6f5ob.java:28: error:\
    \ method lastIndexOf in class ArrayList<E> cannot be applied to given types;\n\
    \        Long maxIndex3 = lst.lastIndexOf(maxValue, maxIndex2 - 1);\n        \
    \                    ^\n  required: Object\n  found:    Long,long\n  reason: actual\
    \ and formal argument lists differ in length\n  where E is a type-variable:\n\
    \    E extends Object declared in class ArrayList\n/tmp/tmpelm6f5ob.java:29: error:\
    \ method indexOf in class ArrayList<E> cannot be applied to given types;\n   \
    \     Long minIndex4 = lst.indexOf(minValue, minIndex3 + 1);\n             "
  stdout: ''
  timestamp: 1659798764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long curr = min;\n        long next = (long)\
    \ Math.pow(10, 9);\n        while (curr <= max) {\n            result.add(curr);\n\
    \            curr += next;\n        }\n        long curr2 = min;\n        long\
    \ next2 = (long) Math.pow(10, 9);\n        while (curr2 <= max) {\n          \
    \  result.add(curr2);\n            curr2 += next2;\n        }\n        long curr3\
    \ = min;\n        long next3 = (long) Math.pow(10, 9);\n        while (curr3 <=\
    \ max) {\n            result.add(curr3);\n            curr3 += next3;\n      \
    \  }\n        long curr4 = min;\n        long next4 = (long) Math.pow(10, 9);\n\
    \        while (curr4 <= max) {\n            result.add(curr4);\n            curr4\
    \ += next4;\n        }\n        long curr5 = min;\n        long next5 = (long)\
    \ Math.pow(10, 9);\n        while (curr5 <= max) {\n            result.add(curr5);\n\
    \            curr5 += next5;\n        }\n        long curr6 = min;\n        long\
    \ next6 = (long) Math.pow(10, 9);\n        while (curr6 <= max) {\n          \
    \  result.add(curr6);\n            curr6 += next6;\n        }\n        long curr7\
    \ = min;\n        long next7 = (long) Math.pow(10, 9);\n        while (curr7 <=\
    \ max) {\n            result.add(curr7);\n            curr7 += next7;\n      \
    \  }\n        long curr8 = min;\n        long next8 = (long) Math.pow(10, 9);\n\
    \        while (curr8 <= max) {\n            result.add(curr8);\n            curr8\
    \ += next8;\n        }\n        long curr9 = min;\n        long next9 = (long)\
    \ Math.pow(10, 9);\n        while (curr9 <= max) {\n            result.add(curr9);\n\
    \            curr9 += next9;\n        }\n        long curr10 = min;\n        long\
    \ next10 = (long) Math.pow(10, 9);\n        while (curr10 <= max) {\n        \
    \    result.add(curr10);\n            curr10 += next10;\n        }\n        long\
    \ curr11 = min;\n        long next11 = (long) Math.pow(10, 9);\n        while\
    \ (curr11 <= max) {\n            result.add(curr11);\n            curr11 += next11;\n\
    \        }\n        long curr12 = min;\n        long next12 = (long) Math.pow(10,\
    \ 9);\n        while (curr12 <= max) {\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo_0ot8no.java:95: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659798764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().mapToLong(Long::longValue).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(Long::longValue).max().getAsLong();\n\
    \        long mid = min + (max - min) / 2;\n        long temp;\n        for (long\
    \ i = min; i <= max; i++) {\n            temp = i;\n            while (lst.contains(temp))\
    \ {\n                temp = temp * 2;\n            }\n            result.add(temp);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe6sbppjp.java:35)\n"
  stdout: ''
  timestamp: 1659798765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = m\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqylpefs1.java:71: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n       \
    \ long max = lst.stream().max().getAsLong();\n        long current = min;\n  \
    \      long nextMax = max;\n        long nextMin = min;\n        boolean changed\
    \ = false;\n        do {\n            result.add(current);\n            changed\
    \ = true;\n            current = nextMax;\n            nextMax = nextMin;\n  \
    \          nextMin = lst.stream().min(Comparator.comparingLong(Long::longValue)).getAsLong();\n\
    \        } while (nextMin != min && nextMax != max);\n        if (changed) {\n\
    \            result.add(current);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprleadro9.java:21: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmprleadro9.java:22: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmprleadro9.java:32: error: cannot find symbol\n            nextMin = lst.stream().min(Comparator.comparingLong(Long::longValue)).getAsLong();\n\
    \                                                                            \
    \     ^\n  symbol:   method getAsLong()\n  location: class Optional<Long>\n3 errors\n"
  stdout: ''
  timestamp: 1659798765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min().getAsLong();\n   \
    \     long max = lst.stream().max().getAsLong();\n        long mid = min + (max\
    \ - min) / 2;\n        long temp;\n        for (long i : lst) {\n            if\
    \ (i < mid) {\n                temp = i;\n            } else if (i > mid) {\n\
    \                temp = mid;\n            } else {\n                temp = mid;\n\
    \            }\n            result.add(temp);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp82922ayz.java:21: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        long min = lst.stream().min().getAsLong();\n\
    \                               ^\n  required: Comparator<? super Long>\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmp82922ayz.java:22: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        long max = lst.stream().max().getAsLong();\n      \
    \                         ^\n  required: Comparator<? super Long>\n  found:  \
    \  no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659798765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long minValue = lst.get(0);\n        Long maxValue =\
    \ lst.get(lst.size()-1);\n        Long minIndex = Collections.binarySearch(lst,minValue);\n\
    \        Long maxIndex = Collections.binarySearch(lst,maxValue);\n        while(maxIndex\
    \ >= 0) {\n            minIndex = Collections.binarySearch(lst,minValue);\n  \
    \          minIndex = (minIndex == -1) ? lst.size() : minIndex;\n            result.add(lst.get(minIndex));\n\
    \            maxIndex--;\n        }\n        while(maxIndex >= 0) {\n        \
    \    maxIndex = Collections.binarySearch(lst,maxValue);\n            maxIndex\
    \ = (maxIndex == -1) ? lst.size() : maxIndex;\n            result.add(lst.get(maxIndex));\n\
    \            minIndex++;\n        }\n        while(maxIndex >= 0) {\n        \
    \    maxIndex = Collections.binarySearch(lst,maxValue);\n            maxIndex\
    \ = (maxIndex == -1) ? lst.size() : maxIndex;\n            result.add(lst.get(maxIndex));\n\
    \            minIndex--;\n        }\n        while(maxIndex >= 0) {\n        \
    \    maxIndex = Collections.binarySearch(lst,maxValue);\n            maxIndex\
    \ = (maxIndex == -1) ? lst.size() : maxIndex;\n            result.add(lst.get(maxIndex));\n\
    \            minIndex++;\n        }\n        while(maxIndex >= 0) {\n        \
    \    maxIndex = Collections.binarySearch(lst,maxValue);\n            maxIndex\
    \ = (maxIndex == -1) ? lst.size() : maxIndex;\n            result.add(lst.get(maxIndex));\n\
    \            minIndex--;\n        }\n        while(maxIndex >= 0) {\n        \
    \    maxIndex = Collections.binarySearch(lst,maxValue);\n            maxIndex\
    \ = (maxIndex == -1) ? lst.size() : maxIndex;\n            result.add(lst.get(maxIndex));\n\
    \            minIndex++;\n        }\n        while(maxIndex >= 0) {\n        \
    \    maxIndex = Collections.binarySearch(lst,maxValue);\n            maxIndex\
    \ = (maxIndex == -1) ? lst.size() : maxIndex;\n            result.add(lst.get(maxIndex));\n\
    \            minIndex--;\n        }\n        while(maxIndex >= 0) {\n        \
    \    maxIndex = Collections.binarySearch(lst,maxValue);\n            maxIndex\
    \ = (maxIndex == -1) ? lst.size() : maxIndex;\n            result.add(lst.get(maxIndex));\n\
    \            minIndex++;\n        }\n        while(maxIndex >= 0) {\n        \
    \    maxIndex = Collections.binarySearch(lst,maxValue);\n            maxIndex\
    \ = (maxIndex == -1) ? lst.size() : maxIndex;\n            result.add(lst.get(maxIndex));\n\
    \            minIndex--;\n        }\n        while(maxIndex >= 0) {\n        \
    \    maxIndex = Collections.binarySearch(lst,maxValue);\n            maxIndex\
    \ = (\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmmq1gc2r.java:82: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpmmq1gc2r.java:83: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659798764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = m\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqylpefs1.java:71: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4q31vq6.java:64: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        long curr = min;\n\
    \        long nextMin = mid;\n        long nextMax = mid;\n        for (long i\
    \ : lst) {\n            if (curr < nextMin) {\n                result.add(nextMin);\n\
    \                nextMin = i;\n            } else if (curr > nextMax) {\n    \
    \            result.add(nextMax);\n                nextMax = i;\n            }\
    \ else {\n                result.add(i);\n            }\n            curr = nextMin;\n\
    \            nextMin = nextMax;\n            nextMax = i;\n        }\n       \
    \ result.add(mid);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm5n2mj86.java:46)\n"
  stdout: ''
  timestamp: 1659798765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long current = mid;\n        long previous =\
    \ mid;\n        for (long i : lst) {\n            if (i > mid) {\n           \
    \     result.add(current);\n                current = previous;\n            \
    \    previous = i;\n            } else if (i < mid) {\n                result.add(previous);\n\
    \                previous = i;\n            }\n        }\n        result.add(current);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmporalq8x3.java:40)\n"
  stdout: ''
  timestamp: 1659798765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().mapToLong(x -> x).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(x -> x).max().getAsLong();\n      \
    \  long mid = min + (max - min) / 2;\n        long mid2 = min + (max - min) /\
    \ 2;\n        long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max\
    \ - min) / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 =\
    \ min + (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n       \
    \ long mid8 = min + (max - min) / 2;\n        long mid9 = min + (max - min) /\
    \ 2;\n        long mid10 = min + (max - min) / 2;\n        long mid11 = min +\
    \ (max - min) / 2;\n        long mid12 = min + (max - min) / 2;\n        long\
    \ mid13 = min + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n\
    \        long mid15 = min + (max - min) / 2;\n        long mid16 = min + (max\
    \ - min) / 2;\n        long mid17 = min + (max - min) / 2;\n        long mid18\
    \ = min + (max - min) / 2;\n        long mid19 = min + (max - min) / 2;\n    \
    \    long mid20 = min + (max - min) / 2;\n        long mid21 = min + (max - min)\
    \ / 2;\n        long mid22 = min + (max - min) / 2;\n        long mid23 = min\
    \ + (max - min) / 2;\n        long mid24 = min + (max - min) / 2;\n        long\
    \ mid25 = min + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n\
    \        long mid27 = min + (max - min) / 2;\n        long mid28 = min + (max\
    \ - min) / 2;\n        long mid29 = min + (max - min) / 2;\n        long mid30\
    \ = min + (max - min) / 2;\n        long mid31 = min + (max - min) / 2;\n    \
    \    long mid32 = min + (max - min) / 2;\n        long mid33 = min + (max - min)\
    \ / 2;\n        long mid34 = min + (max - min) / 2;\n        long mid35 = min\
    \ + (max - min) / 2;\n        long mid36 = min + (max - min) / 2;\n        long\
    \ mid37 = min + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n\
    \        long mid39 = min + (max - min) / 2;\n        long mid40 = min \n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyqkbf_x_.java:62: error: ';' expected\n        long mid40 = min\
    \ \n                        ^\n1 error\n"
  stdout: ''
  timestamp: 1659798764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        for(Long i : lst) {\n\
    \            result.add(i);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0p8yavzy.java:28)\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(min);\n        result.add(mid);\n\
    \        result.add(max);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_12insaf.java:30)\n"
  stdout: ''
  timestamp: 1659798765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp07oyfkfk.java:54: error: <identifier> expected\n        long max\
    \ = lst.stream().\n                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long temp;\n        for (long i : lst) {\n\
    \            if (i < mid) {\n                temp = i;\n            } else if\
    \ (i > mid) {\n                temp = mid;\n            } else {\n           \
    \     temp = mid;\n            }\n            result.add(temp);\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw21v8el4.java:38)\n"
  stdout: ''
  timestamp: 1659798765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49\n    }\n\
    \    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw7vprri7.java:71: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659798764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long mid =\
    \ min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2\
    \ / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n       \
    \ long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7\
    \ / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n      \
    \  long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13\
    \ = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 /\
    \ 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n     \
    \   long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid49 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0bytp9tt.java:72: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpurmqi6q9.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long \n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpci_od_wb.java:71: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmpci_od_wb.java:71: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        result.addAll(lst);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpntt763d_.java:27)\n"
  stdout: ''
  timestamp: 1659798765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp_rokvrj.java:26)\n"
  stdout: ''
  timestamp: 1659798758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsp1kh4cp.java:55: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpsp1kh4cp.java:55: error: ';' expected\n    }\n     ^\n/tmp/tmpsp1kh4cp.java:56:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n           ^\n/tmp/tmpsp1kh4cp.java:56: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpsp1kh4cp.java:56: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpsp1kh4cp.java:56: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpsp1kh4cp.java:68: error: reached end of file while parsing\n\
    }\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        result.addAll(lst);\n\
    \        result.add(mid);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj_4co9oa.java:30)\n"
  stdout: ''
  timestamp: 1659798765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid * 2;\n        long mid4 = mid * 3;\n        long mid5 = mid * 4;\n     \
    \   long mid6 = mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid\
    \ * 7;\n        long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long\
    \ mid11 = mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid\
    \ * 12;\n        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n    \
    \    long mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18\
    \ = mid * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n\
    \        long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long\
    \ mid23 = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid\
    \ * 24;\n        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n    \
    \    long mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30\
    \ = mid * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n\
    \        long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long\
    \ mid35 = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid\
    \ * 36;\n        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n    \
    \    long mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42\
    \ = mid * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n\
    \        long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long\
    \ mid47 = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = m\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqylpefs1.java:71: error: ';' expected\n        long mid49 = m\n\
    \                      ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long min = lst.stream().min(Long::compare).get();\n\
    \        Long max = lst.stream().max(Long::compare).get();\n        Long min2\
    \ = lst.stream().min(Long::compare).get();\n        Long max2 = lst.stream().max(Long::compare).get();\n\
    \        Long min3 = lst.stream().min(Long::compare).get();\n        Long max3\
    \ = lst.stream().max(Long::compare).get();\n        Long min4 = lst.stream().min(Long::compare).get();\n\
    \        Long max4 = lst.stream().max(Long::compare).get();\n        Long min5\
    \ = lst.stream().min(Long::compare).get();\n        Long max5 = lst.stream().max(Long::compare).get();\n\
    \        Long min6 = lst.stream().min(Long::compare).get();\n        Long max6\
    \ = lst.stream().max(Long::compare).get();\n        Long min7 = lst.stream().min(Long::compare).get();\n\
    \        Long max7 = lst.stream().max(Long::compare).get();\n        Long min8\
    \ = lst.stream().min(Long::compare).get();\n        Long max8 = lst.stream().max(Long::compare).get();\n\
    \        Long min9 = lst.stream().min(Long::compare).get();\n        Long max9\
    \ = lst.stream().max(Long::compare).get();\n        Long min10 = lst.stream().min(Long::compare).get();\n\
    \        Long max10 = lst.stream().max(Long::compare).get();\n        Long min11\
    \ = lst.stream().min(Long::compare).get();\n        Long max11 = lst.stream().max(Long::compare).get();\n\
    \        Long min12 = lst.stream().min(Long::compare).get();\n        Long max12\
    \ = lst.stream().max(Long::compare).get();\n        Long min13 = lst.stream().min(Long::compare).get();\n\
    \        Long max13 = lst.stream().max(Long::compare).get();\n        Long min14\
    \ = lst.stream().min(Long::compare).get();\n        Long max14 = lst.stream().max(Long::compare).get();\n\
    \        Long min15 = lst.stream().min(Long::compare).get();\n        Long max15\
    \ = lst.stream().max(Long::compare).get();\n        Long min16 = lst.stream().min(Long::compare).get();\n\
    \        Long\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp1nh9s1p.java:52: error: not a statement\n        Long\n      \
    \  ^\n/tmp/tmpp1nh9s1p.java:52: error: ';' expected\n        Long\n          \
    \  ^\n2 errors\n"
  stdout: ''
  timestamp: 1659798765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4q31vq6.java:64: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(min);\n        result.add(mid);\n\
    \        result.add(max);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_12insaf.java:30)\n"
  stdout: ''
  timestamp: 1659798765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min().getAsLong();\n       \
    \ long max = lst.stream().max().getAsLong();\n        long current = min;\n  \
    \      long nextMax = max;\n        long nextMin = min;\n        long nextCurrent\
    \ = current;\n        long nextNextMax = nextMax;\n        long nextNextMin =\
    \ nextMin;\n        long nextNextCurrent = nextCurrent;\n        long nextNextNextMax\
    \ = nextNextMax;\n        long nextNextNextMin = nextNextMin;\n        long nextNextNextCurrent\
    \ = nextNextCurrent;\n        long nextNextNextNextMax = nextNextNextMax;\n  \
    \      long nextNextNextNextMin = nextNextNextMin;\n        long nextNextNextNextCurrent\
    \ = nextNextNextCurrent;\n        long nextNextNextNextNextMax = nextNextNextNextMax;\n\
    \        long nextNextNextNextNextMin = nextNextNextNextMin;\n        long nextNextNextNextNextCurrent\
    \ = nextNextNextNextCurrent;\n        long nextNextNextNextNextNextMax = nextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextMin = nextNextNextNextNextMin;\n       \
    \ long nextNextNextNextNextNextCurrent = nextNextNextNextNextCurrent;\n      \
    \  long nextNextNextNextNextNextNextMax = nextNextNextNextNextNextMax;\n     \
    \   long nextNextNextNextNextNextNextMin = nextNextNextNextNextNextMin;\n    \
    \    long nextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextMin = nextNextNextNextNextNextNextNextMin;\n\
    \        long nextNextNextNextNextNextNextNextCurrent = nextNextNextNextNextNextNextNextCurrent;\n\
    \        long nextNextNextNextNextNextNextNextNextMax = nextNextNextNextNextNextNextNextNextMax;\n\
    \        long nextNextNextNextNextNextNextNextNextMin = next\n    }\n    public\
    \ static void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0y0_jfji.java:52: error: ';' expected\n        long nextNextNextNextNextNextNextNextNextMin\
    \ = next\n                                                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659798765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long min = lst.stream().min(Long::compareTo).get();\n\
    \        Long max = lst.stream().max(Long::compareTo).get();\n        Long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min3 = lst.stream().min(Long::compareTo).get();\n        Long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max4 = lst.stream().max(Long::compareTo).get();\n        Long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min6 = lst.stream().min(Long::compareTo).get();\n        Long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max7 = lst.stream().max(Long::compareTo).get();\n        Long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min9 = lst.stream().min(Long::compareTo).get();\n        Long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max10 = lst.stream().max(Long::compareTo).get();\n        Long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min12 = lst.stream().min(Long::compareTo).get();\n        Long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        Long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        Long max13 = lst.stream().max(Long::compareTo).get();\n        Long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        Long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        Long min15 = lst.stream().min(Long::compareTo).get();\n        Long max15\
    \ = l\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz382k3kz.java:50: error: ';' expected\n        Long max15 = l\n\
    \                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().max(Long::compareTo).get();\n\
    \        long min = lst.stream().min(Long::compareTo).get();\n        long max\
    \ = lst.stream().max(Long::compareTo).get();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min\
    \ = lst.stream().min(Long::compareTo).get();\n        long max = lst.stream().\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp07oyfkfk.java:54: error: <identifier> expected\n        long max\
    \ = lst.stream().\n                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long min2\
    \ = lst.stream().min(Long::compareTo).get();\n        long max2 = lst.stream().max(Long::compareTo).get();\n\
    \        long min3 = lst.stream().min(Long::compareTo).get();\n        long max3\
    \ = lst.stream().max(Long::compareTo).get();\n        long min4 = lst.stream().min(Long::compareTo).get();\n\
    \        long max4 = lst.stream().max(Long::compareTo).get();\n        long min5\
    \ = lst.stream().min(Long::compareTo).get();\n        long max5 = lst.stream().max(Long::compareTo).get();\n\
    \        long min6 = lst.stream().min(Long::compareTo).get();\n        long max6\
    \ = lst.stream().max(Long::compareTo).get();\n        long min7 = lst.stream().min(Long::compareTo).get();\n\
    \        long max7 = lst.stream().max(Long::compareTo).get();\n        long min8\
    \ = lst.stream().min(Long::compareTo).get();\n        long max8 = lst.stream().max(Long::compareTo).get();\n\
    \        long min9 = lst.stream().min(Long::compareTo).get();\n        long max9\
    \ = lst.stream().max(Long::compareTo).get();\n        long min10 = lst.stream().min(Long::compareTo).get();\n\
    \        long max10 = lst.stream().max(Long::compareTo).get();\n        long min11\
    \ = lst.stream().min(Long::compareTo).get();\n        long max11 = lst.stream().max(Long::compareTo).get();\n\
    \        long min12 = lst.stream().min(Long::compareTo).get();\n        long max12\
    \ = lst.stream().max(Long::compareTo).get();\n        long min13 = lst.stream().min(Long::compareTo).get();\n\
    \        long max13 = lst.stream().max(Long::compareTo).get();\n        long min14\
    \ = lst.stream().min(Long::compareTo).get();\n        long max14 = lst.stream().max(Long::compareTo).get();\n\
    \        long min15 = lst.stream().min(Long::compareTo).get();\n        long max15\
    \ = lst.stream().max(Long::compareTo).get();\n        long min16 = lst.stream().min(Long::compareTo).get();\n\
    \        long \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ip8cpqt.java:52: error: not a statement\n        long \n     \
    \   ^\n/tmp/tmp3ip8cpqt.java:52: error: ';' expected\n        long \n        \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Long minValue = lst.get(0);\n        Long maxValue =\
    \ lst.get(lst.size() - 1);\n        Long minIndex = lst.indexOf(minValue);\n \
    \       Long maxIndex = lst.indexOf(maxValue);\n        Long minIndex2 = lst.indexOf(minValue,\
    \ minIndex + 1);\n        Long maxIndex2 = lst.indexOf(maxValue, maxIndex + 1);\n\
    \        Long minIndex3 = lst.indexOf(minValue, minIndex2 + 1);\n        Long\
    \ maxIndex3 = lst.indexOf(maxValue, maxIndex2 + 1);\n        Long minIndex4 =\
    \ lst.indexOf(minValue, minIndex3 + 1);\n        Long maxIndex4 = lst.indexOf(maxValue,\
    \ maxIndex3 + 1);\n        Long minIndex5 = lst.indexOf(minValue, minIndex4 +\
    \ 1);\n        Long maxIndex5 = lst.indexOf(maxValue, maxIndex4 + 1);\n      \
    \  Long minIndex6 = lst.indexOf(minValue, minIndex5 + 1);\n        Long maxIndex6\
    \ = lst.indexOf(maxValue, maxIndex5 + 1);\n        Long minIndex7 = lst.indexOf(minValue,\
    \ minIndex6 + 1);\n        Long maxIndex7 = lst.indexOf(maxValue, maxIndex6 +\
    \ 1);\n        Long minIndex8 = lst.indexOf(minValue, minIndex7 + 1);\n      \
    \  Long maxIndex8 = lst.indexOf(maxValue, maxIndex7 + 1);\n        Long minIndex9\
    \ = lst.indexOf(minValue, minIndex8 + 1);\n        Long maxIndex9 = lst.indexOf(maxValue,\
    \ maxIndex8 + 1);\n        Long minIndex10 = lst.indexOf(minValue, minIndex9 +\
    \ 1);\n        Long maxIndex10 = lst.indexOf(maxValue, maxIndex9 + 1);\n     \
    \   Long minIndex11 = lst.indexOf(minValue, minIndex10 + 1);\n        Long maxIndex11\
    \ = lst.indexOf(maxValue, maxIndex10 + 1);\n        Long minIndex12 = lst.indexOf(minValue,\
    \ minIndex11 + 1);\n        Long maxIndex12 = lst.indexOf(maxValue, maxIndex11\
    \ + 1);\n        Long minIndex13 = lst.indexOf(minValue, minIndex12 + 1);\n  \
    \      Long maxIndex13 = lst.indexOf(maxValue, maxIndex12 + 1);\n        Long\
    \ minIndex14 = lst.indexOf(minValue, minIndex13 + 1);\n        Long maxIndex14\
    \ = lst.indexOf(maxValue, maxIndex13 + 1);\n        Long minIndex15 = lst.indexOf(minValue,\
    \ minIndex14 + 1);\n        Long maxIndex15 = lst.indexOf(maxValue, maxIndex14\
    \ + 1);\n        Long minIndex16 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzzw18l34.java:54: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798765
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long min = lst.stream().mapToLong(Long::longValue).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(Long::longValue).max().getAsLong();\n\
    \        long current = min;\n        long next = max;\n        while (current\
    \ != next) {\n            result.add(current);\n            next = current + 1;\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659798771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \        Collections.reverse(lst);\n        Collections.reverse(lst);\n      \
    \  Collections.reverse(lst);\n        Collections.reverse(lst);\n        Collections.reverse(lst);\n\
    \n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpurmqi6q9.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid / 3;\n        long mid4 = mid / 4;\n        long mid5 = mid / 5;\n     \
    \   long mid6 = mid / 6;\n        long mid7 = mid / 7;\n        long mid8 = mid\
    \ / 8;\n        long mid9 = mid / 9;\n        long mid10 = mid / 10;\n       \
    \ long mid11 = mid / 11;\n        long mid12 = mid / 12;\n        long mid13 =\
    \ mid / 13;\n        long mid14 = mid / 14;\n        long mid15 = mid / 15;\n\
    \        long mid16 = mid / 16;\n        long mid17 = mid / 17;\n        long\
    \ mid18 = mid / 18;\n        long mid19 = mid / 19;\n        long mid20 = mid\
    \ / 20;\n        long mid21 = mid / 21;\n        long mid22 = mid / 22;\n    \
    \    long mid23 = mid / 23;\n        long mid24 = mid / 24;\n        long mid25\
    \ = mid / 25;\n        long mid26 = mid / 26;\n        long mid27 = mid / 27;\n\
    \        long mid28 = mid / 28;\n        long mid29 = mid / 29;\n        long\
    \ mid30 = mid / 30;\n        long mid31 = mid / 31;\n        long mid32 = mid\
    \ / 32;\n        long mid33 = mid / 33;\n        long mid34 = mid / 34;\n    \
    \    long mid35 = mid / 35;\n        long mid36 = mid / 36;\n        long mid37\
    \ = mid / 37;\n        long mid38 = mid / 38;\n        long mid39 = mid / 39;\n\
    \        long mid40 = mid / 40;\n        long mid41 = mid / 41;\n        long\
    \ mid42 = mid / 42;\n        long mid43 = mid / 43;\n        long mid44 = mid\
    \ / 44;\n        long mid45 = mid / 45;\n        long mid46 = mid / 46;\n    \
    \    long mid47 = mid / 47;\n        long mid48 = mid / 48;\n        long mid49\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupek4yp4.java:71: error: ';' expected\n        long mid49\n   \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long current\
    \ = min;\n        long next = max;\n        boolean done = false;\n        do\
    \ {\n            done = true;\n            for (long i = current; i != next; i\
    \ = next) {\n                next = i;\n                done = false;\n      \
    \          result.add(current);\n            }\n            current = next;\n\
    \            next = current + 1;\n        } while (!done);\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659798771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        Long minValue = lst.get(0);\n        Long maxValue\
    \ = lst.get(lst.size() - 1);\n        Long minIndex = 0;\n        Long maxIndex\
    \ = 0;\n        Long minIndex2 = maxIndex;\n        Long maxIndex2 = minIndex;\n\
    \        Long minIndex3 = maxIndex;\n        Long maxIndex3 = minIndex;\n    \
    \    Long minIndex4 = maxIndex;\n        Long maxIndex4 = minIndex;\n        Long\
    \ minIndex5 = maxIndex;\n        Long maxIndex5 = minIndex;\n        Long minIndex6\
    \ = maxIndex;\n        Long maxIndex6 = minIndex;\n        Long minIndex7 = maxIndex;\n\
    \        Long maxIndex7 = minIndex;\n        Long minIndex8 = maxIndex;\n    \
    \    Long maxIndex8 = minIndex;\n        Long minIndex9 = maxIndex;\n        Long\
    \ maxIndex9 = minIndex;\n        Long minIndex10 = maxIndex;\n        Long maxIndex10\
    \ = minIndex;\n        Long minIndex11 = maxIndex;\n        Long maxIndex11 =\
    \ minIndex;\n        Long minIndex12 = maxIndex;\n        Long maxIndex12 = minIndex;\n\
    \        Long minIndex13 = maxIndex;\n        Long maxIndex13 = minIndex;\n  \
    \      Long minIndex14 = maxIndex;\n        Long maxIndex14 = minIndex;\n    \
    \    Long minIndex15 = maxIndex;\n        Long maxIndex15 = minIndex;\n      \
    \  Long minIndex16 = maxIndex;\n        Long maxIndex16 = minIndex;\n        Long\
    \ minIndex17 = maxIndex;\n        Long maxIndex17 = minIndex;\n        Long minIndex18\
    \ = maxIndex;\n        Long maxIndex18 = minIndex;\n        Long minIndex19 =\
    \ maxIndex;\n        Long maxIndex19 = minIndex;\n        Long minIndex20 = maxIndex;\n\
    \        Long maxIndex20 = minIndex;\n        Long minIndex21 = maxIndex;\n  \
    \      Long maxIndex21 = minIndex;\n        Long minIndex22 = maxIndex;\n    \
    \    Long maxIndex22 = minIndex;\n        Long minIndex23 = maxIndex;\n      \
    \  Long maxIndex23 = minIndex;\n        Long minIndex24 = maxIndex;\n        Long\
    \ maxIndex24 = minIndex;\n        Long minIndex25 = maxIndex;\n        Long maxIndex25\
    \ = minIndex;\n        Long minIndex26 = max\n    }\n    public static void main(String[]\
    \ args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmf77r7u4.java:73: error: ';' expected\n        Long minIndex26\
    \ = max\n                             ^\n1 error\n"
  stdout: ''
  timestamp: 1659798765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        Collections.sort(lst);\n        Collections.reverse(lst);\n\
    \        for (Long i : lst) {\n            result.add(i);\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjguaug93.java:29)\n"
  stdout: ''
  timestamp: 1659798760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compare).get();\n\
    \        long max = lst.stream().max(Long::compare).get();\n        long min2\
    \ = lst.stream().min(Long::compare).get();\n        long max2 = lst.stream().max(Long::compare).get();\n\
    \        long min3 = lst.stream().min(Long::compare).get();\n        long max3\
    \ = lst.stream().max(Long::compare).get();\n        long min4 = lst.stream().min(Long::compare).get();\n\
    \        long max4 = lst.stream().max(Long::compare).get();\n        long min5\
    \ = lst.stream().min(Long::compare).get();\n        long max5 = lst.stream().max(Long::compare).get();\n\
    \        long min6 = lst.stream().min(Long::compare).get();\n        long max6\
    \ = lst.stream().max(Long::compare).get();\n        long min7 = lst.stream().min(Long::compare).get();\n\
    \        long max7 = lst.stream().max(Long::compare).get();\n        long min8\
    \ = lst.stream().min(Long::compare).get();\n        long max8 = lst.stream().max(Long::compare).get();\n\
    \        long min9 = lst.stream().min(Long::compare).get();\n        long max9\
    \ = lst.stream().max(Long::compare).get();\n        long min10 = lst.stream().min(Long::compare).get();\n\
    \        long max10 = lst.stream().max(Long::compare).get();\n        long min11\
    \ = lst.stream().min(Long::compare).get();\n        long max11 = lst.stream().max(Long::compare).get();\n\
    \        long min12 = lst.stream().min(Long::compare).get();\n        long max12\
    \ = lst.stream().max(Long::compare).get();\n        long min13 = lst.stream().min(Long::compare).get();\n\
    \        long max13 = lst.stream().max(Long::compare).get();\n        long min14\
    \ = lst.stream().min(Long::compare).get();\n        long max14 = lst.stream().max(Long::compare).get();\n\
    \        long min15 = lst.stream().min(Long::compare).get();\n        long max15\
    \ = lst.stream().max(Long::compare).get();\n        long min16 = lst.stream().min(Long::compare).get();\n\
    \        long max16 = lst.stream().max(Long::compare).get();\n        long min17\
    \ = lst.stream().min(Long::compare).get();\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyw7gfsa8.java:55: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659798766
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        long mid2 = min + (max - min) / 2;\n     \
    \   long mid3 = min + (max - min) / 2;\n        long mid4 = min + (max - min)\
    \ / 2;\n        long mid5 = min + (max - min) / 2;\n        long mid6 = min +\
    \ (max - min) / 2;\n        long mid7 = min + (max - min) / 2;\n        long mid8\
    \ = min + (max - min) / 2;\n        long mid9 = min + (max - min) / 2;\n     \
    \   long mid10 = min + (max - min) / 2;\n        long mid11 = min + (max - min)\
    \ / 2;\n        long mid12 = min + (max - min) / 2;\n        long mid13 = min\
    \ + (max - min) / 2;\n        long mid14 = min + (max - min) / 2;\n        long\
    \ mid15 = min + (max - min) / 2;\n        long mid16 = min + (max - min) / 2;\n\
    \        long mid17 = min + (max - min) / 2;\n        long mid18 = min + (max\
    \ - min) / 2;\n        long mid19 = min + (max - min) / 2;\n        long mid20\
    \ = min + (max - min) / 2;\n        long mid21 = min + (max - min) / 2;\n    \
    \    long mid22 = min + (max - min) / 2;\n        long mid23 = min + (max - min)\
    \ / 2;\n        long mid24 = min + (max - min) / 2;\n        long mid25 = min\
    \ + (max - min) / 2;\n        long mid26 = min + (max - min) / 2;\n        long\
    \ mid27 = min + (max - min) / 2;\n        long mid28 = min + (max - min) / 2;\n\
    \        long mid29 = min + (max - min) / 2;\n        long mid30 = min + (max\
    \ - min) / 2;\n        long mid31 = min + (max - min) / 2;\n        long mid32\
    \ = min + (max - min) / 2;\n        long mid33 = min + (max - min) / 2;\n    \
    \    long mid34 = min + (max - min) / 2;\n        long mid35 = min + (max - min)\
    \ / 2;\n        long mid36 = min + (max - min) / 2;\n        long mid37 = min\
    \ + (max - min) / 2;\n        long mid38 = min + (max - min) / 2;\n        long\
    \ mid39 = min + (max - min) / 2;\n        long mid40 = min + (max - min) / 2;\n\
    \        long mid41 = \n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4q31vq6.java:64: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659798757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().min(Long::compareTo).get();\n\
    \        long max = lst.stream().max(Long::compareTo).get();\n        long mid\
    \ = min + (max - min) / 2;\n        result.add(mid);\n        long curr = mid;\n\
    \        long nextMin = mid;\n        long nextMax = mid;\n        for (long i\
    \ : lst) {\n            if (i > mid) {\n                result.add(curr);\n  \
    \              curr = next;\n                nextMin = mid;\n                nextMax\
    \ = mid;\n            } else if (i < mid) {\n                nextMin = i;\n  \
    \              nextMax = i;\n            } else {\n                nextMin = i;\n\
    \                nextMax = i;\n            }\n        }\n        result.add(curr);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprjta6ubj.java:31: error: cannot find symbol\n                curr\
    \ = next;\n                       ^\n  symbol:   variable next\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1659798766
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of integers, return list in strange order.\n\
    \    // Strange sorting, is when you start with the minimum value,\n    // then\
    \ maximum of the remaining integers, then minimum and so on.\n    // Examples:\n\
    \    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l))))\n    // (new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)4l, (long)2l, (long)3l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l, (long)5l, (long)5l)))\n    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ strangeSortList(ArrayList<Long> lst) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long min = lst.stream().mapToLong(Long::longValue).min().getAsLong();\n\
    \        long max = lst.stream().mapToLong(Long::longValue).max().getAsLong();\n\
    \        long current = min;\n        while (current <= max) {\n            result.add(current);\n\
    \            current++;\n        }\n        current = min;\n        while (current\
    \ >= min) {\n            result.add(current);\n            current--;\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l,\
    \ (long)2l, (long)3l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)9l, (long)6l, (long)8l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)2l, (long)4l, (long)3l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l,\
    \ (long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)9l, (long)5l, (long)8l, (long)6l, (long)7l)))));\n    assert(strangeSortList((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))));\n\
    \    assert(strangeSortList((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)2l, (long)7l, (long)3l,\
    \ (long)6l, (long)4l, (long)5l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)2l, (long)2l, (long)5l, (long)5l, (long)-5l, (long)-5l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-5l, (long)5l, (long)-5l, (long)5l, (long)0l,\
    \ (long)2l, (long)2l, (long)2l)))));\n    assert(strangeSortList((new ArrayList<Long>(Arrays.asList((long)111111l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)111111l)))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgq9tmkna.java:36)\n"
  stdout: ''
  timestamp: 1659798766
