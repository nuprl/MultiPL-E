name: HumanEval_57_monotonic
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return True is list elements are monotonically increasing\
  \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)20l, (long)4l, (long)10l))))\n    // (false)\n    // >>> monotonic((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))))\n \
  \   // (true)\n    public static boolean monotonic(ArrayList<Long> l) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) == (true));\n\
  \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
  \ (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
  \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
  \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
completions: ["        boolean isMonotonic = true;\n        long prev = l.get(0);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n\
    \            if (current < prev) {\n                isMonotonic = false;\n   \
    \             break;\n            }\n            prev = current;\n        }\n\
    \        return isMonotonic;", "        boolean isIncreasing = true;\n       \
    \ boolean isDecreasing = true;\n        Long lastValue = l.get(l.size()-1);\n\
    \        Long currentValue = l.get(0);\n        for(int i = 1; i < l.size(); i++)\
    \ {\n            Long value = l.get(i);\n            isIncreasing &= (currentValue\
    \ < value);\n            isDecreasing &= (currentValue > value);\n           \
    \ currentValue = value;\n        }\n        return isIncreasing || isDecreasing;",
  "        long first = l.get(0);\n        long last = l.get(l.size() - 1);\n    \
    \    boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n   \
    \         if (current < first) {\n                increasing = false;\n      \
    \      } else if (current > last) {\n                decreasing = false;\n   \
    \         } else {\n                increasing = current < last;\n           \
    \     decreasing = current > first;\n            }\n            last = current;\n\
    \        }\n        return increasing || decreasing;", "        boolean isIncreasing\
    \ = true;\n        long prev = l.get(0);\n        for (long current : l) {\n \
    \           if (current < prev) {\n                isIncreasing = false;\n   \
    \         }\n            prev = current;\n        }\n        return isIncreasing;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long lastValue = Long.MIN_VALUE;\n        for (long value : l) {\n        \
    \    if (value > lastValue) {\n                increasing = false;\n         \
    \   }\n            if (value < lastValue) {\n                decreasing = false;\n\
    \            }\n            lastValue = value;\n        }\n        return increasing\
    \ || decreasing;", "        long prev = l.get(0);\n        for (long x : l)\n\
    \            if (x > prev)\n                return false;\n            else\n\
    \                prev = x; // prev now holds the largest element in the list\n\
    \        return true;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        long prev = l.get(0);\n        long current = l.get(1);\n \
    \       long next = l.get(2);\n        long diff = next - current;\n        if\
    \ (diff > 0) {\n            increasing = false;\n        }\n        if (diff <\
    \ 0) {\n            decreasing = false;\n        }\n        if (increasing &&\
    \ decreasing) {\n            return true;\n        }\n        if (increasing &&\
    \ !decreasing) {\n            return true;\n        }\n        if (decreasing\
    \ && !increasing) {\n            return true;\n        }\n        return false;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       long current = l.get(i);\n            if (current < prev) {\n        \
    \        decreasing = false;\n            } else if (current > prev) {\n     \
    \           increasing = false;\n            } else {\n                increasing\
    \ = decreasing = true;\n            }\n            prev = current;\n        }\n\
    \        return increasing || decreasing;", "        final long first = l.get(0);\n\
    \        final long last = l.get(l.size() - 1);\n        final long mid = (first\
    \ + last) / 2;\n        final long mid2 = mid / 2;\n        final long mid3 =\
    \ mid * 3;\n        final long mid4 = mid * 4;\n        final long mid5 = mid\
    \ * 5;\n        final long mid6 = mid * 6;\n        final long mid7 = mid * 7;\n\
    \        final long mid8 = mid * 8;\n        final long mid9 = mid * 9;\n    \
    \    final long mid10 = mid * 10;\n        final long mid11 = mid * 11;\n    \
    \    final long mid12 = mid * 12;\n        final long mid13 = mid * 13;\n    \
    \    final long mid14 = mid * 14;\n        final long mid15 = mid * 15;\n    \
    \    final long mid16 = mid * 16;\n        final long mid17 = mid * 17;\n    \
    \    final long mid18 = mid * 18;\n        final long mid19 = mid * 19;\n    \
    \    final long mid20 = mid * 20;\n        final long mid21 = mid * 21;\n    \
    \    final long mid22 = mid * 22;\n        final long mid23 = mid * 23;\n    \
    \    final long mid24 = mid * 24;\n        final long mid25 = mid * 25;\n    \
    \    final long mid26 = mid * 26;\n        final long mid27 = mid * 27;\n    \
    \    final long mid28 = mid * 28;\n        final long mid29 = mid * 29;\n    \
    \    final long mid30 = mid * 30;\n        final long mid31 = mid * 31;\n    \
    \    final long mid32 = mid * 32;\n        final long mid33 = mid * 33;\n    \
    \    final long mid34 = mid * 34;\n        final long mid35 = mid * 35;\n    \
    \    final long mid36 = mid * 36;\n        final long mid37 = mid * 37;\n    \
    \    final long mid38 = mid * 38;\n        final long mid39 = mid * 39;\n    \
    \    final long mid40 = mid * 40;\n        final long mid41 = mid * 41;\n    \
    \    final long mid42 = mid * 42;\n        final long mid43 = mid * 43;\n    \
    \    final long mid44 = mid * 44;\n        final long mid45 = mid * 45;\n    \
    \    final long mid46 = mid * 46;", "        boolean increasing = true;\n    \
    \    boolean decreasing = true;\n        long prev = l.get(0);\n        for (long\
    \ current : l) {\n            if (current < prev) {\n                decreasing\
    \ = false;\n            } else if (current > prev) {\n                increasing\
    \ = false;\n            } else {\n                increasing = decreasing = true;\n\
    \            }\n            prev = current;\n        }\n        return increasing\
    \ || decreasing;", "        final long first = l.get(0);\n        final long last\
    \ = l.get(l.size() - 1);\n        final long mid = first + (last - first) / 2;\n\
    \        final long mid2 = mid + (mid - first) / 2;\n        final long mid3 =\
    \ mid2 + (mid2 - first) / 2;\n        final long mid4 = mid3 + (mid3 - first)\
    \ / 2;\n        final long mid5 = mid4 + (mid4 - first) / 2;\n        final long\
    \ mid6 = mid5 + (mid5 - first) / 2;\n        final long mid7 = mid6 + (mid6 -\
    \ first) / 2;\n        final long mid8 = mid7 + (mid7 - first) / 2;\n        final\
    \ long mid9 = mid8 + (mid8 - first) / 2;\n        final long mid10 = mid9 + (mid9\
    \ - first) / 2;\n        final long mid11 = mid10 + (mid10 - first) / 2;\n   \
    \     final long mid12 = mid11 + (mid11 - first) / 2;\n        final long mid13\
    \ = mid12 + (mid12 - first) / 2;\n        final long mid14 = mid13 + (mid13 -\
    \ first) / 2;\n        final long mid15 = mid14 + (mid14 - first) / 2;\n     \
    \   final long mid16 = mid15 + (mid15 - first) / 2;\n        final long mid17\
    \ = mid16 + (mid16 - first) / 2;\n        final long mid18 = mid17 + (mid17 -\
    \ first) / 2;\n        final long mid19 = mid18 + (mid18 - first) / 2;\n     \
    \   final long mid20 = mid19 + (mid19 - first) / 2;\n        final long mid21\
    \ = mid20 + (mid20 - first) / 2;\n        final long mid22 = mid21 + (mid21 -\
    \ first) / 2;\n        final long mid23 = mid22 + (mid22 - first) / 2;\n     \
    \   final long mid24 = mid23 + (mid23 - first) / 2;\n        final long mid25\
    \ = mid24 + (mid24 - first) / 2;\n        final long mid26 = mid25 + (mid25 -\
    \ first) / 2;\n        final long mid27 = mid26 + (mid26 - first) / 2;\n     \
    \   final long mid28 = mid27 + (mid27 - first) / 2;\n        final long mid29\
    \ = mid28 + (mid28 - first) / 2;\n        final long mid30 = mid29 + (mid29 -\
    \ first) / 2;\n        final long mid31 = mid30 + (mid30 - first) / 2;\n     \
    \   final long mid32 = mid31 + (mid31 - first) / 2;", "        boolean isMonotonic\
    \ = true;\n        long first = l.get(0);\n        long last = l.get(l.size()\
    \ - 1);\n        long mid = first + (last - first) / 2;\n        boolean isIncreasing\
    \ = true;\n        boolean isDecreasing = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long current = l.get(i);\n            if (current < mid)\
    \ {\n                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isMonotonic = isMonotonic && isIncreasing && isDecreasing;\n           \
    \ }\n        }\n        return isMonotonic;", "        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        Long previous = null;\n        for\
    \ (Long current : l) {\n            if (current < previous) {\n              \
    \  decreasing = false;\n            } else if (current > previous) {\n       \
    \         increasing = false;\n            } else {\n                increasing\
    \ = decreasing = true;\n            }\n            previous = current;\n     \
    \   }\n        return increasing || decreasing;", "        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        long prev = Long.MIN_VALUE;\n\
    \        for (long current : l) {\n            if (current < prev) {\n       \
    \         decreasing = false;\n            } else if (current > prev) {\n    \
    \            increasing = false;\n            } else {\n                increasing\
    \ = decreasing = true;\n            }\n            prev = current;\n        }\n\
    \        return increasing || decreasing;", "        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        Long current = l.get(0);\n      \
    \  Long previous = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n  \
    \          Long next = l.get(i);\n            if (next < current) {\n        \
    \        decreasing = false;\n            } else if (next > current) {\n     \
    \           increasing = false;\n            } else {\n                current\
    \ = next;\n            }\n            previous = current;\n        }\n       \
    \ return increasing || decreasing;", "        boolean increasing = true;\n   \
    \     boolean decreasing = true;\n        long prev = l.get(0);\n        for (long\
    \ current : l) {\n            if (current < prev) {\n                decreasing\
    \ = false;\n            } else if (current > prev) {\n                increasing\
    \ = false;\n            } else {\n                increasing = decreasing = true;\n\
    \            }\n            prev = current;\n        }\n        return increasing\
    \ || decreasing;", "        long prev = l.get(0);\n        long curr = l.get(1);\n\
    \        long next = l.get(2);\n        boolean isIncreasing = true;\n       \
    \ if (curr < prev) {\n            isIncreasing = false;\n        }\n        if\
    \ (curr > next) {\n            isIncreasing = false;\n        }\n        return\
    \ isIncreasing;", "        final int n = l.size();\n        if (n == 0) return\
    \ true;\n        if (n == 1) return l.get(0) > l.get(1);\n        final long prev\
    \ = l.get(n - 1);\n        final long current = l.get(n - 2);\n        final long\
    \ next = l.get(n - 3);\n        return current > prev && current < next;", " \
    \       boolean increasing = true;\n        boolean decreasing = true;\n     \
    \   long lastValue = Long.MIN_VALUE;\n        for (long value : l) {\n       \
    \     if (value > lastValue) {\n                increasing = false;\n        \
    \    }\n            if (value < lastValue) {\n                decreasing = false;\n\
    \            }\n            lastValue = value;\n        }\n        return increasing\
    \ || decreasing;", "        boolean isIncreasing = true;\n        boolean isDecreasing\
    \ = true;\n        long prev = l.get(0);\n        long current = l.get(1);\n \
    \       for(int i = 2; i < l.size(); i++) {\n            long next = l.get(i);\n\
    \            if (current > next) {\n                isIncreasing = false;\n  \
    \          }\n            if (current < next) {\n                isDecreasing\
    \ = false;\n            }\n            if (current == prev) {\n              \
    \  isIncreasing = isIncreasing && isDecreasing;\n            }\n            prev\
    \ = current;\n            current = next;\n        }\n        return isIncreasing\
    \ || isDecreasing;"]
stop_tokens:
- "\n    }\n"
