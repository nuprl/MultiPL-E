name: HumanEval_57_monotonic
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return True is list elements are monotonically increasing\
  \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)20l, (long)4l, (long)10l))))\n    // (false)\n    // >>> monotonic((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))))\n \
  \   // (true)\n    public static boolean monotonic(ArrayList<Long> l) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) == (true));\n\
  \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
  \ (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
  \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
  \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
completions: ["        boolean isMonotonic = true;\n        long prev = l.get(0);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n\
    \            if (current < prev) {\n                isMonotonic = false;\n   \
    \             break;\n            }\n            prev = current;\n        }\n\
    \        return isMonotonic;", "        boolean isIncreasing = true;\n       \
    \ boolean isDecreasing = true;\n        Long lastValue = l.get(l.size()-1);\n\
    \        Long currentValue = l.get(0);\n        for(int i = 1; i < l.size(); i++)\
    \ {\n            Long value = l.get(i);\n            isIncreasing &= (currentValue\
    \ < value);\n            isDecreasing &= (currentValue > value);\n           \
    \ currentValue = value;\n        }\n        return isIncreasing || isDecreasing;",
  "        long first = l.get(0);\n        long last = l.get(l.size() - 1);\n    \
    \    boolean increasing = true;\n        boolean decreasing = true;\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n   \
    \         if (current < first) {\n                increasing = false;\n      \
    \      } else if (current > last) {\n                decreasing = false;\n   \
    \         } else {\n                increasing = current < last;\n           \
    \     decreasing = current > first;\n            }\n            last = current;\n\
    \        }\n        return increasing || decreasing;", "        boolean isIncreasing\
    \ = true;\n        long prev = l.get(0);\n        for (long current : l) {\n \
    \           if (current < prev) {\n                isIncreasing = false;\n   \
    \         }\n            prev = current;\n        }\n        return isIncreasing;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long lastValue = Long.MIN_VALUE;\n        for (long value : l) {\n        \
    \    if (value > lastValue) {\n                increasing = false;\n         \
    \   }\n            if (value < lastValue) {\n                decreasing = false;\n\
    \            }\n            lastValue = value;\n        }\n        return increasing\
    \ || decreasing;", "        long prev = l.get(0);\n        for (long x : l)\n\
    \            if (x > prev)\n                return false;\n            else\n\
    \                prev = x; // prev now holds the largest element in the list\n\
    \        return true;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        long prev = l.get(0);\n        long current = l.get(1);\n \
    \       long next = l.get(2);\n        long diff = next - current;\n        if\
    \ (diff > 0) {\n            increasing = false;\n        }\n        if (diff <\
    \ 0) {\n            decreasing = false;\n        }\n        if (increasing &&\
    \ decreasing) {\n            return true;\n        }\n        if (increasing &&\
    \ !decreasing) {\n            return true;\n        }\n        if (decreasing\
    \ && !increasing) {\n            return true;\n        }\n        return false;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       long current = l.get(i);\n            if (current < prev) {\n        \
    \        decreasing = false;\n            } else if (current > prev) {\n     \
    \           increasing = false;\n            } else {\n                increasing\
    \ = decreasing = true;\n            }\n            prev = current;\n        }\n\
    \        return increasing || decreasing;", "        final long first = l.get(0);\n\
    \        final long last = l.get(l.size() - 1);\n        final long mid = (first\
    \ + last) / 2;\n        final long mid2 = mid / 2;\n        final long mid3 =\
    \ mid * 3;\n        final long mid4 = mid * 4;\n        final long mid5 = mid\
    \ * 5;\n        final long mid6 = mid * 6;\n        final long mid7 = mid * 7;\n\
    \        final long mid8 = mid * 8;\n        final long mid9 = mid * 9;\n    \
    \    final long mid10 = mid * 10;\n        final long mid11 = mid * 11;\n    \
    \    final long mid12 = mid * 12;\n        final long mid13 = mid * 13;\n    \
    \    final long mid14 = mid * 14;\n        final long mid15 = mid * 15;\n    \
    \    final long mid16 = mid * 16;\n        final long mid17 = mid * 17;\n    \
    \    final long mid18 = mid * 18;\n        final long mid19 = mid * 19;\n    \
    \    final long mid20 = mid * 20;\n        final long mid21 = mid * 21;\n    \
    \    final long mid22 = mid * 22;\n        final long mid23 = mid * 23;\n    \
    \    final long mid24 = mid * 24;\n        final long mid25 = mid * 25;\n    \
    \    final long mid26 = mid * 26;\n        final long mid27 = mid * 27;\n    \
    \    final long mid28 = mid * 28;\n        final long mid29 = mid * 29;\n    \
    \    final long mid30 = mid * 30;\n        final long mid31 = mid * 31;\n    \
    \    final long mid32 = mid * 32;\n        final long mid33 = mid * 33;\n    \
    \    final long mid34 = mid * 34;\n        final long mid35 = mid * 35;\n    \
    \    final long mid36 = mid * 36;\n        final long mid37 = mid * 37;\n    \
    \    final long mid38 = mid * 38;\n        final long mid39 = mid * 39;\n    \
    \    final long mid40 = mid * 40;\n        final long mid41 = mid * 41;\n    \
    \    final long mid42 = mid * 42;\n        final long mid43 = mid * 43;\n    \
    \    final long mid44 = mid * 44;\n        final long mid45 = mid * 45;\n    \
    \    final long mid46 = mid * 46;", "        boolean increasing = true;\n    \
    \    boolean decreasing = true;\n        long prev = l.get(0);\n        for (long\
    \ current : l) {\n            if (current < prev) {\n                decreasing\
    \ = false;\n            } else if (current > prev) {\n                increasing\
    \ = false;\n            } else {\n                increasing = decreasing = true;\n\
    \            }\n            prev = current;\n        }\n        return increasing\
    \ || decreasing;", "        final long first = l.get(0);\n        final long last\
    \ = l.get(l.size() - 1);\n        final long mid = first + (last - first) / 2;\n\
    \        final long mid2 = mid + (mid - first) / 2;\n        final long mid3 =\
    \ mid2 + (mid2 - first) / 2;\n        final long mid4 = mid3 + (mid3 - first)\
    \ / 2;\n        final long mid5 = mid4 + (mid4 - first) / 2;\n        final long\
    \ mid6 = mid5 + (mid5 - first) / 2;\n        final long mid7 = mid6 + (mid6 -\
    \ first) / 2;\n        final long mid8 = mid7 + (mid7 - first) / 2;\n        final\
    \ long mid9 = mid8 + (mid8 - first) / 2;\n        final long mid10 = mid9 + (mid9\
    \ - first) / 2;\n        final long mid11 = mid10 + (mid10 - first) / 2;\n   \
    \     final long mid12 = mid11 + (mid11 - first) / 2;\n        final long mid13\
    \ = mid12 + (mid12 - first) / 2;\n        final long mid14 = mid13 + (mid13 -\
    \ first) / 2;\n        final long mid15 = mid14 + (mid14 - first) / 2;\n     \
    \   final long mid16 = mid15 + (mid15 - first) / 2;\n        final long mid17\
    \ = mid16 + (mid16 - first) / 2;\n        final long mid18 = mid17 + (mid17 -\
    \ first) / 2;\n        final long mid19 = mid18 + (mid18 - first) / 2;\n     \
    \   final long mid20 = mid19 + (mid19 - first) / 2;\n        final long mid21\
    \ = mid20 + (mid20 - first) / 2;\n        final long mid22 = mid21 + (mid21 -\
    \ first) / 2;\n        final long mid23 = mid22 + (mid22 - first) / 2;\n     \
    \   final long mid24 = mid23 + (mid23 - first) / 2;\n        final long mid25\
    \ = mid24 + (mid24 - first) / 2;\n        final long mid26 = mid25 + (mid25 -\
    \ first) / 2;\n        final long mid27 = mid26 + (mid26 - first) / 2;\n     \
    \   final long mid28 = mid27 + (mid27 - first) / 2;\n        final long mid29\
    \ = mid28 + (mid28 - first) / 2;\n        final long mid30 = mid29 + (mid29 -\
    \ first) / 2;\n        final long mid31 = mid30 + (mid30 - first) / 2;\n     \
    \   final long mid32 = mid31 + (mid31 - first) / 2;", "        boolean isMonotonic\
    \ = true;\n        long first = l.get(0);\n        long last = l.get(l.size()\
    \ - 1);\n        long mid = first + (last - first) / 2;\n        boolean isIncreasing\
    \ = true;\n        boolean isDecreasing = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long current = l.get(i);\n            if (current < mid)\
    \ {\n                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isMonotonic = isMonotonic && isIncreasing && isDecreasing;\n           \
    \ }\n        }\n        return isMonotonic;", "        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        Long previous = null;\n        for\
    \ (Long current : l) {\n            if (current < previous) {\n              \
    \  decreasing = false;\n            } else if (current > previous) {\n       \
    \         increasing = false;\n            } else {\n                increasing\
    \ = decreasing = true;\n            }\n            previous = current;\n     \
    \   }\n        return increasing || decreasing;", "        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        long prev = Long.MIN_VALUE;\n\
    \        for (long current : l) {\n            if (current < prev) {\n       \
    \         decreasing = false;\n            } else if (current > prev) {\n    \
    \            increasing = false;\n            } else {\n                increasing\
    \ = decreasing = true;\n            }\n            prev = current;\n        }\n\
    \        return increasing || decreasing;", "        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        Long current = l.get(0);\n      \
    \  Long previous = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n  \
    \          Long next = l.get(i);\n            if (next < current) {\n        \
    \        decreasing = false;\n            } else if (next > current) {\n     \
    \           increasing = false;\n            } else {\n                current\
    \ = next;\n            }\n            previous = current;\n        }\n       \
    \ return increasing || decreasing;", "        boolean increasing = true;\n   \
    \     boolean decreasing = true;\n        long prev = l.get(0);\n        for (long\
    \ current : l) {\n            if (current < prev) {\n                decreasing\
    \ = false;\n            } else if (current > prev) {\n                increasing\
    \ = false;\n            } else {\n                increasing = decreasing = true;\n\
    \            }\n            prev = current;\n        }\n        return increasing\
    \ || decreasing;", "        long prev = l.get(0);\n        long curr = l.get(1);\n\
    \        long next = l.get(2);\n        boolean isIncreasing = true;\n       \
    \ if (curr < prev) {\n            isIncreasing = false;\n        }\n        if\
    \ (curr > next) {\n            isIncreasing = false;\n        }\n        return\
    \ isIncreasing;", "        final int n = l.size();\n        if (n == 0) return\
    \ true;\n        if (n == 1) return l.get(0) > l.get(1);\n        final long prev\
    \ = l.get(n - 1);\n        final long current = l.get(n - 2);\n        final long\
    \ next = l.get(n - 3);\n        return current > prev && current < next;", " \
    \       boolean increasing = true;\n        boolean decreasing = true;\n     \
    \   long lastValue = Long.MIN_VALUE;\n        for (long value : l) {\n       \
    \     if (value > lastValue) {\n                increasing = false;\n        \
    \    }\n            if (value < lastValue) {\n                decreasing = false;\n\
    \            }\n            lastValue = value;\n        }\n        return increasing\
    \ || decreasing;", "        boolean isIncreasing = true;\n        boolean isDecreasing\
    \ = true;\n        long prev = l.get(0);\n        long current = l.get(1);\n \
    \       for(int i = 2; i < l.size(); i++) {\n            long next = l.get(i);\n\
    \            if (current > next) {\n                isIncreasing = false;\n  \
    \          }\n            if (current < next) {\n                isDecreasing\
    \ = false;\n            }\n            if (current == prev) {\n              \
    \  isIncreasing = isIncreasing && isDecreasing;\n            }\n            prev\
    \ = current;\n            current = next;\n        }\n        return isIncreasing\
    \ || isDecreasing;", "        boolean isMonotonic = true;\n        Long prev =\
    \ l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            Long current\
    \ = l.get(i);\n            if (current < prev) {\n                isMonotonic\
    \ = false;\n                break;\n            }\n            prev = current;\n\
    \        }\n        return isMonotonic;", "        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        long prev = l.get(0);\n        long\
    \ current = l.get(1);\n        for (int i = 2; i < l.size(); i++) {\n        \
    \    long next = l.get(i);\n            if (current < next) {\n              \
    \  decreasing = false;\n            } else if (current > next) {\n           \
    \     increasing = false;\n            } else {\n                current = next;\n\
    \            }\n            if (current < prev) {\n                decreasing\
    \ = false;\n            } else if (current > prev) {\n                increasing\
    \ = false;\n            } else {\n                prev = current;\n          \
    \  }\n        }\n        return increasing || decreasing;", "        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        Long first = l.get(0);\n\
    \        Long last = l.get(l.size() - 1);\n        if (first < last) {\n     \
    \       increasing = false;\n        }\n        if (first > last) {\n        \
    \    decreasing = false;\n        }\n        if (increasing && decreasing) {\n\
    \            return true;\n        }\n        if (increasing && !decreasing) {\n\
    \            return false;\n        }\n        if (!increasing && decreasing)\
    \ {\n            return false;\n        }\n        return increasing || decreasing;",
  "        if (l.isEmpty()) return false;\n        long first = l.get(0);\n      \
    \  long last = l.get(l.size() - 1);\n        boolean increasing = true;\n    \
    \    for (int i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n\
    \            if (current < first) {\n                increasing = false;\n   \
    \         } else if (current > last) {\n                increasing = true;\n \
    \           } else {\n                return increasing;\n            }\n    \
    \    }\n        return increasing;", "        final long min = l.get(0);\n   \
    \     final long max = l.get(l.size() - 1);\n        final long mid = min + (max\
    \ - min) / 2;\n        final long mid2 = mid + (max - min) / 2;\n        final\
    \ long mid3 = mid2 + (max - min) / 2;\n        final long mid4 = mid3 + (max -\
    \ min) / 2;\n        final long mid5 = mid4 + (max - min) / 2;\n        final\
    \ long mid6 = mid5 + (max - min) / 2;\n        final long mid7 = mid6 + (max -\
    \ min) / 2;\n        final long mid8 = mid7 + (max - min) / 2;\n        final\
    \ long mid9 = mid8 + (max - min) / 2;\n        final long mid10 = mid9 + (max\
    \ - min) / 2;\n        final long mid11 = mid10 + (max - min) / 2;\n        final\
    \ long mid12 = mid11 + (max - min) / 2;\n        final long mid13 = mid12 + (max\
    \ - min) / 2;\n        final long mid14 = mid13 + (max - min) / 2;\n        final\
    \ long mid15 = mid14 + (max - min) / 2;\n        final long mid16 = mid15 + (max\
    \ - min) / 2;\n        final long mid17 = mid16 + (max - min) / 2;\n        final\
    \ long mid18 = mid17 + (max - min) / 2;\n        final long mid19 = mid18 + (max\
    \ - min) / 2;\n        final long mid20 = mid19 + (max - min) / 2;\n        final\
    \ long mid21 = mid20 + (max - min) / 2;\n        final long mid22 = mid21 + (max\
    \ - min) / 2;\n        final long mid23 = mid22 + (max - min) / 2;\n        final\
    \ long mid24 = mid23 + (max - min) / 2;\n        final long mid25 = mid24 + (max\
    \ - min) / 2;\n        final long mid26 = mid25 + (max - min) / 2;\n        final\
    \ long mid27 = mid26 + (max - min) / 2;\n        final long mid28 = mid27 + (max\
    \ - min) / 2;\n        final long mid29 = mid28 + (max - min) / 2;\n        final\
    \ long mid30 = mid29 + (max - min) / 2;\n        final long mid31 = mid30 + (max\
    \ - min) / 2;\n        final long mid32 = mid31 + (max - min) / 2;\n        final\
    \ long mid33 = mid32 + (max - min) / 2;\n        final long mid34 = mid33 + (max\
    \ - min) / 2;\n        final long mid35 = mid34 + (max - min) / 2;\n        final\
    \ long mid36 = mid35 + (max - min) / 2;\n        final long ", "        final\
    \ long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n     \
    \   final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n\
    \        final long max = Long.MIN_VALUE;\n        final ", "        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        long prev = l.get(0);\n\
    \        long current = l.get(1);\n        for (int i = 2; i < l.size(); i++)\
    \ {\n            long next = l.get(i);\n            if (current > next) {\n  \
    \              decreasing = false;\n            } else if (current < next) {\n\
    \                increasing = false;\n            } else {\n                current\
    \ = next;\n            }\n            if (current < prev) {\n                decreasing\
    \ = false;\n            } else if (current > prev) {\n                increasing\
    \ = false;\n            } else {\n                prev = current;\n          \
    \  }\n        }\n        return increasing || decreasing;", "        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        Long prev = l.get(0);\n\
    \        for (Long current : l) {\n            if (current < prev) {\n       \
    \         decreasing = false;\n            } else if (current > prev) {\n    \
    \            increasing = false;\n            } else {\n                increasing\
    \ = decreasing = true;\n            }\n            prev = current;\n        }\n\
    \        return increasing || decreasing;", "        long prev = l.get(0);\n \
    \       boolean increasing = true;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            long current = l.get(i);\n            if (current < prev) {\n\
    \                increasing = false;\n            }\n            prev = current;\n\
    \        }\n        return increasing;", "        boolean isIncreasing = true;\n\
    \        boolean isDecreasing = true;\n        long prev = Long.MIN_VALUE;\n \
    \       for (long current : l) {\n            if (current < prev) {\n        \
    \        isDecreasing = false;\n            } else if (current > prev) {\n   \
    \             isIncreasing = false;\n            } else {\n                isIncreasing\
    \ &= current < prev;\n                isDecreasing &= current > prev;\n      \
    \      }\n            prev = current;\n        }\n        return isIncreasing\
    \ || isDecreasing;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        long prev = l.get(0);\n        for(long e : l) {\n        \
    \    if(e < prev) {\n                decreasing = false;\n            }\n    \
    \        if(e > prev) {\n                increasing = false;\n            }\n\
    \            prev = e;\n        }\n        return increasing || decreasing;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  Long prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       Long current = l.get(i);\n            if (current < prev) {\n        \
    \        decreasing = false;\n            } else if (current > prev) {\n     \
    \           increasing = false;\n            } else {\n                increasing\
    \ = increasing && increasing;\n                decreasing = decreasing && decreasing;\n\
    \            }\n            prev = current;\n        }\n        return increasing\
    \ || decreasing;", "        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n\
    \        for (long e : l) {\n            if (e < min) {\n                min =\
    \ e;\n            }\n            if (e > max) {\n                max = e;\n  \
    \          }\n        }\n        return min <= max;", "        long min = Long.MAX_VALUE;\n\
    \        long max = Long.MIN_VALUE;\n        for (long e : l) {\n            if\
    \ (e < min) {\n                min = e;\n            }\n            if (e > max)\
    \ {\n                max = e;\n            }\n        }\n        return min <=\
    \ max;", "        boolean increasing = true;\n        boolean decreasing = true;\n\
    \        long first = l.get(0);\n        long last = l.get(l.size() - 1);\n  \
    \      for (long current : l) {\n            if (current < first) {\n        \
    \        decreasing = false;\n            }\n            if (current > last) {\n\
    \                increasing = false;\n            }\n        }\n        return\
    \ increasing || decreasing;", "        long max = Long.MIN_VALUE;\n        long\
    \ min = Long.MAX_VALUE;\n        for (long e : l) {\n            if (e < min)\
    \ min = e;\n            if (e > max) max = e;\n        }\n        return max >=\
    \ min;", "        long prev = l.get(0);\n        long curr = l.get(1);\n     \
    \   for(int i = 2; i < l.size(); i++) {\n            long next = l.get(i);\n \
    \           if(curr < next) {\n                return false;\n            }\n\
    \            if(curr > prev) {\n                return true;\n            }\n\
    \            prev = curr;\n            curr = next;\n        }\n        return\
    \ false;", "        long max = Long.MIN_VALUE;\n        long min = Long.MAX_VALUE;\n\
    \        for (long e : l) {\n            if (e < min) min = e;\n            if\
    \ (e > max) max = e;\n        }\n        return min < max;", "        long prev\
    \ = l.get(0);\n        for (long current : l) {\n            if (current < prev)\
    \ {\n                return false;\n            }\n            prev = current;\n\
    \        }\n        return true;", "        boolean isIncreasing = true;\n   \
    \     boolean isDecreasing = true;\n        Long lastValue = l.get(0);\n     \
    \   for (Long value : l) {\n            if (value > lastValue) {\n           \
    \     isIncreasing = false;\n            } else if (value < lastValue) {\n   \
    \             isDecreasing = false;\n            }\n            lastValue = value;\n\
    \        }\n        return isIncreasing || isDecreasing;", "        boolean isIncreasing\
    \ = true;\n        boolean isDecreasing = true;\n        long lastElement = l.get(l.size()-1);\n\
    \        for(long element : l) {\n            if(element < lastElement) {\n  \
    \              isDecreasing = false;\n            }\n            if(element >\
    \ lastElement) {\n                isIncreasing = false;\n            }\n     \
    \       lastElement = element;\n        }\n        return isIncreasing || isDecreasing;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       long current = l.get(i);\n            if (current < prev) {\n        \
    \        decreasing = false;\n            } else if (current > prev) {\n     \
    \           increasing = false;\n            } else {\n                increasing\
    \ = increasing && increasing;\n                decreasing = decreasing && decreasing;\n\
    \            }\n            prev = current;\n        }\n        return increasing\
    \ || decreasing;", "        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n\
    \        for (long e : l) {\n            if (e < min) min = e;\n            if\
    \ (e > max) max = e;\n        }\n        return min <= max;", "        final long\
    \ first = l.get(0);\n        final long last = l.get(l.size() - 1);\n        final\
    \ long mid = first + (last - first) / 2;\n        final long mid2 = mid / 2;\n\
    \        final long mid3 = mid2 / 2;\n        final long mid4 = mid3 / 2;\n  \
    \      final long mid5 = mid4 / 2;\n        final long mid6 = mid5 / 2;\n    \
    \    final long mid7 = mid6 / 2;\n        final long mid8 = mid7 / 2;\n      \
    \  final long mid9 = mid8 / 2;\n        final long mid10 = mid9 / 2;\n       \
    \ final long mid11 = mid10 / 2;\n        final long mid12 = mid11 / 2;\n     \
    \   final long mid13 = mid12 / 2;\n        final long mid14 = mid13 / 2;\n   \
    \     final long mid15 = mid14 / 2;\n        final long mid16 = mid15 / 2;\n \
    \       final long mid17 = mid16 / 2;\n        final long mid18 = mid17 / 2;\n\
    \        final long mid19 = mid18 / 2;\n        final long mid20 = mid19 / 2;\n\
    \        final long mid21 = mid20 / 2;\n        final long mid22 = mid21 / 2;\n\
    \        final long mid23 = mid22 / 2;\n        final long mid24 = mid23 / 2;\n\
    \        final long mid25 = mid24 / 2;\n        final long mid26 = mid25 / 2;\n\
    \        final long mid27 = mid26 / 2;\n        final long mid28 = mid27 / 2;\n\
    \        final long mid29 = mid28 / 2;\n        final long mid30 = mid29 / 2;\n\
    \        final long mid31 = mid30 / 2;\n        final long mid32 = mid31 / 2;\n\
    \        final long mid33 = mid32 / 2;\n        final long mid34 = mid33 / 2;\n\
    \        final long mid35 = mid34 / 2;\n        final long mid36 = mid35 / 2;\n\
    \        final long mid37 = mid36 / 2;\n        final long mid38 = mid37 / 2;\n\
    \        final long mid39 = mid38 / 2;\n        final long mid40 = mid39 / 2;\n\
    \        final long mid41 = mid40 / 2;\n        final long mid42 = mid41 / 2;\n\
    \        final long mid43 = mid42 / 2;\n        final long mid44 = mid43 / 2;\n\
    \        final long mid45 = mid44 / 2;\n        final long mid46 = mid", "   \
    \     boolean increasing = true;\n        boolean decreasing = true;\n       \
    \ long first = l.get(0);\n        long last = l.get(l.size() - 1);\n        for\
    \ (long i = 1, j = l.size() - 1; i <= j; i++, j--) {\n            if (l.get(i)\
    \ > l.get(j)) {\n                increasing = false;\n            }\n        \
    \    if (l.get(i) < l.get(j)) {\n                decreasing = false;\n       \
    \     }\n        }\n        if (increasing && decreasing) {\n            return\
    \ true;\n        }\n        if (increasing && !decreasing) {\n            return\
    \ true;\n        }\n        if (decreasing && !increasing) {\n            return\
    \ true;\n        }\n        return false;", "        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        long mid = first + (last - first) / 2;\n\
    \        long mid2 = first + (last - first) / 2;\n        long mid3 = first +\
    \ (last - first) / 2;\n        long mid4 = first + (last - first) / 2;\n     \
    \   long mid5 = first + (last - first) / 2;\n        long mid6 = first + (last\
    \ - first) / 2;\n        long mid7 = first + (last - first) / 2;\n        long\
    \ mid8 = first + (last - first) / 2;\n        long mid9 = first + (last - first)\
    \ / 2;\n        long mid10 = first + (last - first) / 2;\n        long mid11 =\
    \ first + (last - first) / 2;\n        long mid12 = first + (last - first) / 2;\n\
    \        long mid13 = first + (last - first) / 2;\n        long mid14 = first\
    \ + (last - first) / 2;\n        long mid15 = first + (last - first) / 2;\n  \
    \      long mid16 = first + (last - first) / 2;\n        long mid17 = first +\
    \ (last - first) / 2;\n        long mid18 = first + (last - first) / 2;\n    \
    \    long mid19 = first + (last - first) / 2;\n        long mid20 = first + (last\
    \ - first) / 2;\n        long mid21 = first + (last - first) / 2;\n        long\
    \ mid22 = first + (last - first) / 2;\n        long mid23 = first + (last - first)\
    \ / 2;\n        long mid24 = first + (last - first) / 2;\n        long mid25 =\
    \ first + (last - first) / 2;\n        long mid26 = first + (last - first) / 2;\n\
    \        long mid27 = first + (last - first) / 2;\n        long mid28 = first\
    \ + (last - first) / 2;\n        long mid29 = first + (last - first) / 2;\n  \
    \      long mid30 = first + (last - first) / 2;\n        long mid31 = first +\
    \ (last - first) / 2;\n        long mid32 = first + (last - first) / 2;\n    \
    \    long mid33 = first + (last - first) / 2;\n        long mid34 = first + (last\
    \ - first) / 2;\n        long mid35 = first + (last - first) / 2;\n        long\
    \ mid36 = first + (last - first) / 2;\n        long mid37 = first + (last - first)\
    \ / 2;\n        long mid38 = first + (last - first) / 2;", "        boolean isIncreasing\
    \ = true;\n        boolean isDecreasing = true;\n        long lastValue = l.get(0);\n\
    \        long currentValue = l.get(0);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            currentValue = l.get(i);\n            if (currentValue <\
    \ lastValue) {\n                isIncreasing = false;\n            } else if (currentValue\
    \ > lastValue) {\n                isDecreasing = false;\n            }\n     \
    \       lastValue = currentValue;\n        }\n        return isIncreasing || isDecreasing;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        for\
    \ (Long e : l) {\n            if (e < first) {\n                increasing = false;\n\
    \            } else if (e > last) {\n                decreasing = false;\n   \
    \         } else {\n                increasing = decreasing = true;\n        \
    \    }\n        }\n        return increasing || decreasing;", "        if (l.isEmpty())\
    \ return false;\n        long first = l.get(0);\n        long last = l.get(l.size()\
    \ - 1);\n        long mid = first + (last - first) / 2;\n        long mid2 = mid\
    \ + (mid - first) / 2;\n        long mid3 = mid2 + (mid2 - first) / 2;\n     \
    \   long mid4 = mid3 + (mid3 - first) / 2;\n        long mid5 = mid4 + (mid4 -\
    \ first) / 2;\n        long mid6 = mid5 + (mid5 - first) / 2;\n        long mid7\
    \ = mid6 + (mid6 - first) / 2;\n        long mid8 = mid7 + (mid7 - first) / 2;\n\
    \        long mid9 = mid8 + (mid8 - first) / 2;\n        long mid10 = mid9 + (mid9\
    \ - first) / 2;\n        long mid11 = mid10 + (mid10 - first) / 2;\n        long\
    \ mid12 = mid11 + (mid11 - first) / 2;\n        long mid13 = mid12 + (mid12 -\
    \ first) / 2;\n        long mid14 = mid13 + (mid13 - first) / 2;\n        long\
    \ mid15 = mid14 + (mid14 - first) / 2;\n        long mid16 = mid15 + (mid15 -\
    \ first) / 2;\n        long mid17 = mid16 + (mid16 - first) / 2;\n        long\
    \ mid18 = mid17 + (mid17 - first) / 2;\n        long mid19 = mid18 + (mid18 -\
    \ first) / 2;\n        long mid20 = mid19 + (mid19 - first) / 2;\n        long\
    \ mid21 = mid20 + (mid20 - first) / 2;\n        long mid22 = mid21 + (mid21 -\
    \ first) / 2;\n        long mid23 = mid22 + (mid22 - first) / 2;\n        long\
    \ mid24 = mid23 + (mid23 - first) / 2;\n        long mid25 = mid24 + (mid24 -\
    \ first) / 2;\n        long mid26 = mid25 + (mid25 - first) / 2;\n        long\
    \ mid27 = mid26 + (mid26 - first) / 2;\n        long mid28 = mid27 + (mid27 -\
    \ first) / 2;\n        long mid29 = mid28 + (mid28 - first) / 2;\n        long\
    \ mid30 = mid29 + (mid29 - first) / 2;\n        long mid31 = mid30 + (mid30 -\
    \ first) / 2;\n        long mid32 = mid31 + (mid31 - first) / 2;\n        long\
    \ mid33 = mid32 + (mid32 - first) / 2;\n        long mid34 = mid33 + (mid33 -\
    \ first", "        boolean increasing = true;\n        boolean decreasing = true;\n\
    \        long lastValue = l.get(0);\n        for(int i = 1; i < l.size(); i++)\
    \ {\n            long value = l.get(i);\n            if(value > lastValue) {\n\
    \                increasing = false;\n            }\n            if(value < lastValue)\
    \ {\n                decreasing = false;\n            }\n            lastValue\
    \ = value;\n        }\n        return increasing || decreasing;", "        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        long prev =\
    \ l.get(0);\n        long current = l.get(1);\n        for(long i = 2; i < l.size();\
    \ i++) {\n            long next = l.get(i);\n            if(next < prev) {\n \
    \               decreasing = false;\n            }\n            else if(next >\
    \ prev) {\n                increasing = false;\n            }\n            else\
    \ {\n                increasing = increasing && increasing;\n                decreasing\
    \ = decreasing && decreasing;\n            }\n            prev = current;\n  \
    \          current = next;\n        }\n        return increasing || decreasing;",
  "        final long first = l.get(0);\n        final long last = l.get(l.size()\
    \ - 1);\n        final long mid = first + (last - first) / 2;\n        final long\
    \ mid2 = mid + (mid - first) / 2;\n        final long mid3 = mid2 + (mid2 - first)\
    \ / 2;\n        final long mid4 = mid3 + (mid3 - first) / 2;\n        final long\
    \ mid5 = mid4 + (mid4 - first) / 2;\n        final long mid6 = mid5 + (mid5 -\
    \ first) / 2;\n        final long mid7 = mid6 + (mid6 - first) / 2;\n        final\
    \ long mid8 = mid7 + (mid7 - first) / 2;\n        final long mid9 = mid8 + (mid8\
    \ - first) / 2;\n        final long mid10 = mid9 + (mid9 - first) / 2;\n     \
    \   final long mid11 = mid10 + (mid10 - first) / 2;\n        final long mid12\
    \ = mid11 + (mid11 - first) / 2;\n        final long mid13 = mid12 + (mid12 -\
    \ first) / 2;\n        final long mid14 = mid13 + (mid13 - first) / 2;\n     \
    \   final long mid15 = mid14 + (mid14 - first) / 2;\n        final long mid16\
    \ = mid15 + (mid15 - first) / 2;\n        final long mid17 = mid16 + (mid16 -\
    \ first) / 2;\n        final long mid18 = mid17 + (mid17 - first) / 2;\n     \
    \   final long mid19 = mid18 + (mid18 - first) / 2;\n        final long mid20\
    \ = mid19 + (mid19 - first) / 2;\n        final long mid21 = mid20 + (mid20 -\
    \ first) / 2;\n        final long mid22 = mid21 + (mid21 - first) / 2;\n     \
    \   final long mid23 = mid22 + (mid22 - first) / 2;\n        final long mid24\
    \ = mid23 + (mid23 - first) / 2;\n        final long mid25 = mid24 + (mid24 -\
    \ first) / 2;\n        final long mid26 = mid25 + (mid25 - first) / 2;\n     \
    \   final long mid27 = mid26 + (mid26 - first) / 2;\n        final long mid28\
    \ = mid27 + (mid27 - first) / 2;\n        final long mid29 = mid28 + (mid28 -\
    \ first) / 2;\n        final long mid30 = mid29 + (mid29 - first) / 2;\n     \
    \   final long mid31 = mid30 + (mid30 - first) / 2;\n        final long mid32\
    \ = mid31 + (mid31 - first) / 2;", "        long min = Long.MAX_VALUE;\n     \
    \   long max = Long.MIN_VALUE;\n        for (long e : l) {\n            if (e\
    \ < min) {\n                min = e;\n            }\n            if (e > max)\
    \ {\n                max = e;\n            }\n        }\n        return min <=\
    \ max;", "        boolean increasing = true;\n        boolean decreasing = true;\n\
    \        Long current = l.get(0);\n        Long previous = l.get(0);\n       \
    \ for (int i = 1; i < l.size(); i++) {\n            Long next = l.get(i);\n  \
    \          if (current > next) {\n                decreasing = false;\n      \
    \      } else if (current < next) {\n                increasing = false;\n   \
    \         } else {\n                current = next;\n            }\n         \
    \   previous = current;\n        }\n        if (increasing && decreasing) {\n\
    \            return true;\n        } else if (increasing && !decreasing) {\n \
    \           return false;\n        } else if (!increasing && decreasing) {\n \
    \           return false;\n        } else {\n            return true;\n      \
    \  }", "        if (l.size() < 2) return false;\n        long first = l.get(0);\n\
    \        long last = l.get(l.size() - 1);\n        if (first > last) return true;\n\
    \        long mid = first + (last - first) / 2;\n        long mid2 = l.get(l.size()\
    \ - 2);\n        if (mid > mid2) return true;\n        long mid3 = l.get(l.size()\
    \ - 3);\n        if (mid > mid3) return true;\n        return false;", "     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        Long\
    \ first = l.get(0);\n        Long last = l.get(l.size() - 1);\n        for (int\
    \ i = 1; i < l.size(); i++) {\n            Long current = l.get(i);\n        \
    \    if (current < first) {\n                increasing = false;\n           \
    \ } else if (current > last) {\n                decreasing = false;\n        \
    \    } else {\n                if (current < first && current > last) {\n    \
    \                increasing = false;\n                } else if (current > first\
    \ && current < last) {\n                    decreasing = false;\n            \
    \    }\n            }\n        }\n        return increasing || decreasing;", " \
    \       boolean isIncreasing = true;\n        boolean isDecreasing = true;\n \
    \       Long lastValue = l.get(l.size() - 1);\n        for (Long value : l) {\n\
    \            if (lastValue < value) {\n                isIncreasing = false;\n\
    \            }\n            if (lastValue > value) {\n                isDecreasing\
    \ = false;\n            }\n            lastValue = value;\n        }\n       \
    \ return isIncreasing || isDecreasing;", "        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        long prev = l.get(0);\n        long\
    \ current = l.get(1);\n        for(int i = 2; i < l.size(); i++) {\n         \
    \   long next = l.get(i);\n            if (current < next) {\n               \
    \ decreasing = false;\n            } else if (current > next) {\n            \
    \    increasing = false;\n            } else {\n                current = next;\n\
    \            }\n            if (current < prev) {\n                decreasing\
    \ = false;\n            } else if (current > prev) {\n                increasing\
    \ = false;\n            } else {\n                prev = current;\n          \
    \  }\n        }\n        return increasing || decreasing;", "        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        long prev = Long.MIN_VALUE;\n\
    \        for (long current : l) {\n            if (current < prev) {\n       \
    \         decreasing = false;\n            } else if (current > prev) {\n    \
    \            increasing = false;\n            } else {\n                increasing\
    \ = decreasing = true;\n            }\n            prev = current;\n        }\n\
    \        return increasing || decreasing;", "        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        long prev = l.get(0);\n        long\
    \ current = l.get(1);\n        for(int i = 2; i < l.size(); i++) {\n         \
    \   long next = l.get(i);\n            boolean isIncreasing = current < next;\n\
    \            boolean isDecreasing = current > next;\n            increasing &=\
    \ isIncreasing;\n            decreasing &= isDecreasing;\n            prev = current;\n\
    \            current = next;\n        }\n        return increasing || decreasing;",
  "        boolean isMonotonic = true;\n        long prev = l.get(0);\n        long\
    \ current = l.get(1);\n        for (int i = 2; i < l.size(); i++) {\n        \
    \    long next = l.get(i);\n            if (next < prev) {\n                isMonotonic\
    \ = false;\n                break;\n            }\n            prev = current;\n\
    \            current = next;\n        }\n        return isMonotonic;", "     \
    \   boolean increasing = true;\n        boolean decreasing = true;\n        long\
    \ lastVal = Long.MIN_VALUE;\n        long currentVal = Long.MIN_VALUE;\n     \
    \   for (long val : l) {\n            if (val < lastVal) {\n                decreasing\
    \ = false;\n            } else if (val > lastVal) {\n                increasing\
    \ = false;\n            } else {\n                currentVal = val;\n        \
    \    }\n            lastVal = val;\n        }\n        if (increasing && decreasing)\
    \ {\n            return true;\n        }\n        if (increasing && !decreasing)\
    \ {\n            return true;\n        }\n        if (decreasing && !increasing)\
    \ {\n            return true;\n        }\n        return false;", "        long\
    \ prev = Long.MIN_VALUE;\n        long curr = Long.MIN_VALUE;\n        for (long\
    \ e : l) {\n            if (e < prev) {\n                return false;\n     \
    \       }\n            prev = e;\n            curr = e;\n        }\n        return\
    \ true;", "        if (l.isEmpty()) return true;\n        long first = l.get(0);\n\
    \        long last = l.get(l.size() - 1);\n        if (first < last) return true;\n\
    \        if (first > last) return false;\n        long mid = first + (last - first)\
    \ / 2;\n        if (mid < first) return true;\n        if (mid > last) return\
    \ false;\n        long left = getMonotonic(l, 0, mid);\n        long right = getMonotonic(l,\
    \ mid, l.size() - 1);\n        return left < right;", "        boolean isIncreasing\
    \ = true;\n        boolean isDecreasing = true;\n        Long last = null;\n \
    \       Long current = null;\n        for (Long l : l) {\n            if (current\
    \ == null) {\n                current = l;\n                last = l;\n      \
    \      } else if (current > l) {\n                isDecreasing = false;\n    \
    \        } else if (current < l) {\n                isIncreasing = false;\n  \
    \          } else {\n                current = l;\n                last = l;\n\
    \            }\n        }\n        if (isIncreasing && isDecreasing) {\n     \
    \       return true;\n        } else if (isIncreasing && !isDecreasing) {\n  \
    \          return true;\n        } else if (!isIncreasing && isDecreasing) {\n\
    \            return true;\n        } else {\n            return false;\n     \
    \   }", "        final long first = l.get(0);\n        final long last = l.get(l.size()\
    \ - 1);\n        final long mid = first + ((last - first) / 2);\n        final\
    \ long mid2 = mid + ((last - mid) / 2);\n        final long mid3 = mid2 + ((last\
    \ - mid2) / 2);\n        final long mid4 = mid3 + ((last - mid3) / 2);\n     \
    \   final long mid5 = mid4 + ((last - mid4) / 2);\n        final long mid6 = mid5\
    \ + ((last - mid5) / 2);\n        final long mid7 = mid6 + ((last - mid6) / 2);\n\
    \        final long mid8 = mid7 + ((last - mid7) / 2);\n        final long mid9\
    \ = mid8 + ((last - mid8) / 2);\n        final long mid10 = mid9 + ((last - mid9)\
    \ / 2);\n        final long mid11 = mid10 + ((last - mid10) / 2);\n        final\
    \ long mid12 = mid11 + ((last - mid11) / 2);\n        final long mid13 = mid12\
    \ + ((last - mid12) / 2);\n        final long mid14 = mid13 + ((last - mid13)\
    \ / 2);\n        final long mid15 = mid14 + ((last - mid14) / 2);\n        final\
    \ long mid16 = mid15 + ((last - mid15) / 2);\n        final long mid17 = mid16\
    \ + ((last - mid16) / 2);\n        final long mid18 = mid17 + ((last - mid17)\
    \ / 2);\n        final long mid19 = mid18 + ((last - mid18) / 2);\n        final\
    \ long mid20 = mid19 + ((last - mid19) / 2);\n        final long mid21 = mid20\
    \ + ((last - mid20) / 2);\n        final long mid22 = mid21 + ((last - mid21)\
    \ / 2);\n        final long mid23 = mid22 + ((last - mid22) / 2);\n        final\
    \ long mid24 = mid23 + ((last - mid23) / 2);\n        final long mid25 = mid24\
    \ + ((last - mid24) / 2);\n        final long mid26 = mid25 + ((last - mid25)\
    \ / 2);\n        final long mid27 = mid26 + ((last - mid26) / 2);\n        final\
    \ long mid28 = mid27 + ((last - mid27) / 2);\n        final long mid29 = mid28\
    \ + ((last - mid28) / 2);\n        final long mid30 = mid29 + ((last - mid29)\
    \ / 2);\n", "        boolean increasing = true;\n        boolean decreasing =\
    \ true;\n        Long last = l.get(0);\n        Long current = l.get(1);\n   \
    \     for (int i = 2; i < l.size(); i++) {\n            Long next = l.get(i);\n\
    \            if (next < last) {\n                decreasing = false;\n       \
    \     } else if (next > last) {\n                increasing = false;\n       \
    \     } else {\n                last = next;\n            }\n            current\
    \ = next;\n        }\n        return increasing || decreasing;", "        long\
    \ max = Long.MIN_VALUE;\n        long min = Long.MAX_VALUE;\n        for (long\
    \ e : l) {\n            if (e > max) {\n                max = e;\n           \
    \ }\n            if (e < min) {\n                min = e;\n            }\n   \
    \     }\n        return max >= min;", "        boolean increasing = true;\n  \
    \      boolean decreasing = true;\n        long current = l.get(0);\n        long\
    \ previous = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n       \
    \     long next = l.get(i);\n            if (current < next) {\n             \
    \   decreasing = false;\n            } else if (current > next) {\n          \
    \      increasing = false;\n            } else {\n                current = next;\n\
    \            }\n            previous = current;\n        }\n        return increasing\
    \ || decreasing;", "        long prev = l.get(0);\n        boolean increasing\
    \ = true;\n        for (long cur : l) {\n            if (prev < cur) {\n     \
    \           increasing = false;\n            }\n            prev = cur;\n    \
    \    }\n        return increasing;", "        boolean increasing = true;\n   \
    \     boolean decreasing = true;\n        long current = Long.MIN_VALUE;\n   \
    \     for (long e : l) {\n            if (current > e) {\n                decreasing\
    \ = false;\n            } else if (current < e) {\n                increasing\
    \ = false;\n            } else {\n                current = e;\n            }\n\
    \        }\n        return increasing || decreasing;", "        boolean isMonotonic\
    \ = true;\n        long prev = l.get(0);\n        long curr = l.get(1);\n    \
    \    for(int i = 2; i < l.size(); i++) {\n            long next = l.get(i);\n\
    \            if (curr < next) {\n                isMonotonic = false;\n      \
    \          break;\n            }\n            if (curr > next) {\n           \
    \     isMonotonic = true;\n                break;\n            }\n           \
    \ prev = curr;\n            curr = next;\n        }\n        return isMonotonic;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long prev = l.get(0);\n        for (long current : l) {\n            if (current\
    \ < prev) {\n                decreasing = false;\n            } else if (current\
    \ > prev) {\n                increasing = false;\n            } else {\n     \
    \           increasing = decreasing = true;\n            }\n            prev =\
    \ current;\n        }\n        return increasing || decreasing;", "        boolean\
    \ isIncreasing = true;\n        boolean isDecreasing = true;\n        long lastElement\
    \ = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            long\
    \ current = l.get(i);\n            if (current < lastElement) {\n            \
    \    isIncreasing = false;\n            }\n            if (current > lastElement)\
    \ {\n                isDecreasing = false;\n            }\n            lastElement\
    \ = current;\n        }\n        if (isIncreasing && isDecreasing) {\n       \
    \     return true;\n        }\n        if (isIncreasing && !isDecreasing) {\n\
    \            return true;\n        }\n        if (!isIncreasing && isDecreasing)\
    \ {\n            return true;\n        }\n        return false;", "        if\
    \ (l.isEmpty()) return true;\n        long first = l.get(0);\n        long last\
    \ = l.get(l.size() - 1);\n        if (first < last) return true;\n        if (first\
    \ > last) return false;\n        long mid = first + (last - first) / 2;\n    \
    \    if (mid < first) return true;\n        if (mid > last) return false;\n  \
    \      long mid2 = first + (last - first) / 2;\n        if (mid < mid2) return\
    \ true;\n        if (mid > mid2) return false;\n        long mid3 = first + (last\
    \ - first) / 2;\n        if (mid < mid3) return true;\n        if (mid > mid3)\
    \ return false;\n        long mid4 = first + (last - first) / 2;\n        if (mid\
    \ < mid4) return true;\n        if (mid > mid4) return false;\n        long mid5\
    \ = first + (last - first) / 2;\n        if (mid < mid5) return true;\n      \
    \  if (mid > mid5) return false;\n        long mid6 = first + (last - first) /\
    \ 2;\n        if (mid < mid6) return true;\n        if (mid > mid6) return false;\n\
    \        long mid7 = first + (last - first) / 2;\n        if (mid < mid7) return\
    \ true;\n        if (mid > mid7) return false;\n        long mid8 = first + (last\
    \ - first) / 2;\n        if (mid < mid8) return true;\n        if (mid > mid8)\
    \ return false;\n        long mid9 = first + (last - first) / 2;\n        if (mid\
    \ < mid9) return true;\n        if (mid > mid9) return false;\n        long mid10\
    \ = first + (last - first) / 2;\n        if (mid < mid10) return true;\n     \
    \   if (mid > mid10) return false;\n        long mid11 = first + (last - first)\
    \ / 2;\n        if (mid < mid11) return true;\n        if (mid > mid11) return\
    \ false;\n        long mid12 = first + (last - first) / 2;\n        if (mid <\
    \ mid12) return true;\n        if (mid > mid12) return false;\n        long mid13\
    \ = first + (last - first) / 2;\n        if (mid < mid13) return true;\n     \
    \   if (mid > mid13) return false;\n        long mid14 = first + (last - first)\
    \ / 2;\n        if (mid < mid14) return true;\n        if (mid > mid14) return\
    \ false;\n        long mid15 = first + (last - first) / 2;\n        if (mid <\
    \ mid15) return true;\n        if (mid > mid15) return false;\n        long mid16\
    \ = first + (last - first) / 2;\n        if (mid < mid16) return true;\n     \
    \   if (mid > mid16) return false;\n        long mid17 = first + (last ", "  \
    \      long prev = l.get(0);\n        long curr = l.get(1);\n        long next\
    \ = l.get(2);\n        if (curr < prev) {\n            return false;\n       \
    \ }\n        if (curr > next) {\n            return true;\n        }\n       \
    \ if (curr == prev) {\n            return monotonic(l);\n        }\n        if\
    \ (curr == next) {\n            return monotonic(l);\n        }\n        if (curr\
    \ < prev) {\n            return monotonic(l);\n        }\n        return false;",
  "        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n  \
    \      long prev = l.get(0);\n        long current = l.get(1);\n        long next\
    \ = l.get(2);\n        long diff = next - current;\n        for(int i = 3; i <\
    \ l.size(); i++) {\n            prev = current;\n            current = next;\n\
    \            next = l.get(i);\n            diff = next - current;\n          \
    \  if(diff < 0) {\n                isDecreasing = false;\n            }\n    \
    \        if(diff > 0) {\n                isIncreasing = false;\n            }\n\
    \        }\n        if(isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        if(isIncreasing && !isDecreasing) {\n            return true;\n\
    \        }\n        if(!isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        return false;", "        long prev = l.get(0);\n        boolean\
    \ isIncreasing = true;\n        for (long cur : l) {\n            if (cur > prev)\
    \ {\n                isIncreasing = false;\n            }\n            prev =\
    \ cur;\n        }\n        return isIncreasing;", "        if (l.isEmpty()) return\
    \ true;\n        Long first = l.get(0);\n        Long last = l.get(l.size() -\
    \ 1);\n        if (first < last) return true;\n        if (first > last) return\
    \ false;\n        Long mid = l.size() / 2;\n        Long midVal = l.get(mid);\n\
    \        if (midVal < first) return monotonic(l);\n        if (midVal > last)\
    \ return monotonic(l);\n        return monotonic(l.subList(0, mid));", "     \
    \   long prev = l.get(0);\n        long curr = l.get(1);\n        boolean increasing\
    \ = true;\n        for (int i = 2; i < l.size(); i++) {\n            long next\
    \ = l.get(i);\n            if (curr < next) {\n                increasing = false;\n\
    \            }\n            if (curr > prev) {\n                increasing = true;\n\
    \            }\n            prev = curr;\n            curr = next;\n        }\n\
    \        return increasing;", "        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        long prev = l.get(0);\n        for (long current\
    \ : l) {\n            if (current < prev) {\n                decreasing = false;\n\
    \            } else if (current > prev) {\n                increasing = false;\n\
    \            } else {\n                increasing = decreasing = true;\n     \
    \       }\n            prev = current;\n        }\n        return increasing ||\
    \ decreasing;", "        boolean isIncreasing = true;\n        boolean isDecreasing\
    \ = true;\n        Long lastElement = l.get(l.size() - 1);\n        Long firstElement\
    \ = l.get(0);\n        Long currentElement = l.get(0);\n        for (int i = 1;\
    \ i < l.size(); i++) {\n            currentElement = l.get(i);\n            if\
    \ (currentElement > lastElement) {\n                isDecreasing = false;\n  \
    \          } else if (currentElement < firstElement) {\n                isIncreasing\
    \ = false;\n            } else {\n                isIncreasing = isIncreasing\
    \ && currentElement >= lastElement;\n                isDecreasing = isDecreasing\
    \ && currentElement <= firstElement;\n            }\n            lastElement =\
    \ currentElement;\n        }\n        return isIncreasing || isDecreasing;", " \
    \       long prev = l.get(0);\n        long curr = l.get(1);\n        boolean\
    \ isIncreasing = true;\n        for (int i = 2; i < l.size(); i++) {\n       \
    \     long next = l.get(i);\n            if (next < prev) {\n                isIncreasing\
    \ = false;\n            }\n            prev = curr;\n            curr = next;\n\
    \        }\n        return isIncreasing;", "        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        long mid = first + ((last - first) / 2);\n\
    \        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n\
    \        for (int i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n\
    \            if (current > mid) {\n                isIncreasing = false;\n   \
    \             isDecreasing = true;\n                break;\n            } else\
    \ if (current < mid) {\n                isIncreasing = true;\n               \
    \ isDecreasing = false;\n                break;\n            } else {\n      \
    \          isIncreasing = true;\n                isDecreasing = true;\n      \
    \      }\n        }\n        if (increasing && isIncreasing) {\n            increasing\
    \ = false;\n        } else if (decreasing && isDecreasing) {\n            decreasing\
    \ = false;\n        }\n        return increasing || decreasing;", "        boolean\
    \ isIncreasing = true;\n        boolean isDecreasing = true;\n        long prev\
    \ = l.get(0);\n        long current = l.get(1);\n        for(int i = 2; i < l.size();\
    \ i++) {\n            long next = l.get(i);\n            boolean isIncreasingNext\
    \ = current < next;\n            boolean isDecreasingNext = current > next;\n\
    \            if(isIncreasingNext != isIncreasing) {\n                isIncreasing\
    \ = isIncreasingNext;\n            }\n            if(isDecreasingNext != isDecreasing)\
    \ {\n                isDecreasing = isDecreasingNext;\n            }\n       \
    \     prev = current;\n            current = next;\n        }\n        return\
    \ isIncreasing || isDecreasing;", "        boolean increasing = true;\n      \
    \  boolean decreasing = true;\n        long prev = Long.MIN_VALUE;\n        for\
    \ (long e : l) {\n            if (e < prev) {\n                decreasing = false;\n\
    \            } else if (e > prev) {\n                increasing = false;\n   \
    \         } else {\n                increasing = decreasing = true;\n        \
    \    }\n            prev = e;\n        }\n        return increasing || decreasing;",
  "        long prev = Long.MIN_VALUE;\n        long curr = Long.MIN_VALUE;\n    \
    \    for (long e : l) {\n            if (e < prev) {\n                return false;\n\
    \            }\n            if (e > curr) {\n                return true;\n  \
    \          }\n            prev = e;\n            curr = e;\n        }\n      \
    \  return false;", "        boolean isIncreasing = true;\n        boolean isDecreasing\
    \ = true;\n        Long lastValue = l.get(l.size() - 1);\n        Long firstValue\
    \ = l.get(0);\n        for(Long value : l) {\n            if(lastValue < value)\
    \ {\n                isIncreasing = false;\n            }\n            if(firstValue\
    \ > value) {\n                isDecreasing = false;\n            }\n         \
    \   lastValue = value;\n            firstValue = value;\n        }\n        return\
    \ isIncreasing || isDecreasing;", "        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        for (long e : l) {\n      \
    \      if (e < min) {\n                min = e;\n            }\n            if\
    \ (e > max) {\n                max = e;\n            }\n        }\n        return\
    \ min <= max;", "        long first = l.get(0);\n        long last = l.get(l.size()\
    \ - 1);\n        long mid = first + (last - first) / 2;\n        boolean isIncreasing\
    \ = true;\n        for (int i = 1; i < l.size(); i++) {\n            long current\
    \ = l.get(i);\n            if (current < mid) {\n                isIncreasing\
    \ = false;\n                break;\n            }\n            if (current > mid)\
    \ {\n                isIncreasing = true;\n                break;\n          \
    \  }\n        }\n        return isIncreasing;", "        if (l.isEmpty()) return\
    \ true;\n        long first = l.get(0);\n        long last = l.get(l.size() -\
    \ 1);\n        if (first > last) return true;\n        if (first == last) return\
    \ true;\n        long mid = first + (last - first) / 2;\n        boolean isIncreasing\
    \ = true;\n        boolean isDecreasing = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i) < mid) {\n                isIncreasing = false;\n\
    \            } else if (l.get(i) > mid) {\n                isDecreasing = false;\n\
    \            }\n        }\n        return isIncreasing || isDecreasing;", "  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       long current = l.get(i);\n            if (current < prev) {\n        \
    \        decreasing = false;\n            } else if (current > prev) {\n     \
    \           increasing = false;\n            } else {\n                increasing\
    \ = decreasing = true;\n            }\n            prev = current;\n        }\n\
    \        return increasing || decreasing;", "        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        long last = 0;\n        for (long\
    \ e : l) {\n            if (e < last) {\n                decreasing = false;\n\
    \            } else if (e > last) {\n                increasing = false;\n   \
    \         } else {\n                increasing = decreasing = true;\n        \
    \    }\n            last = e;\n        }\n        return increasing || decreasing;",
  "        final int size = l.size();\n        if (size == 0) {\n            return\
    \ true;\n        }\n        final long first = l.get(0);\n        final long last\
    \ = l.get(size - 1);\n        final long mid = first + ((last - first) / 2);\n\
    \        final boolean isIncreasing = (mid > first);\n        final boolean isDecreasing\
    \ = (mid < last);\n        if (isIncreasing && isDecreasing) {\n            return\
    \ true;\n        }\n        if (isIncreasing && !isDecreasing) {\n           \
    \ return false;\n        }\n        if (!isIncreasing && isDecreasing) {\n   \
    \         return false;\n        }\n        final int midIndex = (size - 1) /\
    \ 2;\n        final long midValue = l.get(midIndex);\n        final boolean isMidIncreasing\
    \ = (midValue > first);\n        final boolean isMidDecreasing = (midValue < last);\n\
    \        if (isMidIncreasing && isMidDecreasing) {\n            return true;\n\
    \        }\n        if (isMidIncreasing && !isMidDecreasing) {\n            return\
    \ false;\n        }\n        if (!isMidIncreasing && isMidDecreasing) {\n    \
    \        return false;\n        }\n        final int midIndex2 = (size - 2) /\
    \ 2;\n        final long midValue2 = l.get(midIndex2);\n        final boolean\
    \ isMidIncreasing2 = (midValue2 > first);\n        final boolean isMidDecreasing2\
    \ = (midValue2 < last);\n        if (isMidIncreasing2 && isMidDecreasing2) {\n\
    \            return true;\n        }\n        if (isMidIncreasing2 && !isMidDecreasing2)\
    \ {\n            return false;\n        }\n        if (!isMidIncreasing2 && isMidDecreasing2)\
    \ {\n            return false;\n        }\n        final int midIndex3 = (size\
    \ - 3) / 2;\n        final long midValue3 = l.get(midIndex3);\n        final boolean\
    \ isMidIncreasing3 = (midValue3 > first);\n        final boolean isMidDecreasing3\
    \ = (midValue3 < last);\n        if (isMidIncreasing3 && isMidDecreasing3) {\n\
    \            return true;\n        }\n        if (isMidIncreasing3 && !isMidDecreasing3)\
    \ {\n            return false;\n        }\n        if (!isMidIncreasing3 && isMidDecreasing3)\
    \ {\n            return false;\n        }\n        final int midIndex4 = (size\
    \ - 4) / 2;\n        final long midValue4 = l.get(midIndex4);\n        final boolean\
    \ isMidIncreasing4 = (midValue4 > first);\n        final boolean isMidDecreas",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long prev = l.get(0);\n        long current = l.get(1);\n        for(int i\
    \ = 2; i < l.size(); i++) {\n            long next = l.get(i);\n            if\
    \ (current < next) {\n                decreasing = false;\n            } else\
    \ if (current > next) {\n                increasing = false;\n            } else\
    \ {\n                current = next;\n            }\n            if (increasing\
    \ && decreasing) {\n                return true;\n            }\n            if\
    \ (increasing && !decreasing) {\n                increasing = false;\n       \
    \         prev = current;\n            } else if (decreasing && !increasing) {\n\
    \                decreasing = false;\n                prev = current;\n      \
    \      }\n        }\n        return false;", "        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        for (long e : l) {\n      \
    \      final long current = e;\n            if (current < min) {\n           \
    \     min = current;\n            }\n            if (current > max) {\n      \
    \          max = current;\n            }\n        }\n        return max >= min;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long prev = l.get(0);\n        long current = l.get(1);\n        long next\
    \ = l.get(2);\n        long diff = next - current;\n        if (diff > 0) {\n\
    \            decreasing = false;\n        } else if (diff < 0) {\n           \
    \ increasing = false;\n        }\n        if (increasing && decreasing) {\n  \
    \          return true;\n        }\n        if (increasing) {\n            return\
    \ false;\n        }\n        if (decreasing) {\n            return true;\n   \
    \     }\n        prev = current;\n        current = next;\n        next = l.get(3);\n\
    \        diff = next - current;\n        if (diff > 0) {\n            decreasing\
    \ = false;\n        } else if (diff < 0) {\n            increasing = false;\n\
    \        }\n        if (increasing && decreasing) {\n            return true;\n\
    \        }\n        if (increasing) {\n            return false;\n        }\n\
    \        if (decreasing) {\n            return true;\n        }\n        return\
    \ false;", "        boolean isIncreasing = true;\n        boolean isDecreasing\
    \ = true;\n        Long previous = null;\n        for (Long current : l) {\n \
    \           if (current > previous) {\n                isIncreasing = false;\n\
    \            }\n            if (current < previous) {\n                isDecreasing\
    \ = false;\n            }\n            previous = current;\n        }\n      \
    \  return isIncreasing || isDecreasing;", "        long prev = Long.MIN_VALUE;\n\
    \        long curr = Long.MIN_VALUE;\n        for (long e : l) {\n           \
    \ if (e < prev) {\n                return false;\n            }\n            prev\
    \ = e;\n            curr = e;\n        }\n        return true;", "        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        long first =\
    \ l.get(0);\n        long last = l.get(l.size() - 1);\n        for (int i = 1;\
    \ i < l.size(); i++) {\n            long current = l.get(i);\n            if (current\
    \ < first) {\n                decreasing = false;\n            }\n           \
    \ if (current > last) {\n                increasing = false;\n            }\n\
    \        }\n        return increasing || decreasing;", "        if (l.isEmpty())\
    \ return true;\n        Long first = l.get(0);\n        Long last = l.get(l.size()\
    \ - 1);\n        if (first > last) return true;\n        if (first == last) return\
    \ true;\n        boolean increasing = true;\n        boolean decreasing = true;\n\
    \        for (int i = 1; i < l.size(); i++) {\n            Long current = l.get(i);\n\
    \            if (current < first) increasing = false;\n            if (current\
    \ > last) decreasing = false;\n        }\n        return increasing || decreasing;",
  "        long max = Long.MIN_VALUE;\n        long min = Long.MAX_VALUE;\n      \
    \  for (long e : l) {\n            max = Math.max(max, e);\n            min =\
    \ Math.min(min, e);\n        }\n        return min <= max;", "        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        Long first =\
    \ l.get(0);\n        Long last = l.get(l.size() - 1);\n        if (first < last)\
    \ {\n            increasing = false;\n        }\n        if (first > last) {\n\
    \            decreasing = false;\n        }\n        if (increasing && decreasing)\
    \ {\n            return true;\n        }\n        if (increasing && !decreasing)\
    \ {\n            return false;\n        }\n        if (!increasing && decreasing)\
    \ {\n            return true;\n        }\n        return false;", "        boolean\
    \ isIncreasing = true;\n        boolean isDecreasing = true;\n        long prevVal\
    \ = Long.MIN_VALUE;\n        for (long val : l) {\n            if (prevVal > val)\
    \ {\n                isIncreasing = false;\n            }\n            if (prevVal\
    \ < val) {\n                isDecreasing = false;\n            }\n           \
    \ prevVal = val;\n        }\n        return isIncreasing || isDecreasing;", " \
    \       boolean increasing = true;\n        boolean decreasing = true;\n     \
    \   Long current = l.get(0);\n        Long previous = l.get(0);\n        for (int\
    \ i = 1; i < l.size(); i++) {\n            Long current = l.get(i);\n        \
    \    if (current < previous) {\n                decreasing = false;\n        \
    \    } else if (current > previous) {\n                increasing = false;\n \
    \           } else {\n                increasing = !increasing;\n            \
    \    decreasing = !decreasing;\n            }\n            previous = current;\n\
    \        }\n        return increasing || decreasing;", "        long first = l.get(0);\n\
    \        long last = l.get(l.size() - 1);\n        long mid = first + (last -\
    \ first) / 2;\n        boolean increasing = true;\n        for (int i = 1; i <\
    \ l.size(); i++) {\n            if (l.get(i) < mid) {\n                increasing\
    \ = false;\n                break;\n            }\n        }\n        return increasing;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long lastValue = Long.MIN_VALUE;\n        for (long value : l) {\n        \
    \    if (value > lastValue) {\n                increasing = false;\n         \
    \   } else if (value < lastValue) {\n                decreasing = false;\n   \
    \         }\n            lastValue = value;\n        }\n        return increasing\
    \ || decreasing;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        Long first = l.get(0);\n        Long last = l.get(l.size()\
    \ - 1);\n        Long mid = l.get(l.size() / 2);\n        Long mid2 = l.get(l.size()\
    \ / 2);\n        Long mid3 = l.get(l.size() / 2);\n        Long mid4 = l.get(l.size()\
    \ / 2);\n        Long mid5 = l.get(l.size() / 2);\n        Long mid6 = l.get(l.size()\
    \ / 2);\n        Long mid7 = l.get(l.size() / 2);\n        Long mid8 = l.get(l.size()\
    \ / 2);\n        Long mid9 = l.get(l.size() / 2);\n        Long mid10 = l.get(l.size()\
    \ / 2);\n        Long mid11 = l.get(l.size() / 2);\n        Long mid12 = l.get(l.size()\
    \ / 2);\n        Long mid13 = l.get(l.size() / 2);\n        Long mid14 = l.get(l.size()\
    \ / 2);\n        Long mid15 = l.get(l.size() / 2);\n        Long mid16 = l.get(l.size()\
    \ / 2);\n        Long mid17 = l.get(l.size() / 2);\n        Long mid18 = l.get(l.size()\
    \ / 2);\n        Long mid19 = l.get(l.size() / 2);\n        Long mid20 = l.get(l.size()\
    \ / 2);\n        Long mid21 = l.get(l.size() / 2);\n        Long mid22 = l.get(l.size()\
    \ / 2);\n        Long mid23 = l.get(l.size() / 2);\n        Long mid24 = l.get(l.size()\
    \ / 2);\n        Long mid25 = l.get(l.size() / 2);\n        Long mid26 = l.get(l.size()\
    \ / 2);\n        Long mid27 = l.get(l.size() / 2);\n        Long mid28 = l.get(l.size()\
    \ / 2);\n        Long mid29 = l.get(l.size() / 2);\n        Long mid30 = l.get(l.size()\
    \ / 2);\n        Long mid31 = l.get(l.size() / 2);\n        Long mid32 = l.get(l.size()\
    \ / 2);\n        Long mid33 = l.get(l.size() / 2);\n        Long mid34 = l.get(l.size()\
    \ / 2);\n        Long mid35 = l.get(l.size() / 2);\n        Long mid36 = l.get(l.size()\
    \ / 2);\n        Long mid37 = l.get(l.size() / 2);\n        Long mid38 = l.get(l.size",
  "        final long max = l.stream().reduce(Math::max).get();\n        final long\
    \ min = l.stream().reduce(Math::min).get();\n        final long mid = l.stream().reduce(Math::roundDown).get();\n\
    \        return l.stream().allMatch(i -> i >= min && i <= max);", "        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        long first =\
    \ l.get(0);\n        long last = l.get(l.size() - 1);\n        for (long i = 1,\
    \ j = l.size() - 1; i < j; i++, j--) {\n            if (l.get(i) > l.get(j)) {\n\
    \                increasing = false;\n            }\n            if (l.get(i)\
    \ < l.get(j)) {\n                decreasing = false;\n            }\n        }\n\
    \        if (increasing && decreasing) {\n            return true;\n        }\n\
    \        if (increasing && !decreasing) {\n            return true;\n        }\n\
    \        if (decreasing && !increasing) {\n            return true;\n        }\n\
    \        return false;", "        long prev = Long.MIN_VALUE;\n        long curr\
    \ = Long.MIN_VALUE;\n        for (long e : l) {\n            if (e < prev) {\n\
    \                return false;\n            }\n            prev = curr;\n    \
    \        curr = e;\n        }\n        return true;", "        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        long current = l.get(0);\n\
    \        long prev = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n\
    \            long next = l.get(i);\n            boolean isIncreasing = current\
    \ > next;\n            boolean isDecreasing = current < next;\n            increasing\
    \ &= isIncreasing;\n            decreasing &= isDecreasing;\n            current\
    \ = next;\n            prev = next;\n        }\n        return increasing || decreasing;",
  "        long prev = l.get(0);\n        long curr = l.get(1);\n        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        for (int i = 2; i < l.size();\
    \ i++) {\n            long next = l.get(i);\n            if (curr < next) {\n\
    \                increasing = false;\n            } else if (curr > next) {\n\
    \                decreasing = false;\n            } else {\n                increasing\
    \ = true;\n                decreasing = true;\n            }\n            prev\
    \ = curr;\n            curr = next;\n        }\n        return increasing || decreasing;",
  "        if (l.isEmpty()) return false;\n        long prev = l.get(0);\n       \
    \ for (int i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n\
    \            if (current < prev) {\n                return false;\n          \
    \  }\n            prev = current;\n        }\n        return true;", "       \
    \ long prev = l.get(0);\n        boolean increasing = true;\n        for (int\
    \ i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n        \
    \    if (current < prev) {\n                increasing = false;\n            }\n\
    \            prev = current;\n        }\n        return increasing;", "      \
    \  long max = Long.MIN_VALUE;\n        long min = Long.MAX_VALUE;\n        for\
    \ (long e : l) {\n            if (e < min) {\n                min = e;\n     \
    \       }\n            if (e > max) {\n                max = e;\n            }\n\
    \        }\n        return min <= max;", "        if (l.size() < 2) {\n      \
    \      return false;\n        }\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        long mid = first + (last - first) / 2;\n\
    \        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n\
    \        for (int i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n\
    \            if (current < mid) {\n                isIncreasing = false;\n   \
    \         } else if (current > mid) {\n                isDecreasing = false;\n\
    \            } else {\n                isIncreasing = isDecreasing = true;\n \
    \           }\n        }\n        return isIncreasing || isDecreasing;", "   \
    \     boolean isMonotonic = true;\n        long prev = l.get(0);\n        for\
    \ (long current : l) {\n            if (current < prev) {\n                isMonotonic\
    \ = false;\n                break;\n            }\n            prev = current;\n\
    \        }\n        return isMonotonic;", "        final long first = l.get(0);\n\
    \        final long last = l.get(l.size() - 1);\n        final long mid = first\
    \ + (last - first) / 2;\n        final long mid2 = mid + (mid - first) / 2;\n\
    \        final long mid3 = mid2 + (mid2 - first) / 2;\n        final long mid4\
    \ = mid3 + (mid3 - first) / 2;\n        final long mid5 = mid4 + (mid4 - first)\
    \ / 2;\n        final long mid6 = mid5 + (mid5 - first) / 2;\n        final long\
    \ mid7 = mid6 + (mid6 - first) / 2;\n        final long mid8 = mid7 + (mid7 -\
    \ first) / 2;\n        final long mid9 = mid8 + (mid8 - first) / 2;\n        final\
    \ long mid10 = mid9 + (mid9 - first) / 2;\n        final long mid11 = mid10 +\
    \ (mid10 - first) / 2;\n        final long mid12 = mid11 + (mid11 - first) / 2;\n\
    \        final long mid13 = mid12 + (mid12 - first) / 2;\n        final long mid14\
    \ = mid13 + (mid13 - first) / 2;\n        final long mid15 = mid14 + (mid14 -\
    \ first) / 2;\n        final long mid16 = mid15 + (mid15 - first) / 2;\n     \
    \   final long mid17 = mid16 + (mid16 - first) / 2;\n        final long mid18\
    \ = mid17 + (mid17 - first) / 2;\n        final long mid19 = mid18 + (mid18 -\
    \ first) / 2;\n        final long mid20 = mid19 + (mid19 - first) / 2;\n     \
    \   final long mid21 = mid20 + (mid20 - first) / 2;\n        final long mid22\
    \ = mid21 + (mid21 - first) / 2;\n        final long mid23 = mid22 + (mid22 -\
    \ first) / 2;\n        final long mid24 = mid23 + (mid23 - first) / 2;\n     \
    \   final long mid25 = mid24 + (mid24 - first) / 2;\n        final long mid26\
    \ = mid25 + (mid25 - first) / 2;\n        final long mid27 = mid26 + (mid26 -\
    \ first) / 2;\n        final long mid28 = mid27 + (mid27 - first) / 2;\n     \
    \   final long mid29 = mid28 + (mid28 - first) / 2;\n        final long mid30\
    \ = mid29 + (mid29 - first) / 2;\n        final long mid31 = mid30 + (mid30 -\
    \ first) / 2;\n        final long mid32 = mid31 + (mid31 - first) / 2;", "   \
    \     long prev = l.get(0);\n        boolean increasing = true;\n        for (long\
    \ cur : l) {\n            if (prev > cur) {\n                increasing = false;\n\
    \                break;\n            }\n            prev = cur;\n        }\n \
    \       return increasing;", "        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        Long first = l.get(0);\n        Long last = l.get(l.size()\
    \ - 1);\n        for (int i = 1; i < l.size(); i++) {\n            Long current\
    \ = l.get(i);\n            if (current < first) {\n                decreasing\
    \ = false;\n            } else if (current > last) {\n                increasing\
    \ = false;\n            } else {\n                increasing = increasing && current\
    \ > last;\n                decreasing = decreasing && current < first;\n     \
    \       }\n        }\n        return increasing || decreasing;", "        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        long prev =\
    \ l.get(0);\n        long current = l.get(1);\n        long next = l.get(2);\n\
    \        long diff = next - current;\n        for(int i = 3; i < l.size(); i++)\
    \ {\n            prev = current;\n            current = next;\n            next\
    \ = l.get(i);\n            diff = next - current;\n            if(diff > 0) {\n\
    \                increasing = false;\n            }\n            if(diff < 0)\
    \ {\n                decreasing = false;\n            }\n        }\n        return\
    \ increasing || decreasing;", "        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        long prev = Long.MIN_VALUE;\n        for (long current\
    \ : l) {\n            if (current < prev) {\n                decreasing = false;\n\
    \            }\n            if (current > prev) {\n                increasing\
    \ = false;\n            }\n            prev = current;\n        }\n        return\
    \ increasing || decreasing;", "        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        long max = Long.MIN_VALUE;\n        for (long e\
    \ : l) {\n            if (e > max) {\n                max = e;\n            }\n\
    \            if (e < min) {\n                min = e;\n            }\n       \
    \     if (e < max) {\n                increasing = false;\n            }\n   \
    \         if (e > min) {\n                decreasing = false;\n            }\n\
    \        }\n        return increasing || decreasing;", "        long prev = l.get(0);\n\
    \        long curr = l.get(1);\n        boolean increasing = true;\n        for\
    \ (int i = 2; i < l.size(); i++) {\n            long next = l.get(i);\n      \
    \      if (curr < next) {\n                increasing = false;\n            }\n\
    \            prev = curr;\n            curr = next;\n        }\n        return\
    \ increasing;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        long prev = l.get(0);\n        for (long current : l) {\n \
    \           if (current < prev) {\n                decreasing = false;\n     \
    \       } else if (current > prev) {\n                increasing = false;\n  \
    \          } else {\n                increasing = decreasing = true;\n       \
    \     }\n            prev = current;\n        }\n        return increasing ||\
    \ decreasing;", "        final long max = Long.MIN_VALUE;\n        final long\
    \ min = Long.MAX_VALUE;\n        final long max = Long.MIN_VALUE;\n        final\
    \ long min = Long.MAX_VALUE;\n        for (Long e : l) {\n            if (e <\
    \ min) min = e;\n            if (e > max) max = e;\n        }\n        return\
    \ min <= max;", "        long prev = Long.MIN_VALUE;\n        for (long x : l)\n\
    \            if (x < prev)\n                return false;\n            prev =\
    \ x;\n        return true;", "        final int n = l.size();\n        final Long\
    \ prev = l.get(n - 1);\n        final Long current = l.get(n - 2);\n        if\
    \ (current > prev) {\n            return true;\n        }\n        if (current\
    \ < prev) {\n            return false;\n        }\n        if (n == 1) {\n   \
    \         return true;\n        }\n        final Long next = l.get(n - 3);\n \
    \       if (next > current) {\n            return true;\n        }\n        if\
    \ (next < current) {\n            return false;\n        }\n        return monotonic(l.subList(0,\
    \ n - 1));", "        boolean increasing = true;\n        boolean decreasing =\
    \ true;\n        Long prev = l.get(0);\n        for (Long current : l) {\n   \
    \         if (current < prev) {\n                decreasing = false;\n       \
    \     } else if (current > prev) {\n                increasing = false;\n    \
    \        } else {\n                increasing = decreasing = true;\n         \
    \   }\n            prev = current;\n        }\n        return increasing || decreasing;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       long current = l.get(i);\n            if (current < prev) {\n        \
    \        decreasing = false;\n            } else if (current > prev) {\n     \
    \           increasing = false;\n            } else {\n                increasing\
    \ = decreasing = true;\n            }\n            prev = current;\n        }\n\
    \        return increasing || decreasing;", "        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        long prev = l.get(0);\n        for\
    \ (long current : l) {\n            if (current < prev) {\n                decreasing\
    \ = false;\n            } else if (current > prev) {\n                increasing\
    \ = false;\n            } else {\n                increasing = decreasing = true;\n\
    \            }\n            prev = current;\n        }\n        return increasing\
    \ || decreasing;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        Long prev = l.get(0);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            Long current = l.get(i);\n            if (current < prev)\
    \ {\n                decreasing = false;\n            } else if (current > prev)\
    \ {\n                increasing = false;\n            } else {\n             \
    \   increasing = decreasing = true;\n            }\n            prev = current;\n\
    \        }\n        return increasing || decreasing;", "        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        long prev = l.get(0);\n\
    \        for (long current : l) {\n            if (current < prev) {\n       \
    \         decreasing = false;\n            } else if (current > prev) {\n    \
    \            increasing = false;\n            } else {\n                increasing\
    \ = decreasing = true;\n            }\n            prev = current;\n        }\n\
    \        return increasing || decreasing;", "        boolean increasing = true;\n\
    \        boolean decreasing = true;\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n        for (long i = 1, j = l.size() - 1; i <\
    \ j; i++, j--) {\n            if (l.get(i) > l.get(j)) {\n                increasing\
    \ = false;\n            } else if (l.get(i) < l.get(j)) {\n                decreasing\
    \ = false;\n            }\n        }\n        if (increasing && decreasing) {\n\
    \            return true;\n        } else if (increasing && !decreasing) {\n \
    \           return false;\n        } else if (!increasing && decreasing) {\n \
    \           return false;\n        }\n        return false;", "        long prev\
    \ = l.get(0);\n        long curr = l.get(1);\n        for(int i = 2; i < l.size();\
    \ i++) {\n            long next = l.get(i);\n            if(curr < next) {\n \
    \               return false;\n            }\n            else if(curr > next)\
    \ {\n                return true;\n            }\n            prev = curr;\n \
    \           curr = next;\n        }\n        return curr == prev;", "        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        long current\
    \ = l.get(0);\n        long previous = l.get(0);\n        for (int i = 1; i <\
    \ l.size(); i++) {\n            long next = l.get(i);\n            if (current\
    \ < next) {\n                decreasing = false;\n            } else if (current\
    \ > next) {\n                increasing = false;\n            } else {\n     \
    \           current = next;\n            }\n            previous = current;\n\
    \        }\n        return increasing || decreasing;", "        long prev = Long.MIN_VALUE;\n\
    \        long curr = Long.MIN_VALUE;\n        for (long e : l) {\n           \
    \ if (e < prev) {\n                return false;\n            }\n            if\
    \ (e > curr) {\n                return true;\n            }\n            prev\
    \ = e;\n            curr = e;\n        }\n        return true;", "        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        long prev =\
    \ l.get(0);\n        long current = l.get(1);\n        for (int i = 2; i < l.size();\
    \ i++) {\n            long next = l.get(i);\n            if (current > next) {\n\
    \                decreasing = false;\n            }\n            if (current <\
    \ next) {\n                increasing = false;\n            }\n            if\
    \ (current == prev) {\n                increasing = decreasing = false;\n    \
    \        }\n            prev = current;\n            current = next;\n       \
    \ }\n        return increasing || decreasing;", "        boolean increasing =\
    \ true;\n        boolean decreasing = true;\n        Long first = l.get(0);\n\
    \        Long last = l.get(l.size() - 1);\n        Long current = first;\n   \
    \     for (int i = 1; i < l.size(); i++) {\n            Long next = l.get(i);\n\
    \            if (next < current) {\n                decreasing = false;\n    \
    \        } else if (next > current) {\n                increasing = false;\n \
    \           } else {\n                current = next;\n            }\n       \
    \ }\n        if (increasing && decreasing) {\n            return true;\n     \
    \   } else if (increasing && !decreasing) {\n            return true;\n      \
    \  } else if (!increasing && decreasing) {\n            return true;\n       \
    \ } else {\n            return false;\n        }", "        long max = Long.MIN_VALUE;\n\
    \        long min = Long.MAX_VALUE;\n        for (long e : l) {\n            if\
    \ (e < min) {\n                min = e;\n            }\n            if (e > max)\
    \ {\n                max = e;\n            }\n        }\n        return max >=\
    \ min;", "        boolean isMonotonic = true;\n        Long first = l.get(0);\n\
    \        Long last = l.get(l.size() - 1);\n        Long mid = l.get(l.size() /\
    \ 2);\n        Long mid2 = l.get(l.size() / 2 - 1);\n        Long mid3 = l.get(l.size()\
    \ / 2 - 2);\n        Long mid4 = l.get(l.size() / 2 - 3);\n        Long mid5 =\
    \ l.get(l.size() / 2 - 4);\n        Long mid6 = l.get(l.size() / 2 - 5);\n   \
    \     Long mid7 = l.get(l.size() / 2 - 6);\n        Long mid8 = l.get(l.size()\
    \ / 2 - 7);\n        Long mid9 = l.get(l.size() / 2 - 8);\n        Long mid10\
    \ = l.get(l.size() / 2 - 9);\n        Long mid11 = l.get(l.size() / 2 - 10);\n\
    \        Long mid12 = l.get(l.size() / 2 - 11);\n        Long mid13 = l.get(l.size()\
    \ / 2 - 12);\n        Long mid14 = l.get(l.size() / 2 - 13);\n        Long mid15\
    \ = l.get(l.size() / 2 - 14);\n        Long mid16 = l.get(l.size() / 2 - 15);\n\
    \        Long mid17 = l.get(l.size() / 2 - 16);\n        Long mid18 = l.get(l.size()\
    \ / 2 - 17);\n        Long mid19 = l.get(l.size() / 2 - 18);\n        Long mid20\
    \ = l.get(l.size() / 2 - 19);\n        Long mid21 = l.get(l.size() / 2 - 20);\n\
    \        Long mid22 = l.get(l.size() / 2 - 21);\n        Long mid23 = l.get(l.size()\
    \ / 2 - 22);\n        Long mid24 = l.get(l.size() / 2 - 23);\n        Long mid25\
    \ = l.get(l.size() / 2 - 24);\n        Long mid26 = l.get(l.size() / 2 - 25);\n\
    \        Long mid27 = l.get(l.size() / 2 - 26);\n        Long mid28 = l.get(l.size()\
    \ / 2 - 27);\n        Long mid29 = l.get(l.size() / 2 - 28);\n        Long mid30\
    \ = l.get(l.size() / 2 - 29);\n        Long mid31 = l.get(l.size() / 2 - 30);\n\
    \        Long mid32 = l.get(l.size() / 2 - 31);\n        Long mid33 = l.get(l.size()\
    \ / 2 - 32);\n        Long mid34 = l.get(l.size() / 2 - 33);\n        Long mid35\
    \ = l.get(", "        boolean increasing = true;\n        boolean decreasing =\
    \ true;\n        long prev = Long.MIN_VALUE;\n        for (long current : l) {\n\
    \            if (current < prev) {\n                decreasing = false;\n    \
    \        }\n            if (current > prev) {\n                increasing = false;\n\
    \            }\n            prev = current;\n        }\n        return increasing\
    \ || decreasing;", "        final long min = l.stream().min(Long::compareTo).get();\n\
    \        final long max = l.stream().max(Long::compareTo).get();\n        return\
    \ min < max;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        long max = Long.MIN_VALUE;\n        for (long e : l) {\n  \
    \          if (e < max) {\n                decreasing = false;\n            }\n\
    \            if (e > max) {\n                increasing = false;\n           \
    \ }\n            max = e;\n        }\n        return increasing || decreasing;",
  "        boolean isIncreasing = true;\n        boolean isDecreasing = true;\n  \
    \      long prevVal = Long.MIN_VALUE;\n        long currVal = Long.MIN_VALUE;\n\
    \        for (long val : l) {\n            if (prevVal > val) {\n            \
    \    isIncreasing = false;\n            }\n            if (currVal < val) {\n\
    \                isDecreasing = false;\n            }\n            prevVal = val;\n\
    \            currVal = val;\n        }\n        return isIncreasing || isDecreasing;",
  "        long max = Long.MIN_VALUE;\n        long min = Long.MAX_VALUE;\n      \
    \  for (long e : l) {\n            if (e > max) {\n                max = e;\n\
    \            }\n            if (e < min) {\n                min = e;\n       \
    \     }\n        }\n        return max >= min;", "        long min = Long.MAX_VALUE;\n\
    \        long max = Long.MIN_VALUE;\n        for (long e : l) {\n            if\
    \ (e < min) {\n                min = e;\n            }\n            if (e > max)\
    \ {\n                max = e;\n            }\n        }\n        return min <=\
    \ max;", "        boolean increasing = true;\n        boolean decreasing = true;\n\
    \        long prev = l.get(0);\n        long curr = l.get(1);\n        for(int\
    \ i = 2; i < l.size(); i++) {\n            long next = l.get(i);\n           \
    \ increasing &= (next > prev);\n            decreasing &= (next < prev);\n   \
    \         prev = curr;\n            curr = next;\n        }\n        return increasing\
    \ || decreasing;", "        boolean isMonotonic = true;\n        long prev = l.get(0);\n\
    \        for (long current : l) {\n            if (current < prev) {\n       \
    \         isMonotonic = false;\n                break;\n            }\n      \
    \      prev = current;\n        }\n        return isMonotonic;", "        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        Long last =\
    \ l.get(0);\n        for (Long current : l) {\n            if (current < last)\
    \ {\n                decreasing = false;\n            } else if (current > last)\
    \ {\n                increasing = false;\n            } else {\n             \
    \   last = current;\n            }\n        }\n        return increasing || decreasing;",
  "        if (l.size() < 2) return false;\n        long first = l.get(0);\n     \
    \   long last = l.get(l.size() - 1);\n        long mid = first + (last - first)\
    \ / 2;\n        boolean isIncreasing = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long current = l.get(i);\n            if (current < mid)\
    \ {\n                isIncreasing = false;\n                break;\n         \
    \   }\n            if (current > mid) {\n                isIncreasing = true;\n\
    \                break;\n            }\n        }\n        return isIncreasing;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long lastValue = l.get(l.size() - 1);\n        for (int i = 0; i < l.size();\
    \ i++) {\n            long value = l.get(i);\n            if (value > lastValue)\
    \ {\n                increasing = false;\n            } else if (value < lastValue)\
    \ {\n                decreasing = false;\n            }\n            lastValue\
    \ = value;\n        }\n        return increasing || decreasing;", "        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        Long prev =\
    \ l.get(0);\n        for (Long current : l) {\n            if (current < prev)\
    \ {\n                decreasing = false;\n            } else if (current > prev)\
    \ {\n                increasing = false;\n            } else {\n             \
    \   increasing = decreasing = true;\n            }\n            prev = current;\n\
    \        }\n        return increasing || decreasing;", "        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        long prev = Long.MIN_VALUE;\n\
    \        long current = Long.MIN_VALUE;\n        for (long e : l) {\n        \
    \    current = e;\n            if (current < prev) {\n                decreasing\
    \ = false;\n            } else if (current > prev) {\n                increasing\
    \ = false;\n            } else {\n                increasing = decreasing = true;\n\
    \            }\n            prev = current;\n        }\n        return increasing\
    \ || decreasing;", "        boolean isIncreasing = true;\n        boolean isDecreasing\
    \ = true;\n        long lastValue = Long.MIN_VALUE;\n        for (long value :\
    \ l) {\n            if (value > lastValue) {\n                isIncreasing = false;\n\
    \            }\n            if (value < lastValue) {\n                isDecreasing\
    \ = false;\n            }\n            lastValue = value;\n        }\n       \
    \ return isIncreasing || isDecreasing;", "        final long max = Long.MIN_VALUE;\n\
    \        final long min = Long.MAX_VALUE;\n        for (long e : l) {\n      \
    \      min = Math.min(min, e);\n            max = Math.max(max, e);\n        }\n\
    \        return min <= max;", "        boolean isIncreasing = true;\n        boolean\
    \ isDecreasing = true;\n        long lastValue = Long.MIN_VALUE;\n        long\
    \ lastIndex = -1;\n        for(int i = 0; i < l.size(); i++) {\n            long\
    \ value = l.get(i);\n            if(value < lastValue) {\n                isDecreasing\
    \ = false;\n            }\n            if(value > lastValue) {\n             \
    \   isIncreasing = false;\n            }\n            if(value == lastValue) {\n\
    \                lastIndex = i;\n            }\n            lastValue = value;\n\
    \        }\n        if(isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        if(isIncreasing && !isDecreasing) {\n            return true;\n\
    \        }\n        if(!isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        if(lastIndex == -1) {\n            return false;\n       \
    \ }\n        for(int i = lastIndex + 1; i < l.size(); i++) {\n            long\
    \ value = l.get(i);\n            if(value < lastValue) {\n                isDecreasing\
    \ = false;\n            }\n            if(value > lastValue) {\n             \
    \   isIncreasing = false;\n            }\n            if(value == lastValue) {\n\
    \                lastIndex = i;\n            }\n            lastValue = value;\n\
    \        }\n        if(isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        if(isIncreasing && !isDecreasing) {\n            return true;\n\
    \        }\n        if(!isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        if(lastIndex == -1) {\n            return false;\n       \
    \ }\n        for(int i = lastIndex + 1; i < l.size(); i++) {\n            long\
    \ value = l.get(i);\n            if(value < lastValue) {\n                isDecreasing\
    \ = false;\n            }\n            if(value > lastValue) {\n             \
    \   isIncreasing = false;\n            }\n            if(value == lastValue) {\n\
    \                lastIndex = i;\n            }\n            lastValue = value;\n\
    \        }\n        if(isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        if(isIncreasing && !isDecreasing) {\n            return true;\n\
    \        }\n        if(!isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        if(lastIndex == -1) {\n            return false;\n       \
    \ }\n        for(int i = lastIndex + 1; i < l.size(); i++) {\n            long\
    \ value = l.get(i);\n            if(value < lastValue) {\n                isDecreasing\
    \ = false;\n            }\n            if(value > lastValue) {\n             \
    \   isIncreasing = false;\n            }\n            if(value == lastValue) {\n\
    \                lastIndex = i;\n            }\n            lastValue = value;\n\
    \        }\n        if(isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        if(isIncreasing && !isDecreasing) {\n            return true;\n\
    \        }\n        if(!isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        long prev = l.get(0);\n        long current = l.get(1);\n \
    \       for (int i = 2; i < l.size(); i++) {\n            long next = l.get(i);\n\
    \            if (current < next) {\n                decreasing = false;\n    \
    \        } else if (current > next) {\n                increasing = false;\n \
    \           } else {\n                current = next;\n            }\n       \
    \     if (current < prev) {\n                decreasing = false;\n           \
    \ } else if (current > prev) {\n                increasing = false;\n        \
    \    } else {\n                current = prev;\n            }\n            prev\
    \ = current;\n        }\n        return increasing || decreasing;", "        boolean\
    \ isIncreasing = true;\n        boolean isDecreasing = true;\n        long max\
    \ = Long.MIN_VALUE;\n        long min = Long.MAX_VALUE;\n        for (long e :\
    \ l) {\n            if (e > max) {\n                isIncreasing = false;\n  \
    \          }\n            if (e < min) {\n                isDecreasing = false;\n\
    \            }\n            max = Math.max(max, e);\n            min = Math.min(min,\
    \ e);\n        }\n        return isIncreasing || isDecreasing;", "        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        long prev =\
    \ l.get(0);\n        for(long x : l) {\n            if(x == prev) {\n        \
    \        increasing = false;\n            }\n            else if(x == prev + 1)\
    \ {\n                decreasing = false;\n            }\n            else {\n\
    \                increasing = true;\n                decreasing = true;\n    \
    \        }\n            prev = x;\n        }\n        return increasing || decreasing;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  Long previous = null;\n        for (Long current : l) {\n            if (current\
    \ == null) {\n                throw new IllegalArgumentException(\"Null element\
    \ encountered.\");\n            }\n            if (previous == null) {\n     \
    \           previous = current;\n                continue;\n            }\n  \
    \          if (current < previous) {\n                decreasing = false;\n  \
    \          }\n            if (current > previous) {\n                increasing\
    \ = false;\n            }\n            previous = current;\n        }\n      \
    \  return increasing || decreasing;", "        boolean increasing = true;\n  \
    \      boolean decreasing = true;\n        Long prev = l.get(0);\n        for\
    \ (Long current : l) {\n            if (current < prev) {\n                decreasing\
    \ = false;\n            } else if (current > prev) {\n                increasing\
    \ = false;\n            } else {\n                increasing = decreasing = true;\n\
    \            }\n            prev = current;\n        }\n        return increasing\
    \ || decreasing;", "        long first = l.get(0);\n        long last = l.get(l.size()\
    \ - 1);\n        long mid = first + (last - first) / 2;\n        boolean isIncreasing\
    \ = true;\n        boolean isDecreasing = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long current = l.get(i);\n            if (current < mid)\
    \ {\n                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n        }\n        return\
    \ isIncreasing || isDecreasing;", "        boolean increasing = true;\n      \
    \  boolean decreasing = true;\n        long prev = l.get(0);\n        long current\
    \ = l.get(1);\n        long next = l.get(2);\n        for(int i = 3; i < l.size();\
    \ i++) {\n            long curr = l.get(i);\n            if(curr < prev) {\n \
    \               decreasing = false;\n            }\n            else if(curr >\
    \ prev) {\n                increasing = false;\n            }\n            else\
    \ {\n                prev = current;\n                current = next;\n      \
    \          next = curr;\n            }\n        }\n        return increasing ||\
    \ decreasing;", "        final long max = Collections.max(l);\n        final long\
    \ min = Collections.min(l);\n        return max < min;", "        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        long first = l.get(0);\n\
    \        long last = l.get(l.size() - 1);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            long current = l.get(i);\n            if (current < first)\
    \ {\n                decreasing = false;\n            } else if (current > last)\
    \ {\n                increasing = false;\n            } else {\n             \
    \   increasing = increasing && current >= first;\n                decreasing =\
    \ decreasing && current <= last;\n            }\n        }\n        return increasing\
    \ || decreasing;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        long first = l.get(0);\n        long last = l.get(l.size()\
    \ - 1);\n        for (long i = 1, j = l.size() - 1; i < j; i++, j--) {\n     \
    \       if (l.get(i) > l.get(j)) {\n                increasing = false;\n    \
    \        } else if (l.get(i) < l.get(j)) {\n                decreasing = false;\n\
    \            }\n        }\n        if (increasing && decreasing) {\n         \
    \   return true;\n        } else if (increasing && !decreasing) {\n          \
    \  return false;\n        } else if (!increasing && decreasing) {\n          \
    \  return true;\n        }\n        return false;", "        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        Long current = null;\n\
    \        for (Long e : l) {\n            if (current == null) {\n            \
    \    current = e;\n                continue;\n            }\n            if (e\
    \ < current) {\n                decreasing = false;\n            } else if (e\
    \ > current) {\n                increasing = false;\n            } else {\n  \
    \              continue;\n            }\n            current = e;\n        }\n\
    \        if (increasing && decreasing) {\n            return true;\n        }\n\
    \        if (increasing && !decreasing) {\n            return true;\n        }\n\
    \        if (decreasing && !increasing) {\n            return true;\n        }\n\
    \        return false;", "        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        long prev = Long.MIN_VALUE;\n        for (long current\
    \ : l) {\n            if (current < prev) {\n                decreasing = false;\n\
    \            }\n            if (current > prev) {\n                increasing\
    \ = false;\n            }\n            prev = current;\n        }\n        return\
    \ increasing || decreasing;", "        final int size = l.size();\n        if\
    \ (size < 3) {\n            return true;\n        }\n        final long first\
    \ = l.get(0);\n        final long last = l.get(size - 1);\n        final long\
    \ mid = l.get(size / 2);\n        final long mid2 = l.get(size / 2 - 1);\n   \
    \     final long mid3 = l.get(size / 2 - 2);\n        final long mid4 = l.get(size\
    \ / 2 - 3);\n        final long mid5 = l.get(size / 2 - 4);\n        final long\
    \ mid6 = l.get(size / 2 - 5);\n        final long mid7 = l.get(size / 2 - 6);\n\
    \        final long mid8 = l.get(size / 2 - 7);\n        final long mid9 = l.get(size\
    \ / 2 - 8);\n        final long mid10 = l.get(size / 2 - 9);\n        final long\
    \ mid11 = l.get(size / 2 - 10);\n        final long mid12 = l.get(size / 2 - 11);\n\
    \        final long mid13 = l.get(size / 2 - 12);\n        final long mid14 =\
    \ l.get(size / 2 - 13);\n        final long mid15 = l.get(size / 2 - 14);\n  \
    \      final long mid16 = l.get(size / 2 - 15);\n        final long mid17 = l.get(size\
    \ / 2 - 16);\n        final long mid18 = l.get(size / 2 - 17);\n        final\
    \ long mid19 = l.get(size / 2 - 18);\n        final long mid20 = l.get(size /\
    \ 2 - 19);\n        final long mid21 = l.get(size / 2 - 20);\n        final long\
    \ mid22 = l.get(size / 2 - 21);\n        final long mid23 = l.get(size / 2 - 22);\n\
    \        final long mid24 = l.get(size / 2 - 23);\n        final long mid25 =\
    \ l.get(size / 2 - 24);\n        final long mid26 = l.get(size / 2 - 25);\n  \
    \      final long mid27 = l.get(size / 2 - 26);\n        final long mid28 = l.get(size\
    \ / 2 - 27);\n        final long mid29 = l.get(size / 2 - 28);\n        final\
    \ long mid30 = l.get(size / 2 - 29);\n        final long mid31 = l.get(size /\
    \ 2 - 30);\n        final long mid32 = l.get(size / 2 - 31);\n        final long\
    \ mid33 = l.get(size / 2 - 32);\n        final long mid34 = l.get(size / 2 - 33);\n\
    \        final long mid35 = l.get(size / 2 - 34);\n        final long mid36 =\
    \ l.get(size / 2 - 35);\n        final long mid37 = l.get(size / 2 - 36);\n  \
    \      final long mid38 = l.get(size / 2 - 37);\n        final long mid39 = l.get(size\
    \ / 2 - 38);\n        final ", "        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        Long current = l.get(0);\n        Long previous\
    \ = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            Long\
    \ current = l.get(i);\n            if (current < previous) {\n               \
    \ decreasing = false;\n            } else if (current > previous) {\n        \
    \        increasing = false;\n            } else {\n                increasing\
    \ = !increasing;\n                decreasing = !decreasing;\n            }\n \
    \           previous = current;\n        }\n        return increasing || decreasing;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long current = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n  \
    \          long next = l.get(i);\n            if (next < current) {\n        \
    \        decreasing = false;\n            } else if (next > current) {\n     \
    \           increasing = false;\n            } else {\n                current\
    \ = next;\n            }\n        }\n        return increasing || decreasing;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long prev = l.get(0);\n        long current = l.get(1);\n        for(int i\
    \ = 2; i < l.size(); i++) {\n            long next = l.get(i);\n            increasing\
    \ &= (next < prev);\n            decreasing &= (next > prev);\n            prev\
    \ = current;\n            current = next;\n        }\n        return increasing\
    \ || decreasing;", "        final long first = l.get(0);\n        final long last\
    \ = l.get(l.size() - 1);\n        if (first > last)\n            return false;\n\
    \        final long mid = first + (last - first) / 2;\n        final long mid2\
    \ = mid + (mid - first) / 2;\n        final long mid3 = mid2 + (mid2 - first)\
    \ / 2;\n        final long mid4 = mid3 + (mid3 - first) / 2;\n        final long\
    \ mid5 = mid4 + (mid4 - first) / 2;\n        final long mid6 = mid5 + (mid5 -\
    \ first) / 2;\n        final long mid7 = mid6 + (mid6 - first) / 2;\n        final\
    \ long mid8 = mid7 + (mid7 - first) / 2;\n        final long mid9 = mid8 + (mid8\
    \ - first) / 2;\n        final long mid10 = mid9 + (mid9 - first) / 2;\n     \
    \   final long mid11 = mid10 + (mid10 - first) / 2;\n        final long mid12\
    \ = mid11 + (mid11 - first) / 2;\n        final long mid13 = mid12 + (mid12 -\
    \ first) / 2;\n        final long mid14 = mid13 + (mid13 - first) / 2;\n     \
    \   final long mid15 = mid14 + (mid14 - first) / 2;\n        final long mid16\
    \ = mid15 + (mid15 - first) / 2;\n        final long mid17 = mid16 + (mid16 -\
    \ first) / 2;\n        final long mid18 = mid17 + (mid17 - first) / 2;\n     \
    \   final long mid19 = mid18 + (mid18 - first) / 2;\n        final long mid20\
    \ = mid19 + (mid19 - first) / 2;\n        final long mid21 = mid20 + (mid20 -\
    \ first) / 2;\n        final long mid22 = mid21 + (mid21 - first) / 2;\n     \
    \   final long mid23 = mid22 + (mid22 - first) / 2;\n        final long mid24\
    \ = mid23 + (mid23 - first) / 2;\n        final long mid25 = mid24 + (mid24 -\
    \ first) / 2;\n        final long mid26 = mid25 + (mid25 - first) / 2;\n     \
    \   final long mid27 = mid26 + (mid26 - first) / 2;\n        final long mid28\
    \ = mid27 + (mid27 - first) / 2;\n        final long mid29 = mid28 + (mid28 -\
    \ first) / 2;\n        final long mid30 = mid29 + (mid29 - first) / 2;\n     \
    \   final long mid31 = mid30 + (mid30 - first) / 2;\n        final long mid32\
    \ = ", "        final int size = l.size();\n        if (size == 0) return false;\n\
    \        final long first = l.get(0);\n        final long last = l.get(size -\
    \ 1);\n        if (first > last) return true;\n        if (first == last) return\
    \ true;\n        final long mid = first + (last - first) / 2;\n        final long\
    \ mid2 = mid + (mid - first) / 2;\n        final long mid3 = mid2 + (mid2 - first)\
    \ / 2;\n        final long mid4 = mid3 + (mid3 - first) / 2;\n        final long\
    \ mid5 = mid4 + (mid4 - first) / 2;\n        final long mid6 = mid5 + (mid5 -\
    \ first) / 2;\n        final long mid7 = mid6 + (mid6 - first) / 2;\n        final\
    \ long mid8 = mid7 + (mid7 - first) / 2;\n        final long mid9 = mid8 + (mid8\
    \ - first) / 2;\n        final long mid10 = mid9 + (mid9 - first) / 2;\n     \
    \   final long mid11 = mid10 + (mid10 - first) / 2;\n        final long mid12\
    \ = mid11 + (mid11 - first) / 2;\n        final long mid13 = mid12 + (mid12 -\
    \ first) / 2;\n        final long mid14 = mid13 + (mid13 - first) / 2;\n     \
    \   final long mid15 = mid14 + (mid14 - first) / 2;\n        final long mid16\
    \ = mid15 + (mid15 - first) / 2;\n        final long mid17 = mid16 + (mid16 -\
    \ first) / 2;\n        final long mid18 = mid17 + (mid17 - first) / 2;\n     \
    \   final long mid19 = mid18 + (mid18 - first) / 2;\n        final long mid20\
    \ = mid19 + (mid19 - first) / 2;\n        final long mid21 = mid20 + (mid20 -\
    \ first) / 2;\n        final long mid22 = mid21 + (mid21 - first) / 2;\n     \
    \   final long mid23 = mid22 + (mid22 - first) / 2;\n        final long mid24\
    \ = mid23 + (mid23 - first) / 2;\n        final long mid25 = mid24 + (mid24 -\
    \ first) / 2;\n        final long mid26 = mid25 + (mid25 - first) / 2;\n     \
    \   final long mid27 = mid26 + (mid26 - first) / 2;\n        final long mid28\
    \ = mid27 + (mid27 - first) / 2;\n        final long mid29 = mid28 + (mid28 -\
    \ first) / 2;\n        final long mid30 = mid29 + (mid29 - first) / 2;\n     \
    \   final long mid3", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        Long first = l.get(0);\n        Long last = l.get(l.size()\
    \ - 1);\n        if (first > last) {\n            increasing = false;\n      \
    \  }\n        if (last < first) {\n            decreasing = false;\n        }\n\
    \        if (increasing && decreasing) {\n            return true;\n        }\n\
    \        if (increasing && !decreasing) {\n            return true;\n        }\n\
    \        if (decreasing && !increasing) {\n            return true;\n        }\n\
    \        return false;", "        long max = Long.MIN_VALUE;\n        long min\
    \ = Long.MAX_VALUE;\n        for (long e : l) {\n            if (e > max) {\n\
    \                max = e;\n            }\n            if (e < min) {\n       \
    \         min = e;\n            }\n        }\n        return min <= max;", " \
    \       boolean increasing = true;\n        boolean decreasing = true;\n     \
    \   long prev = Long.MIN_VALUE;\n        for (long current : l) {\n          \
    \  if (current < prev) {\n                increasing = false;\n            } else\
    \ if (current > prev) {\n                decreasing = false;\n            } else\
    \ {\n                prev = current;\n            }\n        }\n        return\
    \ increasing || decreasing;", "        boolean isIncreasing = true;\n        boolean\
    \ isDecreasing = true;\n        Long first = l.get(0);\n        Long last = l.get(l.size()\
    \ - 1);\n        Long current = first;\n        Long nextVal = last;\n       \
    \ Long nextVal2 = last;\n        Long nextVal3 = last;\n        Long nextVal4\
    \ = last;\n        Long nextVal5 = last;\n        Long nextVal6 = last;\n    \
    \    Long nextVal7 = last;\n        Long nextVal8 = last;\n        Long nextVal9\
    \ = last;\n        Long nextVal10 = last;\n        Long nextVal11 = last;\n  \
    \      Long nextVal12 = last;\n        Long nextVal13 = last;\n        Long nextVal14\
    \ = last;\n        Long nextVal15 = last;\n        Long nextVal16 = last;\n  \
    \      Long nextVal17 = last;\n        Long nextVal18 = last;\n        Long nextVal19\
    \ = last;\n        Long nextVal20 = last;\n        Long nextVal21 = last;\n  \
    \      Long nextVal22 = last;\n        Long nextVal23 = last;\n        Long nextVal24\
    \ = last;\n        Long nextVal25 = last;\n        Long nextVal26 = last;\n  \
    \      Long nextVal27 = last;\n        Long nextVal28 = last;\n        Long nextVal29\
    \ = last;\n        Long nextVal30 = last;\n        Long nextVal31 = last;\n  \
    \      Long nextVal32 = last;\n        Long nextVal33 = last;\n        Long nextVal34\
    \ = last;\n        Long nextVal35 = last;\n        Long nextVal36 = last;\n  \
    \      Long nextVal37 = last;\n        Long nextVal38 = last;\n        Long nextVal39\
    \ = last;\n        Long nextVal40 = last;\n        Long nextVal41 = last;\n  \
    \      Long nextVal42 = last;\n        Long nextVal43 = last;\n        Long nextVal44\
    \ = last;\n        Long nextVal45 = last;\n        Long nextVal46 = last;\n  \
    \      Long nextVal47 = last;\n        Long nextVal48 = last;\n        ", "  \
    \      boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       long current = l.get(i);\n            if (current < prev) {\n        \
    \        decreasing = false;\n            } else if (current > prev) {\n     \
    \           increasing = false;\n            } else {\n                increasing\
    \ = increasing && increasing;\n                decreasing = decreasing && decreasing;\n\
    \            }\n            prev = current;\n        }\n        return increasing\
    \ || decreasing;", "        final long max = Long.MIN_VALUE;\n        final long\
    \ min = Long.MAX_VALUE;\n        for (long e : l) {\n            max = Math.max(max,\
    \ e);\n            min = Math.min(min, e);\n        }\n        return min < max;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long prev = l.get(0);\n        for (long current : l) {\n            if (current\
    \ < prev) {\n                decreasing = false;\n            } else if (current\
    \ > prev) {\n                increasing = false;\n            } else {\n     \
    \           increasing = decreasing = true;\n            }\n            prev =\
    \ current;\n        }\n        return increasing || decreasing;", "        long\
    \ max = Long.MIN_VALUE;\n        long min = Long.MAX_VALUE;\n        for (long\
    \ e : l) {\n            if (e < min) {\n                min = e;\n           \
    \ }\n            if (e > max) {\n                max = e;\n            }\n   \
    \     }\n        return min <= max;", "        long max = Long.MIN_VALUE;\n  \
    \      long min = Long.MAX_VALUE;\n        for (long e : l) {\n            if\
    \ (e < min) {\n                min = e;\n            }\n            if (e > max)\
    \ {\n                max = e;\n            }\n        }\n        return min <=\
    \ max;", "        boolean isIncreasing = true;\n        boolean isDecreasing =\
    \ true;\n        long lastValue = l.get(0);\n        long currentValue = l.get(0);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            currentValue = l.get(i);\n\
    \            if (currentValue < lastValue) {\n                isDecreasing = false;\n\
    \            }\n            if (currentValue > lastValue) {\n                isIncreasing\
    \ = false;\n            }\n            lastValue = currentValue;\n        }\n\
    \        return isIncreasing || isDecreasing;", "        boolean increasing =\
    \ true;\n        boolean decreasing = true;\n        long prev = l.get(0);\n \
    \       long current = l.get(1);\n        for (int i = 2; i < l.size(); i++) {\n\
    \            long next = l.get(i);\n            if (current > next) {\n      \
    \          decreasing = false;\n            } else if (current < next) {\n   \
    \             increasing = false;\n            } else {\n                increasing\
    \ = decreasing = true;\n            }\n            prev = current;\n         \
    \   current = next;\n        }\n        return increasing || decreasing;", " \
    \       long prev = l.get(0);\n        long curr = l.get(1);\n        boolean\
    \ increasing = true;\n        boolean decreasing = true;\n        for (int i =\
    \ 2; i < l.size(); i++) {\n            long next = l.get(i);\n            if (curr\
    \ < next) {\n                decreasing = false;\n            } else if (curr\
    \ > next) {\n                increasing = false;\n            } else {\n     \
    \           increasing = decreasing = true;\n            }\n            prev =\
    \ curr;\n            curr = next;\n        }\n        return increasing || decreasing;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long current = l.get(0);\n        long previous = l.get(0);\n        for (int\
    \ i = 1; i < l.size(); i++) {\n            long current = l.get(i);\n        \
    \    if (current < previous) {\n                decreasing = false;\n        \
    \    } else if (current > previous) {\n                increasing = false;\n \
    \           } else {\n                increasing = decreasing = true;\n      \
    \      }\n            previous = current;\n        }\n        return increasing\
    \ || decreasing;", "        boolean increasing = true;\n        boolean decreasing\
    \ = true;\n        Long previous = null;\n        Long current = null;\n     \
    \   for (Long l : l) {\n            if (current == null) {\n                current\
    \ = l;\n                previous = l;\n            } else if (current > l) {\n\
    \                decreasing = false;\n            } else if (current < l) {\n\
    \                increasing = false;\n            } else {\n                current\
    \ = l;\n                previous = l;\n            }\n        }\n        if (increasing\
    \ && decreasing) {\n            return true;\n        } else if (increasing &&\
    \ !decreasing) {\n            return false;\n        } else if (!increasing &&\
    \ decreasing) {\n            return true;\n        } else {\n            return\
    \ false;\n        }", "        boolean isIncreasing = true;\n        boolean isDecreasing\
    \ = true;\n        long max = Long.MIN_VALUE;\n        long min = Long.MAX_VALUE;\n\
    \        for (long e : l) {\n            if (e < min) {\n                isDecreasing\
    \ = false;\n            }\n            if (e > max) {\n                isIncreasing\
    \ = false;\n            }\n            min = Math.min(min, e);\n            max\
    \ = Math.max(max, e);\n        }\n        return isIncreasing || isDecreasing;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long last = 0;\n        for (long current : l) {\n            if (current >\
    \ last) {\n                increasing = false;\n            } else if (current\
    \ < last) {\n                decreasing = false;\n            }\n            last\
    \ = current;\n        }\n        return increasing || decreasing;", "        long\
    \ max = Long.MIN_VALUE;\n        long min = Long.MAX_VALUE;\n        for (long\
    \ e : l) {\n            if (e < min) {\n                min = e;\n           \
    \ }\n            if (e > max) {\n                max = e;\n            }\n   \
    \     }\n        return min <= max;", "        boolean increasing = true;\n  \
    \      boolean decreasing = true;\n        Long first = l.get(0);\n        Long\
    \ last = l.get(l.size() - 1);\n        for (Long e : l) {\n            if (e <\
    \ first) {\n                decreasing = false;\n            }\n            if\
    \ (e > last) {\n                increasing = false;\n            }\n        }\n\
    \        if (increasing && decreasing) {\n            return true;\n        }\n\
    \        if (increasing && !decreasing) {\n            return true;\n        }\n\
    \        if (decreasing && !increasing) {\n            return true;\n        }\n\
    \        return false;", "        boolean increasing = true;\n        boolean\
    \ decreasing = true;\n        long lastVal = Long.MIN_VALUE;\n        for (long\
    \ val : l) {\n            if (val < lastVal) {\n                decreasing = false;\n\
    \            } else if (val > lastVal) {\n                increasing = false;\n\
    \            } else {\n                increasing = increasing && val > lastVal;\n\
    \                decreasing = decreasing && val < lastVal;\n            }\n  \
    \          lastVal = val;\n        }\n        return increasing || decreasing;",
  "        boolean increasing = true;\n        boolean decreasing = true;\n      \
    \  long prev = l.get(0);\n        for (long current : l) {\n            if (current\
    \ < prev) {\n                decreasing = false;\n            } else if (current\
    \ > prev) {\n                increasing = false;\n            } else {\n     \
    \           increasing = decreasing = true;\n            }\n            prev =\
    \ current;\n        }\n        return increasing || decreasing;", "        boolean\
    \ isIncreasing = true;\n        boolean isDecreasing = true;\n        long prev\
    \ = l.get(0);\n        long current = l.get(1);\n        for(int i=2; i<l.size();\
    \ i++) {\n            long next = l.get(i);\n            if (current < next) {\n\
    \                isIncreasing = false;\n            }\n            if (current\
    \ > next) {\n                isDecreasing = false;\n            }\n          \
    \  if (current == prev && next == current) {\n                isDecreasing = false;\n\
    \            }\n            prev = current;\n            current = next;\n   \
    \     }\n        return isIncreasing || isDecreasing;", "        boolean increasing\
    \ = true;\n        boolean decreasing = true;\n        Long last = l.get(0);\n\
    \        for (Long current : l) {\n            if (current < last) {\n       \
    \         decreasing = false;\n            }\n            if (current > last)\
    \ {\n                increasing = false;\n            }\n            last = current;\n\
    \        }\n        return increasing || decreasing;", "        final long max\
    \ = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n        final long\
    \ max = Long.MIN_VALUE;\n        final long min = Long.MAX_VALUE;\n        for\
    \ (long e : l) {\n            max = Math.max(max, e);\n            min = Math.min(min,\
    \ e);\n        }\n        return max >= min;", "        long prev = l.get(0);\n\
    \        long current = l.get(1);\n        long next = l.get(2);\n        long\
    \ diff = next - current;\n        boolean isIncreasing = true;\n        if (diff\
    \ > 0) {\n            isIncreasing = false;\n        }\n        if (diff < 0)\
    \ {\n            isIncreasing = true;\n        }\n        return isIncreasing;"]
stop_tokens:
- "\n    }\n"
