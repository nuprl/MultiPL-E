name: HumanEval_111_histogram
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string representing a space separated lowercase\
  \ letters, return a dictionary\n    // of the letter with the most repetition and\
  \ containing the corresponding count.\n    // If several letters have the same occurrence,\
  \ return all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    //\
  \ (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l)))\n    // >>>\
  \ histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 2l, \"\
  b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
  a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
  b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
  \    public static HashMap<String,Long> histogram(String test) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
  a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
  \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
  a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
  a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
  r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
  \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
  b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
  r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Long>())));\n\
  \    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n\
  \    }\n\n}\n"
completions: ["        HashMap<String,Long> result = new HashMap<String,Long>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            word = word.toLowerCase();\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;", "        HashMap<String,Long> result\
    \ = new HashMap<>();\n        String[] words = test.split(\" \");\n        for\
    \ (String word : words) {\n            word = word.toLowerCase();\n          \
    \  Long count = result.get(word);\n            if (count == null) {\n        \
    \        result.put(word, 1l);\n            } else {\n                result.put(word,\
    \ count + 1l);\n            }\n        }\n        return result;", "        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            word = word.toLowerCase();\n     \
    \       Long count = map.get(word);\n            if (count == null) {\n      \
    \          map.put(word, 1l);\n            } else {\n                map.put(word,\
    \ count + 1l);\n            }\n        }\n        return map;", "        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     Arrays.sort(words);\n        for(String word : words) {\n            Long\
    \ count = result.get(word);\n            if(count == null) {\n               \
    \ result.put(word, 1l);\n            } else {\n                result.put(word,\
    \ count + 1l);\n            }\n        }\n        return result;", "        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     Arrays.stream(words).forEach(word -> {\n            String letter = word.toLowerCase();\n\
    \            Long count = result.get(letter);\n            if (count == null)\
    \ {\n                result.put(letter, 1l);\n            } else {\n         \
    \       result.put(letter, count + 1l);\n            }\n        });\n        return\
    \ result;", "        HashMap<String,Long> map = new HashMap<>();\n        String[]\
    \ words = test.split(\" \");\n        for (String word : words) {\n          \
    \  word = word.toLowerCase();\n            Long count = map.get(word);\n     \
    \       if (count == null) {\n                map.put(word, 1l);\n           \
    \ } else {\n                map.put(word, count + 1l);\n            }\n      \
    \  }\n        return map;", "        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word, map.getOrDefault(word, 0L) + 1);\n        }\n \
    \       return map;", "        HashMap<String,Long> map = new HashMap<>();\n \
    \       String[] words = test.split(\" \");\n        Arrays.stream(words).forEach(w\
    \ -> {\n            String key = w;\n            Long value = map.get(key);\n\
    \            if (value == null) {\n                value = 1L;\n            }\n\
    \            map.put(key, value + 1L);\n        });\n        return map;", " \
    \       HashMap<String,Long> result = new HashMap<>();\n        String[] words\
    \ = test.split(\" \");\n        for (String word : words) {\n            word\
    \ = word.toLowerCase();\n            Long count = result.get(word);\n        \
    \    if (count == null) {\n                result.put(word, 1l);\n           \
    \ } else {\n                result.put(word, count + 1l);\n            }\n   \
    \     }\n        return result;", "        HashMap<String,Long> result = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            word = word.toLowerCase();\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;", "        HashMap<String,Long> result\
    \ = new HashMap<>();\n        String[] words = test.split(\" \");\n        for\
    \ (String word : words) {\n            word = word.trim();\n            Long count\
    \ = result.get(word);\n            if (count == null) {\n                result.put(word,\
    \ 1l);\n            } else {\n                result.put(word, count + 1l);\n\
    \            }\n        }\n        return result;", "        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            Long count = map.get(word);\n    \
    \        if (count == null) {\n                map.put(word, 1l);\n          \
    \  } else {\n                map.put(word, count + 1l);\n            }\n     \
    \   }\n        return map;", "        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1l, Long::sum);\n        }\n        return map;",
  "        HashMap<String,Long> map = new HashMap<>();\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            map.merge(word, 1L, Long::sum);\n\
    \        }\n        return map;", "        HashMap<String,Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \        }\n        return map;", "        HashMap<String,Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \        }\n        return map;", "        HashMap<String,Long> result = new HashMap<String,Long>();\n\
    \        String[] words = test.split(\" \");\n        Arrays.sort(words);\n  \
    \      for (String word : words) {\n            Long count = result.get(word);\n\
    \            if (count == null) {\n                result.put(word, 1l);\n   \
    \         } else {\n                result.put(word, count + 1l);\n          \
    \  }\n        }\n        return result;", "        HashMap<String,Long> map =\
    \ new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String\
    \ word : words) {\n            String letter = word.substring(0, 1);\n       \
    \     Long count = map.get(letter);\n            if (count == null) {\n      \
    \          map.put(letter, 1l);\n            } else {\n                map.put(letter,\
    \ count + 1l);\n            }\n        }\n        return map;", "        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] words = test.split(\" \");\n   \
    \     for (String word : words) {\n            word = word.toLowerCase();\n  \
    \          Long count = result.get(word);\n            if (count == null) {\n\
    \                result.put(word, 1l);\n            } else {\n               \
    \ result.put(word, count + 1l);\n            }\n        }\n        return result;",
  "        HashMap<String,Long> result = new HashMap<>();\n        String[] words\
    \ = test.split(\" \");\n        for (String word : words) {\n            word\
    \ = word.trim();\n            Long count = result.get(word);\n            if (count\
    \ == null) {\n                result.put(word, 1l);\n            } else {\n  \
    \              result.put(word, count + 1l);\n            }\n        }\n     \
    \   return result;"]
stop_tokens:
- "\n    }\n"
