name: HumanEval_10_make_palindrome
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Find the shortest palindrome that begins with a supplied\
  \ string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of\
  \ supplied string that is a palindrome.\n    // - Append to the end of the string\
  \ reverse of a string prefix that comes before the palindromic suffix.\n    // >>>\
  \ makePalindrome((\"\"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n\
  \    // (\"catac\")\n    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n\
  \    public static String makePalindrome(String string) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(makePalindrome((\"\
  \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
  \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
  xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\"\
  )));\n    }\n\n}\n"
completions: ["        StringBuilder sb = new StringBuilder();\n        StringBuilder\
    \ reverse = new StringBuilder();\n        int longest = 0;\n        for (int i\
    \ = 0; i < string.length(); i++) {\n            reverse.append(string.charAt(i));\n\
    \            if (reverse.length() > longest) {\n                longest = reverse.length();\n\
    \            }\n        }\n        for (int i = 0; i < string.length(); i++) {\n\
    \            reverse.append(string.charAt(i));\n            if (reverse.length()\
    \ > longest) {\n                longest = reverse.length();\n            }\n \
    \       }\n        for (int i = 0; i < string.length(); i++) {\n            reverse.append(string.charAt(i));\n\
    \            if (reverse.length() > longest) {\n                longest = reverse.length();\n\
    \            }\n        }\n        for (int i = 0; i < string.length(); i++) {\n\
    \            reverse.append(string.charAt(i));\n            if (reverse.length()\
    \ > longest) {\n                longest = reverse.length();\n            }\n \
    \       }\n        for (int i = 0; i < string.length(); i++) {\n            reverse.append(string.charAt(i));\n\
    \            if (reverse.length() > longest) {\n                longest = reverse.length();\n\
    \            }\n        }\n        for (int i = 0; i < string.length(); i++) {\n\
    \            reverse.append(string.charAt(i));\n            if (reverse.length()\
    \ > longest) {\n                longest = reverse.length();\n            }\n \
    \       }\n        for (int i = 0; i < string.length(); i++) {\n            reverse.append(string.charAt(i));\n\
    \            if (reverse.length() > longest) {\n                longest = reverse.length();\n\
    \            }\n        }\n        for (int i = 0; i < string.length(); i++) {\n\
    \            reverse.append(string.charAt(i));\n            if (reverse.length()\
    \ > longest) {\n                longest = reverse.length();\n            }\n \
    \       }\n        for (int i = 0; i < string.length(); i++) {\n            reverse.append(string.charAt(i));\n\
    \            if (reverse.length() > longest) {\n                longest = reverse.length();\n\
    \            }\n        }\n        for (int i = 0; i < string.length(); i++) {\n\
    \            reverse.append(string.charAt(i));\n            if (reverse.length()\
    \ > longest) {\n                longest = reverse.length();\n            }\n \
    \       }\n        for (int i = 0; i < string.length(); i++) {\n            reverse.append(string.charAt(i));\n\
    \            if (reverse.length() > longest) {\n                longest = reverse.length();\n\
    \            }\n        }\n        for (int i = 0; i < string.length(); i++) {\n\
    \            reverse.append(string.charAt(i));\n            if (reverse.length()\
    \ > longest) {\n                longest = reverse.length();\n            }\n \
    \       }\n        for (int i = 0; i < string.length(); i++) {\n            reverse.append(string.charAt(i));\n\
    \            if (reverse.length() > longest) {\n                longest = reverse.length();\n\
    \            }\n        }\n        for (int i = 0; i < string.length(); i++) {\n\
    \            reverse.append(string.charAt(i));\n            if (reverse.length()\
    \ > longest) {\n                longest = reverse.length();\n            }\n \
    \       }\n        for (int i = 0; i < string.length(); i++) {\n            reverse.append(string.charAt(i",
  "        StringBuilder sb = new StringBuilder();\n        StringBuilder reverse\
    \ = new StringBuilder();\n        int length = string.length();\n        for (int\
    \ i = 0; i < length; i++) {\n            reverse.append(string.charAt(length -\
    \ i - 1));\n        }\n        sb.append(reverse);\n        return sb.toString();",
  "        StringBuilder builder = new StringBuilder();\n        StringBuilder reverse\
    \ = new StringBuilder();\n        StringBuilder prefix = new StringBuilder();\n\
    \        StringBuilder suffix = new StringBuilder();\n        int maxLength =\
    \ 0;\n        int length = 0;\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            length++;\n            String character = string.substring(i,\
    \ i + 1);\n            reverse.append(character);\n            if (Character.isLetter(character))\
    \ {\n                prefix.append(character);\n                suffix = reverse.reverse();\n\
    \                builder.append(prefix).append(suffix);\n                maxLength\
    \ = Math.max(maxLength, prefix.length());\n                length--;\n       \
    \     }\n        }\n        if (maxLength == 0)\n            return string;\n\
    \        return builder.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        List<String> suffixes = Arrays.asList(string.split(\"\"));\n        List<String>\
    \ prefixes = Arrays.asList(string.split(\"\"));\n        Collections.sort(suffixes);\n\
    \        Collections.sort(prefixes);\n        Collections.reverse(suffixes);\n\
    \        Collections.reverse(prefixes);\n        StringBuilder reverse = new StringBuilder();\n\
    \        for (String suffix : suffixes) {\n            reverse.append(suffix);\n\
    \            reverse.append(prefixes.get(prefixes.indexOf(suffix)));\n       \
    \ }\n        sb.append(reverse);\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        char[] chars = string.toCharArray();\n  \
    \      Arrays.sort(chars);\n        boolean isPalindrome = true;\n        for\
    \ (int i = 0; i < chars.length / 2; i++) {\n            if (chars[i] != chars[chars.length\
    \ - i - 1]) {\n                isPalindrome = false;\n                break;\n\
    \            }\n        }\n        if (isPalindrome) {\n            sb.append(string);\n\
    \            int startIndex = 0, endIndex = string.length();\n            while\
    \ (startIndex < endIndex) {\n                sb.append(string.charAt(startIndex));\n\
    \                startIndex++;\n                endIndex--;\n            }\n \
    \           sb.append(string.charAt(startIndex));\n        }\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        StringBuilder reverse\
    \ = new StringBuilder();\n        int maxLength = 0;\n        int minLength =\
    \ 0;\n        boolean isPalindrome = true;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            String substring = string.substring(i, i + 1);\n       \
    \     reverse.append(substring);\n            int length = reverse.length();\n\
    \            if (length > maxLength) {\n                maxLength = length;\n\
    \            }\n            if (length < minLength) {\n                minLength\
    \ = length;\n            }\n            if (substring.equals(reverse.toString()))\
    \ {\n                isPalindrome = true;\n            }\n        }\n        if\
    \ (isPalindrome) {\n            sb.append(string);\n            int startIndex\
    \ = string.lastIndexOf(string.charAt(0));\n            int endIndex = string.indexOf(string.charAt(string.length()\
    \ - 1));\n            String prefix = string.substring(0, startIndex);\n     \
    \       String suffix = string.substring(endIndex + 1);\n            sb.append(prefix);\n\
    \            sb.append(suffix);\n            return sb.toString();\n        }\
    \ else {\n            return \"\";\n        }", "        StringBuilder builder\
    \ = new StringBuilder();\n        StringBuilder reverse = new StringBuilder();\n\
    \        int longest = 0;\n        int longestLength = 0;\n        boolean isPalindrome\
    \ = true;\n        for(int i = 0; i < string.length(); i++) {\n            char\
    \ c = string.charAt(i);\n            if(c == ' ') {\n                builder.append(c);\n\
    \                reverse.append(c);\n                continue;\n            }\n\
    \            int length = Character.toUpperCase(c) - Character.toUpperCase(string.charAt(i));\n\
    \            if(length >= longest) {\n                longest = length;\n    \
    \            longestLength = i;\n            }\n            isPalindrome = Character.toUpperCase(c)\
    \ == Character.toUpperCase(string.charAt(i));\n        }\n        if(isPalindrome)\
    \ {\n            builder.append(string.substring(longestLength));\n          \
    \  reverse.append(string.substring(0, longestLength));\n        }\n        return\
    \ builder.append(reverse).toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        StringBuilder sb2 = new StringBuilder();\n        StringBuilder sb3 =\
    \ new StringBuilder();\n        StringBuilder sb4 = new StringBuilder();\n   \
    \     StringBuilder sb5 = new StringBuilder();\n        StringBuilder sb6 = new\
    \ StringBuilder();\n        StringBuilder sb7 = new StringBuilder();\n       \
    \ StringBuilder sb8 = new StringBuilder();\n        StringBuilder sb9 = new StringBuilder();\n\
    \        StringBuilder sb10 = new StringBuilder();\n        StringBuilder sb11\
    \ = new StringBuilder();\n        StringBuilder sb12 = new StringBuilder();\n\
    \        StringBuilder sb13 = new StringBuilder();\n        StringBuilder sb14\
    \ = new StringBuilder();\n        StringBuilder sb15 = new StringBuilder();\n\
    \        StringBuilder sb16 = new StringBuilder();\n        StringBuilder sb17\
    \ = new StringBuilder();\n        StringBuilder sb18 = new StringBuilder();\n\
    \        StringBuilder sb19 = new StringBuilder();\n        StringBuilder sb20\
    \ = new StringBuilder();\n        StringBuilder sb21 = new StringBuilder();\n\
    \        StringBuilder sb22 = new StringBuilder();\n        StringBuilder sb23\
    \ = new StringBuilder();\n        StringBuilder sb24 = new StringBuilder();\n\
    \        StringBuilder sb25 = new StringBuilder();\n        StringBuilder sb26\
    \ = new StringBuilder();\n        StringBuilder sb27 = new StringBuilder();\n\
    \        StringBuilder sb28 = new StringBuilder();\n        StringBuilder sb29\
    \ = new StringBuilder();\n        StringBuilder sb30 = new StringBuilder();\n\
    \        StringBuilder sb31 = new StringBuilder();\n        StringBuilder sb32\
    \ = new StringBuilder();\n        StringBuilder sb33 = new StringBuilder();\n\
    \        StringBuilder sb34 = new StringBuilder();\n        StringBuilder sb35\
    \ = new StringBuilder();\n        StringBuilder sb36 = new StringBuilder();\n\
    \        StringBuilder sb37 = new StringBuilder();\n        StringBuilder sb38\
    \ = new StringBuilder();\n        StringBuilder sb39 = new StringBuilder();\n\
    \        StringBuilder sb40 = new StringBuilder();\n        StringBuilder sb41\
    \ = new StringBuilder();\n        StringBuilder sb42 = new StringBuilder();\n\
    \        StringBuilder sb43 = new StringBuilder();\n        StringBuilder sb44\
    \ = new StringBuilder();\n        StringBuilder sb45 = new StringBuilder();\n\
    \        StringBuilder sb46 = new StringBuilder();\n        StringBuilder sb47\
    \ = new StringBuilder();\n        StringBuilder sb48 = new StringBuilder();\n\
    \        StringBuilder sb49 = new StringBuilder();\n        StringBuilder sb50\
    \ = new StringBuilder();\n        StringBuilder sb51 = new ", "        StringBuilder\
    \ builder = new StringBuilder();\n        builder.append(string);\n        builder.reverse();\n\
    \        builder.append(string);\n        return builder.toString();", "     \
    \   StringBuilder sb = new StringBuilder();\n        List<String> strings = Arrays.asList(string.split(\"\
    \"));\n        List<String> reversed = new ArrayList<>();\n        for (String\
    \ s : strings) {\n            reversed.add(new StringBuilder(s).reverse().toString());\n\
    \        }\n        Collections.sort(reversed);\n        StringBuilder result\
    \ = new StringBuilder();\n        for (String s : reversed) {\n            sb.append(s);\n\
    \            sb.append(\" \");\n        }\n        sb.delete(sb.length() - 1,\
    \ sb.length());\n        sb.append(\" \");\n        sb.append(string);\n     \
    \   return sb.toString();", "        StringBuilder result = new StringBuilder();\n\
    \        StringBuilder prefix = new StringBuilder();\n        StringBuilder suffix\
    \ = new StringBuilder();\n        StringBuilder reverse = new StringBuilder();\n\
    \        int longest = 0;\n        int longestLength = 0;\n        int longestReverse\
    \ = 0;\n        for (int i = 0; i < string.length(); i++) {\n            prefix.append(string.charAt(i));\n\
    \            reverse.append(string.charAt(string.length() - i - 1));\n       \
    \     suffix.append(reverse);\n            if (isPalindrome(prefix.toString())\
    \ && isPalindrome(suffix.toString())) {\n                longest = i;\n      \
    \          longestLength = prefix.length();\n                longestReverse =\
    \ reverse.length();\n            }\n        }\n        if (longest == 0) {\n \
    \           return string;\n        }\n        prefix.append(string.substring(longest,\
    \ longestLength));\n        suffix.append(reverse.substring(longestReverse, longestReverse));\n\
    \        result.append(prefix);\n        result.append(suffix);\n        return\
    \ result.toString();", "        StringBuilder sb = new StringBuilder();\n    \
    \    StringBuilder reverse = new StringBuilder();\n        StringBuilder prefix\
    \ = new StringBuilder();\n        StringBuilder suffix = new StringBuilder();\n\
    \        StringBuilder postfix = new StringBuilder();\n        int length = string.length();\n\
    \        for (int i = 0; i < length; i++) {\n            postfix.append(string.charAt(i));\n\
    \        }\n        postfix.reverse();\n        for (int i = 0; i < length; i++)\
    \ {\n            reverse.append(string.charAt(i));\n        }\n        reverse.reverse();\n\
    \        for (int i = 0; i < length; i++) {\n            prefix.append(string.charAt(i));\n\
    \        }\n        prefix.reverse();\n        for (int i = 0; i < length; i++)\
    \ {\n            suffix.append(string.charAt(i));\n        }\n        suffix.reverse();\n\
    \        sb.append(prefix);\n        sb.append(postfix);\n        sb.append(reverse);\n\
    \        sb.append(suffix);\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        char[] chars = string.toCharArray();\n  \
    \      Arrays.sort(chars);\n        StringBuilder reverse = new StringBuilder();\n\
    \        int start = 0;\n        int end = chars.length - 1;\n        while (start\
    \ < end) {\n            reverse.append(chars[end]);\n            end--;\n    \
    \    }\n        sb.append(reverse);\n        sb.append(chars[start]);\n      \
    \  return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        char[] chars = string.toCharArray();\n        int longest = 0;\n    \
    \    int longestLength = 0;\n        int longestIndex = 0;\n        for (int i\
    \ = 0; i < chars.length; i++) {\n            if (chars[i] == ' ') {\n        \
    \        sb.append(\" \");\n            } else {\n                sb.append(chars[i]);\n\
    \            }\n            if (sb.length() > longestLength) {\n             \
    \   longest = i;\n                longestLength = sb.length();\n             \
    \   longestIndex = i;\n            }\n        }\n        char[] reverse = new\
    \ char[longestLength];\n        for (int i = longestLength - 1; i >= 0; i--) {\n\
    \            reverse[longestIndex] = chars[i];\n        }\n        sb.append(new\
    \ String(reverse));\n        return sb.toString();", "        StringBuilder sb\
    \ = new StringBuilder();\n        StringBuilder reverse = new StringBuilder();\n\
    \        StringBuilder prefix = new StringBuilder();\n        StringBuilder suffix\
    \ = new StringBuilder();\n        boolean isPalindrome = true;\n        int longest\
    \ = 0;\n        for (int i = 0; i < string.length(); i++) {\n            prefix.append(string.charAt(i));\n\
    \            reverse.append(string.charAt(string.length() - i - 1));\n       \
    \     if (isPalindrome) {\n                isPalindrome = checkPalindrome(prefix.toString(),\
    \ reverse.toString());\n            }\n            suffix.append(string.charAt(i));\n\
    \            if (isPalindrome) {\n                isPalindrome = checkPalindrome(suffix.toString(),\
    \ reverse.toString());\n            }\n        }\n        if (isPalindrome) {\n\
    \            sb.append(prefix.toString());\n            sb.append(reverse.toString());\n\
    \        }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        StringBuilder reverse = new StringBuilder();\n        char[] chars =\
    \ string.toCharArray();\n        int len = chars.length;\n        for (int i =\
    \ 0; i < len; i++) {\n            reverse.append(chars[len - i - 1]);\n      \
    \  }\n        sb.append(reverse);\n        return sb.toString();", "        String\
    \ longestPalindrome = string;\n        String reversedString = string;\n     \
    \   int longestPalindromeLength = string.length();\n        int reversedStringLength\
    \ = string.length();\n        int longestPalindromeIndex = 0;\n        int reversedStringIndex\
    \ = 0;\n        while (longestPalindromeIndex < longestPalindromeLength) {\n \
    \           reversedStringIndex = 0;\n            while (longestPalindromeIndex\
    \ < longestPalindromeLength && reversedStringIndex < reversedStringLength) {\n\
    \                reversedString += string.charAt(reversedStringIndex++);\n   \
    \         }\n            longestPalindromeIndex++;\n            reversedString\
    \ = reversedString.substring(0,reversedString.length()-1);\n            if (longestPalindromeIndex\
    \ < longestPalindromeLength && longestPalindromeIndex == reversedStringIndex)\
    \ {\n                longestPalindrome = longestPalindrome + reversedString;\n\
    \            }\n        }\n        return longestPalindrome;", "        StringBuilder\
    \ sb = new StringBuilder();\n        int maxLength = 0;\n        int minLength\
    \ = 0;\n        boolean isPalindrome = true;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            int length = string.length();\n\
    \            while (length > 0) {\n                char nextChar = string.charAt(--length);\n\
    \                if (c == nextChar) {\n                    isPalindrome = true;\n\
    \                    break;\n                }\n                isPalindrome =\
    \ false;\n            }\n            if (isPalindrome) {\n                sb.append(c);\n\
    \                maxLength = Math.max(maxLength, i);\n                minLength\
    \ = Math.min(minLength, i);\n            }\n        }\n        if (maxLength ==\
    \ minLength) {\n            return string;\n        }\n        int maxLength2\
    \ = maxLength;\n        int minLength2 = minLength;\n        while (maxLength2\
    \ >= minLength2) {\n            String reverse = string.substring(maxLength2 -\
    \ minLength2 + 1, maxLength2);\n            String prefix = string.substring(0,\
    \ maxLength2 - minLength2 + 1);\n            String suffix1 = reverse.substring(minLength2,\
    \ maxLength2);\n            String suffix2 = reverse.substring(0, minLength2);\n\
    \            String result = prefix + suffix1 + suffix2;\n            if (result.equals(string))\
    \ {\n                return result;\n            }\n            maxLength2 = maxLength;\n\
    \            minLength2 = minLength;\n        }\n        return string;", "  \
    \      StringBuilder sb = new StringBuilder();\n        StringBuilder reverse\
    \ = new StringBuilder();\n        char[] chars = string.toCharArray();\n     \
    \   Arrays.sort(chars);\n        for (int i = 0; i < chars.length / 2; i++) {\n\
    \            reverse.append(chars[i]);\n        }\n        sb.append(reverse);\n\
    \        sb.append(string);\n        return sb.toString();", "        StringBuilder\
    \ result = new StringBuilder();\n        StringBuilder prefix = new StringBuilder();\n\
    \        StringBuilder suffix = new StringBuilder();\n        int longest = 0;\n\
    \        int longestLength = 0;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            prefix.append(string.charAt(i));\n            suffix.append(string.charAt(string.length()\
    \ - 1 - i));\n            String reverse = suffix.reverse().toString();\n    \
    \        if (reverse.equals(prefix.toString())) {\n                longest = i;\n\
    \                longestLength = reverse.length();\n            }\n        }\n\
    \        if (longest == 0) {\n            return string;\n        }\n        prefix.append(string.charAt(longest));\n\
    \        suffix.append(string.charAt(string.length() - 1 - longest));\n      \
    \  result.append(prefix.toString());\n        result.append(suffix.reverse());\n\
    \        return result.toString();"]
stop_tokens:
- "\n    }\n"
