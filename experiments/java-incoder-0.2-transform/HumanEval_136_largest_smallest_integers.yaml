name: HumanEval_136_largest_smallest_integers
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Create a function that returns a tuple (a, b), where 'a'\
  \ is\n    // the largest of negative integers, and 'b' is the smallest\n    // of\
  \ positive integers in a list.\n    // If there is no negative or positive integers,\
  \ return them as None.\n    // Examples:\n    // >>> largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l,\
  \ (long)7l))))\n    // Pair.with(Optional.of(Optional.empty()), Optional.of(1l))\n\
  \    // >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList())))\n  \
  \  // Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))\n\
  \    // >>> largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l))))\n\
  \    // Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()))\n\
  \    public static Pair<Optional<Long>, Optional<Long>> largestSmallestIntegers(ArrayList<Long>\
  \ lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l, (long)5l,\
  \ (long)7l)))).equals(Pair.with(Optional.of(Optional.empty()), Optional.of(1l))));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)4l, (long)1l, (long)3l, (long)5l, (long)7l, (long)0l)))).equals(Pair.with(Optional.of(Optional.empty()),\
  \ Optional.of(1l))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)-2l)))).equals(Pair.with(-2l,\
  \ 1l)));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)5l, (long)3l, (long)6l, (long)2l, (long)7l, (long)-7l)))).equals(Pair.with(-7l,\
  \ 2l)));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)3l, (long)8l, (long)4l, (long)9l, (long)2l, (long)5l, (long)-9l)))).equals(Pair.with(-9l,\
  \ 2l)));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList()))).equals(Pair.with(Optional.of(Optional.empty()),\
  \ Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)0l)))).equals(Pair.with(Optional.of(Optional.empty()),\
  \ Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-3l, (long)-5l, (long)-6l)))).equals(Pair.with(Optional.of(-1l), Optional.of(Optional.empty()))));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-3l, (long)-5l, (long)-6l, (long)0l)))).equals(Pair.with(Optional.of(-1l),\
  \ Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l,\
  \ (long)-4l, (long)-4l, (long)-3l, (long)1l)))).equals(Pair.with(-3l, 1l)));\n \
  \   assert(largestSmallestIntegers((new ArrayList<Long>(Arrays.asList((long)-6l,\
  \ (long)-4l, (long)-4l, (long)-3l, (long)-100l, (long)1l)))).equals(Pair.with(-3l,\
  \ 1l)));\n    }\n\n}\n"
completions: ["        Optional<Long> maxNegative = Optional.empty();\n        Optional<Long>\
    \ minPositive = Optional.empty();\n        for (Long num : lst) {\n          \
    \  if (num < 0) {\n                if (maxNegative.isPresent() || minPositive.isPresent())\
    \ {\n                    return Pair.with(Optional.of(maxNegative), Optional.of(minPositive));\n\
    \                }\n                maxNegative = Optional.of(num);\n        \
    \    } else if (num > 0) {\n                if (minPositive.isPresent() || maxNegative.isPresent())\
    \ {\n                    return Pair.with(Optional.of(maxNegative), Optional.of(minPositive));\n\
    \                }\n                minPositive = Optional.of(num);\n        \
    \    }\n        }\n        return Pair.with(Optional.of(maxNegative), Optional.of(minPositive));",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (min == null || i < min) {\n         \
    \       min = Optional.of(i);\n            }\n            if (max == null || i\
    \ > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        return Pair.of(min, max);", "        Optional<Long> largest = Optional.empty();\n\
    \        Optional<Long> smallest = Optional.empty();\n        for (Long i : lst)\
    \ {\n            if (i < 0) {\n                largest = Optional.of(i);\n   \
    \         } else if (i > 0)\n                smallest = Optional.of(i);\n    \
    \    }\n        return Pair.with(largest, smallest);", "        Optional<Long>\
    \ maxNegative = Optional.empty();\n        Optional<Long> minPositive = Optional.empty();\n\
    \        for (Long i : lst) {\n            if (i < 0l) {\n                maxNegative\
    \ = Optional.of(i);\n            } else if (i > 0l) {\n                minPositive\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.with(maxNegative,\
    \ minPositive);", "        Optional<Long> min = null;\n        Optional<Long>\
    \ max = null;\n        for (Long i : lst) {\n            if (min == null || i\
    \ < min) {\n                min = Optional.of(i);\n            }\n           \
    \ if (max == null || i > max) {\n                max = Optional.of(i);\n     \
    \       }\n        }\n        return Pair.with(min, max);", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.with(min, max);",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (min == null || i < min) {\n         \
    \       min = Optional.of(i);\n            }\n            if (max == null || i\
    \ > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        return Pair.with(min, max);", "        Optional<Long> maxNegative = Optional.empty();\n\
    \        Optional<Long> minPositive = Optional.empty();\n        for (Long i :\
    \ lst) {\n            if (i < 0l) {\n                if (maxNegative.isPresent()\
    \ || minPositive.isPresent()) {\n                    return Pair.with(Optional.of(maxNegative),\
    \ Optional.of(minPositive));\n                }\n                maxNegative =\
    \ Optional.of(i);\n            } else if (i > 0l) {\n                if (minPositive.isPresent()\
    \ || maxNegative.isPresent()) {\n                    return Pair.with(Optional.of(maxNegative),\
    \ Optional.of(minPositive));\n                }\n                minPositive =\
    \ Optional.of(i);\n            }\n        }\n        return Pair.with(Optional.of(maxNegative),\
    \ Optional.of(minPositive));", "        Optional<Long> maxNegative = Optional.empty();\n\
    \        Optional<Long> minPositive = Optional.empty();\n        for (Long i :\
    \ lst) {\n            if (i < 0l) {\n                maxNegative = Optional.of(i);\n\
    \            } else if (i > 0l) {\n                minPositive = Optional.of(i);\n\
    \            }\n        }\n        if (maxNegative.isPresent() && minPositive.isPresent())\
    \ {\n            return Pair.with(Optional.of(maxNegative), Optional.of(minPositive));\n\
    \        }\n        return Pair.with(Optional.of(Optional.empty()), Optional.of(Optional.empty()));",
  "        Optional<Long> min = null;\n        Optional<Long> max = null;\n      \
    \  for (Long i : lst) {\n            if (min == null || i < min) {\n         \
    \       min = Optional.of(i);\n            }\n            if (max == null || i\
    \ > max) {\n                max = Optional.of(i);\n            }\n        }\n\
    \        if (min == null && max == null) {\n            return Pair.with(Optional.empty(),\
    \ Optional.empty());\n        }\n        if (min == null) {\n            return\
    \ Pair.with(Optional.of(Optional.empty()), Optional.of(max));\n        }\n   \
    \     if (max == null) {\n            return Pair.with(Optional.of(min), Optional.of(Optional.empty()));\n\
    \        }\n        return Pair.with(min, max);", "        Optional<Long> min\
    \ = null;\n        Optional<Long> max = null;\n        for (Long i : lst) {\n\
    \            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.with(min, max);",
  "        Optional<Long> maxNegative = Optional.empty();\n        Optional<Long>\
    \ minPositive = Optional.empty();\n        for (Long i : lst) {\n            if\
    \ (i < 0l) {\n                maxNegative = Optional.of(i);\n            } else\
    \ if (i > 0l) {\n                minPositive = Optional.of(i);\n            }\n\
    \        }\n        return Pair.with(maxNegative, minPositive);", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        if (min == null && max\
    \ == null) {\n            return Pair.with(Optional.empty(), Optional.empty());\n\
    \        }\n        if (min == null) {\n            return Pair.with(Optional.empty(),\
    \ Optional.of(max));\n        }\n        if (max == null) {\n            return\
    \ Pair.with(Optional.of(min), Optional.empty());\n        }\n        return Pair.with(min,\
    \ max);", "        Optional<Long> maxNegative = Optional.empty();\n        Optional<Long>\
    \ minPositive = Optional.empty();\n        for (Long i : lst) {\n            if\
    \ (i < 0l) {\n                if (maxNegative.isPresent() && maxNegative.get()\
    \ > i) {\n                    maxNegative = Optional.empty();\n              \
    \  }\n                maxNegative = Optional.of(i);\n            } else if (i\
    \ > 0l) {\n                if (minPositive.isPresent() && minPositive.get() <\
    \ i) {\n                    minPositive = Optional.empty();\n                }\n\
    \                minPositive = Optional.of(i);\n            }\n        }\n   \
    \     return Pair.with(maxNegative, minPositive);", "        Optional<Long> largest\
    \ = Optional.empty();\n        Optional<Long> smallest = Optional.empty();\n \
    \       for (Long i : lst) {\n            if (i < 0) {\n                largest\
    \ = Optional.of(i);\n            } else if (i > 0 && i < largest.get()) {\n  \
    \              largest = Optional.of(i);\n            } else if (i == largest.get())\
    \ {\n                largest = Optional.of(i);\n            }\n            if\
    \ (i == 0) {\n                smallest = Optional.empty();\n            } else\
    \ if (i < smallest.get()) {\n                smallest = Optional.of(i);\n    \
    \        }\n        }\n        return Pair.with(largest, smallest);", "      \
    \  Optional<Long> minValue = Optional.empty();\n        Optional<Long> maxValue\
    \ = Optional.empty();\n        for (Long i : lst) {\n            if (i.signum()\
    \ < 0) {\n                minValue = Optional.of(i);\n            } else if (i.signum()\
    \ > 0) {\n                maxValue = Optional.of(i);\n            }\n        }\n\
    \        return Pair.of(minValue, maxValue);", "        Optional<Long> maxNegative\
    \ = Optional.empty();\n        Optional<Long> minPositive = Optional.empty();\n\
    \        for (Long l : lst) {\n            if (l < 0) {\n                maxNegative\
    \ = Optional.of(l);\n            } else if (l > 0) {\n                minPositive\
    \ = Optional.of(l);\n            }\n        }\n        return Pair.with(maxNegative,\
    \ minPositive);", "        Optional<Long> maxNegative = Optional.empty();\n  \
    \      Optional<Long> minPositive = Optional.empty();\n        for (Long i : lst)\
    \ {\n            if (i < 0l) {\n                maxNegative = Optional.of(i);\n\
    \            } else if (i > 0l) {\n                minPositive = Optional.of(i);\n\
    \            }\n        }\n        return Pair.with(maxNegative, minPositive);",
  "        Optional<Long> maxNegative = Optional.empty();\n        Optional<Long>\
    \ minPositive = Optional.empty();\n        for (Long l : lst) {\n            if\
    \ (l < 0) {\n                maxNegative = Optional.of(l);\n            } else\
    \ if (l > 0) {\n                minPositive = Optional.of(l);\n            }\n\
    \        }\n        return Pair.with(maxNegative, minPositive);", "        Optional<Long>\
    \ min = null;\n        Optional<Long> max = null;\n        for (Long i : lst)\
    \ {\n            if (min == null || i < min) {\n                min = Optional.of(i);\n\
    \            }\n            if (max == null || i > max) {\n                max\
    \ = Optional.of(i);\n            }\n        }\n        return Pair.with(min, max);"]
stop_tokens:
- "\n    }\n"
