name: HumanEval_4_mean_absolute_deviation
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
  \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
  \ is the average absolute difference between each\n    // element and a centerpoint\
  \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> meanAbsoluteDeviation((new\
  \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f))))\n\
  \    // (1.0f)\n    public static float meanAbsoluteDeviation(ArrayList<Float> numbers)\
  \ {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(meanAbsoluteDeviation((new\
  \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f)))) == (0.5f));\n    assert(meanAbsoluteDeviation((new\
  \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f))))\
  \ == (1.0f));\n    assert(meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f,\
  \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f)))) == (1.2f));\n    }\n\n\
  }\n"
completions: ["        float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (Float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();", "        float sum\
    \ = 0.0f;\n        for (Float number : numbers) {\n            sum += Math.abs(number);\n\
    \        }\n        return sum / numbers.size();", "        float sum = 0.0f;\n\
    \        for (float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();", "        float sum\
    \ = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (Float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();", "        float sum\
    \ = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();", "        float sum\
    \ = 0.0f;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (Float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();", "        float sum\
    \ = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();", "        float sum\
    \ = 0.0f;\n        for (Float number : numbers) {\n            sum += Math.abs(number);\n\
    \        }\n        return sum / numbers.size();", "        float sum = 0.0f;\n\
    \        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (Float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();", "        float sum\
    \ = 0.0f;\n        for (Float number : numbers) {\n            sum += Math.abs(number);\n\
    \        }\n        return sum / numbers.size();", "        float sum = 0.0f;\n\
    \        for (Float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();", "        float sum\
    \ = 0.0f;\n        for (Float number : numbers) {\n            sum += Math.abs(number\
    \ - mean);\n        }\n        return sum / numbers.size();", "        float sum\
    \ = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n\
    \        for (Float number : numbers) {\n            sum += Math.abs(number -\
    \ mean);\n        }\n        return sum / numbers.size();", "        float sum\
    \ = 0;\n        for (Float number : numbers) {\n            sum += Math.abs(number\
    \ - mean);\n        }\n        return sum / numbers.size();", "        float sum\
    \ = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n        numbers.stream().mapToFloat(Float::floatValue).forEach(v\
    \ -> sum += Math.abs(v - mean));\n        return sum / numbers.size();", "   \
    \     float sum = 0;\n        float mean = numbers.stream().mapToFloat(Float::floatValue).sum()\
    \ / numbers.size();\n        for (Float number : numbers) {\n            sum +=\
    \ Math.abs(number - mean);\n        }\n        return sum / numbers.size();",
  "        float sum = 0;\n        for (Float number : numbers) {\n            sum\
    \ += Math.abs(number);\n        }\n        return sum / numbers.size();", "  \
    \      float sum = 0;\n        for (Float number : numbers) {\n            sum\
    \ += Math.abs(number);\n        }\n        float mean = sum / numbers.size();\n\
    \        float sumOfSquares = 0;\n        for (Float number : numbers) {\n   \
    \         sumOfSquares += (number - mean) * (number - mean);\n        }\n    \
    \    return sumOfSquares / numbers.size();", "        float mean = 0.0f;\n   \
    \     float sum = 0.0f;\n        for (Float number : numbers) {\n            sum\
    \ += Math.abs(number);\n            mean += Math.abs(number);\n        }\n   \
    \     return mean / numbers.size();", "        float sum = 0;\n        float mean\
    \ = numbers.stream().mapToFloat(Float::floatValue).average().getAsFloat();\n \
    \       for (Float number : numbers) {\n            sum += Math.abs(number - mean);\n\
    \        }\n        return sum / numbers.size();"]
stop_tokens:
- "\n    }\n"
