language: java
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgldt_qs.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3jfxmko.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String operation = op.get(i);\n    \
    \        long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operation) {\n                case \"+\":\n      \
    \              result = result + operand1;\n                    break;\n     \
    \           case \"-\":\n                    result = result - operand1;\n   \
    \                 break;\n                case \"*\":\n                    result\
    \ = result * operand1;\n                    break;\n                case \"//\"\
    :\n                    result = result / operand1;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operation\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmymm6j5q.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    throw new RuntimeException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpssjsw3id.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpssjsw3id.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result *= operand.get(i);\n                    break;\n \
    \               default:\n                    throw new RuntimeException(\"Invalid\
    \ operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjic4e4ah.java:54)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_4r8_h4.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpa_4r8_h4.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgldt_qs.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpylqw_8hk.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3jfxmko.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op.get(i));\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp246tcq5e.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk88q13q_.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            long operand2 = operand.get(i +\
    \ 1);\n            switch(op) {\n                case \"+\":\n               \
    \     result = result + operand1;\n                    break;\n              \
    \  case \"-\":\n                    result = result - operand1;\n            \
    \        break;\n                case \"*\":\n                    result = result\
    \ * operand1;\n                    break;\n                case \"//\":\n    \
    \                result = result / operand1;\n                    break;\n   \
    \             case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2x94bht4.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result /= operand.get(i);\n                    break;\n \
    \               default:\n                    throw new RuntimeException(\"Invalid\
    \ operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx4ujtvfx.java:54)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3jfxmko.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_4r8_h4.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpa_4r8_h4.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\": result += operand1; break;\n                case \"-\": result -= operand1;\
    \ break;\n                case \"*\": result *= operand1; break;\n           \
    \     case \"//\": result /= operand1; break;\n                case \"**\": result\
    \ *= operand1; result /= operand1; break;\n                default: throw new\
    \ RuntimeException(\"Invalid operator: \" + op);\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsz1u0rm4.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpsz1u0rm4.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     result /= operand1;\n                    break;\n                default:\n\
    \                    throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + op);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprilvctzg.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmprilvctzg.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op.get(i));\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp246tcq5e.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpfqrwqq.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpdpfqrwqq.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_4r8_h4.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpa_4r8_h4.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            int opIndex = op.indexOf(op);\n\
    \            int operandIndex = operand.size() - 1 - opIndex;\n            switch(op)\
    \ {\n                case \"+\":\n                    result += operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ -= operand1;\n                    break;\n                case \"*\":\n    \
    \                result *= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjjtvrkga.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpjjtvrkga.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            String op2 = op.get(i + 1);\n \
    \           long operand2 = operand.get(i + 1);\n            try {\n         \
    \       switch(op) {\n                    case \"+\":\n                      \
    \  result = result + operand1;\n                        break;\n             \
    \       case \"-\":\n                        result = result - operand1;\n   \
    \                     break;\n                    case \"*\":\n              \
    \          result = result * operand1;\n                        break;\n     \
    \               case \"//\":\n                        result = result / operand1;\n\
    \                        break;\n                    case \"**\":\n          \
    \              result = result ** operand1;\n                        break;\n\
    \                    default:\n                        throw new RuntimeException(\"\
    Invalid operator: \" + op);\n                }\n            } catch(ArithmeticException\
    \ e) {\n                throw new RuntimeException(\"Invalid operand: \" + operand);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqwmgx_1r.java:49: error: illegal start of expression\n        \
    \                result = result ** operand1;\n                              \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i3uzkgq.java:51)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result /= operand.get(i);\n                    break;\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjqg9on7k.java:52)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\": result = result + operand.get(i); break;\n                case\
    \ \"-\": result = result - operand.get(i); break;\n                case \"*\"\
    : result = result * operand.get(i); break;\n                case \"//\": result\
    \ = result / operand.get(i); break;\n                case \"**\": result = result\
    \ ** operand.get(i); break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2viarkww.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(i); break;\n            \
    \                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result = result + operand1;\n                  \
    \  break;\n                case \"-\":\n                    result = result -\
    \ operand1;\n                    break;\n                case \"*\":\n       \
    \             result = result * operand1;\n                    break;\n      \
    \          case \"//\":\n                    result = result / operand1;\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = result ** operand1;\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbev75ic4.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result = result + operand1;\n                  \
    \  break;\n                case \"-\":\n                    result = result -\
    \ operand1;\n                    break;\n                case \"*\":\n       \
    \             result = result * operand1;\n                    break;\n      \
    \          case \"//\":\n                    result = result / operand1;\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = result ** operand1;\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbev75ic4.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result = result + operand1;\n                  \
    \  break;\n                case \"-\":\n                    result = result -\
    \ operand1;\n                    break;\n                case \"*\":\n       \
    \             result = result * operand1;\n                    break;\n      \
    \          case \"//\":\n                    result = result / operand1;\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = result ** operand1;\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator: \" + op);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp764vj_98.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgldt_qs.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\": result += operand.get(i); break;\n                case \"-\": result\
    \ -= operand.get(i); break;\n                case \"*\": result *= operand.get(i);\
    \ break;\n                case \"//\": result /= operand.get(i); break;\n    \
    \            case \"**\": result *= operand.get(i); break;\n                default:\
    \ throw new RuntimeException(\"Invalid operator: \" + op.get(i));\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjsft4pnt.java:42)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            long operand2 = operand.get(i +\
    \ 1);\n            switch(op) {\n                case \"+\":\n               \
    \     result = result + operand1;\n                    break;\n              \
    \  case \"-\":\n                    result = result - operand1;\n            \
    \        break;\n                case \"*\":\n                    result = result\
    \ * operand1;\n                    break;\n                case \"//\":\n    \
    \                result = result / operand1;\n                    break;\n   \
    \             case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2x94bht4.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op.get(i));\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp246tcq5e.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_fpayae.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmph_fpayae.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i3uzkgq.java:51)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result = result + operand1;\n                  \
    \  break;\n                case \"-\":\n                    result = result -\
    \ operand1;\n                    break;\n                case \"*\":\n       \
    \             result = result * operand1;\n                    break;\n      \
    \          case \"//\":\n                    result = result / operand1;\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = result ** operand1;\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbev75ic4.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + op.get(i));\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0mntice.java:53)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            String op2 = op.get(i+1);\n   \
    \         long operand2 = operand.get(i+1);\n            switch(op) {\n      \
    \          case \"+\":\n                    result = result + operand1;\n    \
    \                break;\n                case \"-\":\n                    result\
    \ = result - operand1;\n                    break;\n                case \"*\"\
    :\n                    result = result * operand1;\n                    break;\n\
    \                case \"//\":\n                    result = result / operand1;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = result ** operand1;\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq_mb7_2v.java:48: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgldt_qs.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            long operand2 = operand.get(i +\
    \ 1);\n            switch(op) {\n                case \"+\":\n               \
    \     result = result + operand1;\n                    break;\n              \
    \  case \"-\":\n                    result = result - operand1;\n            \
    \        break;\n                case \"*\":\n                    result = result\
    \ * operand1;\n                    break;\n                case \"//\":\n    \
    \                result = result / operand1;\n                    break;\n   \
    \             case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjix6bui6.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_fpayae.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmph_fpayae.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result = result + operand.get(i);\n      \
    \              break;\n                case \"-\":\n                    result\
    \ = result - operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand.get(i);\n            \
    \        break;\n                case \"//\":\n                    result = result\
    \ / operand.get(i);\n                    break;\n                case \"**\":\n\
    \                    result = result ** operand.get(i);\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpig1xuom7.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op.get(i));\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp246tcq5e.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3jfxmko.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i3uzkgq.java:51)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result /= operand.get(i);\n                    break;\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjqg9on7k.java:52)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op.get(i));\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp246tcq5e.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result /= operand.get(i);\n                    break;\n \
    \               default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps2ckam3_.java:54)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + op.get(i));\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0mntice.java:53)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     result *= operand1;\n                    break;\n                default:\n\
    \                    throw new RuntimeException(\"Invalid operator: \" + op);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprouz7jkx.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmprouz7jkx.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_fpayae.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmph_fpayae.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            long operand2 = operand.get(i +\
    \ 1);\n            switch(op) {\n                case \"+\":\n               \
    \     result = result + operand1;\n                    break;\n              \
    \  case \"-\":\n                    result = result - operand1;\n            \
    \        break;\n                case \"*\":\n                    result = result\
    \ * operand1;\n                    break;\n                case \"//\":\n    \
    \                result = result / operand1;\n                    break;\n   \
    \             case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjix6bui6.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            int opIndex = op.indexOf(op);\n\
    \            int opLength = op.length();\n            int operand1Index = operand.indexOf(operand1);\n\
    \            int operand1Length = operand1.length();\n            int operand2Index\
    \ = operand1Index + opLength;\n            int operand2Length = operand1.length();\n\
    \            int operand3Index = operand2Index + operand2Length;\n           \
    \ int operand3Length = operand2.length();\n            int operand4Index = operand3Index\
    \ + operand3Length;\n            int operand4Length = operand3.length();\n   \
    \         int operand5Index = operand4Index + operand4Length;\n            int\
    \ operand5Length = operand4.length();\n            int operand6Index = operand5Index\
    \ + operand5Length;\n            int operand6Length = operand5.length();\n   \
    \         int operand7Index = operand6Index + operand6Length;\n            int\
    \ operand7Length = operand6.length();\n            int operand8Index = operand7Index\
    \ + operand7Length;\n            int operand8Length = operand7.length();\n   \
    \         int operand9Index = operand8Index + operand8Length;\n            int\
    \ operand9Length = operand8.length();\n            int operand10Index = operand9Index\
    \ + operand9Length;\n            int operand10Length = operand9.length();\n  \
    \          int operand11Index = operand10Index + operand10Length;\n          \
    \  int operand11Length = operand10.length();\n            int operand12Index =\
    \ operand11Index + operand11Length;\n            int operand12Length = operand11.length();\n\
    \            int operand13Index = operand12Index + operand12Length;\n        \
    \    int operand13Length = operand12.length();\n            int operand14Index\
    \ = operand13Index + operand13Length;\n            int operand14Length = operand13.length();\n\
    \            int operand15Index = operand14Index + operand14Length;\n        \
    \    int operand15Length = operand14.length();\n            int operand16Index\
    \ = operand15Index + operand15Length;\n            int operand16Length = operand15.length();\n\
    \            int operand17Index = operand16Index + operand16Length;\n        \
    \    int operand17Length = operand16.length();\n            int operand18Index\
    \ = operand17Index + operand17Length;\n            int operand18Length = operand17.length();\n\
    \            int operand19Index = operand18Index + operand18Length;\n        \
    \    int operand19Length = operand18.length();\n            int operand20Index\
    \ = operand19Index + operand19Length;\n            int \n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmgpblsk8.java:73: error: not a statement\n            int \n  \
    \          ^\n/tmp/tmpmgpblsk8.java:73: error: ';' expected\n            int \n\
    \               ^\n/tmp/tmpmgpblsk8.java:75: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3jfxmko.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    throw new RuntimeException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpssjsw3id.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpssjsw3id.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            long operand2 = operand.get(i +\
    \ 1);\n            switch(op) {\n                case \"+\":\n               \
    \     result = result + operand1;\n                    break;\n              \
    \  case \"-\":\n                    result = result - operand1;\n            \
    \        break;\n                case \"*\":\n                    result = result\
    \ * operand1;\n                    break;\n                case \"//\":\n    \
    \                result = result / operand1;\n                    break;\n   \
    \             case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjix6bui6.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + op.get(i));\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0mntice.java:53)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String oper = op.get(i);\n         \
    \   long operand1 = operand.get(i);\n            switch(oper) {\n            \
    \    case \"+\":\n                    result += operand1;\n                  \
    \  break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result **= operand1;\n         \
    \           break;\n                default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + oper);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ewp49gh.java:46: error: illegal start of expression\n        \
    \            result **= operand1;\n                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\": result = result + operand.get(i); break;\n                case\
    \ \"-\": result = result - operand.get(i); break;\n                case \"*\"\
    : result = result * operand.get(i); break;\n                case \"//\": result\
    \ = result / operand.get(i); break;\n                case \"**\": result = result\
    \ ** operand.get(i); break;\n                default: return -1;\n           \
    \ }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0buosidy.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(i); break;\n            \
    \                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"/\":\n    \
    \                result /= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6r6s93hh.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp6r6s93hh.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            long operand2 = operand.get(i +\
    \ 1);\n            switch(op) {\n                case \"+\":\n               \
    \     result = result + operand1;\n                    break;\n              \
    \  case \"-\":\n                    result = result - operand1;\n            \
    \        break;\n                case \"*\":\n                    result = result\
    \ * operand1;\n                    break;\n                case \"//\":\n    \
    \                result = result / operand1;\n                    break;\n   \
    \             case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5qh0kaoq.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"/\":\n    \
    \                result /= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6r6s93hh.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp6r6s93hh.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            String op2 = op.get(i+1);\n   \
    \         long operand2 = operand.get(i+1);\n            switch(op) {\n      \
    \          case \"+\":\n                    result = result + operand1;\n    \
    \                break;\n                case \"-\":\n                    result\
    \ = result - operand1;\n                    break;\n                case \"*\"\
    :\n                    result = result * operand1;\n                    break;\n\
    \                case \"//\":\n                    result = result / operand1;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = result ** operand1;\n                    break;\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx2x44md4.java:48: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result = result + operand.get(i);\n      \
    \              break;\n                case \"-\":\n                    result\
    \ = result - operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand.get(i);\n            \
    \        break;\n                case \"//\":\n                    result = result\
    \ / operand.get(i);\n                    break;\n                case \"**\":\n\
    \                    result = result ** operand.get(i);\n                    break;\n\
    \                default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5zkp8y9d.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpylqw_8hk.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            String op2 = op.get(i + 1);\n \
    \           long operand2 = operand.get(i + 1);\n            switch(op) {\n  \
    \              case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \            default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvmhp1arq.java:48: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op.get(i));\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp246tcq5e.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    throw new RuntimeException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpssjsw3id.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpssjsw3id.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i3uzkgq.java:51)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String oper = op.get(i);\n         \
    \   long operand1 = operand.get(i);\n            switch(oper) {\n            \
    \    case \"+\":\n                    result += operand1;\n                  \
    \  break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result *= operand1;\n          \
    \          break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkgurverl.java:55)\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result /= operand.get(i);\n                    break;\n \
    \               default:\n                    throw new RuntimeException(\"Invalid\
    \ operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx4ujtvfx.java:54)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_fpayae.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmph_fpayae.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\": result += operand1; break;\n                case \"-\": result -= operand1;\
    \ break;\n                case \"*\": result *= operand1; break;\n           \
    \     case \"//\": result /= operand1; break;\n                case \"**\": result\
    \ *= operand1; result /= operand1; break;\n                default: throw new\
    \ IllegalArgumentException(\"Invalid operator: \" + op);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\"\
    , (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplnpr96x4.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmplnpr96x4.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_4r8_h4.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpa_4r8_h4.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + op.get(i));\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0mntice.java:53)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_4r8_h4.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpa_4r8_h4.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\": result += operand.get(i); break;\n                case \"-\": result\
    \ -= operand.get(i); break;\n                case \"*\": result *= operand.get(i);\
    \ break;\n                case \"//\": result /= operand.get(i); break;\n    \
    \            case \"**\": result *= operand.get(i); break;\n            }\n  \
    \      }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4kuumiqv.java:41)\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result = result + operand.get(i);\n      \
    \              break;\n                case \"-\":\n                    result\
    \ = result - operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand.get(i);\n            \
    \        break;\n                case \"//\":\n                    result = result\
    \ / operand.get(i);\n                    break;\n                case \"**\":\n\
    \                    result = result ** operand.get(i);\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpig1xuom7.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result = result + operand.get(i);\n      \
    \              break;\n                case \"-\":\n                    result\
    \ = result - operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand.get(i);\n            \
    \        break;\n                case \"//\":\n                    result = result\
    \ / operand.get(i);\n                    break;\n                case \"**\":\n\
    \                    result = result ** operand.get(i);\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpig1xuom7.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            long operand2 = operand.get(i +\
    \ 1);\n            switch(op) {\n                case \"+\":\n               \
    \     result = result + operand1;\n                    break;\n              \
    \  case \"-\":\n                    result = result - operand1;\n            \
    \        break;\n                case \"*\":\n                    result = result\
    \ * operand1;\n                    break;\n                case \"//\":\n    \
    \                result = result / operand1;\n                    break;\n   \
    \             case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1lx4hlra.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3jfxmko.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"/\":\n    \
    \                result /= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdbvqd03o.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpdbvqd03o.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result *= operand.get(i);\n                    break;\n \
    \               default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7nhql6vo.java:54)\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            String op2 = op.get(i+1);\n   \
    \         long operand2 = operand.get(i+1);\n            switch(op) {\n      \
    \          case \"+\":\n                    result += operand1;\n            \
    \        break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result *= operand1;\n          \
    \          result *= operand2;\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaykcgsmp.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpaykcgsmp.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n/tmp/tmpaykcgsmp.java:32:\
    \ error: cannot find symbol\n            String op2 = op.get(i+1);\n         \
    \                  ^\n  symbol:   method get(int)\n  location: variable op of\
    \ type String\n3 errors\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String operation = op.get(i);\n    \
    \        long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operation) {\n                case \"+\":\n      \
    \              result = result + operand1;\n                    break;\n     \
    \           case \"-\":\n                    result = result - operand1;\n   \
    \                 break;\n                case \"*\":\n                    result\
    \ = result * operand1;\n                    break;\n                case \"//\"\
    :\n                    result = result / operand1;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operation: \" + operation);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplij863_a.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            int opIndex = -1;\n           \
    \ for(int j = 0; j < op.size(); j++) {\n                if(op.equals(op.get(j)))\
    \ {\n                    opIndex = j;\n                    break;\n          \
    \      }\n            }\n            String op2 = op.get(opIndex + 1);\n     \
    \       long operand2 = operand.get(opIndex + 1);\n            switch(op) {\n\
    \                case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"//\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"**\":\n      \
    \              result = result ** operand1;\n                    break;\n    \
    \            default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprh578keu.java:55: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String operation = op.get(i);\n    \
    \        long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operation) {\n                case \"+\":\n      \
    \              result = result + operand1;\n                    break;\n     \
    \           case \"-\":\n                    result = result - operand1;\n   \
    \                 break;\n                case \"*\":\n                    result\
    \ = result * operand1;\n                    break;\n                case \"//\"\
    :\n                    result = result / operand1;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv58hujos.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i3uzkgq.java:51)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_4r8_h4.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpa_4r8_h4.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String oper = op.get(i);\n         \
    \   long operand1 = operand.get(i);\n            switch(oper) {\n            \
    \    case \"+\":\n                    result += operand1;\n                  \
    \  break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result *= operand1;\n          \
    \          break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + oper);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7lewhp9y.java:55)\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     result /= operand1;\n                    break;\n                default:\n\
    \                    throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + op);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprilvctzg.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmprilvctzg.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result = result + operand.get(i);\n      \
    \              break;\n                case \"-\":\n                    result\
    \ = result - operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand.get(i);\n            \
    \        break;\n                case \"//\":\n                    result = result\
    \ / operand.get(i);\n                    break;\n                case \"**\":\n\
    \                    result = result ** operand.get(i);\n                    break;\n\
    \                default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjx6vpy54.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result /= operand.get(i);\n                    break;\n \
    \               default:\n                    throw new RuntimeException(\"Invalid\
    \ operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx4ujtvfx.java:54)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     result /= operand1;\n                    break;\n                default:\n\
    \                    throw new RuntimeException(\"Invalid operator: \" + op);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy3qry4dt.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpy3qry4dt.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String oper = op.get(i);\n         \
    \   long operand1 = operand.get(i);\n            switch(oper) {\n            \
    \    case \"+\": result += operand1; break;\n                case \"-\": result\
    \ -= operand1; break;\n                case \"*\": result *= operand1; break;\n\
    \                case \"//\": result /= operand1; break;\n                case\
    \ \"**\": result *= operand1; result /= operand1; break;\n                default:\
    \ throw new IllegalArgumentException(\"Invalid operator: \" + oper);\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5w0_y30d.java:44)\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result /= operand.get(i);\n                    break;\n \
    \               default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwcva1dlc.java:54)\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op.get(i));\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp246tcq5e.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgldt_qs.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpan6xhq8j.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpan6xhq8j.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            long operand2 = operand.get(i +\
    \ 1);\n            switch(op) {\n                case \"+\":\n               \
    \     result = result + operand1;\n                    break;\n              \
    \  case \"-\":\n                    result = result - operand1;\n            \
    \        break;\n                case \"*\":\n                    result = result\
    \ * operand1;\n                    break;\n                case \"//\":\n    \
    \                result = result / operand1;\n                    break;\n   \
    \             case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2x94bht4.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    throw new RuntimeException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpssjsw3id.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpssjsw3id.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            long operand2 = operand.get(i +\
    \ 1);\n            switch(op) {\n                case \"+\":\n               \
    \     result = result + operand1;\n                    break;\n              \
    \  case \"-\":\n                    result = result - operand1;\n            \
    \        break;\n                case \"*\":\n                    result = result\
    \ * operand1;\n                    break;\n                case \"//\":\n    \
    \                result = result / operand1;\n                    break;\n   \
    \             case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjix6bui6.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpan6xhq8j.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpan6xhq8j.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result = result + operand.get(i);\n      \
    \              break;\n                case \"-\":\n                    result\
    \ = result - operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand.get(i);\n            \
    \        break;\n                case \"//\":\n                    result = result\
    \ / operand.get(i);\n                    break;\n                case \"**\":\n\
    \                    result = result ** operand.get(i);\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpig1xuom7.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     result /= operand1;\n                    break;\n                default:\n\
    \                    throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + op);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprilvctzg.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmprilvctzg.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpan6xhq8j.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpan6xhq8j.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i3uzkgq.java:51)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgldt_qs.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     result *= operand1;\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator: \" + op);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ng0a8tn.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp3ng0a8tn.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpan6xhq8j.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpan6xhq8j.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3jfxmko.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String opSymbol = op.get(i);\n     \
    \       long opValue = operand.get(i);\n            switch(opSymbol) {\n     \
    \           case \"+\":\n                    result += opValue;\n            \
    \        break;\n                case \"-\":\n                    result -= opValue;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= opValue;\n                    break;\n                case \"//\"\
    :\n                    result /= opValue;\n                    break;\n      \
    \          case \"**\":\n                    result *= opValue;\n            \
    \        break;\n                default:\n                    throw new RuntimeException(\"\
    Invalid operator: \" + opSymbol);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx18l96_i.java:55)\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\": result += operand.get(i);\n                    break;\n       \
    \         case \"-\": result -= operand.get(i);\n                    break;\n\
    \                case \"*\": result *= operand.get(i);\n                    break;\n\
    \                case \"//\": result /= operand.get(i);\n                    break;\n\
    \                case \"**\": result **= operand.get(i);\n                   \
    \ break;\n                default: throw new IllegalArgumentException(\"Invalid\
    \ operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvmtru1x2.java:39: error: illegal start of expression\n        \
    \        case \"**\": result **= operand.get(i);\n                           \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    throw new RuntimeException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpssjsw3id.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpssjsw3id.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i3uzkgq.java:51)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpan6xhq8j.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpan6xhq8j.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\": result = result + operand.get(i); break;\n                case\
    \ \"-\": result = result - operand.get(i); break;\n                case \"*\"\
    : result = result * operand.get(i); break;\n                case \"//\": result\
    \ = result / operand.get(i); break;\n                case \"**\": result = result\
    \ ** operand.get(i); break;\n                default: throw new IllegalArgumentException(\"\
    Invalid operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvzm2m75l.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(i); break;\n            \
    \                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"/\":\n    \
    \                result /= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgkuvqelc.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpgkuvqelc.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + op.get(i));\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0mntice.java:53)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpfqrwqq.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpdpfqrwqq.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpan6xhq8j.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpan6xhq8j.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\": result += operand1; break;\n                case \"-\": result -= operand1;\
    \ break;\n                case \"*\": result *= operand1; break;\n           \
    \     case \"//\": result /= operand1; break;\n                case \"**\": result\
    \ *= operand1; result /= operand1; break;\n                default: break;\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8b7_6bzz.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp8b7_6bzz.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    throw new RuntimeException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpssjsw3id.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpssjsw3id.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result = result + operand.get(i);\n      \
    \              break;\n                case \"-\":\n                    result\
    \ = result - operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand.get(i);\n            \
    \        break;\n                case \"//\":\n                    result = result\
    \ / operand.get(i);\n                    break;\n                case \"**\":\n\
    \                    result = result ** operand.get(i);\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpig1xuom7.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i3uzkgq.java:51)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            long operand2 = operand.get(i +\
    \ 1);\n            switch(op) {\n                case \"+\":\n               \
    \     result = result + operand1;\n                    break;\n              \
    \  case \"-\":\n                    result = result - operand1;\n            \
    \        break;\n                case \"*\":\n                    result = result\
    \ * operand1;\n                    break;\n                case \"//\":\n    \
    \                result = result / operand1;\n                    break;\n   \
    \             case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5qh0kaoq.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result *= operand.get(i);\n                    break;\n \
    \               default:\n                    throw new RuntimeException(\"Invalid\
    \ operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjic4e4ah.java:54)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    throw new RuntimeException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpssjsw3id.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpssjsw3id.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i3uzkgq.java:51)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            long operand2 = operand.get(i +\
    \ 1);\n            switch(op) {\n                case \"+\":\n               \
    \     result = result + operand1;\n                    break;\n              \
    \  case \"-\":\n                    result = result - operand1;\n            \
    \        break;\n                case \"*\":\n                    result = result\
    \ * operand1;\n                    break;\n                case \"//\":\n    \
    \                result = result / operand1;\n                    break;\n   \
    \             case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjix6bui6.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     result /= operand1;\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator\");\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxx1ryq1d.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpxx1ryq1d.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     result *= operand1;\n                    break;\n                default:\n\
    \                    throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + op);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4o733i4a.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp4o733i4a.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op.get(i));\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp246tcq5e.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"/\":\n    \
    \                result /= operand1;\n                    break;\n           \
    \     case \"//\":\n                    result /= operand1;\n                \
    \    break;\n                case \"**\":\n                    result *= operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgkuvqelc.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpgkuvqelc.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            String op2 = op.get(i + 1);\n \
    \           long operand2 = operand.get(i + 1);\n            switch(op) {\n  \
    \              case \"+\":\n                    result = result + operand1;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result = result - operand1;\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand1;\n                  \
    \  break;\n                case \"/\":\n                    result = result /\
    \ operand1;\n                    break;\n                case \"//\":\n      \
    \              result = result / operand1;\n                    break;\n     \
    \           case \"**\":\n                    result = result * operand1;\n  \
    \                  break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95qn4gqj.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp95qn4gqj.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n/tmp/tmp95qn4gqj.java:32:\
    \ error: cannot find symbol\n            String op2 = op.get(i + 1);\n       \
    \                    ^\n  symbol:   method get(int)\n  location: variable op of\
    \ type String\n3 errors\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result = result + operand1;\n                  \
    \  break;\n                case \"-\":\n                    result = result -\
    \ operand1;\n                    break;\n                case \"*\":\n       \
    \             result = result * operand1;\n                    break;\n      \
    \          case \"//\":\n                    result = result / operand1;\n   \
    \                 break;\n                case \"**\":\n                    result\
    \ = result ** operand1;\n                    break;\n                default:\n\
    \                    System.out.println(\"Invalid operator: \" + op);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp764vj_98.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator\");\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkr_9rk0_.java:53)\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result /= operand.get(i);\n                    break;\n \
    \               default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwcva1dlc.java:54)\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\": result += operand.get(i); break;\n                case \"-\": result\
    \ -= operand.get(i); break;\n                case \"*\": result *= operand.get(i);\
    \ break;\n                case \"//\": result /= operand.get(i); break;\n    \
    \            case \"**\": result **= operand.get(i); break;\n                default:\
    \ throw new IllegalArgumentException(\"Invalid operator: \" + op.get(i));\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp21qmetei.java:35: error: illegal start of expression\n        \
    \        case \"**\": result **= operand.get(i); break;\n                    \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String opSymbol = op.get(i);\n     \
    \       long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(opSymbol) {\n                case \"+\":\n       \
    \             result = result + operand1;\n                    break;\n      \
    \          case \"-\":\n                    result = result - operand1;\n    \
    \                break;\n                case \"*\":\n                    result\
    \ = result * operand1;\n                    break;\n                case \"//\"\
    :\n                    result = result / operand1;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + opSymbol);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp81kschj2.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result = result + operand.get(i);\n      \
    \              break;\n                case \"-\":\n                    result\
    \ = result - operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand.get(i);\n            \
    \        break;\n                case \"//\":\n                    result = result\
    \ / operand.get(i);\n                    break;\n                case \"**\":\n\
    \                    result = result ** operand.get(i);\n                    break;\n\
    \                default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5zkp8y9d.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String operation = op.get(i);\n    \
    \        long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operation) {\n                case \"+\":\n      \
    \              result = result + operand1;\n                    break;\n     \
    \           case \"-\":\n                    result = result - operand1;\n   \
    \                 break;\n                case \"*\":\n                    result\
    \ = result * operand1;\n                    break;\n                case \"//\"\
    :\n                    result = result / operand1;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operation: \" + operation);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp78ne_kfz.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            long operand2 = operand.get(i +\
    \ 1);\n            switch(op) {\n                case \"+\":\n               \
    \     result += operand1;\n                    break;\n                case \"\
    -\":\n                    result -= operand1;\n                    break;\n  \
    \              case \"*\":\n                    result *= operand1;\n        \
    \            break;\n                case \"//\":\n                    result\
    \ /= operand1;\n                    break;\n                case \"**\":\n   \
    \                 result *= operand1;\n                    result *= operand2;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl7tgn1tn.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpl7tgn1tn.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i3uzkgq.java:51)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpfqrwqq.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpdpfqrwqq.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result = result + operand.get(i);\n      \
    \              break;\n                case \"-\":\n                    result\
    \ = result - operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand.get(i);\n            \
    \        break;\n                case \"//\":\n                    result = result\
    \ / operand.get(i);\n                    break;\n                case \"**\":\n\
    \                    result = result ** operand.get(i);\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpig1xuom7.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op.get(i));\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp246tcq5e.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\": result += operand.get(i); break;\n                case \"-\": result\
    \ -= operand.get(i); break;\n                case \"*\": result *= operand.get(i);\
    \ break;\n                case \"//\": result /= operand.get(i); break;\n    \
    \            case \"**\": result *= operand.get(i); break;\n                default:\
    \ throw new IllegalArgumentException(\"Invalid operator: \" + op.get(i));\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg5roc_al.java:42)\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op.get(i));\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp246tcq5e.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3jfxmko.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3jfxmko.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\": result += operand.get(i); break;\n                case \"-\": result\
    \ -= operand.get(i); break;\n                case \"*\": result *= operand.get(i);\
    \ break;\n                case \"//\": result /= operand.get(i); break;\n    \
    \            case \"**\": result *= operand.get(i); break;\n            }\n  \
    \      }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4kuumiqv.java:41)\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op.get(i));\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzpk09br8.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + op.get(i));\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp0t2w0zd.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result = result + operand.get(i);\n      \
    \              break;\n                case \"-\":\n                    result\
    \ = result - operand.get(i);\n                    break;\n                case\
    \ \"*\":\n                    result = result * operand.get(i);\n            \
    \        break;\n                case \"//\":\n                    result = result\
    \ / operand.get(i);\n                    break;\n                case \"**\":\n\
    \                    result = result ** operand.get(i);\n                    break;\n\
    \                default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5zkp8y9d.java:44: error: illegal start of expression\n        \
    \            result = result ** operand.get(i);\n                            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_4r8_h4.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpa_4r8_h4.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     result *= operand1;\n                    break;\n                default:\n\
    \                    throw new RuntimeException(\"Invalid operator: \" + op);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprouz7jkx.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmprouz7jkx.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result *= operand.get(i);\n                    break;\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdi1tq_om.java:52)\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result /= operand.get(i);\n                    break;\n \
    \               default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwcva1dlc.java:54)\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     result = Math.pow(result, operand1);\n                    break;\n     \
    \           default:\n                    System.out.println(\"Invalid operator:\
    \ \" + op);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4kr997uk.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmp4kr997uk.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n/tmp/tmp4kr997uk.java:47:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \                   result = Math.pow(result, operand1);\n                   \
    \                  ^\n3 errors\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String oper = op.get(i);\n         \
    \   long operand1 = operand.get(i);\n            switch(oper) {\n            \
    \    case \"+\":\n                    result += operand1;\n                  \
    \  break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result *= operand1;\n          \
    \          break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkgurverl.java:55)\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpan6xhq8j.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpan6xhq8j.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792521
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgldt_qs.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgldt_qs.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_4r8_h4.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpa_4r8_h4.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result /= operand.get(i);\n                    break;\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjqg9on7k.java:52)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            int opIndex = op.indexOf('+');\n\
    \            int opIndex2 = op.indexOf('*');\n            int opIndex3 = op.indexOf('/');\n\
    \            int opIndex4 = op.indexOf('%');\n            int opIndex5 = op.indexOf('^');\n\
    \            int opIndex6 = op.indexOf('*');\n            int opIndex7 = op.indexOf('+');\n\
    \            int opIndex8 = op.indexOf('+');\n            int opIndex9 = op.indexOf('+');\n\
    \            int opIndex10 = op.indexOf('+');\n            int opIndex11 = op.indexOf('+');\n\
    \            int opIndex12 = op.indexOf('+');\n            int opIndex13 = op.indexOf('+');\n\
    \            int opIndex14 = op.indexOf('+');\n            int opIndex15 = op.indexOf('+');\n\
    \            int opIndex16 = op.indexOf('+');\n            int opIndex17 = op.indexOf('+');\n\
    \            int opIndex18 = op.indexOf('+');\n            int opIndex19 = op.indexOf('+');\n\
    \            int opIndex20 = op.indexOf('+');\n            int opIndex21 = op.indexOf('+');\n\
    \            int opIndex22 = op.indexOf('+');\n            int opIndex23 = op.indexOf('+');\n\
    \            int opIndex24 = op.indexOf('+');\n            int opIndex25 = op.indexOf('+');\n\
    \            int opIndex26 = op.indexOf('+');\n            int opIndex27 = op.indexOf('+');\n\
    \            int opIndex28 = op.indexOf('+');\n            int opIndex29 = op.indexOf('+');\n\
    \            int opIndex30 = op.indexOf('+');\n            int opIndex31 = op.indexOf('+');\n\
    \            int opIndex32 = op.indexOf('+');\n            int opIndex33 = op.indexOf('+');\n\
    \            int opIndex34 = op.indexOf('+');\n            int opIndex35 = op.indexOf('+');\n\
    \            int opIndex36 = op.indexOf('+');\n            int opIndex37 = op.indexOf('+');\n\
    \            int opIndex38 = op.indexOf('+');\n            int opIndex39 = op.indexOf('+');\n\
    \            int opIndex40 = op.indexOf('+');\n            int opIndex41 = op.indexOf('+');\n\
    \            int opIndex42 = op.indexOf('+');\n            int opIndex43 = op.indexOf('+');\n\
    \            int opIndex44 = op.indexOf('+');\n            int opIndex45 = op.indexOf('+');\n\
    \            int op\n    }\n    public static void main(String[] args) {\n   \
    \ assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn228i7lr.java:77: error: ';' expected\n            int op\n   \
    \               ^\n/tmp/tmpn228i7lr.java:79: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_fpayae.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmph_fpayae.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpylqw_8hk.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3jfxmko.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgldt_qs.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String oper = op.get(i);\n         \
    \   long operand1 = operand.get(i);\n            switch(oper) {\n            \
    \    case \"+\":\n                    result += operand1;\n                  \
    \  break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"/\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"%\":\n                    result %= operand1;\n           \
    \         break;\n                case \"**\":\n                    result **=\
    \ operand1;\n                    break;\n                default:\n          \
    \          System.out.println(\"Invalid operator\");\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2or58o5w.java:49: error: illegal start of expression\n        \
    \            result **= operand1;\n                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            long operand2 = operand.get(i +\
    \ 1);\n            switch(op) {\n                case \"+\":\n               \
    \     result = result + operand1;\n                    break;\n              \
    \  case \"-\":\n                    result = result - operand1;\n            \
    \        break;\n                case \"*\":\n                    result = result\
    \ * operand1;\n                    break;\n                case \"//\":\n    \
    \                result = result / operand1;\n                    break;\n   \
    \             case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    throw\
    \ new IllegalArgumentException(\"Invalid operator: \" + op);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1lx4hlra.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk88q13q_.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     result /= operand1;\n                    break;\n                default:\n\
    \                    throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + op);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprilvctzg.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmprilvctzg.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String operation = op.get(i);\n    \
    \        long operand1 = operand.get(i);\n            long operand2 = operand.get(i\
    \ + 1);\n            switch(operation) {\n                case \"+\":\n      \
    \              result = result + operand1;\n                    break;\n     \
    \           case \"-\":\n                    result = result - operand1;\n   \
    \                 break;\n                case \"*\":\n                    result\
    \ = result * operand1;\n                    break;\n                case \"//\"\
    :\n                    result = result / operand1;\n                    break;\n\
    \                case \"**\":\n                    result = result ** operand1;\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operation: \" + operation);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplij863_a.java:47: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result *= operand.get(i);\n                    break;\n \
    \               default:\n                    throw new RuntimeException(\"Invalid\
    \ operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjic4e4ah.java:54)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3jfxmko.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i3uzkgq.java:51)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result /= operand.get(i);\n                    break;\n \
    \               default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwcva1dlc.java:54)\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_4r8_h4.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpa_4r8_h4.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     result /= operand1;\n                    break;\n                default:\n\
    \                    throw new IllegalArgumentException(\"Invalid operator: \"\
    \ + op);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprilvctzg.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmprilvctzg.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + op.get(i));\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0mntice.java:53)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3jfxmko.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result /= operand.get(i);\n                    break;\n \
    \               default:\n                    throw new IllegalArgumentException(\"\
    Invalid operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwcva1dlc.java:54)\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_fpayae.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmph_fpayae.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String opSymbol = op.get(i);\n     \
    \       long operand1 = operand.get(i);\n            switch(opSymbol) {\n    \
    \            case \"+\":\n                    result = result + operand1;\n  \
    \                  break;\n                case \"-\":\n                    result\
    \ = result - operand1;\n                    break;\n                case \"*\"\
    :\n                    result = result * operand1;\n                    break;\n\
    \                case \"//\":\n                    result = result / operand1;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result = result ** operand1;\n                    break;\n                default:\n\
    \                    throw new RuntimeException(\"Invalid operator: \" + opSymbol);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd7k5tkql.java:46: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i3uzkgq.java:51)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\": result = result + operand.get(i); break;\n                case\
    \ \"-\": result = result - operand.get(i); break;\n                case \"*\"\
    : result = result * operand.get(i); break;\n                case \"//\": result\
    \ = result / operand.get(i); break;\n                case \"**\": result = result\
    \ ** operand.get(i); break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2viarkww.java:35: error: illegal start of expression\n        \
    \        case \"**\": result = result ** operand.get(i); break;\n            \
    \                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result **= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3jfxmko.java:44: error: illegal start of expression\n        \
    \            result **= operand.get(i);\n                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result /= operand.get(i);\n                    break;\n \
    \               default:\n                    throw new RuntimeException(\"Invalid\
    \ operator: \" + op.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx4ujtvfx.java:54)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgldt_qs.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\": result += operand1; break;\n                case \"-\": result -= operand1;\
    \ break;\n                case \"*\": result *= operand1; break;\n           \
    \     case \"//\": result /= operand1; break;\n                case \"**\": result\
    \ *= operand1; result /= operand1; break;\n                default: throw new\
    \ RuntimeException(\"Invalid operator: \" + op);\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"**\", (String)\"\
    *\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l,\
    \ (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsz1u0rm4.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpsz1u0rm4.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    throw\
    \ new RuntimeException(\"Invalid operator: \" + op.get(i));\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk0mntice.java:53)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i3uzkgq.java:51)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\": result += operand.get(i); break;\n                case \"-\": result\
    \ -= operand.get(i); break;\n                case \"*\": result *= operand.get(i);\
    \ break;\n                case \"//\": result /= operand.get(i); break;\n    \
    \            case \"**\": result *= operand.get(i); result /= operand.get(i);\
    \ break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmparjmkukc.java:41)\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n                default:\n                    System.out.println(\"\
    Invalid operator\");\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjgldt_qs.java:53)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    result /= operand.get(i);\n                    break;\n \
    \               default:\n                    System.out.println(\"Invalid operator\"\
    );\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps2ckam3_.java:54)\n"
  stdout: ''
  timestamp: 1659792520
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            switch(op) {\n                case\
    \ \"+\":\n                    result += operand1;\n                    break;\n\
    \                case \"-\":\n                    result -= operand1;\n      \
    \              break;\n                case \"*\":\n                    result\
    \ *= operand1;\n                    break;\n                case \"//\":\n   \
    \                 result /= operand1;\n                    break;\n          \
    \      case \"**\":\n                    result *= operand1;\n               \
    \     result = Math.pow(operand1, result);\n                    break;\n     \
    \           default:\n                    throw new RuntimeException(\"Invalid\
    \ operator: \" + op);\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr1fitphh.java:30: error: variable op is already defined in method\
    \ doAlgebra(ArrayList<String>,ArrayList<Long>)\n            String op = op.get(i);\n\
    \                   ^\n/tmp/tmpr1fitphh.java:30: error: cannot find symbol\n \
    \           String op = op.get(i);\n                          ^\n  symbol:   method\
    \ get(int)\n  location: variable op of type String\n/tmp/tmpr1fitphh.java:47:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \                   result = Math.pow(operand1, result);\n                   \
    \                  ^\n3 errors\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            String op = op.get(i);\n           \
    \ long operand1 = operand.get(i);\n            int opIndex = -1;\n           \
    \ for(int j = 0; j < op.size(); j++) {\n                if(op.equals(op.get(j)))\
    \ {\n                    opIndex = j;\n                    break;\n          \
    \      }\n            }\n            if(opIndex == -1) {\n                System.out.println(\"\
    Invalid operator: \" + op);\n                return -1;\n            }\n     \
    \       switch(opIndex) {\n                case 0:\n                    result\
    \ = result + operand1;\n                    break;\n                case 1:\n\
    \                    result = result - operand1;\n                    break;\n\
    \                case 2:\n                    result = result * operand1;\n  \
    \                  break;\n                case 3:\n                    result\
    \ = result / operand1;\n                    break;\n                case 4:\n\
    \                    result = result % operand1;\n                    break;\n\
    \                case 5:\n                    result = result ** operand1;\n \
    \                   break;\n                default:\n                    System.out.println(\"\
    Invalid operator: \" + op);\n                    return -1;\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    **\", (String)\"*\", (String)\"+\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjj7g_nw_.java:60: error: illegal start of expression\n        \
    \            result = result ** operand1;\n                                  \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659792522
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long doAlgebra(ArrayList<String>\
    \ op, ArrayList<Long> operand) {\n        long result = 0;\n        for(int i\
    \ = 0; i < op.size(); i++) {\n            switch(op.get(i)) {\n              \
    \  case \"+\":\n                    result += operand.get(i);\n              \
    \      break;\n                case \"-\":\n                    result -= operand.get(i);\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand.get(i);\n                    break;\n                case\
    \ \"//\":\n                    result /= operand.get(i);\n                   \
    \ break;\n                case \"**\":\n                    result *= operand.get(i);\n\
    \                    break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(doAlgebra((new\
    \ ArrayList<String>(Arrays.asList((String)\"**\", (String)\"*\", (String)\"+\"\
    ))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l))))\
    \ == (37l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    +\", (String)\"*\", (String)\"-\"))), (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)3l, (long)4l, (long)5l)))) == (9l));\n    assert(doAlgebra((new ArrayList<String>(Arrays.asList((String)\"\
    //\", (String)\"*\"))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)3l,\
    \ (long)4l)))) == (8l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i3uzkgq.java:51)\n"
  stdout: ''
  timestamp: 1659792520
