name: HumanEval_15_string_sequence
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return a string containing space-delimited numbers starting\
  \ from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n  \
  \  // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    public static String\
  \ stringSequence(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(stringSequence((0l)).equals((\"\
  0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
  0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
completions: ["        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n\
    \        }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (long i = 0; i < n; i++) {\n            sb.append(i);\n         \
    \   sb.append(\" \");\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (long i = 0; i < n; i++) {\n        \
    \    sb.append(i);\n            sb.append(\" \");\n        }\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n;\
    \ i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < n; i++) {\n            sb.append(i);\n          \
    \  sb.append(\" \");\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n         \
    \   sb.append(i);\n            sb.append(\" \");\n        }\n        return sb.toString();",
  "        List<String> result = new ArrayList<>();\n        for (long i = 0; i <=\
    \ n; i++) {\n            result.add(String.valueOf(i));\n        }\n        return\
    \ result.stream().collect(Collectors.joining(\" \"));", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (long i = 0; i <= n; i++) {\n       \
    \     sb.append(i);\n            sb.append(\" \");\n        }\n        return\
    \ sb.toString();", "        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\"\
    \ \");\n        }\n        return sb.toString();", "        StringBuilder sb =\
    \ new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(i);\n\
    \            sb.append(\" \");\n        }\n        return sb.toString();", " \
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n;\
    \ i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < n; i++) {\n            sb.append(i);\n        }\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < n; i++) {\n            sb.append(i);\n          \
    \  sb.append(\" \");\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (long i = 0; i < n; i++) {\n        \
    \    sb.append(i);\n            sb.append(\" \");\n        }\n        return sb.toString();",
  "        List<Integer> numbers = IntStream.rangeClosed(0, n).boxed().collect(Collectors.toList());\n\
    \        return IntStream.range(0, numbers.size()).mapToObj(i -> numbers.get(i)).collect(Collectors.joining(\"\
    \ \"));", "        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (long i = 0; i < n;\
    \ i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n\
    \        return sb.toString();", "        List<String> result = new ArrayList<>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.add(String.valueOf(i));\n\
    \        }\n        return result.stream().collect(Collectors.joining(\" \"));",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n;\
    \ i++) {\n            sb.append(i);\n        }\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n;\
    \ i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n\
    \        return sb.toString();"]
stop_tokens:
- "\n    }\n"
