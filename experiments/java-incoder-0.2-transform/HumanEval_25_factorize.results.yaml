language: java
name: HumanEval_25_factorize
results:
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n % factor != 0) {\n            factors.add(factor);\n       \
    \     n /= factor;\n        }\n        while (n != 1) {\n            factors.add(1);\n\
    \            n /= 1;\n        }\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9x27ply9.java:26: error: no suitable method found for add(int)\n\
    \            factors.add(1);\n                   ^\n    method Collection.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method List.add(Long) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Long)\n    method AbstractCollection.add(Long) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Long)\n    method AbstractList.add(Long)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Long)\n\
    \    method ArrayList.add(Long) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Long)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        while (n != 1) {\n            while (n % factor == 0) {\n    \
    \            factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        while (n != 1) {\n            while (n % factor == 0) {\n    \
    \            factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    factors.add(factor);\n                n /= factor;\n            }\n     \
    \       factor++;\n        }\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        while (n != 1) {\n            while (n % factor == 0) {\n    \
    \            factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        while (n != 1) {\n            while (n % factor == 0) {\n    \
    \            factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        long factorization = 1;\n        long factorization2 = 1;\n        while\
    \ (factorization <= n) {\n            factorization *= factor;\n            factors.add(factorization);\n\
    \            factor++;\n        }\n        factorization2 = factorization;\n \
    \       while (factorization2 <= n) {\n            factorization2 *= factor;\n\
    \            factors.add(factorization2);\n            factor++;\n        }\n\
    \        return factors;\n    }\n    public static void main(String[] args) {\n\
    \    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnvathfhf.java:37)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<>();\n        long factor = 1;\n\
    \        while (n != 1) {\n            while (n % factor == 0) {\n           \
    \     factors.add(factor);\n                n /= factor;\n            }\n    \
    \        factor++;\n        }\n        return factors;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        long factorization = 1;\n        while (n > 1) {\n           \
    \ factorization *= factor;\n            while (n % factor == 0) {\n          \
    \      factors.add(factor);\n                n /= factor;\n            }\n   \
    \         factor++;\n        }\n        if (n != 1) {\n            factors.add(n);\n\
    \        }\n        return factors;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n    // Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n   \
    \ // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)2l)))\n \
    \   // >>> factorize((25l))\n    // (new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)5l)))\n    // >>> factorize((70l))\n    // (new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)5l, (long)7l)))\n    public static ArrayList<Long> factorize(long n) {\n\
    \        ArrayList<Long> factors = new ArrayList<Long>();\n        long factor\
    \ = 1;\n        while (n != 1) {\n            while (n % factor == 0) {\n    \
    \            factors.add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(factorize((2l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(factorize((4l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l)))));\n    assert(factorize((8l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)2l, (long)2l)))));\n    assert(factorize((57l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l)))));\n    assert(factorize((3249l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)3l, (long)19l, (long)19l)))));\n    assert(factorize((185193l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)19l, (long)19l,\
    \ (long)19l)))));\n    assert(factorize((20577l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)19l, (long)19l, (long)19l)))));\n    assert(factorize((18l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)3l)))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
