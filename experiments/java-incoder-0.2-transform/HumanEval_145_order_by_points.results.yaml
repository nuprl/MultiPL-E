language: java
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return o1.compareTo(o2);\n            }\n        });\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw8u4_lu6.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                return (int) (o1 - o2);\n            }\n   \
    \     });\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3wla3bs6.java:34)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        long maxSum = 0;\n        long\
    \ maxIndex = 0;\n        for(long num : nums) {\n            sum += num;\n   \
    \         if(sum > maxSum) {\n                maxSum = sum;\n                maxIndex\
    \ = num;\n            }\n        }\n        for(long num : nums) {\n         \
    \   if(num == maxIndex) {\n                result.add(num);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps8im6ekr.java:38)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxmf_pm1.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return Long.compare(sum, o1 - o2);\n            }\n        });\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfwvm43_o.java:27: error: local variables referenced from an inner\
    \ class must be final or effectively final\n                return Long.compare(sum,\
    \ o1 - o2);\n                                    ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for(long num : nums) {\n    \
    \        sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5q9o49rd.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                long diff = o1 - o2;\n                if (diff == 0) {\n    \
    \                return 0;\n                }\n                return diff < 0\
    \ ? -1 : 1;\n            }\n        });\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkojyuht0.java:37)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for(Long num : nums) {\n    \
    \        sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp32clwwmz.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                long diff = o1 - o2;\n                if (diff == 0) {\n    \
    \                return 0;\n                }\n                if (diff < 0) {\n\
    \                    return -1;\n                }\n                return 1;\n\
    \            }\n        });\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphbgtlg47.java:40)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                return sum - o1.compareTo(o2);\n           \
    \ }\n        });\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp72krjpzk.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n                return sum - o1.compareTo(o2);\n         \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (Long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm7svg9mr.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxmf_pm1.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for(long num : nums) {\n    \
    \        sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyi1_j7o8.java:33)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        long maxSum = Long.MIN_VALUE;\n\
    \        for (long num : nums) {\n            sum += num;\n            if (sum\
    \ > maxSum) {\n                maxSum = sum;\n            }\n            result.add(num);\n\
    \        }\n        Collections.sort(result);\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr41mjdmg.java:33)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa84sy894.java:28)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for(long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo1vk_pkl.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa84sy894.java:28)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp44977_8k.java:33)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        long max = 0;\n        for\
    \ (long num : nums) {\n            sum += num;\n            if (sum > max) {\n\
    \                max = sum;\n            }\n        }\n        for (long num :\
    \ nums) {\n            sum += num;\n            if (sum == max) {\n          \
    \      result.add(num);\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwmmxod6b.java:37)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for(long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo1vk_pkl.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for(long num : nums) {\n    \
    \        sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5q9o49rd.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (Long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq98tytlj.java:28)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        long maxSum = 0;\n      \
    \  long maxIndex = 0;\n        long minIndex = 0;\n        for(long num : nums)\
    \ {\n            sum += num;\n            if(sum > maxSum) {\n               \
    \ maxSum = sum;\n                maxIndex = num;\n            }\n            if(sum\
    \ < minSum) {\n                minSum = sum;\n                minIndex = num;\n\
    \            }\n        }\n        for(long num : nums) {\n            sum +=\
    \ num;\n            if(sum == maxSum) {\n                result.add(maxIndex);\n\
    \            } else if(sum == minSum) {\n                result.add(minIndex);\n\
    \            } else {\n                result.add(num);\n            }\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ofofh_o.java:30: error: cannot find symbol\n            if(sum\
    \ < minSum) {\n                     ^\n  symbol:   variable minSum\n  location:\
    \ class Problem\n/tmp/tmp2ofofh_o.java:31: error: cannot find symbol\n       \
    \         minSum = sum;\n                ^\n  symbol:   variable minSum\n  location:\
    \ class Problem\n/tmp/tmp2ofofh_o.java:39: error: cannot find symbol\n       \
    \     } else if(sum == minSum) {\n                             ^\n  symbol:  \
    \ variable minSum\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        long maxSum = 0;\n        long\
    \ maxSumIndex = 0;\n        long maxSumDigit = 0;\n        long maxSumDigitIndex\
    \ = 0;\n        long maxSumDigitDigit = 0;\n        long maxSumDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuyxixogq.java:33: error: variable maxSumDigitDigitDigitDigitDigit\
    \ is already defined in method orderByPoints(ArrayList<Long>)\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n             ^\n/tmp/tmpuyxixogq.java:34: error: variable maxSumDigitDigitDigitDigitIndex\
    \ is already defined in method orderByPoints(ArrayList<Long>)\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n             ^\n/tmp/tmpuyxixogq.java:35: error: variable maxSumDigitDigitDigitDigitDigit\
    \ is already defined in method orderByPoints(ArrayList<Long>)\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n             ^\n/tmp/tmpuyxixogq.java:36: error: variable maxSumDigitDigitDigitDigitIndex\
    \ is already defined in method orderByPoints(ArrayList<Long>)\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n             ^\n/tmp/tmpuyxixogq.java:37: error: variable maxSumDigitDigitDigitDigit\
    \ is already defined in method orderByPoints(ArrayList<Long>)\n        long maxSumDigitDigitDigitDigit\
    \ = 0;\n             ^\n/tmp/tmpuyxixogq.java:38: error: variable maxSumDigitDigitDigitDigitIndex\
    \ is already defined in method orderByPoints(ArrayList<Long>)\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n             ^\n/tmp/tmpuyxixogq.java:39: error: variable maxSumDigitDigitDigitDigit\
    \ is already defined in method orderByPoints(ArrayList<Long>)\n        long maxSumDigitDigitDigitDigit\
    \ = 0;\n             ^\n/tmp/tmpuyxixogq.java:40: error: variable maxSumDigitDigitDigitDigitIndex\
    \ is already defined in method orderByPoints(ArrayList<Long>)\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n             ^\n/tmp/tmpuyxixogq.java:41: error: variable maxSumDigitDigitDigitDigit\
    \ is already defined in method orderByPoints(ArrayList<Long>)\n        long maxSumDigitDigitDigitDigit\
    \ = 0;\n             ^\n/tmp/tmpuyxixogq.java:42: error: variable maxSumDigitDigitDigitDigitIndex\
    \ is already defined in method orderByPoints(ArrayList<Long>)\n        long maxSumDigitDigitDigitDigitIndex\
    \ = 0;\n             ^\n/tmp/tmpuyxixogq.java:43: error: variable maxSumDigitDigitDigitDigit\
    \ is already defined "
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt6jm7ymq.java:33)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        long maxSum = 0;\n      \
    \  long maxIndex = 0;\n        for(long num : nums) {\n            sum += num;\n\
    \            if(sum > maxSum) {\n                maxSum = sum;\n             \
    \   maxIndex = num;\n            }\n        }\n        for(long num : nums) {\n\
    \            if(num == maxIndex) {\n                result.add(num);\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2skro29n.java:38)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa84sy894.java:28)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (Long num : nums) {\n\
    \            sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                long diff = o1 - o2;\n                if (diff == 0) {\n    \
    \                return 0;\n                } else if (diff < 0) {\n         \
    \           return -1;\n                } else {\n                    return 1;\n\
    \                }\n            }\n        });\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0zkemvh.java:40)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ks575_r.java:33)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (Long num : nums) {\n\
    \            sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return sum - o1.compareTo(o2);\n            }\n        });\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy3v3jz53.java:27: error: incompatible types: possible lossy conversion\
    \ from long to int\n                return sum - o1.compareTo(o2);\n         \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnihe10j3.java:33)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        long maxSum = 0;\n      \
    \  for (long num : nums) {\n            sum += num;\n            if (sum > maxSum)\
    \ {\n                maxSum = sum;\n            }\n        }\n        long currentSum\
    \ = 0;\n        for (long num : nums) {\n            currentSum += num;\n    \
    \        if (currentSum == maxSum) {\n                result.add(num);\n     \
    \       }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbrittrh9.java:38)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxmf_pm1.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqyw1uxf9.java:28)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ks575_r.java:33)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        long maxSum = Long.MIN_VALUE;\n\
    \        for (long num : nums) {\n            sum += num;\n            if (sum\
    \ > maxSum) {\n                maxSum = sum;\n            }\n        }\n     \
    \   Collections.sort(nums, Comparator.comparingLong(num -> sum - num));\n    \
    \    for (long num : nums) {\n            result.add(num);\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7kh3no97.java:28: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n        Collections.sort(nums,\
    \ Comparator.comparingLong(num -> sum - num));\n                             \
    \                                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (Long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm7svg9mr.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                long diff = o1 - o2;\n                if (diff\
    \ == 0) {\n                    return 0;\n                }\n                return\
    \ diff < 0 ? -1 : 1;\n            }\n        });\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ij4i6p1.java:38)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (Long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm7svg9mr.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                long diff = o1 - o2;\n                if (diff == 0) {\n    \
    \                return 0;\n                }\n                if (diff < 0) {\n\
    \                    return -1;\n                }\n                return 1;\n\
    \            }\n        });\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ogihwik.java:40)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        long maxSum = 0;\n      \
    \  long maxIndex = 0;\n        for(long num : nums) {\n            sum += num;\n\
    \            if(sum > maxSum) {\n                maxSum = sum;\n             \
    \   maxIndex = num;\n            }\n        }\n        for(long num : nums) {\n\
    \            if(num == maxIndex) {\n                result.add(num);\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2skro29n.java:38)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for(long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo1vk_pkl.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (Long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm7svg9mr.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for(long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo1vk_pkl.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnihe10j3.java:33)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (Long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm7svg9mr.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxmf_pm1.java:28)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                long diff = o1 - o2;\n                if (diff\
    \ == 0) {\n                    return 0;\n                }\n                return\
    \ diff < 0 ? -1 : 1;\n            }\n        });\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph4_zu4zh.java:38)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                return (int) (o1 - o2);\n            }\n   \
    \     });\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplcvs558k.java:34)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnihe10j3.java:33)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                long diff = o1 - o2;\n                return diff != 0 ? diff\
    \ : o1.compareTo(o2);\n            }\n        });\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ekjxgyh.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n                return diff != 0 ? diff : o1.compareTo(o2);\n\
    \                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprox5ns53.java:33)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for(long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo1vk_pkl.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for(long num : nums) {\n    \
    \        sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5q9o49rd.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprox5ns53.java:33)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        long maxSum = 0;\n        long\
    \ maxIndex = 0;\n        for(long num : nums) {\n            sum += num;\n   \
    \         if(sum > maxSum) {\n                maxSum = sum;\n                maxIndex\
    \ = num;\n            }\n        }\n        for(long num : nums) {\n         \
    \   if(num == maxIndex) {\n                result.add(num);\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps8im6ekr.java:38)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        long maxSum = Long.MIN_VALUE;\n\
    \        long maxIndex = -1;\n        for(long num : nums) {\n            sum\
    \ += num;\n            if(sum > maxSum) {\n                maxSum = sum;\n   \
    \             maxIndex = num;\n            }\n        }\n        for(long num\
    \ : nums) {\n            if(num == maxIndex) {\n                result.add(num);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqgc5vz57.java:38)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for(Long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpojk6mzf2.java:29)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                long diff = o1 - o2;\n                return diff < 0 ? -1 :\
    \ diff > 0 ? 1 : 0;\n            }\n        });\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7pb7gz4l.java:34)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        long maxSum = 0;\n      \
    \  long minSum = Long.MAX_VALUE;\n        for (long num : nums) {\n          \
    \  sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \            }\n            if (sum < minSum) {\n                minSum = sum;\n\
    \            }\n        }\n        for (long num : nums) {\n            sum +=\
    \ num;\n            if (sum == maxSum) {\n                result.add(num);\n \
    \           }\n            if (sum == minSum) {\n                result.add(num);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp31c1cajo.java:44)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                return sum - o1 - o2;\n            }\n     \
    \   });\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprckb_5wl.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n                return sum - o1 - o2;\n                  \
    \              ^\n1 error\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for(long num : nums) {\n    \
    \        sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5q9o49rd.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnihe10j3.java:33)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for(long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo1vk_pkl.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return sum - o1.compareTo(o2);\n            }\n        });\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4nl4m95s.java:27: error: incompatible types: possible lossy conversion\
    \ from long to int\n                return sum - o1.compareTo(o2);\n         \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        long maxSum = 0;\n      \
    \  long maxSumIndex = 0;\n        for(long num : nums) {\n            sum += num;\n\
    \            if(sum > maxSum) {\n                maxSum = sum;\n             \
    \   maxSumIndex = num;\n            }\n        }\n        for(long num : nums)\
    \ {\n            if(num == maxSumIndex) {\n                result.add(num);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt1qm8hn9.java:38)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprox5ns53.java:33)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa84sy894.java:28)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (o1 - o2);\n            }\n        });\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ks575_r.java:33)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (Long num : nums) {\n\
    \            sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return sum - o1.compareTo(o2);\n            }\n        });\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy3v3jz53.java:27: error: incompatible types: possible lossy conversion\
    \ from long to int\n                return sum - o1.compareTo(o2);\n         \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                long diff = o1 - o2;\n                if (diff == 0) {\n    \
    \                return 0;\n                }\n                return diff < 0\
    \ ? -1 : 1;\n            }\n        });\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkojyuht0.java:37)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        long maxSum = 0;\n        for\
    \ (long num : nums) {\n            sum += num;\n            if (sum > maxSum)\
    \ {\n                maxSum = sum;\n            }\n            result.add(num);\n\
    \        }\n        Collections.sort(result);\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfitmxbig.java:33)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return o1.compareTo(o2);\n            }\n        });\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw8u4_lu6.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for(long num : nums) {\n\
    \            sum += num;\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                long diff = o1 - o2;\n                if(diff < 0) {\n      \
    \              return -1;\n                } else if(diff > 0) {\n           \
    \         return 1;\n                } else {\n                    return 0;\n\
    \                }\n            }\n        });\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppfq5qyfd.java:40)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        long max = 0;\n        long\
    \ min = Long.MAX_VALUE;\n        for (long num : nums) {\n            sum += num;\n\
    \            if (sum > max) {\n                max = sum;\n            }\n   \
    \         if (sum < min) {\n                min = sum;\n            }\n      \
    \  }\n        for (long num : nums) {\n            sum += num;\n            if\
    \ (sum == max) {\n                result.add(num);\n            } else if (sum\
    \ == min) {\n                result.add(num);\n            } else if (sum > max)\
    \ {\n                result.add(num);\n            } else if (sum < min) {\n \
    \               result.add(num);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5_2o0gvv.java:47)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        long maxSum = 0;\n        long\
    \ maxIndex = 0;\n        for (long num : nums) {\n            sum += num;\n  \
    \          if (sum > maxSum) {\n                maxSum = sum;\n              \
    \  maxIndex = num;\n            }\n        }\n        for (long num : nums) {\n\
    \            if (num == maxIndex) {\n                result.add(num);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9z_2y409.java:38)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        long maxSum = 0;\n      \
    \  for (long num : nums) {\n            sum += num;\n            if (sum > maxSum)\
    \ {\n                maxSum = sum;\n            }\n        }\n        for (long\
    \ num : nums) {\n            sum += num;\n            if (sum == maxSum) {\n \
    \               result.add(num);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps1wp692_.java:37)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for(Long num : nums) {\n    \
    \        sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp32clwwmz.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu9v9gc0_.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        long maxSum = 0;\n        long\
    \ maxIndex = 0;\n        long maxSumIndex = 0;\n        for(long num : nums) {\n\
    \            sum += num;\n            if(sum > maxSum) {\n                maxSum\
    \ = sum;\n                maxIndex = num;\n                maxSumIndex = num;\n\
    \            }\n            if(sum == maxSum) {\n                maxSumIndex +=\
    \ num;\n            }\n        }\n        for(long num : nums) {\n           \
    \ if(num == maxIndex) {\n                result.add(maxSumIndex);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7l_8wsw1.java:43)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy735popo.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        long sum = 0;\n        for (Long num : nums) {\n\
    \            sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm7svg9mr.java:29)\n"
  stdout: ''
  timestamp: 1659797859
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (Long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                return (int) (o1 - o2);\n            }\n   \
    \     });\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5e5ciz8b.java:34)\n"
  stdout: ''
  timestamp: 1659797861
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        for (long num : nums) {\n   \
    \         sum += num;\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvzcm5w9.java:29)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l))))\n\
    \    // (new ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l,\
    \ (long)11l)))\n    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList())))\n\
    \    // (new ArrayList<Long>(Arrays.asList()))\n    public static ArrayList<Long>\
    \ orderByPoints(ArrayList<Long> nums) {\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long sum = 0;\n        long maxSum = 0;\n        long\
    \ maxIndex = 0;\n        for (long num : nums) {\n            sum += num;\n  \
    \          if (sum > maxSum) {\n                maxSum = sum;\n              \
    \  maxIndex = num;\n            }\n        }\n        for (long num : nums) {\n\
    \            if (num == maxIndex) {\n                result.add(num);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9z_2y409.java:38)\n"
  stdout: ''
  timestamp: 1659797861
