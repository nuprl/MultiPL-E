name: HumanEval_119_match_parens
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a list of two strings, both strings consist\
  \ of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your job\
  \ is to check if it is possible to concatenate the two strings in\n    // some order,\
  \ that the resulting string will be good.\n    // A string S is considered to be\
  \ good if and only if all parentheses in S\n    // are balanced. For example: the\
  \ string '(())()' is good, while the string\n    // '())' is not.\n    // Return\
  \ 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n   \
  \ // Examples:\n    // >>> matchParens((new ArrayList<String>(Arrays.asList((String)\"\
  ()(\", (String)\")\"))))\n    // (\"Yes\")\n    // >>> matchParens((new ArrayList<String>(Arrays.asList((String)\"\
  )\", (String)\")\"))))\n    // (\"No\")\n    public static String matchParens(ArrayList<String>\
  \ lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(matchParens((new\
  \ ArrayList<String>(Arrays.asList((String)\"()(\", (String)\")\")))).equals((\"\
  Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
  )\", (String)\")\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
  (()(())\", (String)\"())())\")))).equals((\"No\")));\n    assert(matchParens((new\
  \ ArrayList<String>(Arrays.asList((String)\")())\", (String)\"(()()(\")))).equals((\"\
  Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
  (())))\", (String)\"(()())((\")))).equals((\"Yes\")));\n    assert(matchParens((new\
  \ ArrayList<String>(Arrays.asList((String)\"()\", (String)\"())\")))).equals((\"\
  No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
  (()(\", (String)\"()))()\")))).equals((\"Yes\")));\n    assert(matchParens((new\
  \ ArrayList<String>(Arrays.asList((String)\"((((\", (String)\"((())\")))).equals((\"\
  No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
  )(()\", (String)\"(()(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
  )(\", (String)\")(\")))).equals((\"No\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
  (\", (String)\")\")))).equals((\"Yes\")));\n    assert(matchParens((new ArrayList<String>(Arrays.asList((String)\"\
  )\", (String)\"(\")))).equals((\"Yes\")));\n    }\n\n}\n"
completions: ["        Stack<String> stack = new Stack<>();\n        boolean isMatch\
    \ = true;\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n\
    \                stack.push(s);\n            } else if (s.equals(\")\")) {\n \
    \               String top = stack.pop();\n                if (!top.equals(\"\
    (\")) {\n                    isMatch = false;\n                    break;\n  \
    \              }\n            }\n        }\n        if (isMatch) {\n         \
    \   return \"Yes\";\n        } else {\n            return \"No\";\n        }",
  "        Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       while (!stack.isEmpty() && stack.peek().equals(\"(\")) {\n           \
    \         stack.pop();\n                }\n                if (stack.isEmpty())\
    \ {\n                    isGood = false;\n                    break;\n       \
    \         }\n                stack.pop();\n            } else {\n            \
    \    isGood = false;\n                break;\n            }\n        }\n     \
    \   return isGood ? \"Yes\" : \"No\";", "        Stack<String> stack = new Stack<>();\n\
    \        boolean isGood = true;\n        for (String s : lst) {\n            if\
    \ (s.equals(\"(\")) {\n                stack.push(s);\n            } else if (s.equals(\"\
    )\")) {\n                String top = stack.pop();\n                if (!top.equals(\"\
    (\")) {\n                    isGood = false;\n                    break;\n   \
    \             }\n            }\n        }\n        if (isGood) {\n           \
    \ return \"Yes\";\n        } else {\n            return \"No\";\n        }", " \
    \       Stack<String> stack = new Stack<>();\n        boolean isMatch = false;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       while (!stack.isEmpty() && stack.peek().equals(\"(\")) {\n           \
    \         stack.pop();\n                }\n                if (stack.isEmpty())\
    \ {\n                    isMatch = true;\n                    break;\n       \
    \         }\n                stack.pop();\n            } else {\n            \
    \    isMatch = false;\n                break;\n            }\n        }\n    \
    \    if (isMatch) {\n            return \"Yes\";\n        } else {\n         \
    \   return \"No\";\n        }", "        Stack<String> stack = new Stack<>();\n\
    \        boolean isGood = true;\n        for (String s : lst) {\n            if\
    \ (s.equals(\"(\")) {\n                stack.push(s);\n            } else if (s.equals(\"\
    )\")) {\n                while (!stack.isEmpty() && stack.peek().equals(\"(\"\
    )) {\n                    stack.pop();\n                }\n                if\
    \ (stack.isEmpty()) {\n                    isGood = false;\n                 \
    \   break;\n                }\n                stack.pop();\n            } else\
    \ {\n                isGood = false;\n                break;\n            }\n\
    \        }\n        if (isGood) {\n            return \"Yes\";\n        } else\
    \ {\n            return \"No\";\n        }", "        Stack<String> stack = new\
    \ Stack<>();\n        StringBuilder sb = new StringBuilder();\n        for (String\
    \ s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push(s);\n\
    \            } else if (s.equals(\")\")) {\n                while (!stack.isEmpty()\
    \ && stack.peek().equals(\"(\")) {\n                    sb.append(stack.pop());\n\
    \                }\n                stack.push(s);\n            } else if (s.equals(\"\
    )\")) {\n                while (!stack.isEmpty() && stack.peek().equals(\"(\"\
    )) {\n                    sb.append(stack.pop());\n                }\n       \
    \         stack.push(s);\n            } else if (s.equals(\"(\")) {\n        \
    \        while (!stack.isEmpty() && stack.peek().equals(\"(\")) {\n          \
    \          sb.append(stack.pop());\n                }\n                stack.push(s);\n\
    \            }\n        }\n        while (!stack.isEmpty()) {\n            sb.append(stack.pop());\n\
    \        }\n        return sb.toString();", "        Stack<String> stack = new\
    \ Stack<>();\n        boolean isMatch = false;\n        for (String s : lst) {\n\
    \            if (s.equals(\"(\")) {\n                stack.push(s);\n        \
    \    } else if (s.equals(\")\")) {\n                String top = stack.pop();\n\
    \                if (top.equals(\"(\")) {\n                    isMatch = true;\n\
    \                } else {\n                    isMatch = false;\n            \
    \        break;\n                }\n            } else {\n                isMatch\
    \ = false;\n                break;\n            }\n        }\n        if (isMatch)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }", "        Stack<String> stack = new Stack<>();\n        boolean\
    \ isGood = true;\n        for (String s : lst) {\n            if (s.equals(\"\
    (\")) {\n                stack.push(s);\n            } else if (s.equals(\")\"\
    )) {\n                String top = stack.pop();\n                if (!top.equals(\"\
    (\")) {\n                    isGood = false;\n                    break;\n   \
    \             }\n            }\n        }\n        if (isGood) {\n           \
    \ return \"Yes\";\n        } else {\n            return \"No\";\n        }", " \
    \       Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n\
    \        for (String s : lst) {\n            if (s.equals(\"(\")) {\n        \
    \        stack.push(s);\n            } else if (s.equals(\")\")) {\n         \
    \       String top = stack.pop();\n                if (!top.equals(\"(\")) {\n\
    \                    isGood = false;\n                    break;\n           \
    \     }\n            }\n        }\n        return isGood ? \"Yes\" : \"No\";",
  "        Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean isGood = true;\n        for (String s : lst) {\n            if\
    \ (s.equals(\"(\")) {\n                stack.push(s);\n            } else if (s.equals(\"\
    )\")) {\n                while (!stack.isEmpty() && stack.peek().equals(\"(\"\
    )) {\n                    sb.append(stack.pop());\n                }\n       \
    \         stack.pop();\n            } else {\n                isGood = false;\n\
    \            }\n        }\n        if (stack.isEmpty()) {\n            return\
    \ \"No\";\n        }\n        return \"Yes\";", "        Stack<String> stack =\
    \ new Stack<>();\n        boolean isMatch = false;\n        for (String s : lst)\
    \ {\n            if (s.equals(\"(\")) {\n                stack.push(s);\n    \
    \        } else if (s.equals(\")\")) {\n                String top = stack.pop();\n\
    \                if (top.equals(\"(\")) {\n                    isMatch = true;\n\
    \                } else {\n                    isMatch = false;\n            \
    \        break;\n                }\n            } else {\n                isMatch\
    \ = false;\n                break;\n            }\n        }\n        if (isMatch)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }", "        Stack<String> stack = new Stack<>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        boolean isGood = true;\n        for (String\
    \ s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push(s);\n\
    \            } else if (s.equals(\")\")) {\n                while (!stack.isEmpty()\
    \ && stack.peek().equals(\"(\")) {\n                    sb.append(stack.pop());\n\
    \                }\n                stack.pop();\n            } else if (s.equals(\"\
    (\")) {\n                stack.push(s);\n            } else if (s.equals(\")\"\
    )) {\n                while (!stack.isEmpty() && stack.peek().equals(\"(\")) {\n\
    \                    sb.append(stack.pop());\n                }\n            \
    \    stack.pop();\n            }\n        }\n        if (!stack.isEmpty()) {\n\
    \            isGood = false;\n        }\n        return sb.toString();", "   \
    \     Stack<String> stack = new Stack<>();\n        boolean isGood = true;\n \
    \       for (String s : lst) {\n            if (s.equals(\"(\")) {\n         \
    \       stack.push(s);\n            } else if (s.equals(\")\")) {\n          \
    \      String top = stack.pop();\n                if (!top.equals(\"(\")) {\n\
    \                    isGood = false;\n                    break;\n           \
    \     }\n            }\n        }\n        if (isGood) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }", "        Stack<String>\
    \ stack = new Stack<>();\n        for(String s : lst) {\n            if(s.equals(\"\
    (\")) {\n                stack.push(s);\n            } else if(s.equals(\")\"\
    )) {\n                if(!stack.isEmpty()) {\n                    String top =\
    \ stack.pop();\n                    if(top.equals(\"(\")) {\n                \
    \        stack.push(top);\n                    } else {\n                    \
    \    return null;\n                    }\n                } else {\n         \
    \           return null;\n                }\n            } else {\n          \
    \      return null;\n            }\n        }\n        if(!stack.isEmpty()) {\n\
    \            return null;\n        }\n        return \"Yes\";", "        Stack<String>\
    \ stack = new Stack<>();\n        boolean isMatch = false;\n        for (String\
    \ s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push(s);\n\
    \            } else if (s.equals(\")\")) {\n                String top = stack.pop();\n\
    \                if (top.equals(\"(\")) {\n                    isMatch = true;\n\
    \                } else {\n                    isMatch = false;\n            \
    \        break;\n                }\n            } else {\n                isMatch\
    \ = false;\n                break;\n            }\n        }\n        if (isMatch)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }", "        List<String> list = new ArrayList<String>();\n       \
    \ for (String s : lst) {\n            list.add(s);\n        }\n        boolean\
    \ flag = false;\n        Stack<String> stack = new Stack<String>();\n        stack.push(list.get(0));\n\
    \        for (int i = 1; i < list.size(); i++) {\n            if (list.get(i).equals(\"\
    (\")) {\n                stack.push(list.get(i));\n            } else if (list.get(i).equals(\"\
    )\")) {\n                String s = stack.pop();\n                if (s.equals(\"\
    (\")) {\n                    flag = true;\n                } else {\n        \
    \            flag = false;\n                }\n            } else {\n        \
    \        flag = false;\n            }\n            if (flag) {\n             \
    \   stack.push(list.get(i));\n            }\n        }\n        return stack.pop();",
  "        Stack<String> stack = new Stack<>();\n        for (String s : lst) {\n\
    \            if (s.equals(\"(\")) {\n                stack.push(s);\n        \
    \    } else if (s.equals(\")\")) {\n                String top = stack.pop();\n\
    \                if (!top.equals(\"(\")) {\n                    return \"No\"\
    ;\n                }\n            }\n        }\n        return \"Yes\";", "  \
    \      Stack<String> stack = new Stack<>();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean isGood = true;\n        for (String s : lst) {\n            if\
    \ (s.equals(\"(\")) {\n                stack.push(s);\n            } else if (s.equals(\"\
    )\")) {\n                while (!stack.isEmpty() && stack.peek().equals(\"(\"\
    )) {\n                    sb.append(stack.pop());\n                }\n       \
    \         stack.pop();\n            } else {\n                isGood = false;\n\
    \            }\n        }\n        if (stack.isEmpty()) {\n            return\
    \ \"No\";\n        }\n        return \"Yes\";", "        Stack<String> stack =\
    \ new Stack<>();\n        boolean isGood = true;\n        for (String s : lst)\
    \ {\n            if (s.equals(\"(\")) {\n                stack.push(s);\n    \
    \        } else if (s.equals(\")\")) {\n                String top = stack.pop();\n\
    \                if (!top.equals(\"(\")) {\n                    isGood = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     if (isGood) {\n            return \"Yes\";\n        } else {\n         \
    \   return \"No\";\n        }", "        Stack<String> stack = new Stack<>();\n\
    \        boolean isGood = true;\n        for (String s : lst) {\n            if\
    \ (s.equals(\"(\")) {\n                stack.push(s);\n            } else if (s.equals(\"\
    )\")) {\n                while (!stack.isEmpty() && stack.peek().equals(\"(\"\
    )) {\n                    stack.pop();\n                }\n                if\
    \ (stack.isEmpty()) {\n                    isGood = false;\n                 \
    \   break;\n                }\n                stack.pop();\n            } else\
    \ {\n                isGood = false;\n                break;\n            }\n\
    \        }\n        if (isGood) {\n            return \"Yes\";\n        } else\
    \ {\n            return \"No\";\n        }"]
stop_tokens:
- "\n    }\n"
