language: java
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.isEmpty()) return\
    \ false;\n        boolean upper = false;\n        for (String key : keys) {\n\
    \            if (key.isUpperCase()) {\n                upper = true;\n       \
    \         break;\n            }\n        }\n        if (upper) return false;\n\
    \        for (String key : keys) {\n            if (!key.isLowerCase()) return\
    \ false;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxabxmmlk.java:28: error: cannot find symbol\n            if (key.isUpperCase())\
    \ {\n                   ^\n  symbol:   method isUpperCase()\n  location: variable\
    \ key of type String\n/tmp/tmpxabxmmlk.java:35: error: cannot find symbol\n  \
    \          if (!key.isLowerCase()) return false;\n                    ^\n  symbol:\
    \   method isLowerCase()\n  location: variable key of type String\n/tmp/tmpxabxmmlk.java:40:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxabxmmlk.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxabxmmlk.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxabxmmlk.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxabxmmlk.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpxabxmmlk.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(M"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) {\n                result = false;\n       \
    \         break;\n            }\n            try {\n                Integer.parseInt(value);\n\
    \            } catch (NumberFormatException nfe) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvtbr6vzf.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpvtbr6vzf.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpvtbr6vzf.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpvtbr6vzf.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpvtbr6vzf.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpvtbr6vzf.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (!(key instanceof String))\
    \ return false;\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2sq6yfck.java:34: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp2sq6yfck.java:35:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2sq6yfck.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2sq6yfck.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp2sq6yfck.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp2sq6yfck.java:39: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isDictCase = true;\n        if (dict.isEmpty()) {\n     \
    \       isDictCase = false;\n        } else {\n            Set<String> keys =\
    \ dict.keySet();\n            boolean isKeysStringInLowerCase = keys.stream().allMatch(key\
    \ -> key.toLowerCase().equals(key));\n            boolean isKeysStringInUpperCase\
    \ = keys.stream().allMatch(key -> key.toUpperCase().equals(key));\n          \
    \  isDictCase = isKeysStringInLowerCase || isKeysStringInUpperCase;\n        }\n\
    \        return isDictCase;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpatm6q7p0.java:36: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpatm6q7p0.java:37:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpatm6q7p0.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpatm6q7p0.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpatm6q7p0.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpatm6q7p0.java:41: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && !key.isEmpty() && value != null && !value.isEmpty())\
    \ {\n                if (key.toLowerCase().equals(value.toLowerCase())) {\n  \
    \                  result = true;\n                } else {\n                \
    \    result = false;\n                    break;\n                }\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprznnt8k7.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmprznnt8k7.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmprznnt8k7.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmprznnt8k7.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmprznnt8k7.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmprznnt8k7.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isDictCase = true;\n        if (dict.isEmpty()) {\n     \
    \       isDictCase = false;\n        } else {\n            Set<String> keys =\
    \ dict.keySet();\n            boolean isAllStringsLowerCase = true;\n        \
    \    boolean isAllStringsUpperCase = true;\n            for (String key : keys)\
    \ {\n                String value = dict.get(key);\n                if (value.isEmpty())\
    \ {\n                    isDictCase = false;\n                    break;\n   \
    \             }\n                char firstChar = value.charAt(0);\n         \
    \       char lastChar = value.charAt(value.length() - 1);\n                if\
    \ (firstChar >= 'A' && firstChar <= 'Z') {\n                    isAllStringsUpperCase\
    \ = false;\n                } else if (lastChar >= 'A' && lastChar <= 'Z') {\n\
    \                    isAllStringsLowerCase = false;\n                } else {\n\
    \                    isDictCase = false;\n                    break;\n       \
    \         }\n            }\n            if (isAllStringsLowerCase) {\n       \
    \         isDictCase = true;\n            } else if (isAllStringsUpperCase) {\n\
    \                isDictCase = true;\n            } else {\n                isDictCase\
    \ = false;\n            }\n        }\n        return isDictCase;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptb2ckbpy.java:59: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmptb2ckbpy.java:60:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptb2ckbpy.java:61: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptb2ckbpy.java:62: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmptb2ckbpy.java:63: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmptb2ckbpy.java:64: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                result = true;\n                break;\n            }\n \
    \           if(!key.isEmpty() && key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                result = true;\n                break;\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjm0nrd4i.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpjm0nrd4i.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjm0nrd4i.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjm0nrd4i.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjm0nrd4i.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpjm0nrd4i.java:48: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isDictCase = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && value != null && !key.isEmpty() && !value.isEmpty())\
    \ {\n                if (key.isEmpty() && value.isEmpty()) {\n               \
    \     isDictCase = false;\n                } else if (key.isEmpty() && !value.isEmpty())\
    \ {\n                    isDictCase = false;\n                } else if (!key.isEmpty()\
    \ && value.isEmpty()) {\n                    isDictCase = false;\n           \
    \     } else if (key.isEmpty() && !value.isEmpty()) {\n                    isDictCase\
    \ = true;\n                }\n            }\n        }\n        return isDictCase;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g6l6bd2.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp5g6l6bd2.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5g6l6bd2.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5g6l6bd2.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp5g6l6bd2.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp5g6l6bd2.java:48: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ {\n            return false;\n        }\n        boolean upper = false;\n  \
    \      boolean lower = false;\n        for (String key : keys) {\n           \
    \ String value = dict.get(key);\n            if (value.isEmpty()) {\n        \
    \        return false;\n            }\n            if (value.length() > 1) {\n\
    \                return false;\n            }\n            if (value.length()\
    \ == 1) {\n                char c = value.charAt(0);\n                if (Character.isUpperCase(c))\
    \ {\n                    upper = true;\n                } else if (Character.isLowerCase(c))\
    \ {\n                    lower = true;\n                }\n            }\n   \
    \     }\n        return upper && lower;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_n5m9p5r.java:50: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp_n5m9p5r.java:51:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_n5m9p5r.java:52: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_n5m9p5r.java:53: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp_n5m9p5r.java:54: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp_n5m9p5r.java:55: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value != null\
    \ && !value.isEmpty()) {\n                if (key.isEmpty() || key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                }\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps9uc2su3.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmps9uc2su3.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmps9uc2su3.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmps9uc2su3.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmps9uc2su3.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmps9uc2su3.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbn0xt1ju.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpbn0xt1ju.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isCase = true;\n        for(String key : dict.keySet()) {\n\
    \            isCase = isCase && (key.toLowerCase().equals(key));\n           \
    \ isCase = isCase && (key.toUpperCase().equals(key));\n        }\n        return\
    \ isCase;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz8x5h9nm.java:32: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpz8x5h9nm.java:33:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpz8x5h9nm.java:34: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpz8x5h9nm.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpz8x5h9nm.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpz8x5h9nm.java:37: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value != null && !value.isEmpty()) {\n                String\
    \ lowerCase = key.toLowerCase();\n                String upperCase = key.toUpperCase();\n\
    \                if (lowerCase.equals(upperCase)) {\n                    result\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv_8bz3ae.java:40: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpv_8bz3ae.java:41:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpv_8bz3ae.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpv_8bz3ae.java:43: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpv_8bz3ae.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpv_8bz3ae.java:45: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value == null\
    \ || value.isEmpty()) {\n                result = false;\n                break;\n\
    \            }\n            if (value.toLowerCase().equals(key)) {\n         \
    \       result = true;\n                break;\n            }\n            if\
    \ (value.toUpperCase().equals(key)) {\n                result = true;\n      \
    \          break;\n            }\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5x6m5nn.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpe5x6m5nn.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpe5x6m5nn.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpe5x6m5nn.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpe5x6m5nn.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpe5x6m5nn.java:48: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi8jcl4i1.java:26: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpi8jcl4i1.java:26: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpi8jcl4i1.java:34: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi8jcl4i1.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi8jcl4i1.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi8jcl4i1.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi8jcl4i1.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpi8jcl4i1.java:39: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbn0xt1ju.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpbn0xt1ju.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (!(key instanceof String)) {\n                result = false;\n\
    \                break;\n            }\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                result = false;\n    \
    \            break;\n            }\n            if (value.length() == 1) {\n \
    \               char firstChar = value.charAt(0);\n                if (Character.isLowerCase(firstChar))\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n                if (Character.isUpperCase(firstChar)) {\n        \
    \            result = true;\n                    break;\n                }\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc59jvxy5.java:50: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpc59jvxy5.java:51:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpc59jvxy5.java:52: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpc59jvxy5.java:53: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpc59jvxy5.java:54: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpc59jvxy5.java:55: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) return result;\n\
    \        Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            String value = dict.get(key);\n            if (key != null && value\
    \ != null && !key.isEmpty() && !value.isEmpty()) {\n                boolean lowerCase\
    \ = key.toLowerCase().equals(value);\n                boolean upperCase = key.toUpperCase().equals(value);\n\
    \                result = result && (lowerCase || upperCase);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8imgfiny.java:38: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmp8imgfiny.java:39:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8imgfiny.java:40: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8imgfiny.java:41: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmp8imgfiny.java:42: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmp8imgfiny.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            if (key.isEmpty()) {\n          \
    \      return result;\n            }\n            String lowerKey = key.toLowerCase();\n\
    \            String upperKey = key.toUpperCase();\n            if (!dict.containsKey(lowerKey)\
    \ && !dict.containsKey(upperKey)) {\n                return result;\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjvwuuoio.java:42: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpjvwuuoio.java:43:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjvwuuoio.java:44: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjvwuuoio.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjvwuuoio.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpjvwuuoio.java:47: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) {\n                result = false;\n       \
    \         break;\n            }\n            char firstChar = value.charAt(0);\n\
    \            char secondChar = value.charAt(1);\n            if (firstChar >=\
    \ 'A' && firstChar <= 'Z') {\n                if (secondChar >= 'a' && secondChar\
    \ <= 'z') {\n                    result = true;\n                    break;\n\
    \                }\n            } else {\n                if (secondChar >= 'a'\
    \ && secondChar <= 'z') {\n                    result = false;\n             \
    \       break;\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxy27uqo7.java:52: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpxy27uqo7.java:53:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxy27uqo7.java:54: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxy27uqo7.java:55: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpxy27uqo7.java:56: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpxy27uqo7.java:57: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbn0xt1ju.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpbn0xt1ju.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String value = dict.get(key);\n \
    \           if (key.isEmpty()) {\n                return result;\n           \
    \ }\n            if (key.isEmpty() || key.isEmpty()) {\n                return\
    \ result;\n            }\n            if (key.isEmpty() || key.isEmpty()) {\n\
    \                return result;\n            }\n            if (key.isEmpty()\
    \ || key.isEmpty()) {\n                return result;\n            }\n       \
    \     if (key.isEmpty() || key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty() || key.isEmpty()) {\n          \
    \      return result;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                return result;\n            }\n            if (key.isEmpty()\
    \ || key.isEmpty()) {\n                return result;\n            }\n       \
    \     if (key.isEmpty() || key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty() || key.isEmpty()) {\n          \
    \      return result;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                return result;\n            }\n            if (key.isEmpty()\
    \ || key.isEmpty()) {\n                return result;\n            }\n       \
    \     if (key.isEmpty() || key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty() || key.isEmpty()) {\n          \
    \      return result;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                return result;\n            }\n            if (key.isEmpty()\
    \ || key.isEmpty()) {\n                return result;\n            }\n       \
    \     if (key.isEmpty() || key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty() || key.isEmpty()) {\n          \
    \      return result;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                return result;\n            }\n            if (key.isEmpty()\
    \ || key.isEmpty()) {\n                return result;\n            }\n       \
    \     if (key.isEmpty() || key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty() || key.isEmpty()) {\n          \
    \      return result;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                return result;\n            }\n            if (key.isEmpty()\
    \ || key.isEmpty()) {\n                return result;\n            }\n       \
    \     if (key.isEmpty() || key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty() || key.isEmpty()) {\n          \
    \      return result;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                return result;\n            }\n            if (key.isEmpty()\
    \ || key.isEmpty()) {\n                return result;\n            }\n       \
    \     if (key.isEmpty() || key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty() || key.isEmpty()) {\n          \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnx7zfzow.java:121: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659800000
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (!key.isLowerCase() && !key.isUpperCase())\
    \ return false;\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcmikxzn.java:27: error: cannot find symbol\n            if (!key.isLowerCase()\
    \ && !key.isUpperCase()) return false;\n                    ^\n  symbol:   method\
    \ isLowerCase()\n  location: variable key of type String\n/tmp/tmphcmikxzn.java:27:\
    \ error: cannot find symbol\n            if (!key.isLowerCase() && !key.isUpperCase())\
    \ return false;\n                                          ^\n  symbol:   method\
    \ isUpperCase()\n  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String value = dict.get(key);\n \
    \           if (value == null) {\n                return result;\n           \
    \ }\n            if (key.isLowerCase()) {\n                if (!value.isLowerCase())\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n            } else if (key.isUpperCase()) {\n                if (!value.isUpperCase())\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n            } else {\n                result = false;\n         \
    \       break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdatzm7a5.java:34: error: cannot find symbol\n            if (key.isLowerCase())\
    \ {\n                   ^\n  symbol:   method isLowerCase()\n  location: variable\
    \ key of type String\n/tmp/tmpdatzm7a5.java:35: error: cannot find symbol\n  \
    \              if (!value.isLowerCase()) {\n                          ^\n  symbol:\
    \   method isLowerCase()\n  location: variable value of type String\n/tmp/tmpdatzm7a5.java:39:\
    \ error: cannot find symbol\n            } else if (key.isUpperCase()) {\n   \
    \                       ^\n  symbol:   method isUpperCase()\n  location: variable\
    \ key of type String\n/tmp/tmpdatzm7a5.java:40: error: cannot find symbol\n  \
    \              if (!value.isUpperCase()) {\n                          ^\n  symbol:\
    \   method isUpperCase()\n  location: variable value of type String\n4 errors\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isCaseSensitive = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String lowerCaseKey = key.toLowerCase();\n\
    \            String upperCaseKey = key.toUpperCase();\n            if (lowerCaseKey.equals(upperCaseKey))\
    \ {\n                isCaseSensitive = false;\n                break;\n      \
    \      }\n        }\n        return isCaseSensitive;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_7bywxy4.java:38)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.stream().allMatch(key -> key.isEmpty())) return false;\n   \
    \     if (keys.stream().allMatch(key -> key.isEmpty())) return false;\n      \
    \  Set<String> upperCaseKeys = keys.stream().filter(key -> key.isEmpty() || key.toUpperCase().equals(key)).collect(Collectors.toSet());\n\
    \        Set<String> lowerCaseKeys = keys.stream().filter(key -> key.isEmpty()\
    \ || key.toLowerCase().equals(key)).collect(Collectors.toSet());\n        return\
    \ upperCaseKeys.equals(lowerCaseKeys);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp55asu_s6.java:33)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict == null || dict.size() ==\
    \ 0) {\n            return result;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && value != null && !key.isEmpty() && !value.isEmpty())\
    \ {\n                if (key.isEmpty() && value.isEmpty()) {\n               \
    \     result = true;\n                } else if (key.isEmpty() && !value.isEmpty())\
    \ {\n                    result = false;\n                } else if (!key.isEmpty()\
    \ && value.isEmpty()) {\n                    result = false;\n               \
    \ } else if (key.isEmpty() && !value.isEmpty()) {\n                    result\
    \ = true;\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2b6avon1.java:47)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     Set<String> keys = dict.keySet();\n        for (String key : keys) {\n \
    \           if (key.isEmpty()) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp294lqivk.java:37)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value == null)\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (value.length() > 1) {\n                result = false;\n    \
    \            break;\n            }\n            char firstChar = value.charAt(0);\n\
    \            char secondChar = value.charAt(1);\n            if (firstChar >=\
    \ 'A' && firstChar <= 'Z') {\n                if (secondChar >= 'a' && secondChar\
    \ <= 'z') {\n                    result = true;\n                    break;\n\
    \                }\n            } else if (firstChar >= 'a' && firstChar <= 'z')\
    \ {\n                if (secondChar >= 'A' && secondChar <= 'Z') {\n         \
    \           result = true;\n                    break;\n                }\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl_46pb6a.java:52)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        boolean isUpperCase = true;\n        for (String key : keys) {\n    \
    \        String value = dict.get(key);\n            if (value != null && !value.isEmpty())\
    \ {\n                if (value.length() > 1) {\n                    isUpperCase\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n        return isUpperCase;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpazdjdxd_.java:39)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() \n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmy1aolsf.java:56: error: ')' expected\n            if (key.isEmpty()\
    \ \n                             ^\n/tmp/tmpmy1aolsf.java:57: error: illegal start\
    \ of statement\n    }\n    ^\n/tmp/tmpmy1aolsf.java:58: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659800000
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi8jcl4i1.java:26: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpi8jcl4i1.java:26: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpi8jcl4i1.java:34: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi8jcl4i1.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi8jcl4i1.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi8jcl4i1.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi8jcl4i1.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpi8jcl4i1.java:39: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String value = dict.get(key);\n \
    \           if (key != null && key.isEmpty() && !value.isEmpty()) {\n        \
    \        return result;\n            }\n            if (value != null && !value.isEmpty())\
    \ {\n                char firstChar = value.charAt(0);\n                if (firstChar\
    \ >= 'a' && firstChar <= 'z') {\n                    result = true;\n        \
    \        } else if (firstChar >= 'A' && firstChar <= 'Z') {\n                \
    \    result = true;\n                } else {\n                    result = false;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw_nx67ky.java:49)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ return false;\n        boolean allUpper = true;\n        boolean allLower =\
    \ true;\n        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) return false;\n            allUpper = allUpper\
    \ && value.toUpperCase().equals(value);\n            allLower = allLower && value.toLowerCase().equals(value);\n\
    \        }\n        return allUpper && allLower;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1eo86eoq.java:37)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keys = dict.keySet();\n \
    \       for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value == null) {\n                result = false;\n         \
    \       break;\n            }\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                continue;\n            }\n            if (value.equals(lowerCase))\
    \ {\n                result = true;\n                break;\n            }\n \
    \           if (value.equals(upperCase)) {\n                result = true;\n \
    \               break;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphqduy7c7.java:53)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     Set<String> keys = dict.keySet();\n        for (String key : keys) {\n \
    \           if (key.isEmpty()) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp294lqivk.java:37)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                result = false;\n                break;\n            } else\
    \ if(!key.isEmpty() && key.toUpperCase().equals(value.toUpperCase())) {\n    \
    \            result = false;\n                break;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqgfhnc7p.java:39)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpha9cd76e.java:33)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi8jcl4i1.java:26: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpi8jcl4i1.java:26: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpi8jcl4i1.java:34: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi8jcl4i1.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi8jcl4i1.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi8jcl4i1.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi8jcl4i1.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpi8jcl4i1.java:39: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keySet = dict.keySet();\n\
    \        for (String key : keySet) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return result;\n\
    \            }\n            try {\n                String lowerCaseKey = key.toLowerCase();\n\
    \                String upperCaseKey = key.toUpperCase();\n                if\
    \ (lowerCaseKey.equals(upperCaseKey)) {\n                    result = false;\n\
    \                    break;\n                }\n            } catch (Exception\
    \ e) {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprq1mrxhq.java:50)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String value = dict.get(key);\n \
    \           if (key != null && value != null && !key.isEmpty() && !value.isEmpty())\
    \ {\n                boolean isUpper = Character.isUpperCase(value.charAt(0));\n\
    \                boolean isLower = Character.isLowerCase(value.charAt(0));\n \
    \               if (isUpper != isLower) {\n                    result = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpva9qdeub.java:43)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            boolean isUpper =\
    \ Character.isUpperCase(value.charAt(0));\n            boolean isLower = Character.isLowerCase(value.charAt(0));\n\
    \            if (!isUpper && !isLower) {\n                result = false;\n  \
    \              break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbvgt0seh.java:43)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict == null || dict.size() ==\
    \ 0) {\n            return result;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && value != null && !key.isEmpty() && !value.isEmpty())\
    \ {\n                boolean upperCase = Character.isUpperCase(key.charAt(0));\n\
    \                boolean lowerCase = Character.isLowerCase(key.charAt(0));\n \
    \               if (upperCase != lowerCase) {\n                    result = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppwyh43ju.java:43)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.size() > 0) {\n            for (String key : keys) {\n     \
    \           String value = dict.get(key);\n                if (key != null &&\
    \ value != null) {\n                    result = checkDictCase(value, key);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy1a941go.java:30: error: method checkDictCase in class Problem\
    \ cannot be applied to given types;\n                    result = checkDictCase(value,\
    \ key);\n                             ^\n  required: HashMap<String,String>\n\
    \  found:    String,String\n  reason: actual and formal argument lists differ\
    \ in length\n1 error\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerKey = key.toLowerCase();\n\
    \            String upperKey = key.toUpperCase();\n            if (dict.containsKey(lowerKey))\
    \ {\n                if (dict.get(lowerKey).equals(upperKey)) {\n            \
    \        result = true;\n                    break;\n                }\n     \
    \       }\n            if (dict.containsKey(upperKey)) {\n                if (dict.get(upperKey).equals(lowerKey))\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr9dbfjb9.java:49)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(key.toLowerCase().equals(value.toLowerCase())) {\n   \
    \                 result = true;\n                    break;\n               \
    \ }\n                else if(key.toUpperCase().equals(value.toUpperCase())) {\n\
    \                    result = true;\n                    break;\n            \
    \    }\n                else {\n                    result = false;\n        \
    \            break;\n                }\n            }\n            else {\n  \
    \              result = false;\n                break;\n            }\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptnl2u4g8.java:49)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (!(key instanceof String))\
    \ return false;\n            String value = dict.get(key);\n            if (value.isEmpty())\
    \ return false;\n            if (value.length() > 1) return false;\n         \
    \   char firstChar = value.charAt(0);\n            if (firstChar >= 'a' && firstChar\
    \ <= 'z') return false;\n            if (firstChar >= 'A' && firstChar <= 'Z')\
    \ return false;\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp03p7zwmh.java:38)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.isEmpty() && !key.equalsIgnoreCase(key.trim())) {\n           \
    \     result = false;\n                break;\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnqxi4q2o.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     boolean isStringInLowerCase = true;\n        boolean isStringInUpperCase\
    \ = true;\n        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                isStringInLowerCase =\
    \ false;\n            }\n            if (value.length() > 1) {\n             \
    \   isStringInUpperCase = false;\n            }\n        }\n        result = isStringInLowerCase\
    \ && isStringInUpperCase;\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3mbsc_vx.java:44)\n"
  stdout: ''
  timestamp: 1659800002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value != null && !value.isEmpty()) {\n                try {\n\
    \                    Integer.parseInt(value);\n                } catch (NumberFormatException\
    \ nfe) {\n                    result = false;\n                }\n           \
    \ }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphzj49sn7.java:39)\n"
  stdout: ''
  timestamp: 1659800002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.isEmpty() && key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if(!key.isEmpty() && value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.isEmpty() && !value.isEmpty()) {\n                if(!key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72lc90_w.java:49)\n"
  stdout: ''
  timestamp: 1659800002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     result = false;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        boolean allStrings = true;\n        for (String key : keys) {\n     \
    \       String value = dict.get(key);\n            if (key != null && value !=\
    \ null && !key.isEmpty() && !value.isEmpty()) {\n                allStrings =\
    \ allStrings && key.isLowerCase() || key.isUpperCase();\n            }\n     \
    \   }\n        result = result && allStrings;\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqo9qfzu0.java:33: error: cannot find symbol\n                allStrings\
    \ = allStrings && key.isLowerCase() || key.isUpperCase();\n                  \
    \                            ^\n  symbol:   method isLowerCase()\n  location:\
    \ variable key of type String\n/tmp/tmpqo9qfzu0.java:33: error: cannot find symbol\n\
    \                allStrings = allStrings && key.isLowerCase() || key.isUpperCase();\n\
    \                                                                   ^\n  symbol:\
    \   method isUpperCase()\n  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659800002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \        }\n        Set<String> keySet = dict.keySet();\n        for (String key\
    \ : keySet) {\n            if (key.isEmpty()) return false;\n        }\n     \
    \   return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00j3m0mg.java:37)\n"
  stdout: ''
  timestamp: 1659800002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        boolean upperCase = keys.stream().map(String::toUpperCase).allMatch(s\
    \ -> dict.containsKey(s));\n        boolean lowerCase = keys.stream().map(String::toLowerCase).allMatch(s\
    \ -> dict.containsKey(s));\n        return upperCase && lowerCase;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzm7vyrxv.java:31)\n"
  stdout: ''
  timestamp: 1659800002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean allLowercase =\
    \ true;\n        boolean allUppercase = true;\n        for (String key : keys)\
    \ {\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) {\n                allLowercase = false;\n            }\n            if\
    \ (value.length() > 1) {\n                allUppercase = false;\n            }\n\
    \        }\n        return allLowercase && allUppercase;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfqsx9jxk.java:39)\n"
  stdout: ''
  timestamp: 1659800002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (!(key instanceof String))\
    \ return false;\n            String value = dict.get(key);\n            if (value.isEmpty())\
    \ return false;\n            if (key.isEmpty() || key.isEmpty()) return false;\n\
    \            if (key.isEmpty() || key.isEmpty()) return false;\n        }\n  \
    \      return true;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp92stzd9o.java:37)\n"
  stdout: ''
  timestamp: 1659800002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ return false;\n        for (String key : keys) {\n            if (key.isEmpty())\
    \ return false;\n            String lower = key.toLowerCase();\n            String\
    \ upper = key.toUpperCase();\n            if (!lower.equals(upper)) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0o9reo4.java:35)\n"
  stdout: ''
  timestamp: 1659800002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvxkj9wk5.java:41)\n"
  stdout: ''
  timestamp: 1659800002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String value = dict.get(key);\n \
    \           if (key != null && !key.isEmpty() && !value.isEmpty()) {\n       \
    \         if (key.isEmpty() || value.isEmpty()) {\n                    result\
    \ = false;\n                } else {\n                    result = key.toLowerCase().equals(value.toLowerCase());\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2nce1pwc.java:42)\n"
  stdout: ''
  timestamp: 1659800002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isCase = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key: keys) {\n            String value = dict.get(key);\n\
    \            if(key.isEmpty() || value.isEmpty()) {\n                return false;\n\
    \            }\n            isCase = isCase && (key.toLowerCase().equals(value.toLowerCase()));\n\
    \            isCase = isCase && (key.toUpperCase().equals(value.toUpperCase()));\n\
    \        }\n        return isCase;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxicdab5.java:37)\n"
  stdout: ''
  timestamp: 1659800002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String value = dict.get(key);\n \
    \           if (key != null && value != null) {\n                if (key.isEmpty()\
    \ || value.isEmpty()) {\n                    return result;\n                }\n\
    \                char firstChar = key.charAt(0);\n                char lastChar\
    \ = value.charAt(value.length() - 1);\n                if (firstChar >= 'A' &&\
    \ firstChar <= 'Z') {\n                    if (lastChar >= 'A' && lastChar <=\
    \ 'Z') {\n                        result = true;\n                    }\n    \
    \            } else if (firstChar >= 'a' && firstChar <= 'z') {\n            \
    \        if (lastChar >= 'a' && lastChar <= 'z') {\n                        result\
    \ = true;\n                    }\n                } else {\n                 \
    \   result = false;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyn4p1z79.java:54)\n"
  stdout: ''
  timestamp: 1659800002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isCase = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            isCase = isCase && (key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphpa6e1l3.java:27: error: ')' expected\n            isCase = isCase\
    \ && (key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty\n                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                        "
  stdout: ''
  timestamp: 1659800002
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            if (key.toLowerCase().equals(key))\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (key.toUpperCase().equals(key)) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4_g_cx11.java:42)\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            if(!key.isLowerCase() && !key.isUpperCase()) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi8jcl4i1.java:26: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpi8jcl4i1.java:26: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpi8jcl4i1.java:34: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi8jcl4i1.java:35: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi8jcl4i1.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi8jcl4i1.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpi8jcl4i1.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpi8jcl4i1.java:39: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && !value.isEmpty()) {\n                if(key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = true;\n                } else if(key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                }\n            } else {\n        \
    \        result = false;\n            }\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcyxz3xp6.java:43)\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) return result;\n\
    \        Set<String> keys = dict.keySet();\n        for (String key : keys) {\n\
    \            String value = dict.get(key);\n            if (key != null && !key.isEmpty()\
    \ && !key.toLowerCase().equals(key) && !key.toUpperCase().equals(key)) {\n   \
    \             result = false;\n                break;\n            }\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9suow805.java:38)\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprdy2hqqt.java:33)\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String value = dict.get(key);\n \
    \           if (key.isEmpty()) {\n                return result;\n           \
    \ }\n            if (key.isEmpty() || key.isEmpty()) {\n                return\
    \ result;\n            }\n            if (key.isEmpty() || key.isEmpty()) {\n\
    \                return result;\n            }\n            if (key.isEmpty()\
    \ || key.isEmpty()) {\n                return result;\n            }\n       \
    \     if (key.isEmpty() || key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty() || key.isEmpty()) {\n          \
    \      return result;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                return result;\n            }\n            if (key.isEmpty()\
    \ || key.isEmpty()) {\n                return result;\n            }\n       \
    \     if (key.isEmpty() || key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty() || key.isEmpty()) {\n          \
    \      return result;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                return result;\n            }\n            if (key.isEmpty()\
    \ || key.isEmpty()) {\n                return result;\n            }\n       \
    \     if (key.isEmpty() || key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty() || key.isEmpty()) {\n          \
    \      return result;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                return result;\n            }\n            if (key.isEmpty()\
    \ || key.isEmpty()) {\n                return result;\n            }\n       \
    \     if (key.isEmpty() || key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty() || key.isEmpty()) {\n          \
    \      return result;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                return result;\n            }\n            if (key.isEmpty()\
    \ || key.isEmpty()) {\n                return result;\n            }\n       \
    \     if (key.isEmpty() || key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty() || key.isEmpty()) {\n          \
    \      return result;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                return result;\n            }\n            if (key.isEmpty()\
    \ || key.isEmpty()) {\n                return result;\n            }\n       \
    \     if (key.isEmpty() || key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty() || key.isEmpty()) {\n          \
    \      return result;\n            }\n            if (key.isEmpty() || key.isEmpty())\
    \ {\n                return result;\n            }\n            if (key.isEmpty()\
    \ || key.isEmpty()) {\n                return result;\n            }\n       \
    \     if (key.isEmpty() || key.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty() || key.isEmpty()) {\n          \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnx7zfzow.java:121: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659800000
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ return false;\n        for (String key : keys) {\n            String value =\
    \ dict.get(key);\n            if (value != null && !value.isEmpty()) {\n     \
    \           String lowerCase = key.toLowerCase();\n                String upperCase\
    \ = key.toUpperCase();\n                if (lowerCase.equals(upperCase)) return\
    \ true;\n            }\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuaswkd4i.java:37)\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbn0xt1ju.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpbn0xt1ju.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     Set<String> keys = dict.keySet();\n        boolean isStringInLowerCase =\
    \ keys.stream().allMatch(key -> key.toLowerCase().equals(key));\n        boolean\
    \ isStringInUpperCase = keys.stream().allMatch(key -> key.toUpperCase().equals(key));\n\
    \        return isStringInLowerCase && isStringInUpperCase;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpto3vilzq.java:33)\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String lowerKey = key.toLowerCase();\n\
    \            String upperKey = key.toUpperCase();\n            if (!dict.containsKey(lowerKey))\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (!dict.containsKey(upperKey)) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpefnci7od.java:44)\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbn0xt1ju.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpbn0xt1ju.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.isEmpty()) return\
    \ false;\n        Set<String> lowerCaseKeys = new HashSet<>(keys);\n        lowerCaseKeys.removeAll(dict.keySet());\n\
    \        Set<String> upperCaseKeys = new HashSet<>(keys);\n        upperCaseKeys.removeAll(lowerCaseKeys);\n\
    \        return lowerCaseKeys.isEmpty() && upperCaseKeys.isEmpty();\n    }\n \
    \   public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps28oxmm4.java:33)\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keySet = dict.keySet();\n \
    \       for (String key : keySet) {\n            String value = dict.get(key);\n\
    \            if (key != null && value != null && !key.isEmpty() && !value.isEmpty())\
    \ {\n                if (key.isEmpty() || value.isEmpty()) {\n               \
    \     result = false;\n                    break;\n                }\n       \
    \         boolean isUpperCase = Character.isUpperCase(key.charAt(0));\n      \
    \          boolean isLowerCase = Character.isLowerCase(key.charAt(0));\n     \
    \           if (isUpperCase) {\n                    result = isLowerCase;\n  \
    \              } else if (isLowerCase) {\n                    result = isUpperCase;\n\
    \                } else {\n                    result = false;\n             \
    \       break;\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp99s9qz81.java:51)\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict == null || dict.size() ==\
    \ 0) {\n            return result;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbyg10nri.java:41)\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ return false;\n        boolean allStrings = true;\n        for (String key :\
    \ keys) {\n            String value = dict.get(key);\n            if (value !=\
    \ null && !value.isEmpty()) {\n                allStrings = false;\n         \
    \       break;\n            }\n        }\n        return allStrings;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbxaodz1d.java:37)\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllStrings =\
    \ keys.stream().allMatch(key -> key.isEmpty() || key.isLowerCase());\n       \
    \ boolean isAllStringsUpper = keys.stream().allMatch(key -> key.isEmpty() || key.isUpperCase());\n\
    \        return isAllStrings || isAllStringsUpper;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnowqs3jv.java:25: error: cannot find symbol\n        boolean isAllStrings\
    \ = keys.stream().allMatch(key -> key.isEmpty() || key.isLowerCase());\n     \
    \                                                                            ^\n\
    \  symbol:   method isLowerCase()\n  location: variable key of type String\n/tmp/tmpnowqs3jv.java:26:\
    \ error: cannot find symbol\n        boolean isAllStringsUpper = keys.stream().allMatch(key\
    \ -> key.isEmpty() || key.isUpperCase());\n                                  \
    \                                                    ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n2 errors\n"
  stdout: ''
  timestamp: 1659800003
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \            String lowerKey = key.toLowerCase();\n            String upperKey\
    \ = key.toUpperCase();\n            if (!dict.containsKey(lowerKey) && !dict.containsKey(upperKey))\
    \ return false;\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbu7y59rt.java:36)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && value != null && !key.isEmpty() && !value.isEmpty())\
    \ {\n                boolean upperCase = Character.isUpperCase(value.charAt(0));\n\
    \                boolean lowerCase = Character.isLowerCase(value.charAt(0));\n\
    \                if (upperCase != lowerCase) {\n                    result = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvz4w2w4q.java:40)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value == null || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if (value.toLowerCase().equals(value))\
    \ {\n                result = true;\n                break;\n            }\n \
    \           if (value.toUpperCase().equals(value)) {\n                result =\
    \ true;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt6rg8ggd.java:45)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                result = true;\n                break;\n            }\n \
    \           if(!key.isEmpty() && key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                result = true;\n                break;\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjm0nrd4i.java:43: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n/tmp/tmpjm0nrd4i.java:44:\
    \ error: cannot find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \                                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjm0nrd4i.java:45: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjm0nrd4i.java:46: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpjm0nrd4i.java:47: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpjm0nrd4i.java:48: error: cannot find symbol\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n                                                        ^\n  symbol:\
    \   method of(String,String,String,String)\n  location: interface Map\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                result = true;\n            } else if(!key.isEmpty() && key.toUpperCase().equals(value.toUpperCase()))\
    \ {\n                result = true;\n            } else {\n                result\
    \ = false;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvi33q9w7.java:38)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.isEmpty()) return false;\n        boolean isUpperCase = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value != null && !value.isEmpty()) {\n                if (value.length()\
    \ > 1) {\n                    isUpperCase = false;\n                    break;\n\
    \                }\n            }\n        }\n        return isUpperCase;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7sxjkyik.java:40)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict == null || dict.size() ==\
    \ 0) {\n            return result;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return result;\n\
    \            }\n            try {\n                Integer.parseInt(key);\n  \
    \              Integer.parseInt(value);\n            } catch (NumberFormatException\
    \ nfe) {\n                result = false;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqyvvlyty.java:44)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        Set<String> keySet = dict.keySet();\n\
    \        for (String key : keySet) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return result;\n\
    \            }\n            if (key.isEmpty()) {\n                return false;\n\
    \            }\n            if (value.isEmpty()) {\n                return false;\n\
    \            }\n            char firstChar = key.charAt(0);\n            char\
    \ secondChar = value.charAt(0);\n            if (firstChar != secondChar) {\n\
    \                return result;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjmos_skg.java:50)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.toLowerCase().equals(value.toLowerCase())) {\n          \
    \      result = false;\n                break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvpc6gg3m.java:39)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (!(key instanceof String))\
    \ {\n                return false;\n            }\n            String lowerCase\
    \ = key.toLowerCase();\n            String upperCase = key.toUpperCase();\n  \
    \          if (lowerCase.equals(upperCase)) {\n                continue;\n   \
    \         }\n            return false;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg4csiswp.java:40)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \            String lowerKey = key.toLowerCase();\n            String upperKey\
    \ = key.toUpperCase();\n            if (!dict.containsKey(lowerKey) && !dict.containsKey(upperKey))\
    \ return false;\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbu7y59rt.java:36)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        boolean isAllUpperCase = true;\n        boolean isAllLowerCase = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) return false;\n            if (value.length()\
    \ > 1) {\n                isAllUpperCase = false;\n                isAllLowerCase\
    \ = false;\n                break;\n            }\n            char firstChar\
    \ = value.charAt(0);\n            if (firstChar >= 'A' && firstChar <= 'Z') {\n\
    \                isAllUpperCase = false;\n            } else if (firstChar >=\
    \ 'a' && firstChar <= 'z') {\n                isAllLowerCase = false;\n      \
    \      }\n        }\n        return isAllUpperCase && isAllLowerCase;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3er1xbr3.java:46)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        boolean isLowerCase = true;\n        boolean isUpperCase = true;\n  \
    \      for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value != null && !value.isEmpty()) {\n                isLowerCase\
    \ = isLowerCase && value.toLowerCase().equals(key);\n                isUpperCase\
    \ = isUpperCase && value.toUpperCase().equals(key);\n            }\n        }\n\
    \        return isLowerCase && isUpperCase;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk86rgqvf.java:38)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if(!key.isEmpty()\
    \ && key.toLowerCase().equals(value.toLowerCase())) {\n                result\
    \ = true;\n                break;\n            }\n            if(!key.isEmpty()\
    \ && key.toUpperCase().equals(value.toUpperCase())) {\n                result\
    \ = true;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbuvtbybw.java:45)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!(value instanceof\
    \ String)) {\n                result = false;\n                break;\n      \
    \      }\n            String lowerCase = key.toLowerCase();\n            String\
    \ upperCase = key.toUpperCase();\n            if(lowerCase.equals(upperCase))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2rlvtje7.java:42)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isUpper = keys.stream().anyMatch(s\
    \ -> s.equalsIgnoreCase(s.toUpperCase()));\n        boolean isLower = keys.stream().anyMatch(s\
    \ -> s.equalsIgnoreCase(s.toLowerCase()));\n        return isUpper && isLower;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1nfcbutg.java:31)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbn0xt1ju.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpbn0xt1ju.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && key.isEmpty() && !value.isEmpty()) return false;\n\
    \            if (value != null && value.isEmpty() && !key.isEmpty()) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0oqgj4hv.java:35)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (dict.get(key) != null && !dict.get(key).equals(key))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpde2xox0i.java:35)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     Set<String> keys = dict.keySet();\n        boolean allLowerCase = true;\n\
    \        boolean allUpperCase = true;\n        for (String key : keys) {\n   \
    \         String value = dict.get(key);\n            if (value.isEmpty()) {\n\
    \                return false;\n            }\n            char firstChar = value.charAt(0);\n\
    \            if (Character.isLowerCase(firstChar)) {\n                allLowerCase\
    \ = false;\n            }\n            if (Character.isUpperCase(firstChar)) {\n\
    \                allUpperCase = false;\n            }\n        }\n        return\
    \ allLowerCase && allUpperCase;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw7hq4b0u.java:46)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpha9cd76e.java:33)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && value != null && key.isEmpty() || key != null\
    \ && value != null && key.isEmpty() || key != null && value != null && key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu2bo9kfe.java:37)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!(value instanceof String)) {\n                result = false;\n\
    \                break;\n            }\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if(lowerCase.equals(upperCase))\
    \ {\n                result = true;\n                break;\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwn2fcnq0.java:43)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     boolean isAllUpperCase = true;\n        boolean isAllLowerCase = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                isAllUpperCase = false;\n\
    \            }\n            if (value.length() < 1) {\n                isAllLowerCase\
    \ = false;\n            }\n        }\n        if (isAllUpperCase) {\n        \
    \    result = true;\n        } else if (isAllLowerCase) {\n            result\
    \ = false;\n        } else {\n            result = true;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkkzfr24l.java:50)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            try {\n         \
    \       String lowerCase = key.toLowerCase();\n                String upperCase\
    \ = key.toUpperCase();\n                if (lowerCase.equals(upperCase)) {\n \
    \                   continue;\n                }\n                String lowerCaseValue\
    \ = value.toLowerCase();\n                String upperCaseValue = value.toUpperCase();\n\
    \                if (lowerCaseValue.equals(upperCaseValue)) {\n              \
    \      continue;\n                }\n            } catch (Exception e) {\n   \
    \             result = false;\n                break;\n            }\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxr685czo.java:52)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keySet = dict.keySet();\n        if (keySet.isEmpty())\
    \ return false;\n        boolean allLowercase = true;\n        boolean allUppercase\
    \ = true;\n        for (String key : keySet) {\n            String value = dict.get(key);\n\
    \            if (value.isEmpty()) return false;\n            if (value.length()\
    \ > 1) {\n                allLowercase = false;\n            }\n            if\
    \ (value.length() > 1) {\n                allUppercase = false;\n            }\n\
    \        }\n        return allLowercase && allUppercase;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8rda2snq.java:41)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ return false;\n        boolean isAllUpper = true;\n        boolean isAllLower\
    \ = true;\n        for (String key : keys) {\n            isAllUpper = isAllUpper\
    \ && Character.isUpperCase(key.charAt(0));\n            isAllLower = isAllLower\
    \ && Character.isLowerCase(key.charAt(0));\n        }\n        return isAllUpper\
    \ && isAllLower;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmhnomv3b.java:35)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \            if (key.toLowerCase().equals(key)) return true;\n            if (key.toUpperCase().equals(key))\
    \ return true;\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7lu_lerw.java:35)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = false;\n                } else if(!key.isEmpty()\
    \ && key.toUpperCase().equals(value.toUpperCase())) {\n                    result\
    \ = false;\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiji4bnyb.java:39)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String value = dict.get(key);\n \
    \           if (value.isEmpty()) {\n                result = false;\n        \
    \        break;\n            }\n            try {\n                Integer.parseInt(value);\n\
    \            } catch (NumberFormatException nfe) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnflyxwuy.java:45)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpha9cd76e.java:33)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict == null || dict.size() ==\
    \ 0) {\n            return result;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && value != null && !key.isEmpty() && !value.isEmpty())\
    \ {\n                boolean isUpper = Character.isUpperCase(key.charAt(0));\n\
    \                boolean isLower = Character.isLowerCase(key.charAt(0));\n   \
    \             if (isUpper != isLower) {\n                    result = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvakdzuv2.java:43)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ return false;\n        boolean isUpperCase = true;\n        for (String key\
    \ : keys) {\n            if (Character.isUpperCase(key.charAt(0)) == false) isUpperCase\
    \ = false;\n        }\n        if (isUpperCase) return true;\n        boolean\
    \ isLowerCase = true;\n        for (String key : keys) {\n            if (Character.isLowerCase(key.charAt(0))\
    \ == false) isLowerCase = false;\n        }\n        return isLowerCase;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq2zyhki8.java:41)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isString = true;\n\
    \        for (String key : keys) {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\
    \")) {\n                isString = false;\n                break;\n          \
    \  }\n        }\n        return isString;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpycbz1aod.java:35)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key != null &&\
    \ value != null && !key.isEmpty() && !value.isEmpty()) {\n                if (key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          } else {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1mz3ptv7.java:42)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isCaseSensitive = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (isCaseSensitive) {\n                if (key.isEmpty() || value.isEmpty())\
    \ {\n                    return false;\n                }\n                isCaseSensitive\
    \ = key.isEmpty() && value.isEmpty();\n            } else {\n                if\
    \ (key.isEmpty() || value.isEmpty()) {\n                    return false;\n  \
    \              }\n                isCaseSensitive = key.isEmpty() || value.isEmpty();\n\
    \            }\n        }\n        return isCaseSensitive;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe0pk6q98.java:43)\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        boolean isStringInLowerCase = keys.stream().anyMatch(key -> key.toLowerCase().equals(key));\n\
    \        boolean isStringInUpperCase = keys.stream().anyMatch(key -> key.toUpperCase().equals(key));\n\
    \        return isStringInLowerCase && isStringInUpperCase;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqori_gcb.java:31)\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (!(key instanceof String))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpih0b0ouf.java:35)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && key.toLowerCase().equals(key)) {\n         \
    \       result = false;\n                break;\n            } else if(!key.isEmpty()\
    \ && key.toUpperCase().equals(key)) {\n                result = false;\n     \
    \           break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvjet3h8z.java:39)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \            if (key.toLowerCase().equals(key)) return true;\n            if (key.toUpperCase().equals(key))\
    \ return true;\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7lu_lerw.java:35)\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict == null || dict.size() ==\
    \ 0) {\n            return result;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && value != null && !key.isEmpty() && !value.isEmpty())\
    \ {\n                boolean isUpperCase = Character.isUpperCase(key.charAt(0));\n\
    \                boolean isLowerCase = Character.isLowerCase(key.charAt(0));\n\
    \                if (isUpperCase) {\n                    result = result && value.isEmpty();\n\
    \                } else if (isLowerCase) {\n                    result = result\
    \ && !value.isEmpty();\n                } else {\n                    result =\
    \ result && value.isEmpty();\n                }\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1reojbzk.java:50)\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbn0xt1ju.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpbn0xt1ju.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     result = false;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            try {\n         \
    \       Integer.parseInt(key);\n                Integer.parseInt(value);\n   \
    \         } catch (NumberFormatException e) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpja3exuvb.java:46)\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value instanceof\
    \ String) {\n                String lowerCase = key.toLowerCase();\n         \
    \       String upperCase = key.toUpperCase();\n                if (lowerCase.equals(upperCase))\
    \ {\n                    result = true;\n                }\n                else\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n            }\n            else {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphv99gppq.java:46)\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     Set<String> keys = dict.keySet();\n        for (String key : keys) {\n \
    \           if (key.isEmpty()) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp294lqivk.java:37)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!value.isEmpty()) {\n\
    \                if(value.toLowerCase().equals(value.toUpperCase())) {\n     \
    \               result = true;\n                    break;\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8qh3u7qx.java:38)\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict == null || dict.size() ==\
    \ 0) {\n            return result;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2zv46k0a.java:40)\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return result;\n        }\n        for (String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if (key.isLowerCase())\
    \ {\n                if (!value.isLowerCase()) {\n                    result =\
    \ false;\n                    break;\n                }\n            } else if\
    \ (key.isUpperCase()) {\n                if (!value.isUpperCase()) {\n       \
    \             result = false;\n                    break;\n                }\n\
    \            } else {\n                if (!value.isLowerCase() && !value.isUpperCase())\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpubwuvs1j.java:30: error: cannot find symbol\n            if (key.isLowerCase())\
    \ {\n                   ^\n  symbol:   method isLowerCase()\n  location: variable\
    \ key of type String\n/tmp/tmpubwuvs1j.java:31: error: cannot find symbol\n  \
    \              if (!value.isLowerCase()) {\n                          ^\n  symbol:\
    \   method isLowerCase()\n  location: variable value of type String\n/tmp/tmpubwuvs1j.java:35:\
    \ error: cannot find symbol\n            } else if (key.isUpperCase()) {\n   \
    \                       ^\n  symbol:   method isUpperCase()\n  location: variable\
    \ key of type String\n/tmp/tmpubwuvs1j.java:36: error: cannot find symbol\n  \
    \              if (!value.isUpperCase()) {\n                          ^\n  symbol:\
    \   method isUpperCase()\n  location: variable value of type String\n/tmp/tmpubwuvs1j.java:41:\
    \ error: cannot find symbol\n                if (!value.isLowerCase() && !value.isUpperCase())\
    \ {\n                          ^\n  symbol:   method isLowerCase()\n  location:\
    \ variable value of type String\n/tmp/tmpubwuvs1j.java:41: error: cannot find\
    \ symbol\n                if (!value.isLowerCase() && !value.isUpperCase()) {\n\
    \                                                  ^\n  symbol:   method isUpperCase()\n\
    \  location: variable value of type String\n6 errors\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                continue;\n            }\n            if(!key.isEmpty() &&\
    \ key.toUpperCase().equals(value.toUpperCase())) {\n                continue;\n\
    \            }\n            result = false;\n            break;\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5uoa585o.java:43)\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict == null || dict.size() ==\
    \ 0) {\n            return result;\n        }\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value == null)\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if (value.length() > 1) {\n                result = false;\n    \
    \            break;\n            }\n            char firstChar = value.charAt(0);\n\
    \            char lastChar = value.charAt(value.length() - 1);\n            if\
    \ (firstChar >= 'A' && firstChar <= 'Z') {\n                if (lastChar >= 'a'\
    \ && lastChar <= 'z') {\n                    result = true;\n                \
    \    break;\n                }\n            }\n            if (firstChar >= 'a'\
    \ && firstChar <= 'z') {\n                if (lastChar >= 'A' && lastChar <= 'Z')\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiuva7yag.java:56)\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpha9cd76e.java:33)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbn0xt1ju.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpbn0xt1ju.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value == null || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            try {\n         \
    \       Integer.parseInt(value);\n            } catch (NumberFormatException nfe)\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7unrcgd7.java:42)\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (!(key instanceof String))\
    \ {\n                return false;\n            }\n            String value =\
    \ dict.get(key);\n            if (value.length() == 0) {\n                return\
    \ false;\n            }\n            char firstChar = value.charAt(0);\n     \
    \       char lastChar = value.charAt(value.length() - 1);\n            if (firstChar\
    \ >= 'A' && firstChar <= 'Z') {\n                if (lastChar >= 'a' && lastChar\
    \ <= 'z') {\n                    continue;\n                }\n            }\n\
    \            if (firstChar >= 'a' && firstChar <= 'z') {\n                if (lastChar\
    \ >= 'A' && lastChar <= 'Z') {\n                    continue;\n              \
    \  }\n            }\n            return false;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppjxkiv1r.java:51)\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if(!key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpydlf0dxx.java:40)\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = true;\n                } else if(!key.isEmpty()\
    \ && key.toUpperCase().equals(value.toUpperCase())) {\n                    result\
    \ = true;\n                } else {\n                    result = false;\n   \
    \             }\n            } else {\n                result = false;\n     \
    \       }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfbjix8_b.java:42)\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && !key.isEmpty() && value != null && !value.isEmpty())\
    \ {\n                if (key.isEmpty() || value.isEmpty()) {\n               \
    \     result = false;\n                    break;\n                }\n       \
    \         boolean isLowerCase = key.toLowerCase().equals(value);\n           \
    \     boolean isUpperCase = key.toUpperCase().equals(value);\n               \
    \ result = isLowerCase || isUpperCase;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1g64tkni.java:42)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value == null)\
    \ {\n                result = false;\n                break;\n            }\n\
    \            try {\n                String lowerCase = key.toLowerCase();\n  \
    \              String upperCase = key.toUpperCase();\n                if (lowerCase.equals(upperCase))\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            } catch (Exception e) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnwm6ef4q.java:47)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            String value = dict.get(key);\n \
    \           if (key != null && key.isEmpty() && !value.isEmpty()) {\n        \
    \        result = false;\n            }\n            if (value != null && value.isEmpty()\
    \ && !key.isEmpty()) {\n                result = false;\n            }\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7i_12ggm.java:42)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(key.isEmpty()) {\n                result = false;\n          \
    \      break;\n            }\n            if(key.isEmpty()) {\n              \
    \  result = false;\n                break;\n            }\n            if(key.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpas9mzyfz.java:48)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!value.isEmpty()) {\n\
    \                boolean isUpper = Character.isUpperCase(value.charAt(0));\n \
    \               boolean isLower = Character.isLowerCase(value.charAt(0));\n  \
    \              if(!isUpper && !isLower) {\n                    result = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplz2qv5dl.java:40)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \            String lower = key.toLowerCase();\n            String upper = key.toUpperCase();\n\
    \            if (!dict.containsKey(lower) || !dict.containsKey(upper)) return\
    \ false;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd1cn1sdz.java:35)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (!(key instanceof String))\
    \ continue;\n            String lowerCase = key.toLowerCase();\n            String\
    \ upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ return true;\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsdfj0orw.java:35)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(key.isEmpty() || value.isEmpty())\
    \ {\n                result = false;\n                break;\n            }\n\
    \            if(!key.isEmpty() && !value.isEmpty()) {\n                if(!key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvxgq_z6o.java:41)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.stream().allMatch(s -> s.equalsIgnoreCase(s.toLowerCase())))\n\
    \            return true;\n        if (keys.stream().allMatch(s -> s.equalsIgnoreCase(s.toUpperCase())))\n\
    \            return true;\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfz52uodo.java:34)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbn0xt1ju.java:27: error: cannot find symbol\n            if(!key.isLowerCase()\
    \ && !key.isUpperCase()) {\n                   ^\n  symbol:   method isLowerCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:27: error: cannot\
    \ find symbol\n            if(!key.isLowerCase() && !key.isUpperCase()) {\n  \
    \                                       ^\n  symbol:   method isUpperCase()\n\
    \  location: variable key of type String\n/tmp/tmpbn0xt1ju.java:35: error: cannot\
    \ find symbol\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n                      \
    \                                  ^\n  symbol:   method of(String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:36: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n                    \
    \                                    ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:37: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n                     \
    \                                   ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:38: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\"\
    , \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n                  \
    \                                      ^\n  symbol:   method of(String,String,String,String,String,String)\n\
    \  location: interface Map\n/tmp/tmpbn0xt1ju.java:39: error: cannot find symbol\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\"\
    , \"ZIP\", \"12345\")))) == (true));\n                                       \
    \                 ^\n  symbol:   method of(String,String,String,String)\n  location:\
    \ interface Map\n/tmp/tmpbn0xt1ju.java:40: error: cannot find symbol\n  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            boolean isStringInLowerCase\
    \ = key.toLowerCase().equals(value);\n            boolean isStringInUpperCase\
    \ = key.toUpperCase().equals(value);\n            result = result && (isStringInLowerCase\
    \ || isStringInUpperCase);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzku7cyek.java:34)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            boolean isLowerCase =\
    \ Character.isLowerCase(key.charAt(0));\n            boolean isUpperCase = Character.isUpperCase(key.charAt(0));\n\
    \            boolean isNumber = Character.isDigit(key.charAt(0));\n          \
    \  boolean isString = !isLowerCase && !isUpperCase && !isNumber;\n           \
    \ if(isString) {\n                result = result && (value.toLowerCase().equals(value.toUpperCase()));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxydttck6.java:39)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return false;\n        }\n        for (String key : dict.keySet()) {\n   \
    \         String value = dict.get(key);\n            if (value != null && !value.isEmpty())\
    \ {\n                boolean isUpper = Character.isUpperCase(value.charAt(0));\n\
    \                boolean isLower = Character.isLowerCase(value.charAt(0));\n \
    \               if (isUpper != isLower) {\n                    result = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkyz0uo01.java:42)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.size() == 0) {\n       \
    \     return false;\n        }\n        Set<String> keys = dict.keySet();\n  \
    \      boolean isAllUpperCase = true;\n        boolean isAllLowerCase = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                isAllUpperCase = false;\n\
    \                isAllLowerCase = false;\n                break;\n           \
    \ }\n            if (value.length() == 1) {\n                isAllUpperCase =\
    \ true;\n                isAllLowerCase = true;\n                break;\n    \
    \        }\n        }\n        if (isAllUpperCase) {\n            for (String\
    \ key : keys) {\n                String value = dict.get(key);\n             \
    \   if (value.length() > 1) {\n                    result = false;\n         \
    \           break;\n                }\n            }\n        } else if (isAllLowerCase)\
    \ {\n            for (String key : keys) {\n                String value = dict.get(key);\n\
    \                if (value.length() > 1) {\n                    result = false;\n\
    \                    break;\n                }\n            }\n        } else\
    \ {\n            result = false;\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwzk50di7.java:66)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (!(key instanceof String))\
    \ return false;\n            String value = dict.get(key);\n            if (value.length()\
    \ > 1) return false;\n            if (value.length() == 1 && Character.isUpperCase(value.charAt(0)))\
    \ return false;\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphe5lzfpa.java:35)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.stream().allMatch(key -> key.isEmpty())) return false;\n   \
    \     Set<String> lowerCaseKeys = keys.stream().filter(key -> key.isEmpty() ||\
    \ key.toLowerCase().equals(key)).collect(Collectors.toSet());\n        Set<String>\
    \ upperCaseKeys = keys.stream().filter(key -> key.isEmpty() || key.toUpperCase().equals(key)).collect(Collectors.toSet());\n\
    \        return lowerCaseKeys.equals(upperCaseKeys);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpal8075v5.java:32)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                try {\n                    if(key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                        result = true;\n                    } else {\n  \
    \                      result = false;\n                    }\n              \
    \  } catch(NullPointerException e) {\n                    result = false;\n  \
    \              }\n            } else {\n                result = false;\n    \
    \        }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm5t0iwak.java:44)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   result = false;\n        } else {\n            Set<String> keys = dict.keySet();\n\
    \            Set<String> lowerCaseKeys = new HashSet<>(keys);\n            lowerCaseKeys.removeAll(Collections.singleton(null));\n\
    \            Set<String> upperCaseKeys = new HashSet<>(keys);\n            upperCaseKeys.removeAll(Collections.singleton(null));\n\
    \            result = lowerCaseKeys.isEmpty() && upperCaseKeys.isEmpty();\n  \
    \      }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeea_5dmk.java:38)\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            if (key.isEmpty()) {\n          \
    \      return result;\n            }\n        }\n        Set<String> keySet =\
    \ dict.keySet();\n        for (String key : keySet) {\n            if (key.equalsIgnoreCase(key))\
    \ {\n                return result;\n            }\n        }\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmfn5ogcm.java:44)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            if (key.isEmpty()) {\n                result = false;\n     \
    \           break;\n            }\n            String lowerCaseKey = key.toLowerCase();\n\
    \            String upperCaseKey = key.toUpperCase();\n            if (lowerCaseKey.equals(upperCaseKey))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw09hhcr_.java:41)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value == null || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            try {\n         \
    \       String lowerCase = key.toLowerCase();\n                String upperCase\
    \ = key.toUpperCase();\n                if (lowerCase.equals(upperCase)) {\n \
    \                   result = true;\n                    break;\n             \
    \   }\n            } catch (Exception e) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptkyv5vpb.java:48)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            if(!key.isEmpty()\
    \ && key.toLowerCase().equals(value.toLowerCase())) {\n                result\
    \ = true;\n                break;\n            }\n            if(!key.isEmpty()\
    \ && key.toUpperCase().equals(value.toUpperCase())) {\n                result\
    \ = true;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbuvtbybw.java:45)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.stream().allMatch(key -> key.isEmpty())) return false;\n   \
    \     Set<String> lowerKeys = keys.stream().filter(key -> key.isEmpty() || key.toLowerCase().equals(key)).collect(Collectors.toSet());\n\
    \        Set<String> upperKeys = keys.stream().filter(key -> key.isEmpty() ||\
    \ key.toUpperCase().equals(key)).collect(Collectors.toSet());\n        return\
    \ lowerKeys.equals(upperKeys);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf8_4sqwu.java:32)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     Set<String> keys = dict.keySet();\n        for (String key : keys) {\n \
    \           if (!(key instanceof String)) {\n                return false;\n \
    \           }\n            String value = dict.get(key);\n            if (value.isEmpty())\
    \ {\n                return false;\n            }\n            char firstChar\
    \ = value.charAt(0);\n            char lastChar = value.charAt(value.length()\
    \ - 1);\n            if (firstChar >= 'A' && firstChar <= 'Z') {\n           \
    \     if (lastChar >= 'A' && lastChar <= 'Z') {\n                    continue;\n\
    \                }\n            }\n            if (firstChar >= 'a' && firstChar\
    \ <= 'z') {\n                if (lastChar >= 'a' && lastChar <= 'z') {\n     \
    \               continue;\n                }\n            }\n            return\
    \ false;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjg7jwl3n.java:54)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict) {\n      \
    \      if(!key.equalsIgnoreCase(dict.get(key))) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwiqqnen_.java:25: error: for-each not applicable to expression\
    \ type\n        for(String key : dict) {\n                         ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && !value.isEmpty()) {\n                if(key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          } else {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpff2othb_.java:43)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && !key.isEmpty() && value != null && !value.isEmpty())\
    \ {\n                boolean isLowerCase = key.toLowerCase().equals(value);\n\
    \                boolean isUpperCase = key.toUpperCase().equals(value);\n    \
    \            result = result && (isLowerCase || isUpperCase);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp46412rl9.java:37)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict == null || dict.size() ==\
    \ 0) {\n            return result;\n        }\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return result;\n\
    \            }\n            String lowerCaseKey = key.toLowerCase();\n       \
    \     String upperCaseKey = key.toUpperCase();\n            if (lowerCaseKey.equals(upperCaseKey))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuuclwmtn.java:44)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) {\n            return false;\n        }\n   \
    \     Set<String> keys = dict.keySet();\n        for (String key : keys) {\n \
    \           if (key.isEmpty()) {\n                return false;\n            }\n\
    \        }\n        Set<String> keysLower = keys.stream().filter(key -> key.toLowerCase().equals(key)).collect(Collectors.toSet());\n\
    \        Set<String> keysUpper = keys.stream().filter(key -> key.toUpperCase().equals(key)).collect(Collectors.toSet());\n\
    \        return keysLower.isEmpty() && keysUpper.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9yt8ywid.java:38)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            boolean isUpper =\
    \ Character.isUpperCase(key);\n            boolean isLower = Character.isLowerCase(key);\n\
    \            if (isUpper != isLower) {\n                result = false;\n    \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpifez7hcm.java:32: error: no suitable method found for isUpperCase(String)\n\
    \            boolean isUpper = Character.isUpperCase(key);\n                 \
    \                      ^\n    method Character.isUpperCase(char) is not applicable\n\
    \      (argument mismatch; String cannot be converted to char)\n    method Character.isUpperCase(int)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to int)\n\
    /tmp/tmpifez7hcm.java:33: error: no suitable method found for isLowerCase(String)\n\
    \            boolean isLower = Character.isLowerCase(key);\n                 \
    \                      ^\n    method Character.isLowerCase(char) is not applicable\n\
    \      (argument mismatch; String cannot be converted to char)\n    method Character.isLowerCase(int)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to int)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value != null && !value.isEmpty()) {\n                try {\n\
    \                    Integer.parseInt(value);\n                } catch (NumberFormatException\
    \ e) {\n                    result = false;\n                    break;\n    \
    \            }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4k9krwv7.java:40)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                result =\
    \ false;\n                break;\n            }\n            char first = key.charAt(0);\n\
    \            char last = value.charAt(value.length() - 1);\n            if (first\
    \ >= 'a' && first <= 'z') {\n                if (last >= 'a' && last <= 'z') {\n\
    \                    result = true;\n                    break;\n            \
    \    }\n            } else if (first >= 'A' && first <= 'Z') {\n             \
    \   if (last >= 'A' && last <= 'Z') {\n                    result = true;\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy2daqwlk.java:50)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keySet = dict.keySet();\n \
    \       for (String key : keySet) {\n            String value = dict.get(key);\n\
    \            if (key.isEmpty() || value.isEmpty()) {\n                return result;\n\
    \            }\n            boolean isUpperCase = Character.isUpperCase(key.charAt(0));\n\
    \            boolean isLowerCase = Character.isLowerCase(key.charAt(0));\n   \
    \         if (isUpperCase) {\n                if (!isLowerCase) {\n          \
    \          return result;\n                }\n            } else {\n         \
    \       if (!isLowerCase) {\n                    return result;\n            \
    \    }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi0edpaxt.java:50)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (value != null\
    \ && !value.isEmpty()) {\n                if (value.toLowerCase().equals(key))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpihmcj1_l.java:39)\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty()) {\n                if(key.isEmpty() || key.isEmpty().toLowerCase().equals(key.toLowerCase()))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          } else {\n                result = true;\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp13m7s9vb.java:29: error: boolean cannot be dereferenced\n     \
    \           if(key.isEmpty() || key.isEmpty().toLowerCase().equals(key.toLowerCase()))\
    \ {\n                                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (key != null && value != null && !key.isEmpty() && !value.isEmpty())\
    \ {\n                boolean isUpperCase = Character.isUpperCase(value.charAt(0));\n\
    \                boolean isLowerCase = Character.isLowerCase(value.charAt(0));\n\
    \                if (isUpperCase) {\n                    result = result && isLowerCase;\n\
    \                } else if (isLowerCase) {\n                    result = result\
    \ && !isUpperCase;\n                } else {\n                    result = false;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpycemh4y8.java:44)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keys = dict.keySet();\n   \
    \     for (String key : keys) {\n            if (key.isEmpty()) {\n          \
    \      return result;\n            }\n            String lowerCaseKey = key.toLowerCase();\n\
    \            String upperCaseKey = key.toUpperCase();\n            if (!lowerCaseKey.equals(upperCaseKey))\
    \ {\n                return result;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj7nzr4d5.java:43)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(key.isEmpty() || key.isEmpty()) {\n                result = false;\n\
    \                break;\n            }\n            if(!key.isEmpty() && !key.isEmpty())\
    \ {\n                if(key.toLowerCase().equals(key.toUpperCase())) {\n     \
    \               result = true;\n                    break;\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmponrdhp_k.java:43)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict.keySet())\
    \ {\n            String value = dict.get(key);\n            if (key != null &&\
    \ value != null && !key.isEmpty() && !value.isEmpty()) {\n                if (key.isEmpty()\
    \ || value.isEmpty()) {\n                    result = false;\n               \
    \     break;\n                }\n                char firstChar = key.charAt(0);\n\
    \                char secondChar = value.charAt(0);\n                if (firstChar\
    \ != secondChar) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaa3bbp9y.java:47)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \            String lowerKey = key.toLowerCase();\n            String upperKey\
    \ = key.toUpperCase();\n            if (dict.containsKey(lowerKey) && dict.containsKey(upperKey))\
    \ {\n                if (!dict.get(lowerKey).equals(dict.get(upperKey))) return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpogi2fbjh.java:38)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.stream().allMatch(key -> key.isEmpty())) return false;\n   \
    \     boolean isUpper = keys.stream().allMatch(key -> key.toUpperCase().equals(key));\n\
    \        boolean isLower = keys.stream().allMatch(key -> key.toLowerCase().equals(key));\n\
    \        return isUpper && isLower;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp49z5dnyk.java:32)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return false;\n        }\n        for (String key : dict.keySet()) {\n   \
    \         if (key.isEmpty()) {\n                return false;\n            }\n\
    \            String lowerCaseKey = key.toLowerCase();\n            String upperCaseKey\
    \ = key.toUpperCase();\n            if (!dict.containsKey(lowerCaseKey)) {\n \
    \               return false;\n            }\n            if (!dict.containsKey(upperCaseKey))\
    \ {\n                return false;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuzi5vva_.java:44)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isAllStrings = false;\n        boolean isAllUpperCase = false;\n\
    \        for(String key : dict.keySet()) {\n            isAllStrings = isAllStrings\
    \ || key.isEmpty();\n            isAllUpperCase = isAllUpperCase || key.toUpperCase().equals(key);\n\
    \        }\n        return isAllStrings && isAllUpperCase;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmss9e7er.java:33)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            if(!key.isEmpty() && key.isEmpty() && !value.isEmpty()) {\n     \
    \           result = false;\n                break;\n            }\n         \
    \   if(!key.isEmpty() && !value.isEmpty()) {\n                if(key.isEmpty()\
    \ || value.isEmpty()) {\n                    result = false;\n               \
    \     break;\n                }\n                if(key.isEmpty()) {\n       \
    \             result = true;\n                    break;\n                }\n\
    \                if(value.isEmpty()) {\n                    result = true;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    return result;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc2eztj8p.java:51)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict) {\n     \
    \       if (!(key instanceof String)) {\n                result = false;\n   \
    \             break;\n            }\n            String value = dict.get(key);\n\
    \            if (value.length() > 1) {\n                result = false;\n    \
    \            break;\n            }\n            char first = value.charAt(0);\n\
    \            char last = value.charAt(value.length() - 1);\n            if (first\
    \ != last) {\n                result = false;\n                break;\n      \
    \      }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ckfvvit.java:25: error: for-each not applicable to expression\
    \ type\n        for (String key : dict) {\n                          ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpha9cd76e.java:33)\n"
  stdout: ''
  timestamp: 1659800001
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \            String lowerKey = key.toLowerCase();\n            String upperKey\
    \ = key.toUpperCase();\n            if (!dict.containsKey(lowerKey) && !dict.containsKey(upperKey))\
    \ return false;\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbu7y59rt.java:36)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isCase = true;\n        Set<String> keys = dict.keySet();\n\
    \        for(String key : keys) {\n            String value = dict.get(key);\n\
    \            isCase = isCase && (key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty() || key.isEmpty()\
    \ || key.isEmpty() || key.isEmpty() || \n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfaf2_b66.java:29: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpfaf2_b66.java:30: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            boolean isUpper = Character.isUpperCase(key.charAt(0));\n\
    \            boolean isLower = Character.isLowerCase(key.charAt(0));\n       \
    \     boolean isNumber = Character.isDigit(key.charAt(0));\n            boolean\
    \ isString = !isUpper && !isLower && !isNumber && !isNumber;\n            boolean\
    \ isAllStrings = isString && isAllStringsOrNull(value);\n            boolean isAllStringsOrNull\
    \ = value == null || isAllStrings;\n            boolean isAllStringsOrNullOrEmpty\
    \ = isAllStringsOrNull && value.isEmpty();\n            boolean isAllStringsOrNullOrNotEmpty\
    \ = isAllStringsOrNull && !value.isEmpty();\n            boolean isAllStringsOrNullOrNotEmptyOrNull\
    \ = isAllStringsOrNull && !value.isEmpty() && !value.equals(null);\n         \
    \   boolean isAllStringsOrNullOrNotEmptyOrNotNull = isAllStringsOrNull && !value.isEmpty()\
    \ && !value.equals(null);\n            boolean isAllStringsOrNullOrNotEmptyOrNotNullOrEmpty\
    \ = isAllStringsOrNull && !value.isEmpty() && !value.equals(null) && !value.isEmpty();\n\
    \            boolean isAllStringsOrNullOrNotEmptyOrNotNullOrEmpty = isAllStringsOrNull\
    \ && !value.isEmpty() && !value.equals(null) && !value.isEmpty();\n          \
    \  boolean isAllStringsOrNullOrNotEmptyOrNotNullOrEmpty = isAllStringsOrNull &&\
    \ !value.isEmpty() && !value.equals(null) && !value.isEmpty();\n            boolean\
    \ isAllStringsOrNullOrNotEmptyOrNotNullOrEmpty = isAllStringsOrNull && !value.isEmpty()\
    \ && !value.equals(null) && !value.isEmpty();\n            boolean isAllStringsOrNullOrNotEmptyOrNotNullOrEmpty\
    \ = isAllStringsOrNull && !value.isEmpty() && !value.equals(null) && !value.isEmpty();\n\
    \            boolean isAllStringsOrNullOrNotEmptyOrNotNullOrEmpty = isAllStringsOrNull\
    \ && !value.isEmpty() && !value.equals(null) && !value.isEmpty();\n          \
    \  boolean isAllStringsOrNullOrNotEmptyOrNotNullOrEmpty = isAllStringsOrNull &&\
    \ !value.isEmpty() && !value.equals(null) && !value.isEmpty();\n            boolean\
    \ isAllStringsOrNullOrNotEmptyOrNotNullOrEmpty = isAllStringsOrN\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqtar940.java:44: error: ';' expected\n            boolean isAllStringsOrNullOrNotEmptyOrNotNullOrEmpty\
    \ = isAllStringsOrN\n                                                        \
    \                          ^\n/tmp/tmpbqtar940.java:46: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) {\n         \
    \   return result;\n        }\n        Set<String> keySet = dict.keySet();\n \
    \       for (String key : keySet) {\n            String lowerCase = key.toLowerCase();\n\
    \            String upperCase = key.toUpperCase();\n            if (lowerCase.equals(upperCase))\
    \ {\n                continue;\n            }\n            result = false;\n \
    \           break;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6n694b3s.java:41)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean allStrings = true;\n\
    \        for (String key : keys) {\n            if (dict.get(key) != null && !dict.get(key).equals(\"\
    \")) {\n                allStrings = false;\n                break;\n        \
    \    }\n        }\n        return allStrings;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8y1_nns9.java:35)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.isEmpty()) return false;\n        for (String key : keys) {\n\
    \            String lowerCase = key.toLowerCase();\n            String upperCase\
    \ = key.toUpperCase();\n            if (lowerCase.equals(upperCase)) return true;\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphf8igg02.java:35)\n"
  stdout: ''
  timestamp: 1659800010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value != null && !value.isEmpty()) {\n                if (value.toLowerCase().equals(key))\
    \ {\n                    result = true;\n                } else {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnjzmmwhc.java:40)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        if (keys.size() == 0)\
    \ return false;\n        boolean upperCase = keys.stream().allMatch(key -> key.toUpperCase().equals(key));\n\
    \        boolean lowerCase = keys.stream().allMatch(key -> key.toLowerCase().equals(key));\n\
    \        return upperCase && lowerCase;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpipzym10g.java:31)\n"
  stdout: ''
  timestamp: 1659800010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean isCaseSensitive = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (isCaseSensitive) {\n                if (key.isEmpty() || value.isEmpty())\
    \ {\n                    return false;\n                }\n                isCaseSensitive\
    \ = key.toLowerCase().equals(value.toLowerCase());\n            } else {\n   \
    \             if (key.isEmpty() || value.isEmpty()) {\n                    return\
    \ false;\n                }\n                isCaseSensitive = key.toUpperCase().equals(value.toUpperCase());\n\
    \            }\n        }\n        return isCaseSensitive;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl9sy0yqg.java:43)\n"
  stdout: ''
  timestamp: 1659800010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.isEmpty()) return false;\n        boolean isInLowerCase = true;\n\
    \        boolean isInUpperCase = true;\n        for (String key : keys) {\n  \
    \          String lowerCase = key.toLowerCase();\n            String upperCase\
    \ = key.toUpperCase();\n            if (lowerCase.equals(upperCase)) {\n     \
    \           isInLowerCase = false;\n                isInUpperCase = false;\n \
    \               break;\n            }\n            if (lowerCase.equals(key))\
    \ {\n                isInLowerCase = false;\n                break;\n        \
    \    }\n            if (upperCase.equals(key)) {\n                isInUpperCase\
    \ = false;\n                break;\n            }\n        }\n        return isInLowerCase\
    \ && isInUpperCase;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
    , \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\", \"36\", \"City\"\
    , \"Houston\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"fruit\", \"Orange\", \"taste\", \"Sweet\"))))\
    \ == (true));\n    assert(checkDictCase((new HashMap<String,String>())) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphmllmf0t.java:49)\n"
  stdout: ''
  timestamp: 1659800010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (dict.get(key) != null && !dict.get(key).equals(key))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpde2xox0i.java:35)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean isAllStrings =\
    \ keys.stream().allMatch(key::isInstanceOf);\n        boolean isAllUpperCase =\
    \ keys.stream().allMatch(key::isUpperCase);\n        return isAllStrings || isAllUpperCase;\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6pmewi37.java:25: error: cannot find symbol\n        boolean isAllStrings\
    \ = keys.stream().allMatch(key::isInstanceOf);\n                             \
    \                         ^\n  symbol:   variable key\n  location: class Problem\n\
    /tmp/tmp6pmewi37.java:26: error: cannot find symbol\n        boolean isAllUpperCase\
    \ = keys.stream().allMatch(key::isUpperCase);\n                              \
    \                          ^\n  symbol:   variable key\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659800010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            boolean isUpperCase =\
    \ Character.isUpperCase(key.charAt(0));\n            boolean isLowerCase = Character.isLowerCase(key.charAt(0));\n\
    \            boolean isDigit = Character.isDigit(key.charAt(0));\n           \
    \ boolean isAlpha = Character.isAlphabetic(key.charAt(0));\n            boolean\
    \ isAlphanumeric = Character.isAlphabetic(key.charAt(0));\n            boolean\
    \ isAlphanumericOrDigit = Character.isAlphabetic(key.charAt(0));\n           \
    \ boolean isAlphanumericOrDigitOrUpperCase = Character.isAlphabetic(key.charAt(0));\n\
    \            boolean isAlphanumericOrDigitOrLowerCase = Character.isAlphabetic(key.charAt(0));\n\
    \            boolean isAlphanumericOrDigitOrLowerCaseOrUpperCase = Character.isAlphabetic(key.charAt(0));\n\
    \            boolean isAlphanumericOrDigitOrLowerCaseOrUpperCaseOrDigit = Character.isAlphabetic(key.charAt(0));\n\
    \            boolean isAlphanumericOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCase\
    \ = Character.isAlphabetic(key.charAt(0));\n            boolean isAlphanumericOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCaseOrUpperCase\
    \ = Character.isAlphabetic(key.charAt(0));\n            boolean isAlphanumericOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCaseOrUpperCaseOrDigit\
    \ = Character.isAlphabetic(key.charAt(0));\n            boolean isAlphanumericOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCase\
    \ = Character.isAlphabetic(key.charAt(0));\n            boolean isAlphanumericOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCaseOrUpperCase\
    \ = Character.isAlphabetic(key.charAt(0));\n            boolean isAlphanumericOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCaseOrUpperCaseOrDigit\
    \ = Character.isAlphabetic(key.charAt(0));\n            boolean isAlphanumericOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCase\
    \ = Character.isAlphabetic(key.charAt(0));\n            boolean isAlphanumericOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCaseOrUpperCase\
    \ = Character.isAlphabetic(key.charAt(0));\n            boolean isAlphanumericOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCaseOrUpperCaseOrDigit\n\
    \    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkea0hh68.java:45: error: ';' expected\n            boolean isAlphanumericOrDigitOrLowerCaseOrUpperCaseOrDigitOrLowerCaseOrUpperCaseOrDigit\n\
    \                                                                            \
    \                       ^\n/tmp/tmpkea0hh68.java:47: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        Set<String> keys = dict.keySet();\n        boolean result = true;\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value != null && !value.isEmpty()) {\n                try {\n\
    \                    Integer.parseInt(value);\n                } catch (NumberFormatException\
    \ nfe) {\n                    result = false;\n                    break;\n  \
    \              }\n            }\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp2blckj4.java:40)\n"
  stdout: ''
  timestamp: 1659800010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for (String key : dict) {\n     \
    \       String value = dict.get(key);\n            if (value == null) {\n    \
    \            result = false;\n                break;\n            }\n        \
    \    if (value.length() > 1) {\n                result = false;\n            \
    \    break;\n            }\n            char firstChar = value.charAt(0);\n  \
    \          char secondChar = value.charAt(1);\n            if (firstChar != secondChar)\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjii4usor.java:25: error: for-each not applicable to expression\
    \ type\n        for (String key : dict) {\n                          ^\n  required:\
    \ array or java.lang.Iterable\n  found:    HashMap<String,String>\n1 error\n"
  stdout: ''
  timestamp: 1659800010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            String value = dict.get(key);\n\
    \            if (value != null) {\n                String lowerCase = key.toLowerCase();\n\
    \                String upperCase = key.toUpperCase();\n                if (lowerCase.equals(upperCase))\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplbdro3fw.java:41)\n"
  stdout: ''
  timestamp: 1659800010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        if (dict.isEmpty()) return result;\n\
    \        for (String key : dict.keySet()) {\n            String value = dict.get(key);\n\
    \            if (key != null && value != null && key.isEmpty() || key != null\
    \ && value != null && key.isEmpty() || key != null && value != null && key.isEmpty())\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) ==\
    \ (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\"\
    , \"pineapple\", \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\"\
    , \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n  \
    \  assert(checkDictCase((new HashMap<String,String>(Map.of(\"STATE\", \"NC\",\
    \ \"ZIP\", \"12345\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    fruit\", \"Orange\", \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>())) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwuycgkw4.java:36)\n"
  stdout: ''
  timestamp: 1659800010
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        for (String key : keys) {\n            if (key.isEmpty()) return false;\n\
    \            String lowerKey = key.toLowerCase();\n            String upperKey\
    \ = key.toUpperCase();\n            if (!dict.containsKey(lowerKey) && !dict.containsKey(upperKey))\
    \ return false;\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbu7y59rt.java:36)\n"
  stdout: ''
  timestamp: 1659800004
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        boolean result = true;\n        for(String key : dict.keySet()) {\n\
    \            String value = dict.get(key);\n            if(!key.isEmpty() && !value.isEmpty())\
    \ {\n                if(!key.isEmpty() && key.toLowerCase().equals(value.toLowerCase()))\
    \ {\n                    result = true;\n                } else if(!key.isEmpty()\
    \ && key.toUpperCase().equals(value.toUpperCase())) {\n                    result\
    \ = true;\n                } else {\n                    result = false;\n   \
    \             }\n            } else {\n                result = false;\n     \
    \       }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfbjix8_b.java:42)\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a dictionary, return True if all keys are strings\
    \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
    \    // The function should return False is the given dictionary is empty.\n \
    \   // Examples:\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", \"b\", \"banana\"))))\n    // (true)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"a\", \"apple\", \"A\", \"banana\", \"B\", \"\
    banana\"))))\n    // (false)\n    // >>> checkDictCase((new HashMap<String,String>(Map.of(\"\
    a\", \"apple\", 8l, \"banana\", \"a\", \"apple\"))))\n    // (false)\n    // >>>\
    \ checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\", \"Age\"\
    , \"36\", \"City\", \"Houston\"))))\n    // (false)\n    // >>> checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\"))))\n  \
    \  // (true)\n    public static boolean checkDictCase(HashMap<String,String> dict)\
    \ {\n        if (dict.isEmpty()) return false;\n        Set<String> keys = dict.keySet();\n\
    \        if (keys.stream().allMatch(key -> key.isEmpty())) return false;\n   \
    \     Set<String> keySet = keys.stream().map(String::toLowerCase).collect(Collectors.toSet());\n\
    \        return keySet.equals(keys);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\",\
    \ \"pineapple\", \"b\", \"banana\")))) == (true));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"A\", \"banana\", \"B\"\
    , \"banana\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
    p\", \"pineapple\", \"5\", \"banana\", \"a\", \"apple\")))) == (false));\n   \
    \ assert(checkDictCase((new HashMap<String,String>(Map.of(\"Name\", \"John\",\
    \ \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
    \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
    \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
    , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmla6xbm3.java:33)\n"
  stdout: ''
  timestamp: 1659800010
