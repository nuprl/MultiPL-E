language: java
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        long\
    \ remainder;\n        long digit;\n        StringBuilder result = new StringBuilder();\n\
    \        do {\n            digit = x % 10;\n            x /= 10;\n           \
    \ remainder = x % 10;\n            x /= 10;\n            int shiftDigit = (int)\
    \ (shift % 10);\n            shift /= 10;\n            int shiftRemainder = (int)\
    \ (shift % 10);\n            int shiftDigit2 = (int) (shift % 10);\n         \
    \   shift /= 10;\n            int shiftRemainder2 = (int) (shift % 10);\n    \
    \        int shiftDigit3 = (int) (shift % 10);\n            shift /= 10;\n   \
    \         int shiftRemainder3 = (int) (shift % 10);\n            int shiftDigit4\
    \ = (int) (shift % 10);\n            shift /= 10;\n            int shiftRemainder4\
    \ = (int) (shift % 10);\n            int shiftDigit5 = (int) (shift % 10);\n \
    \           shift /= 10;\n            int shiftRemainder5 = (int) (shift % 10);\n\
    \            int shiftDigit6 = (int) (shift % 10);\n            shift /= 10;\n\
    \            int shiftRemainder6 = (int) (shift % 10);\n            int shiftDigit7\
    \ = (int) (shift % 10);\n            shift /= 10;\n            int shiftRemainder7\
    \ = (int) (shift % 10);\n            int shiftDigit8 = (int) (shift % 10);\n \
    \           shift /= 10;\n            int shiftRemainder8 = (int) (shift % 10);\n\
    \            int shiftDigit9 = (int) (shift % 10);\n            shift /= 10;\n\
    \            int shiftRemainder9 = (int) (shift % 10);\n            int shiftDigit10\
    \ = (int) (shift % 10);\n            shift /= 10;\n            int shiftRemainder10\
    \ = (int) (shift % 10);\n            int shiftDigit11 = (int) (shift % 10);\n\
    \            shift /= 10;\n            int shiftRemainder11 = (int) (shift % 10);\n\
    \            int shiftDigit12 = (int) (shift % 10);\n            shift /= 10;\n\
    \            int shiftRemainder12 = (int) (shift % 10);\n            int shiftDigit13\
    \ = (int) (shift % 10);\n            shift /= 10;\n            int shiftRemainder13\
    \ = (int) (shift % 10);\n            int shiftDigit14 = (int) (shift % 10);\n\
    \            shift /= 10;\n            int shiftRemainder14 = (int) (shift % 10);\n\
    \            int shiftDigit15 = (int) (shift % 10);\n            shift /= 10;\n\
    \            int shiftRemainder15 = (int) (shift % 10);\n            int shiftDigit16\
    \ = (int) (shift % 10);\n            shift /= 10;\n            int \n    }\n \
    \   public static void main(String[] args) {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp09p_esnd.java:72: error: not a statement\n            int \n  \
    \          ^\n/tmp/tmp09p_esnd.java:72: error: ';' expected\n            int \n\
    \               ^\n/tmp/tmp09p_esnd.java:73: error: while expected\n    }\n  \
    \   ^\n/tmp/tmp09p_esnd.java:74: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n           ^\n/tmp/tmp09p_esnd.java:74: error:\
    \ ')' expected\n    public static void main(String[] args) {\n               \
    \  ^\n/tmp/tmp09p_esnd.java:74: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                      ^\n/tmp/tmp09p_esnd.java:74: error: -> expected\n\
    \    public static void main(String[] args) {\n                              \
    \            ^\n/tmp/tmp09p_esnd.java:74: error: not a statement\n    public static\
    \ void main(String[] args) {\n                           ^\n/tmp/tmp09p_esnd.java:80:\
    \ error: ';' expected\n    }\n     ^\n/tmp/tmp09p_esnd.java:82: error: reached\
    \ end of file while parsing\n}\n ^\n10 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        long\
    \ digit = x % 10;\n        long result = x;\n        while (shift > 0) {\n   \
    \         result /= 10;\n            shift -= 1;\n        }\n        if (shift\
    \ > 0) {\n            result *= 10;\n            shift -= 1;\n        }\n    \
    \    return Long.toString(result) + Long.toString(digit);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2slsi80x.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        long remainder = x % shift;\n        long\
    \ digit = x % 10;\n        long shiftDigit = shift % 10;\n        long remainderDigit\
    \ = remainder % 10;\n        long shiftRemainder = shift % shift;\n        long\
    \ shiftDigitRemainder = shiftDigit % 10;\n        long shiftRemainderDigit = shiftRemainder\
    \ % 10;\n        long shiftRemainderRemainder = shiftRemainder % shift;\n    \
    \    long shiftDigitRemainderRemainder = shiftDigitRemainder % 10;\n        long\
    \ shiftRemainderRemainderRemainder = shiftRemainderRemainder % shift;\n      \
    \  long shiftDigitRemainderRemainderRemainder = shiftDigitRemainderRemainder %\
    \ shift;\n        long shiftRemainderRemainderRemainderRemainder = shiftRemainderRemainderRemainder\
    \ % shift;\n        long shiftDigitRemainderRemainderRemainderRemainder = shiftDigitRemainderRemainderRemainder\
    \ % shift;\n        long shiftRemainderRemainderRemainderRemainderRemainder =\
    \ shiftRemainderRemainderRemainderRemainder % shift;\n        long shiftDigitRemainderRemainderRemainderRemainderRemainder\
    \ = shiftDigitRemainderRemainderRemainderRemainder % shift;\n        long shiftRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainder % shift;\n        long\
    \ shiftDigitRemainderRemainderRemainderRemainderRemainderRemainder = shiftDigitRemainderRemainderRemainderRemainderRemainder\
    \ % shift;\n        long shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainder % shift;\n   \
    \     long shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftDigitRemainderRemainderRemainderRemainderRemainderRemainder % shift;\n\
    \        long shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainder % shift;\n\
    \        long shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftDigitRemainderRemainderRemainderRemainderRemainderRemainder % shift;\n\
    \        long shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ % shift;\n        long shiftDigitRemainderRemainderRemainderRemainderRemainder\n\
    \    }\n    public static void main(String[] args) {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpckv60idm.java:40: error: ';' expected\n        long shiftDigitRemainderRemainderRemainderRemainderRemainder\n\
    \                                                                    ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        long\
    \ digit = x % 10;\n        long mask = (1l << shift) - 1;\n        long result\
    \ = x << shift;\n        long carry = 0;\n        while (result != 0) {\n    \
    \        long digit = result % 10;\n            long mask = (1l << shift) - 1;\n\
    \            long result = result << shift;\n            long carry = 0;\n   \
    \         if (digit > digit) {\n                carry = digit - digit;\n     \
    \           digit = digit;\n            }\n            long newResult = result\
    \ + carry;\n            long newDigit = newResult % 10;\n            long newMask\
    \ = (1l << shift) - 1;\n            long newResult = newResult >> shift;\n   \
    \         carry = newDigit - newDigit;\n            newDigit = newDigit;\n   \
    \         String newDigitString = Long.toString(newDigit);\n            String\
    \ newResultString = Long.toString(newResult);\n            String newResultStringReversed\
    \ = newResultString.substring(newResultString.length() - 1);\n            String\
    \ newDigitStringReversed = newDigitString.substring(newDigitString.length() -\
    \ 1);\n            String newResultStringReversedAndDigit = String.valueOf(newResultStringReversed)\
    \ + String.valueOf(newDigitStringReversed);\n            String newResultStringReversedAndDigitReversed\
    \ = newResultStringReversedAndDigit.substring(newResultStringReversedAndDigit.length()\
    \ - 1);\n            String newResultStringReversedAndDigitReversedAndDigit =\
    \ String.valueOf(newResultStringReversedAndDigitReversed) + String.valueOf(newDigitStringReversedAndDigit);\n\
    \            String newResultStringReversedAndDigitReversedAndDigitReversedAndDigit\
    \ = String.valueOf(newResultStringReversedAndDigitReversedAndDigitReversedAndDigit)\
    \ + String.valueOf(newDigitStringReversedAndDigit);\n            String newResultStringReversedAndDigitReversedAndDigitReversedAndDigitReversedAndDigit\
    \ = String.valueOf(newResultStringReversedAndDigitReversedAndDigitReversedAndDigitReversedAndDigit)\
    \ + String.valueOf(newDigitStringReversedAndDigit);\n            String newResultStringReversedAndDigitReversedAndDigitReversedAndDigitReversedAndDigitReversedAndDigit\
    \ = String.valueOf(newResultStringReversedAndDigitReversedAndDigitReversedAndDigitReversedAndDigitReversedAndDigit)\
    \ + String.valueOf(newDigitStringReversedAndDigit);\n            String newResultStringReversedAndDigitReversedAndDigitReversedAndDigitReversedAndDigitReversedAndDigitReversedAndDigit\
    \ = String.\n    }\n    public static void main(String[] args) {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpckqd_o6f.java:46: error: <identifier> expected\n            String\
    \ newResultStringReversedAndDigitReversedAndDigitReversedAndDigitReversedAndDigitReversedAndDigitReversedAndDigit\
    \ = String.\n                                                                \
    \                                                                            ^\n\
    /tmp/tmpckqd_o6f.java:48: error: illegal start of expression\n    public static\
    \ void main(String[] args) {\n    ^\n/tmp/tmpckqd_o6f.java:48: error: ';' expected\n\
    \    public static void main(String[] args) {\n          ^\n/tmp/tmpckqd_o6f.java:48:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpckqd_o6f.java:48: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpckqd_o6f.java:48:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpckqd_o6f.java:56: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        long\
    \ remainder = x % shift;\n        long digit = x >> shift;\n        long result\
    \ = remainder + digit;\n        if (result > Integer.MAX_VALUE) {\n          \
    \  throw new IllegalArgumentException(\"Overflow\");\n        }\n        return\
    \ String.valueOf(result);\n    }\n    public static void main(String[] args) {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprhfz8pas.java:26)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        long\
    \ remainder;\n        long digit;\n        StringBuilder sb = new StringBuilder();\n\
    \        while (shift > 0) {\n            remainder = x % 10;\n            digit\
    \ = x /= 10;\n            while (digit > remainder) {\n                sb.insert(0,\
    \ remainder);\n                shift -= 1;\n            }\n            sb.insert(0,\
    \ digit);\n        }\n        if (shift > 0) {\n            while (shift > 0)\
    \ {\n                remainder = x % 10;\n                digit = x /= 10;\n \
    \               while (digit > remainder) {\n                    sb.insert(0,\
    \ remainder);\n                    shift -= 1;\n                }\n          \
    \      sb.insert(0, digit);\n            }\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        long remainder;\n        int digit;\n   \
    \     int shiftCount;\n        do {\n            digit = x % 10;\n           \
    \ x /= 10;\n            shiftCount = (int) Math.ceil(Math.log10(x));\n       \
    \     while (shiftCount > shift) {\n                sb.insert(0, digit);\n   \
    \             x /= 10;\n                shiftCount--;\n            }\n       \
    \     while (shiftCount < shift) {\n                sb.insert(0, (digit = x %\
    \ 10));\n                x /= 10;\n                shiftCount++;\n           \
    \ }\n        } while (x != 0);\n        return sb.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp18tfm_kg.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            digit = x % 10;\n                      ^\n/tmp/tmp18tfm_kg.java:31:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \            sb.insert(0, (digit = x % 10));\n                               \
    \         ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        long\
    \ digit = x % 10;\n        long digitShifted = digit << shift;\n        long digitShiftedRight\
    \ = digitShifted >> 1;\n        long digitShiftedRightShifted = digitShiftedRight\
    \ >> 1;\n        long digitShiftedRightShiftedShifted = digitShiftedRightShifted\
    \ >> 1;\n        long digitShiftedRightShiftedShiftedShifted = digitShiftedRightShiftedShifted\
    \ >> 1;\n        long digitShiftedRightShiftedShiftedShiftedShifted = digitShiftedRightShiftedShiftedShifted\
    \ >> 1;\n        long digitShiftedRightShiftedShiftedShiftedShiftedShifted = digitShiftedRightShiftedShiftedShiftedShifted\
    \ >> 1;\n        long digitShiftedRightShiftedShiftedShiftedShiftedShiftedShifted\
    \ = digitShiftedRightShiftedShiftedShiftedShiftedShifted >> 1;\n        long digitShiftedRightShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ = digitShiftedRightShiftedShiftedShiftedShiftedShiftedShifted >> 1;\n      \
    \  long digitShiftedRightShiftedShiftedShiftedShiftedShiftedShiftedShifted = digitShiftedRightShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ >> 1;\n        long digitShiftedRightShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ = digitShiftedRightShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ >> 1;\n        long digitShiftedRightShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ = digitShiftedRightShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ >> 1;\n        long digitShiftedRightShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ = digitShiftedRightShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ >> 1;\n        long digitShiftedRightShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ = digitShiftedRightShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ >> 1;\n        long digitShiftedRightShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ = digitShiftedRightShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ >> 1;\n        long digitShiftedRightShiftedShifted\n    }\n    public static\
    \ void main(String[] args) {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppq2uskyf.java:33: error: ';' expected\n        long digitShiftedRightShiftedShifted\n\
    \                                            ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        long\
    \ digit = x % 10;\n        long digitShifted = digit << shift;\n        long digitShiftedReversed\
    \ = digitShifted >> 1;\n        long digitShiftedReversedReversed = digitShiftedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversed = digitShiftedReversedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversedReversed = digitShiftedReversedReversedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversedReversedReversed = digitShiftedReversedReversedReversedReversedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversed >> 1;\n\
    \        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \    }\n    public static void main(String[] args) {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm5mtmpme.java:30: error: ';' expected\n        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        long\
    \ digits = Math.log10(x) + 1;\n        long shiftDigits = Math.pow(10, shift);\n\
    \        long result = x % shiftDigits;\n        long remainder = x % shift;\n\
    \        if (result < shiftDigits) {\n            result += (shiftDigits - 1);\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        while (result\
    \ > 0) {\n            sb.append((char) (result % 10));\n            result /=\
    \ 10;\n        }\n        if (remainder > 0) {\n            sb.append((char) (remainder\
    \ % 10));\n        }\n        return sb.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7folrrxo.java:17: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long digits = Math.log10(x) + 1;\n            \
    \                        ^\n/tmp/tmp7folrrxo.java:18: error: incompatible types:\
    \ possible lossy conversion from double to long\n        long shiftDigits = Math.pow(10,\
    \ shift);\n                                   ^\n2 errors\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (shift > 0) {\n            long digit\
    \ = x % 10;\n            x /= 10;\n            while (digit != 0) {\n        \
    \        sb.insert(0, digit);\n                shift -= 1;\n                x\
    \ /= 10;\n                digit = x % 10;\n            }\n        }\n        return\
    \ sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        long remainder;\n        do {\n         \
    \   remainder = x % 10;\n            x /= 10;\n            sb.insert(0, remainder);\n\
    \        } while (x != 0l && shift > 0);\n        if (shift > 0) {\n         \
    \   while (shift > 0 && sb.length() > 0) {\n                sb.insert(0, remainder);\n\
    \                shift -= 1;\n            }\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj6p19xvq.java:33)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        long remainder = x % shift;\n        long\
    \ digit = x / shift;\n        do {\n            sb.append(digit);\n          \
    \  digit = remainder;\n            remainder = digit % shift;\n        } while\
    \ (remainder != 0);\n        return sb.reverse().toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq7z2jumg.java:28)\n"
  stdout: ''
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (shift > 0) {\n            long digit\
    \ = x % 10;\n            x /= 10;\n            while (digit != 0) {\n        \
    \        sb.insert(0, digit);\n                shift -= 1;\n                digit\
    \ /= 10;\n            }\n        }\n        if (shift > 0) {\n            while\
    \ (shift > 0) {\n                sb.insert(0, x);\n                shift -= 1;\n\
    \                x /= 10;\n            }\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        long\
    \ digits = Math.abs(x);\n        long remainder = digits % shift;\n        if\
    \ (remainder == 0) {\n            return Long.toString(x);\n        }\n      \
    \  long remainderDigits = digits - remainder;\n        long digit = remainderDigits\
    \ % 10;\n        long digitShifted = remainderDigits - digit;\n        long digitShiftedDigit\
    \ = digitShifted % 10;\n        long digitShiftedDigitShifted = digitShiftedDigit\
    \ % 10;\n        long digitShiftedDigitShiftedShifted = digitShiftedDigitShifted\
    \ % 10;\n        long digitShiftedDigitShiftedShiftedShifted = digitShiftedDigitShiftedShifted\
    \ % 10;\n        long digitShiftedDigitShiftedShiftedShiftedShifted = digitShiftedDigitShiftedShiftedShifted\
    \ % 10;\n        long digitShiftedDigitShiftedShiftedShiftedShiftedShifted = digitShiftedDigitShiftedShiftedShiftedShifted\
    \ % 10;\n        long digitShiftedDigitShiftedShiftedShiftedShiftedShiftedShifted\
    \ = digitShiftedDigitShiftedShiftedShiftedShiftedShifted % 10;\n        long digitShiftedDigitShiftedShiftedShiftedShiftedShiftedShifted\
    \ = digitShiftedDigitShiftedShiftedShiftedShiftedShiftedShifted % 10;\n      \
    \  long digitShiftedDigitShiftedShiftedShiftedShiftedShiftedShiftedShifted = digitShiftedDigitShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ % 10;\n        long digitShiftedDigitShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ = digitShiftedDigitShiftedShiftedShiftedShiftedShiftedShiftedShifted % 10;\n\
    \        long digitShiftedDigitShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ = digitShiftedDigitShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ % 10;\n        long digitShiftedDigitShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ = digitShiftedDigitShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ % 10;\n        long digitShiftedDigitShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ = digitShiftedDigitShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShiftedShifted\
    \ % 10;\n        long digitShiftedDigitShiftedShiftedShif\n    }\n    public static\
    \ void main(String[] args) {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwk4_kwr.java:38: error: ';' expected\n        long digitShiftedDigitShiftedShiftedShif\n\
    \                                                ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (shift > 0) {\n            long digit\
    \ = x % 10;\n            x /= 10;\n            while (shift > 0) {\n         \
    \       sb.insert(0, digit);\n                shift -= 1;\n                x /=\
    \ 10;\n            }\n        }\n        return sb.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu_lfqpvp.java:30)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        long\
    \ digit = x % 10;\n        long shift = shift % 10;\n        long result = 0;\n\
    \        while (shift > 0) {\n            result = result + (digit << shift);\n\
    \            shift = shift - 1;\n            digit = x % 10;\n            x =\
    \ x / 10;\n        }\n        if (shift > 0) {\n            result = result +\
    \ (digit << shift);\n        }\n        return Long.toString(result);\n    }\n\
    \    public static void main(String[] args) {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz08peij6.java:18: error: variable shift is already defined in method\
    \ circularShift(long,long)\n        long shift = shift % 10;\n             ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        long\
    \ remainder;\n        long digit;\n        StringBuilder result = new StringBuilder();\n\
    \        do {\n            digit = x % 10;\n            x /= 10;\n           \
    \ remainder = x % 10;\n            x /= 10;\n            digit = digit << shift;\n\
    \            digit |= remainder << shift;\n            result.append(digit);\n\
    \        } while (x != 0);\n        return result.reverse().toString();\n    }\n\
    \    public static void main(String[] args) {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0irpk525.java:32)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        long\
    \ digit = x % 10;\n        long digitShifted = digit << shift;\n        long digitShiftedReversed\
    \ = digitShifted >> 1;\n        long digitShiftedReversedReversed = digitShiftedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversed = digitShiftedReversedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversedReversed = digitShiftedReversedReversedReversedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversedReversedReversed = digitShiftedReversedReversedReversedReversedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversed >> 1;\n\
    \        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversed >> 1;\n\
    \        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ >> 1;\n        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ >> 1;\n    }\n    public static void main(String[] args) {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_1icj7oa.java:26: error: cannot find symbol\n        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ >> 1;\n                                                                    \
    \                                        ^\n  symbol:   variable digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \  location: class Problem\n/tmp/tmp_1icj7oa.java:27: error: cannot find symbol\n\
    \        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ >> 1;\n                                                                    \
    \                                                ^\n  symbol:   variable digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \  location: class Problem\n/tmp/tmp_1icj7oa.java:28: error: cannot find symbol\n\
    \        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ >> 1;\n                                                                    \
    \                                                        ^\n  symbol:   variable\
    \ digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \  location: class Problem\n/tmp/tmp_1icj7oa.java:30: error: cannot find symbol\n\
    \        long digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = digitShiftedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ >> 1;\n                                                                    \
    \                                                  "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Circular shift the digits of the integer x, shift the\
    \ digits right by shift\n    // and return the result as a string.\n    // If\
    \ shift > number of digits, return digits reversed.\n    // >>> circularShift((12l),\
    \ (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\"\
    )\n    public static String circularShift(long x, long shift) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        long digit = x;\n        while (shift > 0)\
    \ {\n            digit = digit * 10l;\n            shift = shift - 1l;\n     \
    \   }\n        while (digit != 0l) {\n            sb.insert(0, (char) ('0' + digit\
    \ % 10));\n            digit = digit / 10l;\n            shift = shift - 1l;\n\
    \        }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprngpohr7.java:31)\n"
  stdout: ''
