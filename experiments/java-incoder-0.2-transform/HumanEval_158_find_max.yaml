name: HumanEval_158_find_max
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that accepts a list of strings.\n    //\
  \ The list contains different words. Return the word with maximum number\n    //\
  \ of unique characters. If multiple strings have maximum number of unique\n    //\
  \ characters, return the one which comes first in lexicographical order.\n    //\
  \ >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
  of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
  name\", (String)\"enam\", (String)\"game\"))))\n    // (\"enam\")\n    // >>> findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
  cc\"))))\n    // (\"aaaaaaa\")\n    public static String findMax(ArrayList<String>\
  \ words) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\"\
  )))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
  cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
  )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"\
  are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"nation\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"this\",\
  \ (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n   \
  \ assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
  b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
  , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
completions: ["        Map<String, Integer> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                map.putIfAbsent(String.valueOf(c), 0);\n                map.put(String.valueOf(c),\
    \ map.get(c) + 1);\n                count++;\n            }\n            if (map.size()\
    \ > words.size()) {\n                return word;\n            }\n        }\n\
    \        return words.get(0);", "        Map<Character, Integer> charCountMap\
    \ = new HashMap<>();\n        for (String word : words) {\n            for (char\
    \ c : word.toCharArray()) {\n                if (!charCountMap.containsKey(c))\
    \ {\n                    charCountMap.put(c, 1);\n                } else {\n \
    \                   charCountMap.put(c, charCountMap.get(c) + 1);\n          \
    \      }\n            }\n        }\n        Integer maxCount = null;\n       \
    \ for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) {\n    \
    \        if (maxCount == null || entry.getValue() > maxCount) {\n            \
    \    maxCount = entry.getValue();\n            }\n        }\n        if (maxCount\
    \ == null) {\n            return null;\n        }\n        charCountMap.clear();\n\
    \        for (String word : words) {\n            for (char c : word.toCharArray())\
    \ {\n                if (!charCountMap.containsKey(c)) {\n                   \
    \ charCountMap.put(c, 1);\n                } else {\n                    charCountMap.put(c,\
    \ charCountMap.get(c) + 1);\n                }\n            }\n        }\n   \
    \     Integer maxCount2 = null;\n        for (Map.Entry<Character, Integer> entry\
    \ : charCountMap.entrySet()) {\n            if (maxCount2 == null || entry.getValue()\
    \ > maxCount2) {\n                maxCount2 = entry.getValue();\n            }\n\
    \        }\n        if (maxCount2 == null) {\n            return null;\n     \
    \   }\n        charCountMap.clear();\n        for (String word : words) {\n  \
    \          for (char c : word.toCharArray()) {\n                if (!charCountMap.containsKey(c))\
    \ {\n                    charCountMap.put(c, 1);\n                } else {\n \
    \                   charCountMap.put(c, charCountMap.get(c) + 1);\n          \
    \      }\n            }\n        }\n        Integer maxCount3 = null;\n      \
    \  for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) {\n   \
    \         if (maxCount3 == null || entry.getValue() > maxCount3) {\n         \
    \       maxCount3 = entry.getValue();\n            }\n        }\n        if (maxCount3\
    \ == null) {\n            return null;\n        }\n        charCountMap.clear();\n\
    \        for (String word : words) {\n            for (char c : word.toCharArray())\
    \ {\n                if (!charCountMap.containsKey(c)) {\n                   \
    \ charCountMap.put(c, 1);\n                } else {\n                    charCountMap.put(c,\
    \ charCountMap.get(c) + 1);\n                }\n            }\n        }\n   \
    \     Integer maxCount4 = null;\n        for (Map.Entry<Character, Integer> entry\
    \ : charCountMap.entrySet()) {\n            if (maxCount4 == null || entry.getValue()\
    \ > maxCount4) {\n                maxCount4 = entry.getValue();\n            }\n\
    \        }\n        if (maxCount4 == null) {\n            return null;\n     \
    \   }\n        charCountMap.clear();\n        for (", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n        \
    \        char c = word.charAt(i);\n                if (map.containsKey(c)) {\n\
    \                    count = map.get(c) + 1;\n                } else {\n     \
    \               map.put(c, 1);\n                }\n            }\n           \
    \ if (count > map.size()) {\n                map.put(word, count);\n         \
    \   }\n        }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(word, count);\n\
    \        }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    count = map.get(c)\
    \ + 1;\n                } else {\n                    map.put(c, 1);\n       \
    \         }\n            }\n            if (count > map.size()) {\n          \
    \      map.put(word, count);\n            }\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<String,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       int count = map.get(word);\n            if (count == null) {\n       \
    \         map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        Integer maxCount = Collections.max(map.values());\n\
    \        if (maxCount == null) {\n            return null;\n        }\n      \
    \  Set<String> wordSet = map.entrySet().stream().filter(e -> e.getValue() == maxCount).collect(Collectors.toSet());\n\
    \        if (wordSet.size() == 1) {\n            return wordSet.iterator().next().getKey();\n\
    \        }\n        Collections.sort(wordSet);\n        return wordSet.iterator().next().getKey();",
  "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                map.putIfAbsent(String.valueOf(c), 0);\n                map.put(String.valueOf(c),\
    \ map.get(c) + 1);\n                count++;\n            }\n            if (count\
    \ > map.size()) {\n                map.put(word, count);\n            }\n    \
    \    }\n        Collection<Map.Entry<String, Integer>> entries = map.entrySet();\n\
    \        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n   \
    \     return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = 0;\n           \
    \ for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (map.containsKey(c)) {\n                    map.put(c, map.get(c)\
    \ + 1);\n                } else {\n                    map.put(c, 1);\n      \
    \          }\n            }\n        }\n        Integer maxValue = Collections.max(map.values());\n\
    \        Set<String> keys = map.keySet();\n        Iterator<String> iterator =\
    \ keys.iterator();\n        while (iterator.hasNext()) {\n            String key\
    \ = iterator.next();\n            if (maxValue.equals(map.get(key))) {\n     \
    \           return key;\n            }\n        }\n        return null;", "  \
    \      Map<String, Integer> map = new HashMap<>();\n        words.stream().forEach(word\
    \ -> {\n            int count = map.get(word);\n            if (count == null)\
    \ {\n                map.put(word, 1);\n            } else {\n               \
    \ map.put(word, count + 1);\n            }\n        });\n        Set<String> keys\
    \ = map.keySet();\n        if (keys.size() > 1) {\n            String maxKey =\
    \ keys.stream().max(Comparator.comparingInt(k -> map.get(k)))\n              \
    \      .get();\n            return maxKey;\n        } else {\n            return\
    \ keys.get(0);\n        }", "        Map<Character, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            for (char c : word.toCharArray())\
    \ {\n                if (!map.containsKey(c)) {\n                    map.put(c,\
    \ 1);\n                } else {\n                    map.put(c, map.get(c) + 1);\n\
    \                }\n            }\n        }\n        Collections.sort(words,\
    \ Comparator.comparing(s -> map.get(s.charAt(0))));\n        return words.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
    \ words) {\n            int count = map.get(word);\n            map.put(word,\
    \ count == null ? 1 : count + 1);\n        }\n        Collection<Map.Entry<String,\
    \ Integer>> entries = map.entrySet();\n        Map.Entry<String, Integer> maxEntry\
    \ = Collections.max(entries);\n        return maxEntry.getKey();", "        Map<Character,\
    \ Integer> map = new HashMap<>();\n        for (String word : words) {\n     \
    \       for (char c : word.toCharArray()) {\n                Integer count = map.get(c);\n\
    \                if (count == null) {\n                    map.put(c, 1);\n  \
    \              } else {\n                    map.put(c, count + 1);\n        \
    \        }\n            }\n        }\n        Integer maxValue = Collections.max(map.values());\n\
    \        return words.stream()\n                .filter(w -> map.get(w.charAt(0))\
    \ == maxValue)\n                .findFirst()\n                .orElse(null);",
  "        Map<Character, Integer> charCount = new HashMap<>();\n        for (String\
    \ word : words) {\n            for (char c : word.toCharArray()) {\n         \
    \       if (!charCount.containsKey(c)) {\n                    charCount.put(c,\
    \ 1);\n                } else {\n                    charCount.put(c, charCount.get(c)\
    \ + 1);\n                }\n            }\n        }\n        Collection<Map.Entry<Character,\
    \ Integer>> sortedEntries = charCount.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toList());\n\
    \        Map.Entry<Character, Integer> maxEntry = sortedEntries.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey().toString();", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            int\
    \ count = map.get(word);\n            if (count == null) {\n                count\
    \ = 1;\n            } else {\n                count++;\n            }\n      \
    \      map.put(word, count);\n        }\n        Set<Map.Entry<String, Integer>>\
    \ set = map.entrySet();\n        Map.Entry<String, Integer> maxEntry = null;\n\
    \        for (Map.Entry<String, Integer> entry : set) {\n            if (maxEntry\
    \ == null || entry.getValue() > maxEntry.getValue()) {\n                maxEntry\
    \ = entry;\n            }\n        }\n        return maxEntry.getKey();", "  \
    \      Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            int count = 0;\n            for (int i = 0; i < word.length();\
    \ i++) {\n                char c = word.charAt(i);\n                if (map.containsKey(c))\
    \ {\n                    count = map.get(c) + 1;\n                } else {\n \
    \                   map.put(c, 1);\n                }\n            }\n       \
    \     if (count > map.size()) {\n                map.put(word, count);\n     \
    \       }\n        }\n        Collection<Map.Entry<String, Integer>> entries =\
    \ map.entrySet();\n        Map.Entry<String, Integer> maxEntry = Collections.max(entries);\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        List<String> result = new ArrayList<>();\n        for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            if (entry.getValue() > result.size())\
    \ {\n                result.add(entry.getKey());\n            }\n        }\n \
    \       if (result.size() == 0) {\n            return null;\n        }\n     \
    \   return result.get(0);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.containsKey(word)\
    \ ? map.get(word) + 1 : 1;\n            map.put(word, count);\n        }\n   \
    \     Collections.sort(words, (a, b) -> map.get(b).compareTo(map.get(a)));\n \
    \       return words.get(0);", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for(String word : words) {\n            int count = map.get(word);\n\
    \            map.put(word, count == null ? 1 : count + 1);\n        }\n      \
    \  Set<Map.Entry<String, Integer>> entrySet = map.entrySet();\n        Map.Entry<String,\
    \ Integer> maxEntry = entrySet.stream().max(Map.Entry.comparingByValue()).get();\n\
    \        return maxEntry.getKey();", "        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String word : words) {\n            int count = map.get(word);\n\
    \            if (count == null) {\n                map.put(word, 1);\n       \
    \     } else {\n                map.put(word, count + 1);\n            }\n   \
    \     }\n        Integer maxValue = Collections.max(map.values());\n        String\
    \ maxWord = null;\n        for (String word : map.keySet()) {\n            if\
    \ (maxValue == map.get(word)) {\n                maxWord = word;\n           \
    \     break;\n            }\n        }\n        return maxWord;"]
stop_tokens:
- "\n    }\n"
