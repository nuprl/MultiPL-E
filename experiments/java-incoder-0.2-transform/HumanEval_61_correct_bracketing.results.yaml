language: java
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                if(brackets.charAt(i+1) != '(') {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n            }\n            if(c == ')') {\n                if(brackets.charAt(i-1)\
    \ != ')') {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphstbb2qr.java:39)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        boolean result = false;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                openingBrackets.add(i);\n            } else if (c == ')')\
    \ {\n                closingBrackets.add(i);\n            }\n        }\n     \
    \   if (openingBrackets.size() != closingBrackets.size()) {\n            result\
    \ = false;\n        } else {\n            result = true;\n            for (int\
    \ i = 0; i < openingBrackets.size(); i++) {\n                if (openingBrackets.get(i)\
    \ != closingBrackets.get(i)) {\n                    result = false;\n        \
    \            break;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe3kt3va6.java:26: error: no suitable method found for add(int)\n\
    \                openingBrackets.add(i);\n                               ^\n \
    \   method Collection.add(String) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to String)\n    method List.add(String) is not applicable\n\
    \      (argument mismatch; int cannot be converted to String)\n/tmp/tmpe3kt3va6.java:28:\
    \ error: no suitable method found for add(int)\n                closingBrackets.add(i);\n\
    \                               ^\n    method Collection.add(String) is not applicable\n\
    \      (argument mismatch; int cannot be converted to String)\n    method List.add(String)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to String)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            }\n \
    \           else if(c == ')') {\n                if(!stack.isEmpty()) {\n    \
    \                char top = stack.pop();\n                    if(top != '(') {\n\
    \                        return false;\n                    }\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpteis94bi.java:42)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\
    \ else {\n                if (stack.isEmpty() || c != stack.peek()) {\n      \
    \              return false;\n                }\n            }\n        }\n  \
    \      return stack.isEmpty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty()) {\n                   \
    \ char top = stack.pop();\n                    if(top != '(') {\n            \
    \            return false;\n                    }\n                }\n       \
    \     } else {\n                if(!stack.isEmpty()) {\n                    char\
    \ top = stack.pop();\n                    if(top != '(') {\n                 \
    \       return false;\n                    }\n                }\n            \
    \    stack.push(c);\n            }\n        }\n        return !stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpygfsvqpe.java:45)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        List<String> bracketsList = new ArrayList<>();\n        bracketsList.addAll(brackets.split(\"\
    \\\\(|\\\\)\"));\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n        bracketsList.remove(bracketsList.get(0).length()\
    \ - 1);\n        bracketsList.remove(0);\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgtb0jvs1.java:23: error: no suitable method found for addAll(String[])\n\
    \        bracketsList.addAll(brackets.split(\"\\\\(|\\\\)\"));\n             \
    \       ^\n    method Collection.addAll(Collection<? extends String>) is not applicable\n\
    \      (argument mismatch; String[] cannot be converted to Collection<? extends\
    \ String>)\n    method List.addAll(Collection<? extends String>) is not applicable\n\
    \      (argument mismatch; String[] cannot be converted to Collection<? extends\
    \ String>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            } else {\n                if (stack.isEmpty() || c !=\
    \ stack.peek()) {\n                    return false;\n                }\n    \
    \        }\n        }\n        return stack.isEmpty();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i)\
    \ == '(') {\n                if(brackets.charAt(i+1) != '(') {\n             \
    \       result = false;\n                    break;\n                }\n     \
    \       }\n            if(brackets.charAt(i) == ')') {\n                if(brackets.charAt(i-1)\
    \ != ')') {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3kd6pr26.java:38)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                for (int j = i + 1; j < brackets.length();\
    \ j++) {\n                    char d = brackets.charAt(j);\n                 \
    \   if (d != ')') {\n                        result = false;\n               \
    \         break;\n                    }\n                }\n            }\n  \
    \      }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_leobp_w.java:37)\n"
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            } else {\n            \
    \    return false;\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                } else {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                char top = stack.pop();\n                if(top\
    \ != '(') {\n                    return false;\n                }\n          \
    \  }\n        }\n        return stack.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.correctBracketing(tmpjjqo44n3.java:26)\n\
    \tat Problem.main(tmpjjqo44n3.java:39)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp148p7tz8.java:36)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBrackets.add(c+\"\");\n \
    \           }\n            if (c == ')') {\n                closingBrackets.add(c+\"\
    \");\n            }\n        }\n        if (openingBrackets.size() != closingBrackets.size())\
    \ {\n            return false;\n        }\n        for(int i = 0; i < openingBrackets.size();\
    \ i++) {\n            String openingBracket = openingBrackets.get(i);\n      \
    \      String closingBracket = closingBrackets.get(i);\n            if (!openingBracket.equals(closingBracket))\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnh88lbhc.java:44)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                openingBrackets.add(c);\n            } else if (c == ')') {\n\
    \                closingBrackets.add(c);\n            }\n        }\n        if\
    \ (openingBrackets.size() != closingBrackets.size()) {\n            return false;\n\
    \        }\n        Iterator<String> openingBracketsIter = openingBrackets.iterator();\n\
    \        Iterator<String> closingBracketsIter = closingBrackets.iterator();\n\
    \        while (openingBracketsIter.hasNext() && closingBracketsIter.hasNext())\
    \ {\n            String openingBracket = openingBracketsIter.next();\n       \
    \     String closingBracket = closingBracketsIter.next();\n            if (openingBracket.equals(closingBracket))\
    \ {\n                openingBracketsIter.remove();\n                closingBracketsIter.remove();\n\
    \            }\n        }\n        return openingBrackets.isEmpty() && closingBrackets.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8n77zd7l.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmp8n77zd7l.java:26: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> bracketList = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketList2 = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> bracketList3 = Arrays.asList(brackets.split(\"\
    \\\\)\\\\(\"));\n        List<String> bracketList4 = Arrays.asList(brackets.split(\"\
    \\\\)\\\\)\"));\n        List<String> bracketList5 = Arrays.asList(brackets.split(\"\
    \\\\)\\\\)\\\\(\"));\n        List<String> bracketList6 = Arrays.asList(brackets.split(\"\
    \\\\)\\\\)\\\\)\"));\n        List<String> bracketList7 = Arrays.asList(brackets.split(\"\
    \\\\)\\\\)\\\\)\\\\(\"));\n        List<String> bracketList8 = Arrays.asList(brackets.split(\"\
    \\\\)\\\\)\\\\)\\\\)\"));\n        List<String> bracketList9 = Arrays.asList(brackets.split(\"\
    \\\\)\\\\)\\\\)\\\\)\\\\(\"));\n        List<String> bracketList10 = Arrays.asList(brackets.split(\"\
    \\\\)\\\\)\\\\)\\\\)\\\\)\"));\n        List<String> bracketList11 = Arrays.asList(brackets.split(\"\
    \\\\)\\\\)\\\\)\\\\)\\\\)\\\\(\"));\n        List<String> bracketList12 = Arrays.asList(brackets.split(\"\
    \\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\"));\n        List<String> bracketList13 = Arrays.asList(brackets.split(\"\
    \\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\"));\n        List<String> bracketList14 =\
    \ Arrays.asList(brackets.split(\"\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\"));\n\
    \        List<String> bracketList15 = Arrays.asList(brackets.split(\"\\\\)\\\\\
    )\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\"));\n        List<String> bracketList16 = Arrays.asList(brackets.split(\"\
    \\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\"));\n        List<String> bracketList17\
    \ = Arrays.asList(brackets.split(\"\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\\
    )\"));\n        List<String> bracketList18 = Arrays.asList(brackets.split(\"\\\
    \\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\"));\n        List<String> bracketList19\
    \ = Arrays.asList(brackets.split(\"\\\\\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe1l0uez7.java:38: error: unclosed string literal\n        List<String>\
    \ bracketList19 = Arrays.asList(brackets.split(\"\\\\\n                      \
    \                                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659794933
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        List<String> openingBracketsStack = new ArrayList<>();\n        List<String>\
    \ closingBracketsStack = new ArrayList<>();\n        boolean result = true;\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBrackets.add(i);\n      \
    \          openingBracketsStack.add(i);\n            } else if (c == ')') {\n\
    \                closingBrackets.add(i);\n                closingBracketsStack.add(i);\n\
    \            } else if (c == '(' || c == ')') {\n                openingBracketsStack.remove(i);\n\
    \                closingBracketsStack.remove(i);\n            }\n        }\n \
    \       if (openingBrackets.size() != closingBrackets.size()) {\n            result\
    \ = false;\n        } else {\n            for(int i = 0; i < openingBrackets.size();\
    \ i++) {\n                for (int j = 0; j < closingBrackets.size(); j++) {\n\
    \                    if (openingBrackets.get(i) == closingBrackets.get(j)) {\n\
    \                        openingBracketsStack.remove(i);\n                   \
    \     closingBracketsStack.remove(j);\n                    }\n               \
    \ }\n            }\n            if (openingBracketsStack.size() != closingBracketsStack.size())\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpfoq3zm.java:28: error: incompatible types: int cannot be converted\
    \ to String\n                openingBrackets.add(i);\n                       \
    \             ^\n/tmp/tmpdpfoq3zm.java:29: error: incompatible types: int cannot\
    \ be converted to String\n                openingBracketsStack.add(i);\n     \
    \                                    ^\n/tmp/tmpdpfoq3zm.java:31: error: incompatible\
    \ types: int cannot be converted to String\n                closingBrackets.add(i);\n\
    \                                    ^\n/tmp/tmpdpfoq3zm.java:32: error: incompatible\
    \ types: int cannot be converted to String\n                closingBracketsStack.add(i);\n\
    \                                         ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                char top = stack.pop();\n                if(top\
    \ == '(') {\n                    return false;\n                }\n          \
    \  }\n        }\n        return stack.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphtviiz2c.java:35)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            } else if(c == '[') {\n\
    \                stack.push(c);\n            } else if(c == ']') {\n         \
    \       if(!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n\
    \                } else {\n                    return false;\n               \
    \ }\n            } else if(c == '{') {\n                stack.push(c);\n     \
    \       } else if(c == '}') {\n                if(!stack.isEmpty() && stack.peek()\
    \ == '{') {\n                    stack.pop();\n                } else {\n    \
    \                return false;\n                }\n            }\n        }\n\
    \        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp148p7tz8.java:36)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                if(brackets.charAt(i+1) != '(') {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n                i++;\n            } else if(c == ')') {\n           \
    \     if(brackets.charAt(i+1) != '(') {\n                    result = false;\n\
    \                    break;\n                }\n                i++;\n       \
    \     } else if(c == '[') {\n                if(brackets.charAt(i+1) != ']') {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n                i++;\n            } else if(c == ']') {\n           \
    \     if(brackets.charAt(i+1) != ']') {\n                    result = false;\n\
    \                    break;\n                }\n                i++;\n       \
    \     } else if(c == '{') {\n                if(brackets.charAt(i+1) != '{') {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n                i++;\n            } else if(c == '}') {\n           \
    \     if(brackets.charAt(i+1) != '{') {\n                    result = false;\n\
    \                    break;\n                }\n                i++;\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt37ms0yg.java:64)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        boolean result = false;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if(c == '(') {\n\
    \                openingBrackets.add(c);\n            } else if(c == ')') {\n\
    \                closingBrackets.add(c);\n            }\n        }\n        if(openingBrackets.size()\
    \ != closingBrackets.size()) {\n            return result;\n        }\n      \
    \  for(int i = 0; i < openingBrackets.size(); i++) {\n            if(!closingBrackets.contains(openingBrackets.get(i)))\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprc5t6tea.java:26: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmprc5t6tea.java:28: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i)\
    \ == '(') {\n                if(brackets.charAt(i+1) == '(') {\n             \
    \       if(brackets.charAt(i+2) == '(') {\n                        if(brackets.charAt(i+3)\
    \ == '(') {\n                            result = false;\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_kn5n75e.java:39)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                } else {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                char top = stack.pop();\n                if(!top.equals('('))\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1u6r6d8x.java:27: error: char cannot be dereferenced\n        \
    \        if(!top.equals('(')) {\n                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty()) {\n                   \
    \ char top = stack.pop();\n                    if(top != '(') {\n            \
    \            return false;\n                    }\n                }\n       \
    \     } else {\n                if(!stack.isEmpty()) {\n                    char\
    \ top = stack.pop();\n                    if(top != '(') {\n                 \
    \       return false;\n                    }\n                }\n            \
    \    stack.push(c);\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl6mnxv5n.java:49)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                char top = stack.pop();\n                if(top\
    \ != '(') {\n                    return false;\n                }\n          \
    \  }\n        }\n        return stack.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.correctBracketing(tmpjjqo44n3.java:26)\n\
    \tat Problem.main(tmpjjqo44n3.java:39)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBrackets.add(i);\n      \
    \      } else if (c == ')') {\n                closingBrackets.add(i);\n     \
    \       }\n        }\n        if (openingBrackets.size() != closingBrackets.size())\
    \ {\n            return false;\n        }\n        for(int i = 0; i < openingBrackets.size();\
    \ i++) {\n            int j = openingBrackets.get(i);\n            int k = closingBrackets.get(i);\n\
    \            if (j == k) {\n                continue;\n            }\n       \
    \     if (j > k) {\n                Collections.swap(openingBrackets, j, k);\n\
    \                Collections.swap(closingBrackets, j, k);\n            }\n   \
    \     }\n        return openingBrackets.equals(closingBrackets);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcm6giezi.java:25: error: incompatible types: int cannot be converted\
    \ to String\n                openingBrackets.add(i);\n                       \
    \             ^\n/tmp/tmpcm6giezi.java:27: error: incompatible types: int cannot\
    \ be converted to String\n                closingBrackets.add(i);\n          \
    \                          ^\n/tmp/tmpcm6giezi.java:34: error: incompatible types:\
    \ String cannot be converted to int\n            int j = openingBrackets.get(i);\n\
    \                                       ^\n/tmp/tmpcm6giezi.java:35: error: incompatible\
    \ types: String cannot be converted to int\n            int k = closingBrackets.get(i);\n\
    \                                       ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            }\n \
    \           else if(c == ')') {\n                if(stack.isEmpty()) {\n     \
    \               return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '(') {\n                    return false;\n       \
    \         }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                if(brackets.charAt(i+1) == '(') {\n\
    \                    result = true;\n                } else {\n              \
    \      result = false;\n                }\n            } else if(c == ')') {\n\
    \                if(brackets.charAt(i-1) == ')') {\n                    result\
    \ = true;\n                } else {\n                    result = false;\n   \
    \             }\n            } else {\n                result = false;\n     \
    \       }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6p6qskto.java:42)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            } else if(c == '[' || c\
    \ == ']') {\n                if(!stack.isEmpty() && stack.peek() == c) {\n   \
    \                 stack.pop();\n                } else {\n                   \
    \ return false;\n                }\n            } else if(c == '{' || c == '}')\
    \ {\n                if(!stack.isEmpty() && stack.peek() == c) {\n           \
    \         stack.pop();\n                } else {\n                    return false;\n\
    \                }\n            } else if(c == '(' || c == '[' || c == '{' ||\
    \ c == '}') {\n                return false;\n            }\n        }\n     \
    \   return stack.isEmpty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp148p7tz8.java:36)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   List<String> openingBrackets = new ArrayList<>();\n        List<String> closingBrackets\
    \ = new ArrayList<>();\n        List<String> openingBracketsStack = new ArrayList<>();\n\
    \        List<String> closingBracketsStack = new ArrayList<>();\n        openingBracketsStack.add(brackets);\n\
    \        while (!openingBracketsStack.isEmpty()) {\n            String openingBracket\
    \ = openingBracketsStack.remove(0);\n            closingBracketsStack.add(openingBracket);\n\
    \            closingBracketsStack.removeLast();\n            if (closingBracketsStack.isEmpty())\
    \ {\n                openingBrackets.add(openingBracket);\n            }\n   \
    \         else if (openingBracket.equals(\"(\")) {\n                openingBracketsStack.add(openingBracket);\n\
    \            }\n            else if (openingBracket.equals(\")\")) {\n       \
    \         openingBracketsStack.add(openingBracket);\n            }\n         \
    \   else {\n                openingBracketsStack.add(openingBracket);\n      \
    \          result = false;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpye26lpov.java:29: error: cannot find symbol\n            closingBracketsStack.removeLast();\n\
    \                                ^\n  symbol:   method removeLast()\n  location:\
    \ variable closingBracketsStack of type List<String>\n1 error\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> bracketsList = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketsReversed = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        return bracketsList.equals(bracketsReversed);\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqtz027_7.java:25)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        StringBuilder sb = new StringBuilder();\n        boolean result = true;\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                openingBrackets.add(c+\"\");\n  \
    \          } else if(c == ')') {\n                closingBrackets.add(c+\"\");\n\
    \            }\n        }\n        for(int i = 0; i < openingBrackets.size();\
    \ i++) {\n            String openingBracket = openingBrackets.get(i);\n      \
    \      for(int j = 0; j < closingBrackets.size(); j++) {\n                String\
    \ closingBracket = closingBrackets.get(j);\n                if(openingBracket.equals(closingBracket))\
    \ {\n                    sb.append(openingBracket);\n                    openingBrackets.remove(j);\n\
    \                    closingBrackets.remove(j);\n                    j--;\n  \
    \              }\n            }\n        }\n        if(openingBrackets.size()\
    \ != 0) {\n            result = false;\n        }\n        if(sb.length() != brackets.length())\
    \ {\n            result = false;\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprrrdf5gk.java:53)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if(c == '(') {\n\
    \                openingBrackets.add(c+\"\");\n            } else if(c == ')')\
    \ {\n                closingBrackets.add(c+\"\");\n            } else {\n    \
    \            result = false;\n            }\n        }\n        if(openingBrackets.size()\
    \ != closingBrackets.size()) {\n            result = false;\n        }\n     \
    \   return result;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw46p76hp.java:44)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\
    \ else {\n                if (stack.isEmpty() || c != stack.peek()) {\n      \
    \              return false;\n                }\n            }\n        }\n  \
    \      return stack.isEmpty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                } else {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        List<String> bracketPairs = new ArrayList<>();\n        List<String>\
    \ bracketPairsNotInPairs = new ArrayList<>();\n        List<String> bracketPairsNotInPairsNotInPairs\
    \ = new ArrayList<>();\n        List<String> bracketPairsNotInPairsNotInPairsNotInPairs\
    \ = new ArrayList<>();\n        List<String> bracketPairsNotInPairsNotInPairsNotInPairsNotInPairs\
    \ = new ArrayList<>();\n        List<String> bracketPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairs\
    \ = new ArrayList<>();\n        List<String> bracketPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairs\
    \ = new ArrayList<>();\n        List<String> bracketPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairs\
    \ = new ArrayList<>();\n        List<String> bracketPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairs\
    \ = new ArrayList<>();\n        List<String> bracketPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairs\
    \ = new ArrayList<>();\n        List<String> bracketPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairs\
    \ = new ArrayList<>();\n        List<String> bracketPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairs\
    \ = new ArrayList<>();\n        List<String> bracketPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairs\
    \ = new ArrayList<>();\n        List<String> bracketPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairsNotInPairs\
    \ = new ArrayList<>();\n        List<String> bracketPairsNotInPairsNotInPairsNotInPair\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1whfhj16.java:36: error: ';' expected\n        List<String> bracketPairsNotInPairsNotInPairsNotInPair\n\
    \                                                              ^\n1 error\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBrackets.add(c+\"\");\n \
    \           } else if (c == ')') {\n                closingBrackets.add(c+\"\"\
    );\n            }\n        }\n        if (openingBrackets.size() != closingBrackets.size())\
    \ {\n            return false;\n        }\n        for(int i = 0; i < openingBrackets.size();\
    \ i++) {\n            String openingBracket = openingBrackets.get(i);\n      \
    \      String closingBracket = closingBrackets.get(i);\n            if (openingBracket.equals(closingBracket))\
    \ {\n                continue;\n            }\n            return false;\n   \
    \     }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplr75pcqz.java:44)\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            } else {\n                if (stack.isEmpty()) {\n \
    \                   return false;\n                }\n                char top\
    \ = stack.pop();\n                if (top != c) {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                openingBrackets.add(c);\n            } else if (c == ')') {\n\
    \                closingBrackets.add(c);\n            }\n        }\n        if\
    \ (openingBrackets.size() != closingBrackets.size()) {\n            return false;\n\
    \        }\n        Iterator<String> openingBracketsIterator = openingBrackets.iterator();\n\
    \        Iterator<String> closingBracketsIterator = closingBrackets.iterator();\n\
    \        while (openingBracketsIterator.hasNext() && closingBracketsIterator.hasNext())\
    \ {\n            String openingBracket = openingBracketsIterator.next();\n   \
    \         String closingBracket = closingBracketsIterator.next();\n          \
    \  if (openingBracket.equals(closingBracket)) {\n                openingBracketsIterator.remove();\n\
    \                closingBracketsIterator.remove();\n            }\n        }\n\
    \        return openingBrackets.isEmpty() && closingBrackets.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1q472fac.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmp1q472fac.java:26: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty()) {\n                   \
    \ char top = stack.pop();\n                    if(top != '(') {\n            \
    \            return false;\n                    }\n                }\n       \
    \     } else {\n                if(!stack.isEmpty()) {\n                    char\
    \ top = stack.pop();\n                    if(top != '(') {\n                 \
    \       return false;\n                    }\n                }\n            \
    \    stack.push(c);\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl6mnxv5n.java:49)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        List<String> openingBracketsStack = new ArrayList<>();\n        List<String>\
    \ closingBracketsStack = new ArrayList<>();\n        boolean result = false;\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char bracket\
    \ = brackets.charAt(i);\n            if (bracket == '(') {\n                openingBrackets.add(bracket);\n\
    \                openingBracketsStack.add(bracket);\n            } else if (bracket\
    \ == ')') {\n                closingBrackets.add(bracket);\n                closingBracketsStack.add(bracket);\n\
    \            } else if (bracket == '(' || bracket == ')') {\n                if\
    \ (openingBracketsStack.isEmpty()) {\n                    result = false;\n  \
    \                  break;\n                }\n                String openingBracket\
    \ = openingBracketsStack.remove(0);\n                String closingBracket = closingBracketsStack.remove(0);\n\
    \                if (openingBracket == closingBracket) {\n                   \
    \ openingBracketsStack.add(bracket);\n                    closingBracketsStack.add(bracket);\n\
    \                } else {\n                    result = false;\n             \
    \       break;\n                }\n            } else {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeewl14bo.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(bracket);\n                 \
    \                   ^\n/tmp/tmpeewl14bo.java:29: error: incompatible types: char\
    \ cannot be converted to String\n                openingBracketsStack.add(bracket);\n\
    \                                         ^\n/tmp/tmpeewl14bo.java:31: error:\
    \ incompatible types: char cannot be converted to String\n                closingBrackets.add(bracket);\n\
    \                                    ^\n/tmp/tmpeewl14bo.java:32: error: incompatible\
    \ types: char cannot be converted to String\n                closingBracketsStack.add(bracket);\n\
    \                                         ^\n/tmp/tmpeewl14bo.java:41: error:\
    \ incompatible types: char cannot be converted to String\n                   \
    \ openingBracketsStack.add(bracket);\n                                       \
    \      ^\n/tmp/tmpeewl14bo.java:42: error: incompatible types: char cannot be\
    \ converted to String\n                    closingBracketsStack.add(bracket);\n\
    \                                             ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<String>();\n        List<String> closingBrackets = new ArrayList<String>();\n\
    \        List<String> openingBracketsStack = new ArrayList<String>();\n      \
    \  List<String> closingBracketsStack = new ArrayList<String>();\n        StringBuilder\
    \ sb = new StringBuilder();\n        boolean result = true;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBracketsStack.add(\"(\");\n\
    \                closingBracketsStack.add(\")\");\n            } else if (c ==\
    \ ')') {\n                openingBracketsStack.removeLast();\n               \
    \ closingBracketsStack.removeLast();\n            }\n            if (openingBracketsStack.isEmpty()\
    \ && closingBracketsStack.isEmpty()) {\n                sb.append(c);\n      \
    \      } else if (openingBracketsStack.isEmpty()) {\n                sb.append(c);\n\
    \                closingBracketsStack.removeLast();\n            } else if (closingBracketsStack.isEmpty())\
    \ {\n                sb.append(c);\n                openingBracketsStack.removeLast();\n\
    \            } else if (openingBracketsStack.peek().equals(closingBracketsStack.peek()))\
    \ {\n                sb.append(c);\n            } else {\n                result\
    \ = false;\n            }\n        }\n        if (openingBracketsStack.isEmpty()\
    \ && closingBracketsStack.isEmpty()) {\n            return sb.toString().equals(brackets);\n\
    \        } else {\n            return result;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpydpo3eoe.java:32: error: cannot find symbol\n                openingBracketsStack.removeLast();\n\
    \                                    ^\n  symbol:   method removeLast()\n  location:\
    \ variable openingBracketsStack of type List<String>\n/tmp/tmpydpo3eoe.java:33:\
    \ error: cannot find symbol\n                closingBracketsStack.removeLast();\n\
    \                                    ^\n  symbol:   method removeLast()\n  location:\
    \ variable closingBracketsStack of type List<String>\n/tmp/tmpydpo3eoe.java:39:\
    \ error: cannot find symbol\n                closingBracketsStack.removeLast();\n\
    \                                    ^\n  symbol:   method removeLast()\n  location:\
    \ variable closingBracketsStack of type List<String>\n/tmp/tmpydpo3eoe.java:42:\
    \ error: cannot find symbol\n                openingBracketsStack.removeLast();\n\
    \                                    ^\n  symbol:   method removeLast()\n  location:\
    \ variable openingBracketsStack of type List<String>\n/tmp/tmpydpo3eoe.java:43:\
    \ error: cannot find symbol\n            } else if (openingBracketsStack.peek().equals(closingBracketsStack.peek()))\
    \ {\n                                           ^\n  symbol:   method peek()\n\
    \  location: variable openingBracketsStack of type List<String>\n/tmp/tmpydpo3eoe.java:43:\
    \ error: cannot find symbol\n            } else if (openingBracketsStack.peek().equals(closingBracketsStack.peek()))\
    \ {\n                                                                        \
    \      ^\n  symbol:   method peek()\n  location: variable closingBracketsStack\
    \ of type List<String>\n6 errors\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                openingBrackets.add(i);\n            } else if (c == ')')\
    \ {\n                closingBrackets.add(i);\n            }\n        }\n     \
    \   if (openingBrackets.size() != closingBrackets.size()) {\n            result\
    \ = false;\n        } else {\n            for(int i = 0; i < openingBrackets.size();\
    \ i++) {\n                for (int j = i + 1; j < openingBrackets.size(); j++)\
    \ {\n                    if (openingBrackets.get(i) == closingBrackets.get(j))\
    \ {\n                        result = false;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjzin4ecb.java:26: error: incompatible types: int cannot be converted\
    \ to String\n                openingBrackets.add(i);\n                       \
    \             ^\n/tmp/tmpjzin4ecb.java:28: error: incompatible types: int cannot\
    \ be converted to String\n                closingBrackets.add(i);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else {\n                if(stack.isEmpty()) {\n          \
    \          return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '(') {\n                    return false;\n       \
    \         }\n                stack.push(c);\n            }\n        }\n      \
    \  return stack.isEmpty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp148p7tz8.java:36)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                char top = stack.pop();\n                if(top\
    \ != '(') {\n                    return false;\n                }\n          \
    \  }\n        }\n        return stack.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.correctBracketing(tmpjjqo44n3.java:26)\n\
    \tat Problem.main(tmpjjqo44n3.java:39)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty()) {\n                   \
    \ char top = stack.pop();\n                    if(top != '(') {\n            \
    \            return false;\n                    }\n                }\n       \
    \     } else {\n                if(!stack.isEmpty()) {\n                    char\
    \ top = stack.pop();\n                    if(top != '(') {\n                 \
    \       return false;\n                    }\n                }\n            \
    \    stack.push(c);\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl6mnxv5n.java:49)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                char top = stack.pop();\n                if(top\
    \ != '(') {\n                    return false;\n                }\n          \
    \  }\n        }\n        return stack.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.correctBracketing(tmpjjqo44n3.java:26)\n\
    \tat Problem.main(tmpjjqo44n3.java:39)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                if(brackets.charAt(i+1) != '(') {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n                i++;\n            }\n            if(c == ')') {\n   \
    \             if(brackets.charAt(i) != ')') {\n                    result = false;\n\
    \                    break;\n                }\n                i++;\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpipjxkdjh.java:41)\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                if(brackets.charAt(i+1) == '(') {\n\
    \                    result = true;\n                } else {\n              \
    \      result = false;\n                }\n            } else if(c == ')') {\n\
    \                if(brackets.charAt(i-1) == ')') {\n                    result\
    \ = true;\n                } else {\n                    result = false;\n   \
    \             }\n            }\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcccs0x8i.java:40)\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> bracketList = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketList2 = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> bracketList3 = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketList4 = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> bracketList5 = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketList6 = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> bracketList7 = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketList8 = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> bracketList9 = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketList10 = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> bracketList11 = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketList12 = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> bracketList13 = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketList14 = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> bracketList15 = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketList16 = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> bracketList17 = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketList18 = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> bracketList19 = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketList20 = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> bracketList21 = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketList22 = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> bracketList23 = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketList24 = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> bracketList25 = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketList26 = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> bracketList\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp19a2j9_t.java:46: error: ';' expected\n        List<String> bracketList\n\
    \                                ^\n1 error\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else {\n                if(stack.isEmpty()) {\n          \
    \          return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '(') {\n                    return false;\n       \
    \         }\n                stack.push(c);\n            }\n        }\n      \
    \  return stack.isEmpty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            }\n \
    \           else if(c == ')') {\n                if(stack.isEmpty()) {\n     \
    \               return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '(') {\n                    return false;\n       \
    \         }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            } else {\n                if (stack.isEmpty()) {\n \
    \                   return false;\n                }\n                char top\
    \ = stack.pop();\n                if (top != c) {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        List<String> openingBracketsStack = new ArrayList<>();\n        List<String>\
    \ closingBracketsStack = new ArrayList<>();\n        openingBracketsStack.add(brackets);\n\
    \        closingBracketsStack.add(brackets);\n        boolean result = true;\n\
    \        while (openingBracketsStack.size() > 0) {\n            String openingBracket\
    \ = openingBracketsStack.remove(0);\n            String closingBracket = closingBracketsStack.remove(0);\n\
    \            if (openingBracket.equals(\"(\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(closingBracket);\n\
    \                closingBracketsStack.add(openingBracket);\n            } else\
    \ if (closingBracket.equals(\"(\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(openingBracket);\n\
    \                closingBracketsStack.add(closingBracket);\n            } else\
    \ if (openingBracket.equals(\")\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(openingBracket);\n\
    \                closingBracketsStack.add(closingBracket);\n            } else\
    \ if (closingBracket.equals(\")\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(openingBracket);\n\
    \                closingBracketsStack.add(closingBracket);\n            } else\
    \ if (openingBracket.equals(\"(\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(closingBracket);\n\
    \                closingBracketsStack.add(openingBracket);\n            } else\
    \ if (closingBracket.equals(\"(\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(openingBracket);\n\
    \                closingBracketsStack.add(closingBracket);\n            } else\
    \ if (openingBracket.equals(\")\")) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n                openingBracketsStack.add(openingBracket);\n\
    \                \n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqz1bpf8p.java:66: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        List<String> openingBracketsStack = new ArrayList<>();\n        List<String>\
    \ closingBracketsStack = new ArrayList<>();\n        boolean result = false;\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBrackets.add(\"(\");\n  \
    \              openingBracketsStack.add(\"(\");\n            } else if (c == ')')\
    \ {\n                closingBrackets.add(\")\");\n                closingBracketsStack.add(\"\
    )\");\n            } else if (c == '[') {\n                openingBrackets.add(\"\
    [\");\n                openingBracketsStack.add(\"[\");\n            } else if\
    \ (c == ']') {\n                closingBrackets.add(\"]\");\n                closingBracketsStack.add(\"\
    ]\");\n            } else if (c == '{') {\n                openingBrackets.add(\"\
    {\");\n                openingBracketsStack.add(\"{\");\n            } else if\
    \ (c == '}') {\n                closingBrackets.add(\"}\");\n                closingBracketsStack.add(\"\
    }\");\n            }\n        }\n        if (openingBrackets.size() != closingBrackets.size())\
    \ {\n            return false;\n        }\n        openingBracketsStack.removeAll(closingBracketsStack);\n\
    \        closingBracketsStack.removeAll(openingBracketsStack);\n        openingBracketsStack.removeAll(closingBrackets);\n\
    \        closingBracketsStack.removeAll(openingBrackets);\n        if (openingBracketsStack.isEmpty()\
    \ && closingBracketsStack.isEmpty()) {\n            result = true;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv022faxd.java:60)\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            }\n \
    \           if(c == ')') {\n                if(stack.isEmpty()) {\n          \
    \          return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '(') {\n                    return false;\n       \
    \         }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty()) {\n                   \
    \ char top = stack.pop();\n                    if(top != '(') {\n            \
    \            return false;\n                    }\n                }\n       \
    \     } else {\n                if(!stack.isEmpty()) {\n                    char\
    \ top = stack.pop();\n                    if(top != '(') {\n                 \
    \       return false;\n                    }\n                }\n            \
    \    stack.push(c);\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl6mnxv5n.java:49)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            } else {\n                if (stack.isEmpty()) {\n \
    \                   return false;\n                }\n                char top\
    \ = stack.pop();\n                if (top != c) {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        StringBuilder sb = new StringBuilder();\n        boolean result = false;\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBrackets.add(c+\"\");\n \
    \           } else if (c == ')') {\n                closingBrackets.add(c+\"\"\
    );\n            }\n        }\n        if (openingBrackets.size() != closingBrackets.size())\
    \ {\n            return result;\n        }\n        for (int i = 0; i < openingBrackets.size();\
    \ i++) {\n            String openingBracket = openingBrackets.get(i);\n      \
    \      String closingBracket = closingBrackets.get(i);\n            if (openingBracket.equals(closingBracket))\
    \ {\n                result = true;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpla4hbr2m.java:45)\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\
    \ else {\n                if (stack.isEmpty() || c != stack.peek()) {\n      \
    \              return false;\n                }\n            }\n        }\n  \
    \      return stack.isEmpty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            } else {\n                if (stack.isEmpty()) {\n \
    \                   return false;\n                }\n                char top\
    \ = stack.pop();\n                if (top != c) {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        StringBuilder sb = new StringBuilder();\n        boolean result = true;\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBrackets.add((String) brackets.substring(i,\
    \ i + 1));\n            } else if (c == ')') {\n                closingBrackets.add((String)\
    \ brackets.substring(i, i + 1));\n            }\n        }\n        if (openingBrackets.size()\
    \ != closingBrackets.size()) {\n            result = false;\n        } else {\n\
    \            for (int i = 0; i < openingBrackets.size(); i++) {\n            \
    \    String openingBracket = openingBrackets.get(i);\n                String closingBracket\
    \ = closingBrackets.get(i);\n                if (!openingBracket.equals(closingBracket))\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplelivv_l.java:47)\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<String>();\n        List<String> closingBrackets = new ArrayList<String>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i)\
    \ == '(') {\n                openingBrackets.add(brackets.substring(0,i));\n \
    \               closingBrackets.add(brackets.substring(i+1));\n            }\n\
    \        }\n        for(int i = 0; i < openingBrackets.size(); i++) {\n      \
    \      for(int j = 0; j < closingBrackets.size(); j++) {\n                if(openingBrackets.get(i).equals(closingBrackets.get(j)))\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphx7e91xk.java:42)\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                openingBrackets.add(c);\n            } else if (c == ')') {\n\
    \                closingBrackets.add(c);\n            }\n        }\n        if\
    \ (openingBrackets.size() != closingBrackets.size()) {\n            return false;\n\
    \        }\n        Set<String> openingBracketsSet = new HashSet<>(openingBrackets);\n\
    \        Set<String> closingBracketsSet = new HashSet<>(closingBrackets);\n  \
    \      return openingBracketsSet.containsAll(closingBracketsSet);\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfk92sn58.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmpfk92sn58.java:26: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                } else {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp148p7tz8.java:36)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                } else {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                if(brackets.charAt(i + 1) != '(')\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n                i++;\n            } else if(c == ')') {\n       \
    \         if(brackets.charAt(i - 1) != '(') {\n                    result = false;\n\
    \                    break;\n                }\n                i--;\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuz4mzbj_.java:40)\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[' || c == ']') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == ']') {\n                    stack.push(c);\n\
    \                } else if(top == '[') {\n                    return false;\n\
    \                }\n            } else if(c == '{') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == '}') {\n                    stack.push(c);\n\
    \                } else if(top == '{') {\n                    return false;\n\
    \                }\n            } else if(c == '<') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == '>') {\n                    stack.push(c);\n\
    \                } else if(top == '<') {\n                    return false;\n\
    \                }\n            } else if(c == '>') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == '>') {\n                    stack.push(c);\n\
    \                } else if(top == '<') {\n                    return false;\n\
    \                }\n            } else if(c == '!') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == '!') {\n                    stack.push(c);\n\
    \                } else if(top == '!') {\n                    return false;\n\
    \                }\n            } else if(c == '=') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == '=') {\n                    stack.push(c);\n\
    \                } else if(top == '=') {\n                    return false;\n\
    \                }\n            } else if(c == '?') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == '?') {\n                    stack.push(c);\n\
    \                } else if(top == '?') {\n                    return false;\n\
    \                }\n            } else if(c == '.') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == '.') {\n                    stack.push(c);\n\
    \                } else if(top == '.') {\n                    return false;\n\
    \                }\n            } else if(c == '/') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == '/') {\n                    \n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpektjhw01.java:121: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                if(brackets.charAt(i+1) != '(') {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n                i++;\n            } else if(c == ')') {\n           \
    \     if(brackets.charAt(i) != ')') {\n                    result = false;\n \
    \                   break;\n                }\n                i++;\n        \
    \    } else if(c == '[') {\n                if(brackets.charAt(i+1) != ']') {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n                i++;\n            } else if(c == ']') {\n           \
    \     if(brackets.charAt(i) != ']') {\n                    result = false;\n \
    \                   break;\n                }\n                i++;\n        \
    \    } else if(c == '{') {\n                if(brackets.charAt(i+1) != '{') {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n                i++;\n            } else if(c == '}') {\n           \
    \     if(brackets.charAt(i) != '}') {\n                    result = false;\n \
    \                   break;\n                }\n                i++;\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbp5i1osk.java:64)\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            }\n \
    \           else if(c == ')') {\n                if(stack.isEmpty()) {\n     \
    \               return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '(') {\n                    return false;\n       \
    \         }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\
    \ else {\n                if (stack.isEmpty()) {\n                    return false;\n\
    \                }\n                char top = stack.pop();\n                if\
    \ (top != '(' && top != ')') {\n                    return false;\n          \
    \      }\n                stack.push(c);\n            }\n        }\n        return\
    \ stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\
    \ else {\n                if (stack.isEmpty() || c != stack.peek()) {\n      \
    \              return false;\n                }\n            }\n        }\n  \
    \      return stack.isEmpty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        List<String> openingBracketsStrings = new ArrayList<>();\n        List<String>\
    \ closingBracketsStrings = new ArrayList<>();\n        List<String> openingBracketsStringsCopy\
    \ = new ArrayList<>();\n        List<String> closingBracketsStringsCopy = new\
    \ ArrayList<>();\n        boolean bracketsAreCorrect = true;\n        boolean\
    \ bracketsAreCorrect2 = true;\n        boolean bracketsAreCorrect3 = true;\n \
    \       boolean bracketsAreCorrect4 = true;\n        boolean bracketsAreCorrect5\
    \ = true;\n        boolean bracketsAreCorrect6 = true;\n        boolean bracketsAreCorrect7\
    \ = true;\n        boolean bracketsAreCorrect8 = true;\n        boolean bracketsAreCorrect9\
    \ = true;\n        boolean bracketsAreCorrect10 = true;\n        boolean bracketsAreCorrect11\
    \ = true;\n        boolean bracketsAreCorrect12 = true;\n        boolean bracketsAreCorrect13\
    \ = true;\n        boolean bracketsAreCorrect14 = true;\n        boolean bracketsAreCorrect15\
    \ = true;\n        boolean bracketsAreCorrect16 = true;\n        boolean bracketsAreCorrect17\
    \ = true;\n        boolean bracketsAreCorrect18 = true;\n        boolean bracketsAreCorrect19\
    \ = true;\n        boolean bracketsAreCorrect20 = true;\n        boolean bracketsAreCorrect21\
    \ = true;\n        boolean bracketsAreCorrect22 = true;\n        boolean bracketsAreCorrect23\
    \ = true;\n        boolean bracketsAreCorrect24 = true;\n        boolean bracketsAreCorrect25\
    \ = true;\n        boolean bracketsAreCorrect26 = true;\n        boolean bracketsAreCorrect27\
    \ = true;\n        boolean bracketsAreCorrect28 = true;\n        boolean bracketsAreCorrect29\
    \ = true;\n        boolean bracketsAreCorrect30 = true;\n        boolean bracketsAreCorrect31\
    \ = true;\n        boolean bracketsAreCorrect32 = true;\n        boolean bracketsAreCorrect33\
    \ = true;\n        boolean bracketsAreCorrect34 = true;\n        boolean bracketsAreCorrect35\
    \ = true;\n        boolean bracketsAreCorrect36 = true;\n        boolean bracketsAreCorrect37\
    \ = true;\n        boolean bracketsAreCorrect38 = true;\n        boolean bracketsAreCorrect39\
    \ = true;\n        boolean bracketsAreCorrect40 = true;\n        boolean bracketsAreCorrect41\
    \ = true;\n        boolean bracketsAreCorrect42 = true;\n        boolean bracketsAreCorrect43\
    \ = true;\n        boolean bracketsAreCorrect44 = true;\n        boolean bracketsAreCorrect45\
    \ = true;\n        boolean bracketsAreCorrect46 = true;\n        boolean bracketsAreCorrect47\
    \ = true;\n        boolean bracketsAreCorrect48 = true;\n\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20z5kmxs.java:75: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            } else if(c == '[') {\n\
    \                stack.push(c);\n            } else if(c == ']') {\n         \
    \       if(!stack.isEmpty() && stack.peek() == '[') {\n                    stack.pop();\n\
    \                } else {\n                    return false;\n               \
    \ }\n            } else if(c == '{') {\n                stack.push(c);\n     \
    \       } else if(c == '}') {\n                if(!stack.isEmpty() && stack.peek()\
    \ == '{') {\n                    stack.pop();\n                } else {\n    \
    \                return false;\n                }\n            }\n        }\n\
    \        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        List<String> openingBracketsStack = new ArrayList<>();\n        List<String>\
    \ closingBracketsStack = new ArrayList<>();\n        openingBracketsStack.add(brackets);\n\
    \        closingBracketsStack.add(brackets);\n        while (openingBracketsStack.size()\
    \ > 0) {\n            String openingBracket = openingBracketsStack.remove(0);\n\
    \            String closingBracket = closingBracketsStack.remove(0);\n       \
    \     if (closingBracket.equals(openingBracket)) {\n                openingBrackets.add(openingBracket);\n\
    \                closingBrackets.add(closingBracket);\n            } else {\n\
    \                return false;\n            }\n        }\n        return openingBrackets.size()\
    \ == 0;\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsptctcrp.java:39)\n"
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        boolean result = true;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if (c == '(')\
    \ {\n                openingBrackets.add(i);\n            } else if (c == ')')\
    \ {\n                closingBrackets.add(i);\n            }\n        }\n     \
    \   if (openingBrackets.size() != closingBrackets.size()) {\n            result\
    \ = false;\n        }\n        for (int i = 0; i < openingBrackets.size(); i++)\
    \ {\n            int j = openingBrackets.get(i);\n            int k = closingBrackets.get(i);\n\
    \            if (j > k) {\n                result = false;\n            }\n  \
    \      }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi7a9fce0.java:26: error: incompatible types: int cannot be converted\
    \ to String\n                openingBrackets.add(i);\n                       \
    \             ^\n/tmp/tmpi7a9fce0.java:28: error: incompatible types: int cannot\
    \ be converted to String\n                closingBrackets.add(i);\n          \
    \                          ^\n/tmp/tmpi7a9fce0.java:35: error: incompatible types:\
    \ String cannot be converted to int\n            int j = openingBrackets.get(i);\n\
    \                                       ^\n/tmp/tmpi7a9fce0.java:36: error: incompatible\
    \ types: String cannot be converted to int\n            int k = closingBrackets.get(i);\n\
    \                                       ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659794936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            } else {\n            \
    \    return false;\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp148p7tz8.java:36)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ Arrays.asList(brackets.split(\"\\\\(\"));\n        List<String> closingBrackets\
    \ = Arrays.asList(brackets.split(\"\\\\)\"));\n        List<String> openingBracketsCopy\
    \ = new ArrayList<>(openingBrackets);\n        List<String> closingBracketsCopy\
    \ = new ArrayList<>(closingBrackets);\n        openingBracketsCopy.removeAll(closingBracketsCopy);\n\
    \        return openingBracketsCopy.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxsrjza08.java:28)\n"
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                char top = stack.pop();\n                if(top\
    \ != '(') {\n                    return false;\n                }\n          \
    \  }\n        }\n        return stack.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.correctBracketing(tmpjjqo44n3.java:26)\n\
    \tat Problem.main(tmpjjqo44n3.java:39)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        StringBuilder sb = new StringBuilder();\n        boolean result = false;\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBrackets.add(i);\n      \
    \      } else if (c == ')') {\n                closingBrackets.add(i);\n     \
    \       }\n        }\n        if (openingBrackets.size() != closingBrackets.size())\
    \ {\n            result = false;\n        } else {\n            for(int i = 0;\
    \ i < openingBrackets.size(); i++) {\n                sb.append(brackets.substring(openingBrackets.get(i),\
    \ closingBrackets.get(i)));\n            }\n            result = sb.toString().equals(\"\
    ()\");\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwogsf49l.java:27: error: incompatible types: int cannot be converted\
    \ to String\n                openingBrackets.add(i);\n                       \
    \             ^\n/tmp/tmpwogsf49l.java:29: error: incompatible types: int cannot\
    \ be converted to String\n                closingBrackets.add(i);\n          \
    \                          ^\n/tmp/tmpwogsf49l.java:36: error: incompatible types:\
    \ String cannot be converted to int\n                sb.append(brackets.substring(openingBrackets.get(i),\
    \ closingBrackets.get(i)));\n                                                \
    \                ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659794936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty()) {\n                   \
    \ char top = stack.pop();\n                    if(top != '(') {\n            \
    \            return false;\n                    }\n                }\n       \
    \     } else {\n                if(!stack.isEmpty()) {\n                    char\
    \ top = stack.pop();\n                    if(top != '(') {\n                 \
    \       return false;\n                    }\n                }\n            \
    \    stack.push(c);\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl6mnxv5n.java:49)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty()) {\n                   \
    \ char top = stack.pop();\n                    if(top != '(') {\n            \
    \            return false;\n                    }\n                }\n       \
    \     } else {\n                if(!stack.isEmpty()) {\n                    char\
    \ top = stack.pop();\n                    if(top != '(' && top != ')') {\n   \
    \                     return false;\n                    }\n                }\n\
    \                stack.push(c);\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_6281vm1.java:49)\n"
  stdout: ''
  timestamp: 1659794936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                } else {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                char top = stack.pop();\n                if(top\
    \ != '(') {\n                    return false;\n                }\n          \
    \  }\n        }\n        return stack.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.correctBracketing(tmpjjqo44n3.java:26)\n\
    \tat Problem.main(tmpjjqo44n3.java:39)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        StringBuilder sb = new StringBuilder();\n        boolean result = true;\n\
    \        for (char c : brackets.toCharArray()) {\n            switch (c) {\n \
    \               case '(':\n                    openingBrackets.add(c);\n     \
    \               break;\n                case ')':\n                    closingBrackets.add(c);\n\
    \                    break;\n                default:\n                    sb.append(c);\n\
    \                    break;\n            }\n        }\n        if (openingBrackets.size()\
    \ != closingBrackets.size()) {\n            result = false;\n        }\n     \
    \   for (int i = 0; i < openingBrackets.size(); i++) {\n            if (openingBrackets.get(i)\
    \ != closingBrackets.get(i)) {\n                result = false;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp34tqt77t.java:27: error: incompatible types: char cannot be converted\
    \ to String\n                    openingBrackets.add(c);\n                   \
    \                     ^\n/tmp/tmp34tqt77t.java:30: error: incompatible types:\
    \ char cannot be converted to String\n                    closingBrackets.add(c);\n\
    \                                        ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[' || c == ']') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top != c && top != '[' && top != ']')\
    \ {\n                    return false;\n                }\n            } else\
    \ if(c == '{') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '{' && top != '(') {\n                    return false;\n\
    \                }\n            } else if(c == '}') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top != '}' && top != '{') {\n       \
    \             return false;\n                }\n            }\n        }\n   \
    \     return stack.isEmpty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp148p7tz8.java:36)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                openingBrackets.add(c);\n            } else if (c == ')') {\n\
    \                closingBrackets.add(c);\n            }\n        }\n        if\
    \ (openingBrackets.size() != closingBrackets.size()) {\n            return false;\n\
    \        }\n        Iterator<String> openingBracketsIterator = openingBrackets.iterator();\n\
    \        Iterator<String> closingBracketsIterator = closingBrackets.iterator();\n\
    \        while (openingBracketsIterator.hasNext()) {\n            if (!closingBracketsIterator.hasNext())\
    \ {\n                return false;\n            }\n            String openingBracket\
    \ = openingBracketsIterator.next();\n            String closingBracket = closingBracketsIterator.next();\n\
    \            if (openingBracket.equals(closingBracket)) {\n                openingBracketsIterator.remove();\n\
    \                closingBracketsIterator.remove();\n            }\n        }\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvz3zn4hg.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmpvz3zn4hg.java:26: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        StringBuilder sb = new StringBuilder();\n        boolean result = false;\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  result = true;\n                    break;\n                }\n           \
    \     char top = stack.pop();\n                if (top != '(') {\n           \
    \         result = false;\n                    break;\n                }\n   \
    \         }\n            sb.append(c);\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp_kylmr5.java:43)\n"
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBrackets.add(i);\n      \
    \      }\n            if (c == ')') {\n                closingBrackets.add(i);\n\
    \            }\n        }\n        if (openingBrackets.size() != closingBrackets.size())\
    \ {\n            return false;\n        }\n        for(int i = 0; i < openingBrackets.size();\
    \ i++) {\n            int j = openingBrackets.get(i);\n            int k = closingBrackets.get(i);\n\
    \            if (j > k) {\n                return false;\n            }\n    \
    \    }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmfh85o7a.java:25: error: incompatible types: int cannot be converted\
    \ to String\n                openingBrackets.add(i);\n                       \
    \             ^\n/tmp/tmpmfh85o7a.java:28: error: incompatible types: int cannot\
    \ be converted to String\n                closingBrackets.add(i);\n          \
    \                          ^\n/tmp/tmpmfh85o7a.java:35: error: incompatible types:\
    \ String cannot be converted to int\n            int j = openingBrackets.get(i);\n\
    \                                       ^\n/tmp/tmpmfh85o7a.java:36: error: incompatible\
    \ types: String cannot be converted to int\n            int k = closingBrackets.get(i);\n\
    \                                       ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                if(brackets.charAt(i+1) != '(') {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n                i++;\n            } else if(c == ')') {\n           \
    \     if(brackets.charAt(i+1) != ')') {\n                    result = false;\n\
    \                    break;\n                }\n                i++;\n       \
    \     } else {\n                result = false;\n                break;\n    \
    \        }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3lkjiddn.java:43)\n"
  stdout: ''
  timestamp: 1659794936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ brackets.length(); i++) {\n            char c = brackets.charAt(i);\n      \
    \      if (c == '(') {\n                stack.push(c);\n            } else if\
    \ (c == ')') {\n                if (stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if (top != '(') {\n                    return false;\n             \
    \   }\n            }\n            sb.append(c);\n        }\n        if (stack.isEmpty())\
    \ {\n            return true;\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                if(brackets.charAt(i+1) == '(') {\n\
    \                    result = result && true;\n                } else {\n    \
    \                result = result && false;\n                }\n            } else\
    \ if(c == ')') {\n                if(brackets.charAt(i-1) == '(') {\n        \
    \            result = result && true;\n                } else {\n            \
    \        result = result && false;\n                }\n            }\n       \
    \ }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5l9lo0un.java:40)\n"
  stdout: ''
  timestamp: 1659794937
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[' || c == ']') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ top = stack.pop();\n                if(top == c || top == '(' || top == '[')\
    \ {\n                    stack.push(c);\n                } else {\n          \
    \          return false;\n                }\n            } else if(c == '{' ||\
    \ c == '}') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top == c || top == '(' || top == '{' || top == '[') {\n         \
    \           stack.push(c);\n                } else {\n                    return\
    \ false;\n                }\n            } else {\n                return false;\n\
    \            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\
    \ else {\n                if (stack.isEmpty()) {\n                    return false;\n\
    \                }\n                char top = stack.pop();\n                if\
    \ (top != '(') {\n                    return false;\n                }\n     \
    \           stack.push(c);\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   List<String> openingBrackets = new ArrayList<>();\n        List<String> closingBrackets\
    \ = new ArrayList<>();\n        for (char c : brackets.toCharArray()) {\n    \
    \        if (c == '(') {\n                openingBrackets.add(c);\n          \
    \  } else if (c == ')') {\n                closingBrackets.add(c);\n         \
    \   } else {\n                result = false;\n            }\n        }\n    \
    \    if (openingBrackets.size() != closingBrackets.size()) {\n            result\
    \ = false;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ujwctpi.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmp4ujwctpi.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                if (brackets.charAt(i + 1) != '(')\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n            }\n            if (c == ')') {\n                if (brackets.charAt(i\
    \ - 1) != '(') {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaxccz57g.java:39)\n"
  stdout: ''
  timestamp: 1659794937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp148p7tz8.java:36)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp148p7tz8.java:36)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            } else {\n                if (stack.isEmpty()) {\n \
    \                   return false;\n                }\n                char top\
    \ = stack.pop();\n                if (top != c) {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794935
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        brackets.replaceAll(\"\\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\
    \\\\[|\\\\]\", \"\");\n        brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n \
    \       brackets.replaceAll(\"\\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\
    \\\\[|\\\\]\", \"\");\n        brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n \
    \       brackets.replaceAll(\"\\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\
    \\\\[|\\\\]\", \"\");\n        brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n \
    \       brackets.replaceAll(\"\\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\
    \\\\[|\\\\]\", \"\");\n        brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n \
    \       brackets.replaceAll(\"\\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\
    \\\\[|\\\\]\", \"\");\n        brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n \
    \       brackets.replaceAll(\"\\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\
    \\\\[|\\\\]\", \"\");\n        brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n \
    \       brackets.replaceAll(\"\\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\
    \\\\[|\\\\]\", \"\");\n        brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n \
    \       brackets.replaceAll(\"\\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\
    \\\\[|\\\\]\", \"\");\n        brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n \
    \       brackets.replaceAll(\"\\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\
    \\\\[|\\\\]\", \"\");\n        brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n \
    \       brackets.replaceAll(\"\\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\
    \\\\[|\\\\]\", \"\");\n        brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n \
    \       brackets.replaceAll(\"\\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\
    \\\\[|\\\\]\", \"\");\n        brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n \
    \       brackets.replaceAll(\"\\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\
    \\\\[|\\\\]\", \"\");\n        brackets.replaceAll(\"\\\\{|\\\\}\", \"\");\n \
    \       brackets.replaceAll(\"\\\\(|\\\\)\", \"\");\n        brackets.replaceAll(\"\
    \\\\[|\\\\]\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbm22xhu7.java:59: error: unclosed string literal\n        brackets.replaceAll(\"\
    \\\\[|\\\\]\n                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659794936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                } else {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            } else {\n            \
    \    return false;\n            }\n        }\n        return !stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqd76imue.java:38)\n"
  stdout: ''
  timestamp: 1659794937
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                } else {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ Arrays.asList(brackets.split(\"\\\\(\"));\n        List<String> closingBrackets\
    \ = Arrays.asList(brackets.split(\"\\\\)\"));\n        List<String> openingBracketsCopy\
    \ = new ArrayList<>(openingBrackets);\n        List<String> closingBracketsCopy\
    \ = new ArrayList<>(closingBrackets);\n        openingBracketsCopy.removeAll(closingBracketsCopy);\n\
    \        return openingBracketsCopy.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxsrjza08.java:28)\n"
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp148p7tz8.java:36)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                if(brackets.charAt(i+1) == '(') {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n            }\n            if(c == ')') {\n                if(brackets.charAt(i-1)\
    \ != '(') {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt_jct1hs.java:40)\n"
  stdout: ''
  timestamp: 1659794937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty()) {\n                   \
    \ char top = stack.pop();\n                    if(top != '(') {\n            \
    \            return false;\n                    }\n                }\n       \
    \     } else {\n                if(!stack.isEmpty()) {\n                    char\
    \ top = stack.pop();\n                    if(top != '(' && top != ')') {\n   \
    \                     return false;\n                    }\n                }\n\
    \                stack.push(c);\n            }\n        }\n        return !stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfpndx5gk.java:45)\n"
  stdout: ''
  timestamp: 1659794937
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            } else {\n                if (stack.isEmpty()) {\n \
    \                   return false;\n                }\n                char top\
    \ = stack.pop();\n                if (top != c) {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794935
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(!stack.isEmpty() && stack.peek() == '(')\
    \ {\n                    stack.pop();\n                } else {\n            \
    \        return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n    }\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp148p7tz8.java:36)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> bracketsList = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketsStack = new ArrayList<>();\n        bracketsStack.add(\"\
    (\");\n        bracketsStack.add(\")\");\n        bracketsStack.add(\"(\");\n\
    \        bracketsStack.add(\")\");\n        bracketsStack.add(\"(\");\n      \
    \  bracketsStack.add(\")\");\n        bracketsStack.add(\"(\");\n        bracketsStack.add(\"\
    )\");\n        bracketsStack.add(\"(\");\n        bracketsStack.add(\")\");\n\
    \        bracketsStack.add(\"(\");\n        bracketsStack.add(\")\");\n      \
    \  bracketsStack.add(\"(\");\n        bracketsStack.add(\")\");\n        bracketsStack.add(\"\
    (\");\n        bracketsStack.add(\")\");\n        bracketsStack.add(\"(\");\n\
    \        bracketsStack.add(\")\");\n        bracketsStack.add(\"(\");\n      \
    \  bracketsStack.add(\")\");\n        bracketsStack.add(\"(\");\n        bracketsStack.add(\"\
    )\");\n        bracketsStack.add(\"(\");\n        bracketsStack.add(\")\");\n\
    \        bracketsStack.add(\"(\");\n        bracketsStack.add(\")\");\n      \
    \  bracketsStack.add(\"(\");\n        bracketsStack.add(\")\");\n        bracketsStack.add(\"\
    (\");\n        bracketsStack.add(\")\");\n        bracketsStack.add(\"(\");\n\
    \        bracketsStack.add(\")\");\n        bracketsStack.add(\"(\");\n      \
    \  bracketsStack.add(\")\");\n        bracketsStack.add(\"(\");\n        bracketsStack.add(\"\
    )\");\n        bracketsStack.add(\"(\");\n        bracketsStack.add(\")\");\n\
    \        bracketsStack.add(\"(\");\n        bracketsStack.add(\")\");\n      \
    \  bracketsStack.add(\"(\");\n        bracketsStack.add(\")\");\n        bracketsStack.add(\"\
    (\");\n        bracketsStack.add(\")\");\n        bracketsStack.add(\"(\");\n\
    \        bracketsStack.add(\")\");\n        bracketsStack.add(\"(\");\n      \
    \  bracketsStack.add(\")\");\n        bracketsStack.add(\"(\");\n        bracketsStack.add(\"\
    )\");\n        bracketsStack.add(\"(\");\n        bracketsStack.add(\")\");\n\
    \        bracketsStack.add(\"(\");\n        bracketsStack.add(\"\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpsv0id5.java:75: error: unclosed string literal\n        bracketsStack.add(\"\
    \n                          ^\n1 error\n"
  stdout: ''
  timestamp: 1659794936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            }\n \
    \           else if(c == ')') {\n                if(stack.isEmpty()) {\n     \
    \               return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '(') {\n                    return false;\n       \
    \         }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        StringBuilder sb = new StringBuilder();\n        boolean result = true;\n\
    \        for (char c : brackets.toCharArray()) {\n            switch (c) {\n \
    \               case '(':\n                    openingBrackets.add('(');\n   \
    \                 break;\n                case ')':\n                    closingBrackets.add(')');\n\
    \                    break;\n                default:\n                    sb.append(c);\n\
    \                    break;\n            }\n        }\n        if (openingBrackets.size()\
    \ != closingBrackets.size()) {\n            result = false;\n        }\n     \
    \   for (String openingBracket : openingBrackets) {\n            String closingBracket\
    \ = closingBrackets.get(closingBrackets.indexOf(openingBracket));\n          \
    \  if (closingBracket == null) {\n                result = false;\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb0u4_qvg.java:27: error: incompatible types: char cannot be converted\
    \ to String\n                    openingBrackets.add('(');\n                 \
    \                       ^\n/tmp/tmpb0u4_qvg.java:30: error: incompatible types:\
    \ char cannot be converted to String\n                    closingBrackets.add(')');\n\
    \                                        ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ Arrays.asList(brackets.split(\"\\\\(\"));\n        List<String> closingBrackets\
    \ = Arrays.asList(brackets.split(\"\\\\)\"));\n        List<String> openingBracketsCopy\
    \ = new ArrayList<>(openingBrackets);\n        List<String> closingBracketsCopy\
    \ = new ArrayList<>(closingBrackets);\n        openingBracketsCopy.removeAll(closingBracketsCopy);\n\
    \        return openingBracketsCopy.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxsrjza08.java:28)\n"
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                char last = stack.pop();\n                if(last\
    \ != '(') {\n                    return false;\n                }\n          \
    \  }\n        }\n        return stack.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.correctBracketing(tmpmms5s8tw.java:26)\n\
    \tat Problem.main(tmpmms5s8tw.java:39)\n"
  stdout: ''
  timestamp: 1659794937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            if(brackets.charAt(i)\
    \ == '(') {\n                openingBrackets.add(brackets.substring(i));\n   \
    \         }\n            if(brackets.charAt(i) == ')') {\n                closingBrackets.add(brackets.substring(i));\n\
    \            }\n        }\n        for(int i = 0; i < openingBrackets.size();\
    \ i++) {\n            if(!closingBrackets.contains(openingBrackets.get(i))) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdwzl6j8q.java:38)\n"
  stdout: ''
  timestamp: 1659794937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        List<String> openingBracketsStack = new ArrayList<>();\n        List<String>\
    \ closingBracketsStack = new ArrayList<>();\n        boolean result = true;\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                openingBrackets.add(i);\n      \
    \          openingBracketsStack.add(i);\n            } else if (c == ')') {\n\
    \                closingBrackets.add(i);\n                closingBracketsStack.add(i);\n\
    \            } else if (c == ')' && openingBracketsStack.size() > 0) {\n     \
    \           openingBracketsStack.remove(openingBracketsStack.size() - 1);\n  \
    \              closingBracketsStack.remove(closingBracketsStack.size() - 1);\n\
    \            } else if (c == ')' && openingBracketsStack.size() == 0) {\n    \
    \            result = false;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgp5ex8qk.java:28: error: incompatible types: int cannot be converted\
    \ to String\n                openingBrackets.add(i);\n                       \
    \             ^\n/tmp/tmpgp5ex8qk.java:29: error: incompatible types: int cannot\
    \ be converted to String\n                openingBracketsStack.add(i);\n     \
    \                                    ^\n/tmp/tmpgp5ex8qk.java:31: error: incompatible\
    \ types: int cannot be converted to String\n                closingBrackets.add(i);\n\
    \                                    ^\n/tmp/tmpgp5ex8qk.java:32: error: incompatible\
    \ types: int cannot be converted to String\n                closingBracketsStack.add(i);\n\
    \                                         ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1659794937
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\
    \ else {\n                if (stack.isEmpty()) {\n                    return false;\n\
    \                }\n                char top = stack.pop();\n                if\
    \ (top != c) {\n                    return false;\n                }\n       \
    \     }\n        }\n        return stack.isEmpty();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> bracketList = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketList2 = Arrays.asList(brackets.split(\"\
    \\\\)\"));\n        List<String> bracketList3 = Arrays.asList(brackets.split(\"\
    \\\\)\\\\(\"));\n        List<String> bracketList4 = Arrays.asList(brackets.split(\"\
    \\\\(|\\\\)\"));\n        List<String> bracketList5 = Arrays.asList(brackets.split(\"\
    \\\\(|\\\\)\\\\(\"));\n        List<String> bracketList6 = Arrays.asList(brackets.split(\"\
    \\\\(|\\\\)\\\\)\"));\n        List<String> bracketList7 = Arrays.asList(brackets.split(\"\
    \\\\(|\\\\)\\\\)\\\\(\"));\n        List<String> bracketList8 = Arrays.asList(brackets.split(\"\
    \\\\(|\\\\)\\\\)\\\\)\"));\n        List<String> bracketList9 = Arrays.asList(brackets.split(\"\
    \\\\(|\\\\)\\\\)\\\\)\\\\(\"));\n        List<String> bracketList10 = Arrays.asList(brackets.split(\"\
    \\\\(|\\\\)\\\\)\\\\)\\\\)\"));\n        List<String> bracketList11 = Arrays.asList(brackets.split(\"\
    \\\\(|\\\\)\\\\)\\\\)\\\\)\\\\(\"));\n        List<String> bracketList12 = Arrays.asList(brackets.split(\"\
    \\\\(|\\\\)\\\\)\\\\)\\\\)\\\\)\"));\n        List<String> bracketList13 = Arrays.asList(brackets.split(\"\
    \\\\(|\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\"));\n        List<String> bracketList14\
    \ = Arrays.asList(brackets.split(\"\\\\(|\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\"\
    ));\n        List<String> bracketList15 = Arrays.asList(brackets.split(\"\\\\\
    (|\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\"));\n        List<String> bracketList16\
    \ = Arrays.asList(brackets.split(\"\\\\(|\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\
    \\)\"));\n        List<String> bracketList17 = Arrays.asList(brackets.split(\"\
    \\\\(|\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\\\\)\"));\n        List<String>\
    \ bracketList18 = Arrays.asList(brackets.split(\"\\\\(|\\\\)\\\\)\\\\)\\\\)\\\\\
    )\\\\)\\\\)\\\\)\\\\)\\\\)\"));\n        List<String> bracketList19 = Arrays.\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxnhg1ex_.java:38: error: <identifier> expected\n        List<String>\
    \ bracketList19 = Arrays.\n                                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659794937
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\n\
    \        }\n        return stack.isEmpty();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                if(brackets.charAt(i+1) == '(') {\n\
    \                    result = true;\n                }\n                else {\n\
    \                    result = false;\n                }\n            }\n     \
    \       if(c == ')') {\n                if(brackets.charAt(i-1) == '(') {\n  \
    \                  result = true;\n                }\n                else {\n\
    \                    result = false;\n                }\n            }\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpugjhp_h0.java:44)\n"
  stdout: ''
  timestamp: 1659794937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> bracketsList = Arrays.asList(brackets.split(\"\
    \\\\(\"));\n        List<String> bracketsStack = new ArrayList<String>();\n  \
    \      for (String bracket : bracketsList) {\n            if (bracketsStack.isEmpty())\
    \ {\n                bracketsStack.add(bracket);\n            } else {\n     \
    \           String lastBracket = bracketsStack.get(bracketsStack.size() - 1);\n\
    \                if (bracket.equals(lastBracket)) {\n                    bracketsStack.remove(bracketsStack.size()\
    \ - 1);\n                } else {\n                    return false;\n       \
    \         }\n            }\n        }\n        return bracketsStack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpol1etjw9.java:37)\n"
  stdout: ''
  timestamp: 1659794937
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        boolean result = true;\n     \
    \   for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                if(brackets.charAt(i+1) != '(') {\n\
    \                    result = false;\n                    break;\n           \
    \     }\n                i++;\n            } else if(c == ')') {\n           \
    \     if(brackets.charAt(i) != ')') {\n                    result = false;\n \
    \                   break;\n                }\n                i++;\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4w6w_xr1.java:40)\n"
  stdout: ''
  timestamp: 1659794937
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            } else if(c == '[') {\n                stack.push(c);\n    \
    \        } else if(c == ']') {\n                if(stack.isEmpty()) {\n      \
    \              return false;\n                }\n                char top = stack.pop();\n\
    \                if(top != '[') {\n                    return false;\n       \
    \         }\n            } else if(c == '{') {\n                stack.push(c);\n\
    \            } else if(c == '}') {\n                if(stack.isEmpty()) {\n  \
    \                  return false;\n                }\n                char top\
    \ = stack.pop();\n                if(top != '{') {\n                    return\
    \ false;\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        boolean result = true;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if(c == '(') {\n\
    \                openingBrackets.add(c);\n            }\n            if(c == ')')\
    \ {\n                closingBrackets.add(c);\n            }\n        }\n     \
    \   if(openingBrackets.size() != closingBrackets.size()) {\n            result\
    \ = false;\n        }\n        for(int i = 0; i < openingBrackets.size(); i++)\
    \ {\n            if(!closingBrackets.contains(openingBrackets.get(i))) {\n   \
    \             result = false;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdltq_008.java:26: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmpdltq_008.java:29: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794937
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n\
    \                stack.push(c);\n            } else if (c == ')') {\n        \
    \        if (stack.isEmpty()) {\n                    return false;\n         \
    \       }\n                char top = stack.pop();\n                if (top !=\
    \ '(') {\n                    return false;\n                }\n            }\
    \ else {\n                if (stack.isEmpty() || c != stack.peek()) {\n      \
    \              return false;\n                }\n            }\n        }\n  \
    \      return stack.isEmpty();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"()\")) == (true));\n    assert(correctBracketing((\"\
    (()())\")) == (true));\n    assert(correctBracketing((\"()()(()())()\")) == (true));\n\
    \    assert(correctBracketing((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(correctBracketing((\"((()())))\")) == (false));\n    assert(correctBracketing((\"\
    )(()\")) == (false));\n    assert(correctBracketing((\"(\")) == (false));\n  \
    \  assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
    )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n   \
    \ assert(correctBracketing((\"()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"\
    ()()(()())()))()\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<String>();\n        List<String> closingBrackets = new ArrayList<String>();\n\
    \        List<String> bracketsList = new ArrayList<String>();\n        bracketsList.add(\"\
    (\");\n        bracketsList.add(\")\");\n        bracketsList.add(\"[\");\n  \
    \      bracketsList.add(\"]\");\n        bracketsList.add(\"{\");\n        bracketsList.add(\"\
    }\");\n        bracketsList.add(\"(\");\n        bracketsList.add(\")\");\n  \
    \      bracketsList.add(\"[\");\n        bracketsList.add(\"]\");\n        bracketsList.add(\"\
    {\");\n        bracketsList.add(\"}\");\n        bracketsList.add(\"(\");\n  \
    \      bracketsList.add(\")\");\n        bracketsList.add(\"[\");\n        bracketsList.add(\"\
    ]\");\n        bracketsList.add(\"{\");\n        bracketsList.add(\"}\");\n  \
    \      bracketsList.add(\"(\");\n        bracketsList.add(\")\");\n        bracketsList.add(\"\
    [\");\n        bracketsList.add(\"]\");\n        bracketsList.add(\"{\");\n  \
    \      bracketsList.add(\"}\");\n        bracketsList.add(\"(\");\n        bracketsList.add(\"\
    )\");\n        bracketsList.add(\"[\");\n        bracketsList.add(\"]\");\n  \
    \      bracketsList.add(\"{\");\n        bracketsList.add(\"}\");\n        bracketsList.add(\"\
    (\");\n        bracketsList.add(\")\");\n        bracketsList.add(\"[\");\n  \
    \      bracketsList.add(\"]\");\n        bracketsList.add(\"{\");\n        bracketsList.add(\"\
    }\");\n        bracketsList.add(\"(\");\n        bracketsList.add(\")\");\n  \
    \      bracketsList.add(\"[\");\n        bracketsList.add(\"]\");\n        bracketsList.add(\"\
    {\");\n        bracketsList.add(\"}\");\n        bracketsList.add(\"(\");\n  \
    \      bracketsList.add(\")\");\n        bracketsList.add(\"[\");\n        bracketsList.add(\"\
    ]\");\n        bracketsList.add(\"{\");\n        bracketsList.add(\"}\");\n  \
    \      bracketsList.add(\"(\");\n        bracketsList.add(\")\");\n        bracketsList.add(\"\
    [\");\n        bracketsList.add(\"]\");\n        bracketsList.add(\"{\");\n  \
    \      bracketsList.add(\"}\");\n        bracketsList.add(\"(\");\n        bracketsList.add(\"\
    )\");\n        bracketsList.add(\"[\");\n        bracketsList.add(\"]\");\n  \
    \      bracketsList.add(\"{\");\n        bracketsList.add(\"}\");\n    }\n   \
    \ public static void main(String[] args) {\n    assert(correctBracketing((\"()\"\
    )) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprz8b2ecd.java:83: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659794937
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '(') {\n                stack.push(c);\n            } else\
    \ if (c == ')') {\n                if (stack.isEmpty()) {\n                  \
    \  return false;\n                }\n                char top = stack.pop();\n\
    \                if (top != '(') {\n                    return false;\n      \
    \          }\n            }\n        }\n        return stack.isEmpty();\n    }\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ Arrays.asList(brackets.split(\"\\\\(\"));\n        List<String> closingBrackets\
    \ = Arrays.asList(brackets.split(\"\\\\)\"));\n        List<String> openingBracketsCopy\
    \ = new ArrayList<>(openingBrackets);\n        List<String> closingBracketsCopy\
    \ = new ArrayList<>(closingBrackets);\n        openingBracketsCopy.removeAll(closingBracketsCopy);\n\
    \        return openingBracketsCopy.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxsrjza08.java:28)\n"
  stdout: ''
  timestamp: 1659794936
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                } else {\n                    char top = stack.pop();\n\
    \                    if(top != '(') {\n                        return false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ stack.isEmpty();\n    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        List<String> openingBrackets =\
    \ new ArrayList<>();\n        List<String> closingBrackets = new ArrayList<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                openingBrackets.add(c);\n       \
    \     } else if(c == ')') {\n                closingBrackets.add(c);\n       \
    \     }\n        }\n        if(openingBrackets.size() != closingBrackets.size())\
    \ {\n            return false;\n        }\n        for(int i = 0; i < openingBrackets.size();\
    \ i++) {\n            if(!closingBrackets.contains(openingBrackets.get(i))) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n \
    \   assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
    )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc4pn9xev.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add(c);\n                       \
    \             ^\n/tmp/tmpc4pn9xev.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add(c);\n          \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659794937
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                char top = stack.pop();\n                if(top\
    \ != '(') {\n                    return false;\n                }\n          \
    \  }\n        }\n        return stack.isEmpty();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"()\")) == (true));\n\
    \    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.correctBracketing(tmpjjqo44n3.java:26)\n\
    \tat Problem.main(tmpjjqo44n3.java:39)\n"
  stdout: ''
  timestamp: 1659794934
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"\
    ()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n\
    \    // >>> correctBracketing((\")(()\"))\n    // (false)\n    public static boolean\
    \ correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '(') {\n                stack.push(c);\n            } else\
    \ if(c == ')') {\n                if(stack.isEmpty()) {\n                    return\
    \ false;\n                }\n                char top = stack.pop();\n       \
    \         if(top != '(') {\n                    return false;\n              \
    \  }\n            }\n        }\n        return stack.isEmpty();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"()\")) ==\
    \ (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n    assert(correctBracketing((\"\
    ()()(()())()\")) == (true));\n    assert(correctBracketing((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(correctBracketing((\"((()())))\")) == (false));\n \
    \   assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
    (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n  \
    \  assert(correctBracketing((\")\")) == (false));\n    assert(correctBracketing((\"\
    (()\")) == (false));\n    assert(correctBracketing((\"()()(()())())(()\")) ==\
    \ (false));\n    assert(correctBracketing((\"()()(()())()))()\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794934
