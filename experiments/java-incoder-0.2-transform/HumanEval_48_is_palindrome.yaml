name: HumanEval_48_is_palindrome
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Checks if given string is a palindrome\n    // >>> isPalindrome((\"\
  \"))\n    // (true)\n    // >>> isPalindrome((\"aba\"))\n    // (true)\n    // >>>\
  \ isPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> isPalindrome((\"zbcd\"))\n\
  \    // (false)\n    public static boolean isPalindrome(String text) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(isPalindrome((\"\
  \")) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
  aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
  xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"\
  xywzx\")) == (false));\n    }\n\n}\n"
completions: ["        char[] charArray = text.toCharArray();\n        Arrays.sort(charArray);\n\
    \        return new String(charArray).equals(new String(charArray).reverse());",
  "        char[] chars = text.toCharArray();\n        Arrays.sort(chars);\n     \
    \   return Arrays.equals(chars, new StringBuilder(chars).reverse().toCharArray());",
  '        return text.equals(new StringBuilder(text).reverse().toString());', " \
    \       char[] chars = text.toCharArray();\n        Arrays.sort(chars);\n    \
    \    return new String(chars).equals(new String(chars).trim());", "        char[]\
    \ chars = text.toCharArray();\n        Arrays.sort(chars);\n        return new\
    \ String(chars).equals(new String(chars).substring(chars.length / 2, chars.length\
    \ / 2 + 1));", "        if (text.length() <= 1)\n            return true;\n  \
    \      if (text.charAt(0) == text.charAt(text.length() - 1))\n            return\
    \ isPalindrome(text.substring(1, text.length() - 1));\n        else\n        \
    \    return false;", '        return text.equals(new StringBuilder(text).reverse().toString());',
  "        if (text == null || text.length() < 2) {\n            return true;\n  \
    \      }\n        char[] chars = text.toCharArray();\n        Arrays.sort(chars);\n\
    \        return Arrays.equals(chars, new char[chars.length / 2]);", "        if\
    \ (text == null || text.length() == 0) {\n            return true;\n        }\n\
    \        char[] charArray = text.toCharArray();\n        Arrays.sort(charArray);\n\
    \        return new String(charArray).equals(new String(charArray).reverse());",
  "        char[] chars = text.toCharArray();\n        Arrays.sort(chars);\n     \
    \   return new String(chars).equals(new String(chars).substring(1, chars.length\
    \ - 1));", "        if (text.length() <= 1) return true;\n        if (text.charAt(0)\
    \ == text.charAt(text.length() - 1)) {\n            return isPalindrome(text.substring(1,\
    \ text.length() - 1));\n        }\n        return false;", "        char[] chars\
    \ = text.toCharArray();\n        Arrays.sort(chars);\n        return Arrays.equals(chars,\
    \ new StringBuilder(chars).reverse().toCharArray());", "        char[] chars =\
    \ text.toCharArray();\n        Arrays.sort(chars);\n        return new String(chars).equals(new\
    \ String(chars).chars().\n                reverse().toArray());", "        char[]\
    \ charArray = text.toCharArray();\n        Arrays.sort(charArray);\n        return\
    \ Arrays.equals(charArray, new StringBuilder(charArray).reverse().toCharArray());",
  '        return text.equals(new StringBuilder(text).reverse().toString());', " \
    \       char[] charArray = text.toCharArray();\n        Arrays.sort(charArray);\n\
    \        return Arrays.equals(charArray, new StringBuilder(charArray).reverse().toCharArray());",
  "        char[] chars = text.toCharArray();\n        int length = chars.length;\n\
    \        int half = length / 2;\n        for (int i = 0; i < half; i++) {\n  \
    \          if (chars[i] != chars[length - i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;", "        if (text == null ||\
    \ text.length() == 0) {\n            return true;\n        }\n        char[] charArray\
    \ = text.toCharArray();\n        Arrays.sort(charArray);\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            builder.append(charArray[i]);\n        }\n        return\
    \ builder.toString().equals(new StringBuilder(text).reverse().toString());", " \
    \       char[] chars = text.toCharArray();\n        Arrays.sort(chars);\n    \
    \    return new String(chars).equals(new String(chars).substring(1, chars.length));",
  "        if (text == null || text.length() == 0) {\n            return true;\n \
    \       }\n        char[] chars = text.toCharArray();\n        Arrays.sort(chars);\n\
    \        return new String(chars).equals(new String(chars).reverse());"]
stop_tokens:
- "\n    }\n"
