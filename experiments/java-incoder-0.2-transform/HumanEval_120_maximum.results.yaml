language: java
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        long max = arr.get(arr.size() - 1);\n        long maxIndex = arr.size()\
    \ - 1;\n        long currentMax = max;\n        long currentMaxIndex = maxIndex;\n\
    \        long currentMaxValue = max;\n        long currentMaxValueIndex = maxIndex;\n\
    \        long currentMaxValueValue = max;\n        long currentMaxValueValueIndex\
    \ = maxIndex;\n        long currentMaxValueValueValue = max;\n        long currentMaxValueValueValueIndex\
    \ = maxIndex;\n        long currentMaxValueValueValueValue = max;\n        long\
    \ currentMaxValueValueValueIndex = maxIndex;\n        long currentMaxValueValueValueValue\
    \ = max;\n        long currentMaxValueValueValueIndex = maxIndex;\n        long\
    \ currentMaxValueValueValueValue = max;\n        long currentMaxValueValueValueIndex\
    \ = maxIndex;\n        long currentMaxValueValueValueValue = max;\n        long\
    \ currentMaxValueValueValueIndex = maxIndex;\n        long currentMaxValueValueValueValue\
    \ = max;\n        long currentMaxValueValueValueIndex = maxIndex;\n        long\
    \ currentMaxValueValueValueValue = max;\n        long currentMaxValueValueValueIndex\
    \ = maxIndex;\n        long currentMaxValueValueValueValue = max;\n        long\
    \ currentMaxValueValueValueIndex = maxIndex;\n        long currentMaxValueValueValueValue\
    \ = max;\n        long currentMaxValueValueValueIndex = maxIndex;\n        long\
    \ currentMaxValueValueValueValue = max;\n        long currentMaxValueValueValueIndex\
    \ = maxIndex;\n        long currentMaxValueValueValueValue = max;\n        long\
    \ currentMaxValueValueValueIndex = maxIndex;\n        long currentMaxValueValueValueValue\
    \ = max;\n        long currentMaxValueValueValueIndex = maxIndex;\n        long\
    \ currentMaxValueValueValueValue = max;\n        long currentMaxValueValueValueIndex\
    \ = maxIndex;\n        long currentMaxValueValueValueValue = max;\n        long\
    \ currentMaxValueValueValueIndex = maxIndex;\n        long currentMaxValueValueValueValue\
    \ = max;\n        long currentMaxValueValueValueIndex = maxIndex;\n        long\
    \ currentMaxValueValueValueValue = max;\n        long currentMaxValueValueValueIndex\
    \ = maxIndex;\n        long currentMaxValueValueValueValue = max;\n        long\
    \ currentMaxValueValueValueIndex = maxIndex;\n        long currentMaxValueValueValueValue\
    \ = max;\n        long currentMaxValueValueValueIndex = maxIndex;\n        long\
    \ currentMaxValueValueValueValue = max;\n        long currentMaxValueValueValueIndex\
    \ = maxIndex;\n        long currentMaxValueValueValueValue = max\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz49bmm9m.java:73: error: ';' expected\n        long currentMaxValueValueValueValue\
    \ = max\n                                                 ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        long max = 0;\n        long maxIndex = 0;\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max\
    \ = arr.get(i);\n                maxIndex = i;\n            }\n        }\n   \
    \     if (maxIndex - k >= 0) {\n            max = arr.get(maxIndex - k);\n   \
    \     }\n        result.add(max);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0xqfnou3.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp0xqfnou3.java:36: error: no suitable method found for get(long)\n\
    \            max = arr.get(maxIndex - k);\n                     ^\n    method\
    \ List.get(int) is not applicable\n      (argument mismatch; possible lossy conversion\
    \ from long to int)\n    method AbstractList.get(int) is not applicable\n    \
    \  (argument mismatch; possible lossy conversion from lon"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        Arrays.sort(arr);\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long currentMax =\
    \ arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) > currentMax) {\n                currentMax = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        long currentMaxIndex\
    \ = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if\
    \ (arr.get(i) > currentMax) {\n                currentMax = arr.get(i);\n    \
    \            maxIndex = i;\n            }\n        }\n        if (currentMaxIndex\
    \ - maxIndex > k) {\n            k = currentMaxIndex - maxIndex;\n        }\n\
    \        long maxIndex2 = maxIndex - k;\n        long maxIndex3 = maxIndex2 -\
    \ k;\n        long maxIndex4 = maxIndex3 - k;\n        long maxIndex5 = maxIndex4\
    \ - k;\n        long maxIndex6 = maxIndex5 - k;\n        long maxIndex7 = maxIndex6\
    \ - k;\n        long maxIndex8 = maxIndex7 - k;\n        long maxIndex9 = maxIndex8\
    \ - k;\n        long maxIndex10 = maxIndex9 - k;\n        long maxIndex11 = maxIndex10\
    \ - k;\n        long maxIndex12 = maxIndex11 - k;\n        long maxIndex13 = maxIndex12\
    \ - k;\n        long maxIndex14 = maxIndex13 - k;\n        long maxIndex15 = maxIndex14\
    \ - k;\n        long maxIndex16 = maxIndex15 - k;\n        long maxIndex17 = maxIndex16\
    \ - k;\n        long maxIndex18 = maxIndex17 - k;\n        long maxIndex19 = maxIndex18\
    \ - k;\n        long maxIndex20 = maxIndex19 - k;\n        long maxIndex21 = maxIndex20\
    \ - k;\n        long maxIndex22 = maxIndex21 - k;\n        long maxIndex23 = maxIndex22\
    \ - k;\n        long maxIndex24 = maxIndex23 - k;\n        long maxIndex25 = maxIndex24\
    \ - k;\n        long maxIndex26 = maxIndex25 - k;\n        long maxIndex27 = maxIndex26\
    \ - k;\n        long maxIndex28 = maxIndex27 - k;\n        long maxIndex29 = maxIndex28\
    \ - k;\n        long maxIndex30 = maxIndex29 - k;\n        long maxIndex31 = maxIndex30\
    \ - k;\n        long maxIndex32 = maxIndex31 - k;\n        long maxIndex33 = maxIndex32\
    \ - k;\n        long maxIndex34 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcbeucbbh.java:79: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpcbeucbbh.java:80: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpcbeucbbh.java:80: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmpcbeucbbh.java:80:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmpcbeucbbh.java:80: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmpcbeucbbh.java:80:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpcbeucbbh.java:94: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        long max = 0;\n        long maxIndex = 0;\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max\
    \ = arr.get(i);\n                maxIndex = i;\n            }\n        }\n   \
    \     if (maxIndex < k) {\n            k = maxIndex;\n        }\n        ArrayList<Long>\
    \ subArr = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n       \
    \     subArr.add(arr.get(i));\n        }\n        result.addAll(subArr);\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphk0uie95.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long max = 0;\n  \
    \      long min = 0;\n        long maxIndex = 0;\n        long minIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max,\
    \ arr.get(i));\n            min = Math.min(min, arr.get(i));\n            maxIndex\
    \ = i;\n            minIndex = i;\n        }\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            if(arr.get(i) == max) {\n                result.add(max);\n\
    \                maxIndex = i;\n            }\n            if(arr.get(i) == min)\
    \ {\n                result.add(min);\n                minIndex = i;\n       \
    \     }\n        }\n        if(maxIndex - minIndex > k) {\n            for(int\
    \ i = maxIndex; i < minIndex; i++) {\n                result.add(arr.get(i));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo1bkz25p.java:47: error: incompatible types: possible lossy conversion\
    \ from long to int\n            for(int i = maxIndex; i < minIndex; i++) {\n \
    \                       ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long max = Long.MIN_VALUE;\n\
    \        long maxIndex = 0;\n        for (long i : arr) {\n            if (max\
    \ < i) {\n                max = i;\n                maxIndex = 0;\n          \
    \  } else if (max > i) {\n                maxIndex++;\n            }\n       \
    \ }\n        if (maxIndex < k) {\n            while (maxIndex < k) {\n       \
    \         result.add(max);\n                maxIndex++;\n            }\n     \
    \   } else {\n            while (maxIndex > k) {\n                result.add(max);\n\
    \                maxIndex--;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp95nbv2q_.java:50)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long max = Long.MIN_VALUE;\n\
    \        for (long i : arr) {\n            if (max < i) {\n                max\
    \ = i;\n            }\n        }\n        long maxIndex = arr.indexOf(max);\n\
    \        if (maxIndex < k) {\n            k = maxIndex;\n        }\n        ArrayList<Long>\
    \ subArr = new ArrayList<>();\n        for (long i = 0; i < k; i++) {\n      \
    \      subArr.add(arr.get(i));\n        }\n        Collections.sort(subArr);\n\
    \        result.addAll(subArr);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1r_oa2zy.java:38: error: no suitable method found for get(long)\n\
    \            subArr.add(arr.get(i));\n                          ^\n    method\
    \ List.get(int) is not applicable\n      (argument mismatch; possible lossy conversion\
    \ from long to int)\n    method AbstractList.get(int) is not applicable\n    \
    \  (argument mismatch; possible lossy conversion from long to int)\n    method\
    \ ArrayList.get(int) is not applicable\n      (argument mismatch; possible lossy\
    \ conversion from long to int)\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        long max = 0;\n        long maxIndex = 0;\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(arr.get(i) > max) {\n                max\
    \ = arr.get(i);\n                maxIndex = i;\n            }\n        }\n   \
    \     result.add(max);\n        for(int i = maxIndex; i < arr.size(); i++) {\n\
    \            if(arr.get(i) > max) {\n                max = arr.get(i);\n     \
    \           maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        for(int i = maxIndex; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        result.add(max);\n        for(int i = maxIndex;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n               \
    \ max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n\
    \        result.add(max);\n        for(int i = maxIndex; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n \
    \               maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        for(int i = maxIndex; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        result.add(max);\n        for(int i = maxIndex;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n               \
    \ max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n\
    \        result.add(max);\n        for(int i = maxIndex; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n \
    \               maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        for(int i = maxIndex; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        result.add(max);\n        for(int i = maxIndex;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n               \
    \ max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n\
    \        result.add(max);\n        for(int i = maxIndex; i < arr.size(); i++)\
    \ {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n \
    \               maxIndex = i;\n            }\n        }\n        result.add(max);\n\
    \        for(int i = maxIndex; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n                maxIndex = i;\n\
    \            }\n        }\n        result.add(max);\n        for(int i = maxIndex;\
    \ i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n               \
    \ max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n\
    \n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp50c_sbqx.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp50c_sbqx.java:36: error: incompatible types: possible lossy\
    \ conversion from long to int\n        for(int i = maxIndex; i < arr.size(); i++)\
    \ {\n                    ^\n/tmp/tmp50c_sbqx.java:43: error: incompatible types:\
    \ possible lossy conversion from long to int\n        for(int i = maxIndex; i\
    \ < arr.size(); i++) {\n                    ^\n/tmp/tmp50c_sbqx.j"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long max = Long.MIN_VALUE;\n\
    \        long maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(arr.get(i) > max) {\n                max = arr.get(i);\n      \
    \          maxIndex = i;\n            }\n        }\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(arr.get(i) == max) {\n                result.add(arr.get(maxIndex));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_nclargr.java:36: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conversion from long to\
    \ int)\n    method ArrayList.get(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        Arrays.sort(arr);\n\
    \        long max = 0;\n        long min = Long.MAX_VALUE;\n        long mid =\
    \ 0;\n        long maxIndex = 0;\n        long minIndex = 0;\n        long maxCount\
    \ = 0;\n        long minCount = 0;\n        long maxCount2 = 0;\n        long\
    \ minCount2 = 0;\n        long maxCount3 = 0;\n        long minCount3 = 0;\n \
    \       long maxCount4 = 0;\n        long minCount4 = 0;\n        long maxCount5\
    \ = 0;\n        long minCount5 = 0;\n        long maxCount6 = 0;\n        long\
    \ minCount6 = 0;\n        long maxCount7 = 0;\n        long minCount7 = 0;\n \
    \       long maxCount8 = 0;\n        long minCount8 = 0;\n        long maxCount9\
    \ = 0;\n        long minCount9 = 0;\n        long maxCount10 = 0;\n        long\
    \ minCount10 = 0;\n        long maxCount11 = 0;\n        long minCount11 = 0;\n\
    \        long maxCount12 = 0;\n        long minCount12 = 0;\n        long maxCount13\
    \ = 0;\n        long minCount13 = 0;\n        long maxCount14 = 0;\n        long\
    \ minCount14 = 0;\n        long maxCount15 = 0;\n        long minCount15 = 0;\n\
    \        long maxCount16 = 0;\n        long minCount16 = 0;\n        long maxCount17\
    \ = 0;\n        long minCount17 = 0;\n        long maxCount18 = 0;\n        long\
    \ minCount18 = 0;\n        long maxCount19 = 0;\n        long minCount19 = 0;\n\
    \        long maxCount20 = 0;\n        long minCount20 = 0;\n        long maxCount21\
    \ = 0;\n        long minCount21 = 0;\n        long maxCount22 = 0;\n        long\
    \ minCount22 = 0;\n        long maxCount23 = 0;\n        long minCount23 = 0;\n\
    \        long maxCount24 = 0;\n        long minCount24 = 0;\n        long maxCount25\
    \ = 0;\n        long minCount25 = 0;\n        long maxCount26 = 0;\n        long\
    \ minCount26 = 0;\n        long maxCount27 = 0;\n        long minCount27 = 0;\n\
    \        long maxCount28 = 0;\n        long minCount28 = 0;\n        long maxCount29\
    \ = 0;\n        long minCount29 = 0;\n        long maxCount30 = 0;\n        long\
    \ minCount30 = 0;\n        long maxCount31 = 0;\n        long minCount31 = 0;\n\
    \        long maxCount32 = 0;\n        long minCount32 = 0;\n        long maxCount33\
    \ = 0;\n        long minCount33 = 0;\n        long maxCount34 = 0;\n        long\
    \ minCount34 = 0;\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo72e6cjf.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        long max = 0;\n        for (long i : arr) {\n            if (max < i)\
    \ {\n                max = i;\n            }\n        }\n        if (max < k)\
    \ {\n            max = k;\n        }\n        long start = 0;\n        long end\
    \ = arr.size() - 1;\n        while (start <= end) {\n            long mid = (start\
    \ + end) / 2;\n            if (arr[mid] >= max) {\n                end = mid -\
    \ 1;\n            } else {\n                start = mid + 1;\n            }\n\
    \        }\n        for (long i = start; i <= end; i++) {\n            result.add(arr.get(i));\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsokyjj5.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmphsokyjj5.java:40: error: incompatible types: possible lossy\
    \ conversion from long to int\n            if (arr[mid] >= max) {\n          \
    \          ^\n/tmp/tmphsokyjj5.java:40: error: array required, but ArrayList<Long>\
    \ found\n            if (arr[mid] >= max) {\n                   ^\n/tmp/tmphsokyjj5.java:47:\
    \ error: no suitable method found for get(long)\n    "
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        long max = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long i : arr) {\n          \
    \  if (i < min) {\n                min = i;\n            }\n            if (i\
    \ > max) {\n                max = i;\n            }\n        }\n        long mid\
    \ = max - (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n  \
    \      long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo_a_79rm.java:82: error: ';' expected\n        long mid47 = mid46\n\
    \                          ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        Arrays.sort(arr);\n\
    \        long max = arr.get(arr.size() - 1);\n        long maxIndex = 0;\n   \
    \     long maxIndex2 = 0;\n        long maxIndex3 = 0;\n        long maxIndex4\
    \ = 0;\n        long maxIndex5 = 0;\n        long maxIndex6 = 0;\n        long\
    \ maxIndex7 = 0;\n        long maxIndex8 = 0;\n        long maxIndex9 = 0;\n \
    \       long maxIndex10 = 0;\n        long maxIndex11 = 0;\n        long maxIndex12\
    \ = 0;\n        long maxIndex13 = 0;\n        long maxIndex14 = 0;\n        long\
    \ maxIndex15 = 0;\n        long maxIndex16 = 0;\n        long maxIndex17 = 0;\n\
    \        long maxIndex18 = 0;\n        long maxIndex19 = 0;\n        long maxIndex20\
    \ = 0;\n        long maxIndex21 = 0;\n        long maxIndex22 = 0;\n        long\
    \ maxIndex23 = 0;\n        long maxIndex24 = 0;\n        long maxIndex25 = 0;\n\
    \        long maxIndex26 = 0;\n        long maxIndex27 = 0;\n        long maxIndex28\
    \ = 0;\n        long maxIndex29 = 0;\n        long maxIndex30 = 0;\n        long\
    \ maxIndex31 = 0;\n        long maxIndex32 = 0;\n        long maxIndex33 = 0;\n\
    \        long maxIndex34 = 0;\n        long maxIndex35 = 0;\n        long maxIndex36\
    \ = 0;\n        long maxIndex37 = 0;\n        long maxIndex38 = 0;\n        long\
    \ maxIndex39 = 0;\n        long maxIndex40 = 0;\n        long maxIndex41 = 0;\n\
    \        long maxIndex42 = 0;\n        long maxIndex43 = 0;\n        long maxIndex44\
    \ = 0;\n        long maxIndex45 = 0;\n        long maxIndex46 = 0;\n        long\
    \ maxIndex47 = 0;\n        long maxIndex48 = 0;\n        long maxIndex49 = 0;\n\
    \        long maxIndex50 = 0;\n        long maxIndex51 = 0;\n        long maxIndex52\
    \ = 0;\n        long maxIndex53 = 0;\n        long maxIndex54 = 0;\n        long\
    \ maxIndex55 = 0;\n        long maxIndex56 = 0;\n        long maxIndex57 = 0;\n\
    \        long maxIndex58 = 0;\n        long maxIndex59 = 0;\n        long maxIndex60\
    \ = 0;\n        long maxIndex61 = 0;\n        long maxIndex62 = 0;\n        long\
    \ maxIndex63 = 0;\n        long maxIndex64 = 0;\n        long maxIndex65 = 0;\n\
    \        long maxIndex66 = 0;\n        long maxIndex67 = 0;\n        long maxIndex68\
    \ = 0;\n        long maxIndex69 = 0;\n        long maxIndex70 = 0;\n        \n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo2m3auyp.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        long max = 0;\n\
    \        long min = 0;\n        long maxIndex = 0;\n        long minIndex = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            max = Math.max(max,\
    \ arr.get(i));\n            min = Math.min(min, arr.get(i));\n            maxIndex\
    \ = i;\n            minIndex = i;\n        }\n        for(int i = arr.size() -\
    \ 1; i >= 0; i--) {\n            if(arr.get(i) > max) {\n                max =\
    \ arr.get(i);\n                maxIndex = i;\n            }\n            if(arr.get(i)\
    \ < min) {\n                min = arr.get(i);\n                minIndex = i;\n\
    \            }\n        }\n        if(maxIndex - minIndex < k) {\n           \
    \ k = maxIndex - minIndex;\n        }\n        for(int i = minIndex; i <= maxIndex;\
    \ i++) {\n            result.add(arr.get(i));\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq_z9nmhh.java:49: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for(int i = minIndex; i <= maxIndex; i++) {\n    \
    \                ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        long maxValue = arr.get(arr.size() - 1);\n        long maxIndex = arr.size()\
    \ - 1;\n        long currentMaxValue = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = maxIndex;\n        long currentMax = maxValue;\n        long currentMaxIndex\
    \ = \n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4pjuzxfi.java:89: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp4pjuzxfi.java:90: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp4pjuzxfi.java:90: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmp4pjuzxfi.java:90:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmp4pjuzxfi.java:90: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmp4pjuzxfi.java:90:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmp4pjuzxfi.java:104: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        long max = 0;\n        long maxIndex = 0;\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(arr.get(i) > max) {\n                max\
    \ = arr.get(i);\n                maxIndex = i;\n            }\n        }\n   \
    \     for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == max)\
    \ {\n                result.add(arr.get(maxIndex));\n            }\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))),\
    \ (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n \
    \   assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l,\
    \ (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpudwqd1dd.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpudwqd1dd.java:37: error: no suitable method found for get(long)\n\
    \                result.add(arr.get(maxIndex));\n                            \
    \  ^\n    method List.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from long to int)\n    method AbstractList.get(int) is not\
    \ applicable\n      (argument mismatch; possible lossy conv"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        long maxValue = arr.get(0);\n\
    \        long maxIndex = -1;\n        for(int i = 1; i < arr.size(); i++) {\n\
    \            long value = arr.get(i);\n            if(value > maxValue) {\n  \
    \              maxValue = value;\n                maxIndex = i;\n            }\n\
    \        }\n        if(maxIndex - k >= 0) {\n            for(int i = maxIndex\
    \ - k; i < maxIndex; i++) {\n                result.add(arr.get(i));\n       \
    \     }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l,\
    \ (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl2g0kj1f.java:36: error: incompatible types: possible lossy conversion\
    \ from long to int\n            for(int i = maxIndex - k; i < maxIndex; i++) {\n\
    \                                 ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        long maxValue = arr.get(arr.size() - 1);\n        long maxIndex = arr.size()\
    \ - 1;\n        long currentValue = arr.get(0);\n        long currentIndex = arr.size()\
    \ - 1;\n        while (currentIndex >= 0 && currentValue > maxValue) {\n     \
    \       currentIndex--;\n            currentValue = arr.get(currentIndex);\n \
    \       }\n        while (currentIndex >= 0 && currentIndex < arr.size() && currentValue\
    \ > maxValue) {\n            currentIndex++;\n            currentValue = arr.get(currentIndex);\n\
    \        }\n        while (currentIndex < arr.size() && currentValue > maxValue)\
    \ {\n            result.add(arr.get(currentIndex));\n            currentIndex++;\n\
    \            currentValue = arr.get(currentIndex);\n        }\n        if (currentIndex\
    \ >= arr.size()) {\n            result.add(arr.get(currentIndex));\n        }\n\
    \        if (currentIndex < arr.size() && currentValue > maxValue) {\n       \
    \     result.add(arr.get(currentIndex));\n        }\n        if (currentIndex\
    \ < arr.size() && currentIndex >= 0) {\n            while (currentIndex < arr.size()\
    \ && currentValue > maxValue) {\n                result.add(arr.get(currentIndex));\n\
    \                currentIndex++;\n                currentValue = arr.get(currentIndex);\n\
    \            }\n        }\n        if (currentIndex >= arr.size()) {\n       \
    \     result.add(arr.get(currentIndex));\n        }\n        if (currentIndex\
    \ < arr.size() && currentIndex >= 0) {\n            while (currentIndex < arr.size()\
    \ && currentIndex >= 0) {\n                result.add(arr.get(currentIndex));\n\
    \                currentIndex--;\n                currentValue = arr.get(currentIndex);\n\
    \            }\n        }\n        if (currentIndex >= arr.size()) {\n       \
    \     result.add(arr.get(currentIndex));\n        }\n        if (currentIndex\
    \ < arr.size() && currentIndex >= 0) {\n            while (currentIndex < arr.size()\
    \ && currentIndex >= 0) {\n                result.add(arr.get(currentIndex));\n\
    \                currentIndex--;\n                currentValue = arr.get(currentIndex);\n\
    \            }\n        }\n        if (currentIndex >= arr.size()) {\n       \
    \     result.add(arr.get(currentIndex));\n        }\n        if (currentIndex\
    \ < arr.size() && currentIndex >= 0) {\n            while (currentIndex < arr.size()\
    \ && currentIndex >= 0) {\n                result.add(arr.get(currentIndex));\n\
    \                currentIndex--;\n                currentValue = arr.get(currentIndex);\n\
    \            }\n        }\n        if (currentIndex >= arr.size()) {\n       \
    \     result.add(arr.get(currentIndex));\n        }\n        if (currentIndex\
    \ < arr.size() && currentIndex >= 0) {\n            while (currentIndex < arr.size()\
    \ && currentIndex >= 0) {\n                result.add(arr.get(currentIndex));\n\
    \                currentIndex--;\n                currentValue = arr.get(currentIndex);\n\
    \            }\n    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwop11n05.java:97: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpwop11n05.java:97: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpwop11n05.java:97: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpwop11n05.java:97: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpwop11n05.java:97: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpwop11n05.java:111:\
    \ error: reached end of file while parsing\n}\n ^\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        long max = 0;\n\
    \        long min = Long.MAX_VALUE;\n        for (long i : arr) {\n          \
    \  if (max < i) {\n                max = i;\n            }\n            if (min\
    \ > i) {\n                min = i;\n            }\n        }\n        if (max\
    \ > min) {\n            long mid = (max + min) / 2;\n            for (long i :\
    \ arr) {\n                if (i > mid) {\n                    result.add(i);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l,\
    \ (long)-123l, (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)2l, (long)20l, (long)123l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-123l, (long)20l, (long)0l, (long)1l, (long)2l,\
    \ (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l,\
    \ (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp36lu365v.java:47)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)-4l, (long)5l))), (3l))\n    // (new ArrayList<Long>(Arrays.asList((long)-4l,\
    \ (long)-3l, (long)5l)))\n    // Example 2:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)-4l, (long)4l))), (2l))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)4l)))\n    // Example 3:\n    // >>> maximum((new ArrayList<Long>(Arrays.asList((long)-3l,\
    \ (long)2l, (long)1l, (long)2l, (long)-1l, (long)-2l, (long)1l))), (1l))\n   \
    \ // (new ArrayList<Long>(Arrays.asList((long)2l)))\n    // Note:\n    // 1. The\
    \ length of the array will be in the range of [1, 1000].\n    // 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n\
    \    public static ArrayList<Long> maximum(ArrayList<Long> arr, long k) {\n  \
    \      ArrayList<Long> result = new ArrayList<Long>();\n        long max = 0;\n\
    \        long min = 0;\n        long sum = 0;\n        long count = 0;\n     \
    \   for (long i : arr) {\n            sum += i;\n            if (sum > max) {\n\
    \                max = sum;\n            }\n            if (sum < min) {\n   \
    \             min = sum;\n            }\n            if (count < k) {\n      \
    \          result.add(i);\n                count++;\n            }\n        }\n\
    \        if (count < k) {\n            while (count < k) {\n                result.add(max);\n\
    \                count++;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l))), (3l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-4l, (long)-3l, (long)5l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)-4l, (long)4l))), (2l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))));\n    assert(maximum((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)2l, (long)1l, (long)2l, (long)-1l,\
    \ (long)-2l, (long)1l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)123l, (long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
    \ (long)20l, (long)123l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-123l,\
    \ (long)20l, (long)0l, (long)1l, (long)2l, (long)-3l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)2l, (long)20l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)5l,\
    \ (long)15l, (long)0l, (long)3l, (long)-13l, (long)-8l, (long)0l))), (7l)).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-13l, (long)-8l, (long)0l, (long)0l, (long)3l,\
    \ (long)5l, (long)15l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)0l, (long)2l, (long)5l, (long)3l, (long)-10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)3l,\
    \ (long)5l)))));\n    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)0l, (long)5l, (long)-7l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)5l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)4l, (long)-4l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-4l, (long)4l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l))),\
    \ (2l)).equals((new ArrayList<Long>(Arrays.asList((long)-10l, (long)10l)))));\n\
    \    assert(maximum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
    \ (long)-23l, (long)243l, (long)-400l, (long)0l))), (0l)).equals((new ArrayList<Long>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn_01j692.java:52)\n"
  stdout: ''
