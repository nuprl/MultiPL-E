name: HumanEval_59_largest_prime_factor
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is\
  \ not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>>\
  \ largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
  \ n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        long largestPrimeFactor = n;\n        long i = 2;\n       \
    \ while (largestPrimeFactor % i == 0) {\n            largestPrimeFactor = largestPrimeFactor\
    \ / i;\n            i++;\n        }\n        return largestPrimeFactor;", "  \
    \      long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;", "        long largestPrimeFactor = n;\n \
    \       long primeFactor = 2;\n        while (primeFactor * primeFactor <= n)\
    \ {\n            while (n % primeFactor == 0) {\n                largestPrimeFactor\
    \ = primeFactor;\n                n /= primeFactor;\n            }\n         \
    \   primeFactor++;\n        }\n        return largestPrimeFactor;", "        long\
    \ largestPrimeFactor = n;\n        long i = 2;\n        while (i <= largestPrimeFactor)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \            }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= n / 2) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                break;\n            }\n            factor++;\n  \
    \      }\n        return largestPrimeFactor;", "        long maxFactor = n;\n\
    \        long maxFactorPrime = 1;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactorPrime\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactorPrime;",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (i <=\
    \ largestPrimeFactor) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = 0;\n        long i = 2;\n        while (i <=\
    \ n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (largestPrimeFactor % i == 0) {\n \
    \           largestPrimeFactor = largestPrimeFactor / i;\n            i++;\n \
    \       }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = n;\n        long currentPrime = 2;\n        while (currentPrime < largestPrimeFactor)\
    \ {\n            while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n                n /= currentPrime;\n            }\n       \
    \     currentPrime++;\n        }\n        return largestPrimeFactor;", "     \
    \   long maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n / 2) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n                break;\n            }\n            currentFactor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long maxFactorPrime = 1;\n        long factor = 2;\n        while\
    \ (factor <= maxFactor) {\n            if (n % factor == 0) {\n              \
    \  maxFactorPrime = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactorPrime;", "        long largestPrimeFactor = n;\n    \
    \    long largestPrimeFactorFactor = 1;\n        long largestPrimeFactorFactorFactor\
    \ = 2;\n        long largestPrimeFactorFactorFactorFactor = 3;\n        long largestPrimeFactorFactorFactorFactorFactor\
    \ = 4;\n        long largestPrimeFactorFactorFactorFactorFactorFactor = 5;\n \
    \       long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 6;\n   \
    \     long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 7;\n     \
    \   long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 8;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 9;\n   \
    \     long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 10;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 11;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 12;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 13;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 14;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 15;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 16;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 17;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 18;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 19;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 20;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 21;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 22;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 23;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 24;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 25;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 26;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 27;\n        long largestPrimeFactorFactorFactorFactorFactor", "        long\
    \ largestPrimeFactor = n;\n        long i = 2;\n        while (i <= largestPrimeFactor)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \            }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long primeFactor = 2;\n        while\
    \ (primeFactor <= largestPrimeFactor) {\n            if (n % primeFactor == 0)\
    \ {\n                largestPrimeFactor = primeFactor;\n            }\n      \
    \      primeFactor++;\n        }\n        return largestPrimeFactor;", "     \
    \   long largestPrimeFactor = n;\n        long primeFactor = 1;\n        while\
    \ (primeFactor < n) {\n            while (n % primeFactor == 0) {\n          \
    \      largestPrimeFactor = primeFactor;\n                n /= primeFactor;\n\
    \            }\n            primeFactor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 0;\n        long i = 2;\n        while (i <=\
    \ n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;", "        long largestPrimeFactor = n;\n \
    \       long currentPrime = 2;\n        while (currentPrime <= largestPrimeFactor)\
    \ {\n            if (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n            }\n            currentPrime++;\n        }\n   \
    \     return largestPrimeFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long largestPrimeFactor = 0;\n\
    \        long currentPrime = 2;\n        while (currentPrime < n) {\n        \
    \    while (n % currentPrime == 0) {\n                largestPrimeFactor = currentPrime;\n\
    \                n /= currentPrime;\n            }\n            currentPrime++;\n\
    \        }\n        return largestPrimeFactor;", "        long maxFactor = n;\n\
    \        long factor = 2;\n        while (factor < maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (i <= largestPrimeFactor) {\n     \
    \       if (n % i == 0) {\n                largestPrimeFactor = i;\n         \
    \   }\n            i += 2;\n        }\n        return largestPrimeFactor;", " \
    \       long largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % i == 0) {\n            largestPrimeFactor = largestPrimeFactor / i;\n    \
    \        i++;\n        }\n        return largestPrimeFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = factor;\n       \
    \     } else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long largestPrimeFactor = 0;\n        long i = 2;\n  \
    \      while (i <= n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long i = 2;\n        while (i <= n / 2) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (i < largestPrimeFactor)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \            }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i += 2;\n        }\n\
    \        return largestPrimeFactor;", "        long largestPrimeFactor = 0;\n\
    \        long i = 2;\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                break;\n       \
    \     }\n            i++;\n        }\n        return largestPrimeFactor;", " \
    \       long largestPrimeFactor = n;\n        long primeFactor = 1;\n        while\
    \ (n > 1) {\n            while (n % primeFactor == 0) {\n                largestPrimeFactor\
    \ = primeFactor;\n                n /= primeFactor;\n            }\n         \
    \   primeFactor++;\n        }\n        return largestPrimeFactor;", "        long\
    \ largestPrimeFactor = 0;\n        long i = 2;\n        while (i <= n / i) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            break;\n            }\n            i += 1;\n        }\n        return\
    \ largestPrimeFactor;", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor <= maxFactor) {\n            while (n % factor == 0) {\n\
    \                maxFactor = factor;\n            }\n            factor++;\n \
    \       }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long factor = 2;\n        while (factor <= n) {\n            if (n %\
    \ factor == 0) {\n                largestPrimeFactor = factor;\n             \
    \   break;\n            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= largestPrimeFactor) {\n            while (n % factor == 0) {\n          \
    \      largestPrimeFactor = factor;\n            }\n            factor++;\n  \
    \      }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (largestPrimeFactor % i == 0) {\n \
    \           largestPrimeFactor = largestPrimeFactor / i;\n            i++;\n \
    \       }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = 0;\n        long currentPrimeFactor = 1;\n        while (n > 1) {\n      \
    \      while (n % currentPrimeFactor == 0) {\n                largestPrimeFactor\
    \ = currentPrimeFactor;\n                n /= currentPrimeFactor;\n          \
    \  }\n            currentPrimeFactor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = factor;\n       \
    \     }\n            factor++;\n        }\n        return maxFactor;", "     \
    \   long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= largestPrimeFactor) {\n            if (n % factor == 0) {\n             \
    \   largestPrimeFactor = factor;\n            }\n            factor++;\n     \
    \   }\n        return largestPrimeFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= n / 2) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                break;\n            }\n            factor++;\n  \
    \      }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (i <= Math.sqrt(n)) {\n           \
    \ if (n % i == 0) {\n                largestPrimeFactor = i;\n               \
    \ break;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                while (n % i == 0) {\n                    largestPrimeFactor\
    \ = i;\n                    n /= i;\n                }\n            }\n      \
    \      i++;\n        }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = 0;\n        long i = 2;\n        while (i <= n / i) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n            i++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            } else {\n\
    \                factor++;\n            }\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= largestPrimeFactor) {\n            if (n % factor == 0) {\n             \
    \   largestPrimeFactor = factor;\n            }\n            factor++;\n     \
    \   }\n        return largestPrimeFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (i <=\
    \ largestPrimeFactor) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = 0;\n        long i = 2;\n        while (i <=\
    \ n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;", "        long largestPrimeFactor = n;\n \
    \       long currentPrime = 2;\n        while (currentPrime <= largestPrimeFactor)\
    \ {\n            long currentFactor = currentPrime;\n            while (currentPrime\
    \ * currentPrime <= n) {\n                currentPrime++;\n            }\n   \
    \         if (currentPrime > largestPrimeFactor) {\n                largestPrimeFactor\
    \ = currentFactor;\n            }\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= largestPrimeFactor) {\n            while (n % factor == 0) {\n          \
    \      largestPrimeFactor = factor;\n                factor++;\n            }\n\
    \        }\n        return largestPrimeFactor;", "        long maxFactor = n;\n\
    \        long maxFactorPrime = 1;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactorPrime\
    \ = factor;\n                maxFactor = n / factor;\n            }\n        \
    \    factor++;\n        }\n        return maxFactorPrime;", "        long largestPrimeFactor\
    \ = n;\n        long currentPrimeFactor = 1;\n        while (largestPrimeFactor\
    \ % currentPrimeFactor != 0) {\n            currentPrimeFactor++;\n        }\n\
    \        while (currentPrimeFactor <= largestPrimeFactor) {\n            largestPrimeFactor\
    \ = largestPrimeFactor * currentPrimeFactor;\n            currentPrimeFactor++;\n\
    \        }\n        return largestPrimeFactor;", "        long maxFactor = n;\n\
    \        long maxFactorPrime = 1;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                long factorPrime\
    \ = 1;\n                while (factorPrime <= factor) {\n                    if\
    \ (n % factorPrime == 0) {\n                        break;\n                 \
    \   }\n                    factorPrime++;\n                }\n               \
    \ if (factorPrime > maxFactorPrime) {\n                    maxFactorPrime = factorPrime;\n\
    \                    maxFactor = factor;\n                }\n            }\n \
    \           factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = 1;\n        long factor = 2;\n        while (factor <= n / 2) {\n        \
    \    if (n % factor == 0) {\n                maxFactor = factor;\n           \
    \ }\n            factor++;\n        }\n        return maxFactor;", "        long\
    \ largestPrimeFactor = 0;\n        long i = 2;\n        while (i <= n / i) {\n\
    \            if (n % i == 0) {\n                largestPrimeFactor = i;\n    \
    \            break;\n            }\n            i++;\n        }\n        return\
    \ largestPrimeFactor;", "        long maxFactor = 0;\n        long factor = 2;\n\
    \        while (factor <= n / 2) {\n            if (n % factor == 0) {\n     \
    \           maxFactor = factor;\n            }\n            factor++;\n      \
    \  }\n        return maxFactor;", "        long largestPrimeFactor = 0;\n    \
    \    long i = 2;\n        while (i <= n / i) {\n            while (n % i == 0)\
    \ {\n                largestPrimeFactor = i;\n                n /= i;\n      \
    \      }\n            i++;\n        }\n        return largestPrimeFactor;", " \
    \       long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long maxFactorPrime = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactorPrime = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactorPrime;", "        long largestPrimeFactor\
    \ = n;\n        long largestPrimeFactorFactor = 1;\n        long largestPrimeFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactor = 1;\n        long largestPrimeFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactor = 1;\n \
    \       long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 1;\n   \
    \     long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long ", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor < maxFactor) {\n            if (n % factor == 0) {\n  \
    \              maxFactor = factor;\n            }\n            factor++;\n   \
    \     }\n        return maxFactor;", "        long largestPrimeFactor = n;\n \
    \       long factor = 2;\n        while (factor <= largestPrimeFactor) {\n   \
    \         if (n % factor == 0) {\n                largestPrimeFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long primeFactor = 1;\n        while (primeFactor <= largestPrimeFactor)\
    \ {\n            while (n % primeFactor == 0) {\n                largestPrimeFactor\
    \ = primeFactor;\n            }\n            primeFactor++;\n        }\n     \
    \   return largestPrimeFactor;", "        long largestPrimeFactor = n;\n     \
    \   long currentPrime = 2;\n        while (largestPrimeFactor % currentPrime !=\
    \ 0) {\n            currentPrime++;\n        }\n        while (currentPrime <=\
    \ n / 2) {\n            if (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = largestPrimeFactor * currentPrime;\n                n /= currentPrime;\n \
    \           }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < n) {\n            if (n % currentPrime == 0) {\n           \
    \     largestPrimeFactor = currentPrime;\n                break;\n           \
    \ }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long maxFactorPrime = 2;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            while (n % factor ==\
    \ 0) {\n                maxFactorPrime = factor;\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactorPrime;",
  "        long largestPrimeFactor = n;\n        long primeFactor = 2;\n        while\
    \ (primeFactor < n) {\n            if (n % primeFactor == 0) {\n             \
    \   largestPrimeFactor = primeFactor;\n            }\n            primeFactor++;\n\
    \        }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = 0;\n        long i = 2;\n        while (i <= n / i) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n            i++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return maxFactor;", " \
    \       long maxFactor = n;\n        long maxFactorPrime = 1;\n        long maxFactorPrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrime = 3;\n        long maxFactorPrimePrimePrimePrime\
    \ = 4;\n        long maxFactorPrimePrimePrimePrimePrime = 5;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 6;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 7;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 17;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 19;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 20;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 21;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 22;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 23;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 24;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 25;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = ", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = factor;\n        \
    \    }\n            factor++;\n        }\n        return maxFactor;", "      \
    \  long largestPrimeFactor = n;\n        long primeFactor = 1;\n        while\
    \ (primeFactor < n) {\n            while (n % primeFactor == 0) {\n          \
    \      largestPrimeFactor = primeFactor;\n                n /= primeFactor;\n\
    \            }\n            primeFactor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (i <=\
    \ largestPrimeFactor) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % i == 0) {\n            largestPrimeFactor = largestPrimeFactor / i;\n    \
    \        i++;\n        }\n        return largestPrimeFactor;", "        long maxFactor\
    \ = 1;\n        long currentFactor = 2;\n        while (currentFactor <= n) {\n\
    \            if (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long primeFactor = 2;\n        while\
    \ (primeFactor * primeFactor <= n) {\n            if (n % primeFactor == 0) {\n\
    \                largestPrimeFactor = primeFactor;\n            }\n          \
    \  primeFactor++;\n        }\n        return largestPrimeFactor;", "        long\
    \ largestPrimeFactor = n;\n        long currentPrime = 2;\n        long currentPrimeFactor\
    \ = 1;\n        while (currentPrimeFactor < largestPrimeFactor) {\n          \
    \  while (n % currentPrime == 0) {\n                largestPrimeFactor = currentPrime;\n\
    \                currentPrime++;\n            }\n            currentPrimeFactor++;\n\
    \        }\n        return largestPrimeFactor;", "        long maxFactor = 1;\n\
    \        long currentFactor = 2;\n        while (currentFactor <= n) {\n     \
    \       if (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 1;\n        for (long i = 2; i <= n / 2; i++)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \                break;\n            }\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long factor = 2;\n        while (factor < n) {\n            if (n % factor\
    \ == 0) {\n                largestPrimeFactor = factor;\n                break;\n\
    \            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = 0;\n        long i = 2;\n        while (i <=\
    \ n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;", "        long largestPrimeFactor = n;\n \
    \       long currentPrime = 2;\n        while (largestPrimeFactor % currentPrime\
    \ != 0) {\n            currentPrime++;\n        }\n        while (currentPrime\
    \ <= n / 2) {\n            if (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = largestPrimeFactor * currentPrime;\n                n /= currentPrime;\n \
    \           }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = 0;\n        long currentPrime = 2;\n        while\
    \ (n > 1) {\n            if (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n            }\n            currentPrime++;\n            n /=\
    \ currentPrime;\n        }\n        return largestPrimeFactor;", "        long\
    \ maxFactor = 0;\n        long factor = 2;\n        while (factor < n) {\n   \
    \         if (n % factor == 0) {\n                maxFactor = factor;\n      \
    \      }\n            factor++;\n        }\n        return maxFactor;", "    \
    \    long largestPrimeFactor = n;\n        long i = 2;\n        while (i <= largestPrimeFactor)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \            }\n            i++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        long\
    \ currentPrimeFactor = 2;\n        long currentPrimeFactorFactor = 2;\n      \
    \  while (currentPrimeFactor <= n) {\n            if (n % currentPrimeFactor ==\
    \ 0) {\n                largestPrimeFactor = currentPrimeFactor;\n           \
    \ }\n            currentPrimeFactor++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = 0;\n        long i = 2;\n        while (i <=\
    \ n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;", "        long largestPrimeFactor = n;\n \
    \       long largestPrimeFactorOfN = 1;\n        long currentPrimeFactorOfN =\
    \ 1;\n        long currentPrimeFactorOfN2 = 1;\n        long currentPrimeFactorOfN3\
    \ = 1;\n        long currentPrimeFactorOfN4 = 1;\n        long currentPrimeFactorOfN5\
    \ = 1;\n        long currentPrimeFactorOfN6 = 1;\n        long currentPrimeFactorOfN7\
    \ = 1;\n        long currentPrimeFactorOfN8 = 1;\n        long currentPrimeFactorOfN9\
    \ = 1;\n        long currentPrimeFactorOfN10 = 1;\n        long currentPrimeFactorOfN11\
    \ = 1;\n        long currentPrimeFactorOfN12 = 1;\n        long currentPrimeFactorOfN13\
    \ = 1;\n        long currentPrimeFactorOfN14 = 1;\n        long currentPrimeFactorOfN15\
    \ = 1;\n        long currentPrimeFactorOfN16 = 1;\n        long currentPrimeFactorOfN17\
    \ = 1;\n        long currentPrimeFactorOfN18 = 1;\n        long currentPrimeFactorOfN19\
    \ = 1;\n        long currentPrimeFactorOfN20 = 1;\n        long currentPrimeFactorOfN21\
    \ = 1;\n        long currentPrimeFactorOfN22 = 1;\n        long currentPrimeFactorOfN23\
    \ = 1;\n        long currentPrimeFactorOfN24 = 1;\n        long currentPrimeFactorOfN25\
    \ = 1;\n        long currentPrimeFactorOfN26 = 1;\n        long currentPrimeFactorOfN27\
    \ = 1;\n        long currentPrimeFactorOfN28 = 1;\n        long currentPrimeFactorOfN29\
    \ = 1;\n        long currentPrimeFactorOfN30 = 1;\n        long currentPrimeFactorOfN31\
    \ = 1;\n        long currentPrimeFactorOfN32 = 1;\n        long currentPrimeFactorOfN33\
    \ = 1;\n        long currentPrimeFactorOfN34 = 1;\n        long currentPrimeFactorOfN35\
    \ = 1;\n        long currentPrimeFactorOfN36 = 1;\n        long currentPrimeFactorOfN37\
    \ = 1;\n        long currentPrimeFactorOfN38 = 1;\n        long currentPrimeFactorOfN39\
    \ = 1;\n        long currentPrimeFactorOfN40 = 1;\n        long currentPrimeFactorOfN41\
    \ = 1;\n        long currentPrimeFactorOfN42 = 1;\n        long currentPrimeFactorOfN43\
    \ = 1;\n        long currentPrimeFactorOfN44 = 1;\n        long currentPrimeFactorOfN",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ < largestPrimeFactor) {\n            if (n % factor == 0) {\n              \
    \  largestPrimeFactor = factor;\n            }\n            factor++;\n      \
    \  }\n        return largestPrimeFactor;", "        long maxFactor = n;\n    \
    \    long maxFactorPrime = 2;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            while (n % factor == 0) {\n                maxFactorPrime\
    \ = factor;\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactorPrime;", "        long maxFactor = n;\n  \
    \      long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (i <= largestPrimeFactor) {\n     \
    \       if (n % i == 0) {\n                largestPrimeFactor = i;\n         \
    \   }\n            i += 2;\n        }\n        return largestPrimeFactor;", " \
    \       long largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % i == 0) {\n            largestPrimeFactor /= i;\n            ++i;\n      \
    \  }\n        return largestPrimeFactor;", "        long largestPrimeFactor =\
    \ 1;\n        long i = 2;\n        while (i <= n / 2) {\n            if (n % i\
    \ == 0) {\n                largestPrimeFactor = i;\n                break;\n \
    \           }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long maxFactorPrime = 1;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactorPrime = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactorPrime;", "        long largestPrimeFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= n / 2) {\n        \
    \    if (n % factor == 0) {\n                largestPrimeFactor = factor;\n  \
    \              break;\n            }\n            factor++;\n        }\n     \
    \   return largestPrimeFactor;", "        long maxFactor = 1;\n        long i\
    \ = 2;\n        while (i <= n / 2) {\n            if (n % i == 0) {\n        \
    \        maxFactor = i;\n            }\n            i += 2;\n        }\n     \
    \   return maxFactor;", "        long maxFactor = 1;\n        long factor = 2;\n\
    \        while (factor <= n / 2) {\n            if (n % factor == 0) {\n     \
    \           maxFactor = factor;\n            }\n            factor++;\n      \
    \  }\n        return maxFactor;", "        long largestPrimeFactor = n;\n    \
    \    long currentPrime = 2;\n        while (currentPrime <= largestPrimeFactor)\
    \ {\n            while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n            }\n            currentPrime++;\n        }\n   \
    \     return largestPrimeFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor < maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long factor = 2;\n        while (factor <= largestPrimeFactor) {\n  \
    \          while (n % factor == 0) {\n                largestPrimeFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ < n) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                break;\n            }\n            factor++;\n  \
    \      }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= largestPrimeFactor)\
    \ {\n            while (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n / 2) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n                break;\n            }\n            currentFactor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = factor;\n       \
    \     }\n            factor++;\n        }\n        return maxFactor;", "     \
    \   long maxFactor = n;\n        long factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 0;\n        long i = 2;\n        while (i <=\
    \ n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i += 2;\n        }\n\
    \        return largestPrimeFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor < maxFactor) {\n            while (n % factor\
    \ == 0) {\n                n /= factor;\n            }\n            if (n == 1)\
    \ {\n                break;\n            }\n            maxFactor = factor;\n\
    \            factor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (i < largestPrimeFactor) {\n      \
    \      if (n % i == 0) {\n                largestPrimeFactor = i;\n          \
    \  }\n            i += 2;\n        }\n        return largestPrimeFactor;", " \
    \       long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = n;\n        long largestPrimeFactorFactor = 1;\n        long largestPrimeFactorFactorFactor\
    \ = 2;\n        long largestPrimeFactorFactorFactorFactor = 3;\n        long largestPrimeFactorFactorFactorFactorFactor\
    \ = 4;\n        long largestPrimeFactorFactorFactorFactorFactorFactor = 5;\n \
    \       long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 6;\n   \
    \     long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 7;\n     \
    \   long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 8;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 9;\n   \
    \     long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 10;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 11;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 12;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 13;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 14;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 15;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 16;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 17;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 18;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 19;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 20;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 21;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 22;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 23;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 24;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 25;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 26;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 27;\n        long largestPrimeFactorFactorFactorFactorFactor", "        long\
    \ largestPrimeFactor = n;\n        long primeFactor = 2;\n        while (primeFactor\
    \ * primeFactor <= n) {\n            if (n % primeFactor == 0) {\n           \
    \     largestPrimeFactor = primeFactor;\n            }\n            primeFactor++;\n\
    \        }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = n;\n        long currentPrimeFactor = 1;\n        while (currentPrimeFactor\
    \ <= largestPrimeFactor) {\n            currentPrimeFactor = currentPrimeFactor\
    \ * 2;\n            if (n % currentPrimeFactor == 0) {\n                largestPrimeFactor\
    \ = currentPrimeFactor;\n            }\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long maxFactorPrime = 1;\n        long maxFactorPrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrime = 3;\n        long maxFactorPrimePrimePrimePrime\
    \ = 4;\n        long maxFactorPrimePrimePrimePrimePrime = 5;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 6;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 7;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 17;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 19;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 20;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 21;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 22;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 23;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 24;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 25;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = ", "        long maxFactor\
    \ = 1;\n        long factor = 2;\n        while (factor <= n / 2) {\n        \
    \    if (n % factor == 0) {\n                maxFactor = factor;\n           \
    \ }\n            factor++;\n        }\n        return maxFactor;", "        long\
    \ largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % i == 0) {\n            largestPrimeFactor /= i;\n            i++;\n      \
    \  }\n        return largestPrimeFactor;", "        long maxFactor = 1;\n    \
    \    long factor = 2;\n        while (factor <= n / 2) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = n;\n        long currentPrime = 2;\n        while (currentPrime < largestPrimeFactor)\
    \ {\n            while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n            }\n            currentPrime++;\n        }\n   \
    \     return largestPrimeFactor;", "        long maxFactor = 1;\n        long\
    \ factor = 2;\n        while (factor <= n / 2) {\n            if (n % factor ==\
    \ 0) {\n                maxFactor = factor;\n                break;\n        \
    \    }\n            factor++;\n        }\n        return maxFactor;", "      \
    \  long maxFactor = n;\n        long factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ < n) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                break;\n            }\n            factor++;\n  \
    \      }\n        return largestPrimeFactor;", "        long maxFactor = n;\n\
    \        long factor = 2;\n        while (factor <= maxFactor) {\n           \
    \ if (n % factor == 0) {\n                maxFactor = factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 0;\n        long i = 2;\n        while (i <=\
    \ n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;", "        long largestPrimeFactor = n;\n \
    \       long i = 2;\n        while (largestPrimeFactor % i == 0) {\n         \
    \   largestPrimeFactor = largestPrimeFactor / i;\n            i++;\n        }\n\
    \        return largestPrimeFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor < maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (i <= n / 2) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = n;\n        long currentPrimeFactor = 2;\n        long currentPrimeFactorIsPrime\
    \ = 1;\n        long currentPrimeFactorIsNotPrime = 1;\n        long currentPrimeFactorIsNotPrime2\
    \ = 1;\n        long currentPrimeFactorIsNotPrime3 = 1;\n        long currentPrimeFactorIsNotPrime4\
    \ = 1;\n        long currentPrimeFactorIsNotPrime5 = 1;\n        long currentPrimeFactorIsNotPrime6\
    \ = 1;\n        long currentPrimeFactorIsNotPrime7 = 1;\n        long currentPrimeFactorIsNotPrime8\
    \ = 1;\n        long currentPrimeFactorIsNotPrime9 = 1;\n        long currentPrimeFactorIsNotPrime10\
    \ = 1;\n        long currentPrimeFactorIsNotPrime11 = 1;\n        long currentPrimeFactorIsNotPrime12\
    \ = 1;\n        long currentPrimeFactorIsNotPrime13 = 1;\n        long currentPrimeFactorIsNotPrime14\
    \ = 1;\n        long currentPrimeFactorIsNotPrime15 = 1;\n        long currentPrimeFactorIsNotPrime16\
    \ = 1;\n        long currentPrimeFactorIsNotPrime17 = 1;\n        long currentPrimeFactorIsNotPrime18\
    \ = 1;\n        long currentPrimeFactorIsNotPrime19 = 1;\n        long currentPrimeFactorIsNotPrime20\
    \ = 1;\n        long currentPrimeFactorIsNotPrime21 = 1;\n        long currentPrimeFactorIsNotPrime22\
    \ = 1;\n        long currentPrimeFactorIsNotPrime23 = 1;\n        long currentPrimeFactorIsNotPrime24\
    \ = 1;\n        long currentPrimeFactorIsNotPrime25 = 1;\n        long currentPrimeFactorIsNotPrime26\
    \ = 1;\n        long currentPrimeFactorIsNotPrime27 = 1;\n        long currentPrimeFactorIsNotPrime28\
    \ = 1;\n        long currentPrimeFactorIsNotPrime29 = 1;\n        long currentPrimeFactorIsNotPrime30\
    \ = 1;\n        long currentPrimeFactorIsNotPrime31 = 1;\n        long currentPrimeFactorIsNotPrime32\
    \ = 1;\n        long currentPrimeFactorIsNotPrime33 = 1;\n        long currentPrimeFactorIsNotPrime34\
    \ = 1;\n        long currentPrimeFactorIsNotPrime35 = 1;\n        long currentPrimeFactorIsNotPrime36\
    \ = 1;\n        long currentPrimeFactorIsNotPrime37 = 1;\n        long currentPri",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long currentFactor = 2;\n        while (currentFactor <= n / 2) {\n        \
    \    if (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i += 1;\n        }\n\
    \        return largestPrimeFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long maxFactorPrime = 1;\n        long maxFactorPrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrime = 3;\n        long maxFactorPrimePrimePrimePrime\
    \ = 4;\n        long maxFactorPrimePrimePrimePrimePrime = 5;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 6;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 7;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 17;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 19;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 20;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 21;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 22;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 23;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 24;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 25;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = ", "        long largestPrimeFactor\
    \ = 0;\n        long currentPrime = 1;\n        long currentPrimeFactor = 1;\n\
    \        long currentPrimeFactorFactor = 1;\n        long currentPrimeFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactor = 1;\n        long currentPrimeFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactor = 1;\n \
    \       long currentPrimeFactorFactorFactorFactorFactorFactorFactor = 1;\n   \
    \     long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n\
    \        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactor", "        long largestPrimeFactor = n;\n\
    \        long i = 2;\n        while (i <= largestPrimeFactor) {\n            if\
    \ (n % i == 0) {\n                largestPrimeFactor = i;\n            }\n   \
    \         i++;\n        }\n        return largestPrimeFactor;", "        long\
    \ largestPrimeFactor = n;\n        long currentPrimeFactor = 1;\n        while\
    \ (currentPrimeFactor <= largestPrimeFactor) {\n            boolean isPrime =\
    \ true;\n            for (int i = 2; i <= largestPrimeFactor; i++) {\n       \
    \         if (n % i == 0) {\n                    isPrime = false;\n          \
    \          break;\n                }\n            }\n            if (isPrime)\
    \ {\n                largestPrimeFactor = currentPrimeFactor;\n            }\n\
    \            currentPrimeFactor++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long maxFactor = n;\n        long\
    \ currentFactor = 2;\n        while (currentFactor <= maxFactor) {\n         \
    \   if (n % currentFactor == 0) {\n                largestPrimeFactor = currentFactor;\n\
    \                break;\n            }\n            currentFactor++;\n       \
    \ }\n        return largestPrimeFactor;", "        long maxFactor = n;\n     \
    \   long factor = 2;\n        while (factor <= maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = factor;\n            } else {\n\
    \                factor++;\n            }\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                n = n / i;\n            }\n            i++;\n        }\n\
    \        return largestPrimeFactor;", "        long largestPrimeFactor = n;\n\
    \        long currentPrime = 2;\n        while (currentPrime < largestPrimeFactor)\
    \ {\n            while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n                n /= currentPrime;\n            }\n       \
    \     currentPrime++;\n        }\n        return largestPrimeFactor;", "     \
    \   long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= largestPrimeFactor) {\n            while (n % factor == 0) {\n          \
    \      largestPrimeFactor = factor;\n            }\n            factor++;\n  \
    \      }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = n;\n        long factor = 2;\n        while (factor < largestPrimeFactor)\
    \ {\n            if (n % factor == 0) {\n                largestPrimeFactor =\
    \ factor;\n            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        while\
    \ (currentPrime <= n / 2) {\n            if (n % currentPrime == 0) {\n      \
    \          largestPrimeFactor = currentPrime;\n                break;\n      \
    \      }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = 0;\n        long i = 2;\n        while (i <=\
    \ n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor < maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return maxFactor;", " \
    \       long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n / 2) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n                break;\n            }\n            currentFactor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            while (n\
    \ % factor == 0) {\n                maxFactor = factor;\n            }\n     \
    \       factor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = 1;\n        for (long i = 2; i <= n / 2; i++) {\n            if (n % i ==\
    \ 0) {\n                largestPrimeFactor = i;\n                break;\n    \
    \        }\n        }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (i <= n / 2) {\n            if (n %\
    \ i == 0) {\n                largestPrimeFactor = i;\n                break;\n\
    \            }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = 0;\n        long factor = 2;\n        while (factor\
    \ <= n) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                break;\n            }\n            factor++;\n  \
    \      }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = 1;\n        long currentPrime = 2;\n        long currentPrimeFactor = 1;\n\
    \        while (n > 1) {\n            while (n % currentPrime == 0) {\n      \
    \          currentPrimeFactor++;\n            }\n            if (currentPrimeFactor\
    \ > largestPrimeFactor) {\n                largestPrimeFactor = currentPrimeFactor;\n\
    \            }\n            currentPrime++;\n            n /= currentPrime;\n\
    \        }\n        return largestPrimeFactor;", "        long maxFactor = n;\n\
    \        long factor = 2;\n        while (factor <= maxFactor) {\n           \
    \ if (n % factor == 0) {\n                maxFactor = factor;\n            }\n\
    \            factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = factor;\n       \
    \     }\n            factor++;\n        }\n        return maxFactor;", "     \
    \   long maxFactor = 1;\n        long factor = 2;\n        while (factor <= n\
    \ / 2) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \                break;\n            }\n            factor++;\n        }\n   \
    \     return maxFactor;", "        long largestPrimeFactor = n;\n        long\
    \ i = 2;\n        while (i < n) {\n            if (n % i == 0) {\n           \
    \     largestPrimeFactor = i;\n                break;\n            }\n       \
    \     i++;\n        }\n        return largestPrimeFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = factor;\n       \
    \     } else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long largestPrimeFactor = n;\n        long currentPrimeFactor\
    \ = 1;\n        long currentPrimeFactorFactor = 2;\n        while (currentPrimeFactor\
    \ <= largestPrimeFactor) {\n            while (n % currentPrimeFactor == 0) {\n\
    \                largestPrimeFactor = currentPrimeFactor;\n            }\n   \
    \         currentPrimeFactorFactor++;\n            currentPrimeFactor = currentPrimeFactorFactor\
    \ * currentPrimeFactor;\n        }\n        return largestPrimeFactor;", "   \
    \     long maxFactor = n;\n        long maxFactorPrime = 1;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactorPrime = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactorPrime;", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (largestPrimeFactor % i == 0) {\n \
    \           largestPrimeFactor = largestPrimeFactor / i;\n            i++;\n \
    \       }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (i < largestPrimeFactor) {\n      \
    \      if (n % i == 0) {\n                largestPrimeFactor = i;\n          \
    \  }\n            i += 2;\n        }\n        return largestPrimeFactor;", " \
    \       long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (i <=\
    \ largestPrimeFactor) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < n) {\n            if (n % currentPrime == 0) {\n           \
    \     largestPrimeFactor = currentPrime;\n                break;\n           \
    \ }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < largestPrimeFactor) {\n            while (n % currentPrime ==\
    \ 0) {\n                largestPrimeFactor = currentPrime;\n            }\n  \
    \          currentPrime++;\n        }\n        return largestPrimeFactor;", " \
    \       long largestPrimeFactor = n;\n        long currentPrimeFactor = 1;\n \
    \       long currentPrimeFactorFactor = 1;\n        long currentPrimeFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactor = 1;\n        long currentPrimeFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactor = 1;\n \
    \       long currentPrimeFactorFactorFactorFactorFactorFactorFactor = 1;\n   \
    \     long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 1;\n\
    \        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 1;\n        long currentPrime", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            while (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long maxFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                maxFactor = factor * factor;\n            }\n   \
    \         factor++;\n        }\n        return largestPrimeFactor;"]
stop_tokens:
- "\n    }\n"
