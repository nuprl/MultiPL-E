name: HumanEval_59_largest_prime_factor
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is\
  \ not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>>\
  \ largestPrimeFactor((2048l))\n    // (2l)\n    public static long largestPrimeFactor(long\
  \ n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        long largestPrimeFactor = n;\n        long i = 2;\n       \
    \ while (largestPrimeFactor % i == 0) {\n            largestPrimeFactor = largestPrimeFactor\
    \ / i;\n            i++;\n        }\n        return largestPrimeFactor;", "  \
    \      long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 1;\n        long i = 2;\n        while (i <=\
    \ n / 2) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;", "        long largestPrimeFactor = n;\n \
    \       long primeFactor = 2;\n        while (primeFactor * primeFactor <= n)\
    \ {\n            while (n % primeFactor == 0) {\n                largestPrimeFactor\
    \ = primeFactor;\n                n /= primeFactor;\n            }\n         \
    \   primeFactor++;\n        }\n        return largestPrimeFactor;", "        long\
    \ largestPrimeFactor = n;\n        long i = 2;\n        while (i <= largestPrimeFactor)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \            }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= n / 2) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                break;\n            }\n            factor++;\n  \
    \      }\n        return largestPrimeFactor;", "        long maxFactor = n;\n\
    \        long maxFactorPrime = 1;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                maxFactorPrime\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactorPrime;",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (i <=\
    \ largestPrimeFactor) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n            }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = 0;\n        long i = 2;\n        while (i <=\
    \ n / i) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i;\n                break;\n            }\n            i++;\n        }\n \
    \       return largestPrimeFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (largestPrimeFactor % i == 0) {\n \
    \           largestPrimeFactor = largestPrimeFactor / i;\n            i++;\n \
    \       }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = n;\n        long currentPrime = 2;\n        while (currentPrime < largestPrimeFactor)\
    \ {\n            while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n                n /= currentPrime;\n            }\n       \
    \     currentPrime++;\n        }\n        return largestPrimeFactor;", "     \
    \   long maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n / 2) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n                break;\n            }\n            currentFactor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long maxFactorPrime = 1;\n        long factor = 2;\n        while\
    \ (factor <= maxFactor) {\n            if (n % factor == 0) {\n              \
    \  maxFactorPrime = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactorPrime;", "        long largestPrimeFactor = n;\n    \
    \    long largestPrimeFactorFactor = 1;\n        long largestPrimeFactorFactorFactor\
    \ = 2;\n        long largestPrimeFactorFactorFactorFactor = 3;\n        long largestPrimeFactorFactorFactorFactorFactor\
    \ = 4;\n        long largestPrimeFactorFactorFactorFactorFactorFactor = 5;\n \
    \       long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 6;\n   \
    \     long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 7;\n     \
    \   long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 8;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 9;\n   \
    \     long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 10;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 11;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 12;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 13;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 14;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 15;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 16;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 17;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 18;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 19;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 20;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 21;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 22;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 23;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 24;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 25;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 26;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 27;\n        long largestPrimeFactorFactorFactorFactorFactor", "        long\
    \ largestPrimeFactor = n;\n        long i = 2;\n        while (i <= largestPrimeFactor)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n\
    \            }\n            i += 2;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long primeFactor = 2;\n        while\
    \ (primeFactor <= largestPrimeFactor) {\n            if (n % primeFactor == 0)\
    \ {\n                largestPrimeFactor = primeFactor;\n            }\n      \
    \      primeFactor++;\n        }\n        return largestPrimeFactor;"]
stop_tokens:
- "\n    }\n"
